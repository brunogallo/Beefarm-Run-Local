[1,["2b1R9gb7NKL5RfFmVFVQV1@6c48a","2dAdQ9/wFBTrs3Z6PBj4E4","30aXCHzCpJGo0ACMVRK2nn@6c48a","0bnR0QdzFHxLfdH33/gJVS","30aXCHzCpJGo0ACMVRK2nn@f9941","b4Lp7o2j9AVpse0+Ys1JQJ"],["node","outerOutlineNoiseTexture","_effectAsset","_textureSource","root","NumText","sprIcon","data","_customMaterial","_spriteFrame","_font"],[["cc.Node",["_name","_layer","_parent","_components","_prefab","_lpos"],1,1,12,4,5],"cc.SpriteFrame",["cc.Material",["_states","_defines","_props"],1,12],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Prefab",["_name"],2],["cc.Node",["_name","_layer","_children","_components","_prefab"],1,2,9,4],["cc.UITransform",["node","__prefab","_contentSize"],3,1,4,5],["cc.CompPrefabInfo",["fileId"],2],["aff8cZ64dhO04hZAReIwWXI",["node","__prefab","sprIcon","NumText"],3,1,4,1,1],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["95ca5W5nKpNWaw5mx87UzyG",["node","__prefab"],3,1,4],["cc.Label",["_string","_actualFontSize","_fontSize","_lineHeight","_isSystemFontUsed","node","__prefab"],-2,1,4]],[[7,0,2],[6,0,1,2,1],[9,0,1,2,2],[2,0,1,2,3],[3,0,1,2,4],[4,0,2],[5,0,1,2,3,4,3],[0,0,1,2,3,4,3],[0,0,1,2,3,4,5,3],[8,0,1,2,3,1],[10,0,1,1],[11,0,1,2,3,4,5,6,6]],[[[[3,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"NoiseTex_ON":true}],[[[{"outerOutlineWidth":0.03,"outerOutlineFade":0.42},"outerOutlineNoiseTexture",6,0]],11]]],0,0,[0,0],[1,2],[0,1]],[[[4,"../shader/Outer Outline",[{"hash":1270366975,"name":"../shader/Outer Outline|s-vs:vert|s-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"RATE","stageFlags":16,"binding":1,"members":[{"name":"Tiling_Offset","type":16,"count":1},{"name":"outerOutlineColor","type":16,"count":1},{"name":"HsvBright","type":13,"count":1},{"name":"HsvSaturation","type":13,"count":1},{"name":"HsvShift","type":13,"count":1},{"name":"outerOutlineWidth","type":13,"count":1},{"name":"outerOutlineFade","type":13,"count":1},{"name":"timeScale","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"outerOutlineNoiseTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["NoiseTex_ON"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"varyings":[{"name":"color","type":16,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"uv0","type":14,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec2 a_texCoord;\nlayout(location = 2) in vec4 a_color;\nlayout(location = 0) out vec4 color;\nlayout(location = 1) out vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\n  precision highp float;\n  layout(set = 0, binding = 0) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n  };\n  layout(set = 0, binding = 1) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n  #if USE_ALPHA_TEST\n    layout(set = 1, binding = 0) uniform ALPHA_TEST_DATA {\n      float alphaThreshold;\n    };\n  #endif\n  void ALPHA_TEST (in vec4 color) {\n    #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n    #endif\n  }\n  void ALPHA_TEST (in float alpha) {\n    #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n    #endif\n  }\n  layout(location = 0) in vec4 color;\n  layout(location = 1) in vec2 uv0;\n  layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;\n#if NoiseTex_ON\n      layout(set = 1, binding = 2) uniform sampler2D outerOutlineNoiseTexture;\n#endif\n  layout(set = 1, binding = 1) uniform RATE{\n    vec4 Tiling_Offset;\n    vec4 outerOutlineColor;\n    float HsvBright;\n    float HsvSaturation;\n    float HsvShift;\n    float outerOutlineWidth;\n    float outerOutlineFade;\n    float timeScale;\n  };\n  float remap(float x, float t1, float t2, float s1, float s2)\n  {\n    return (x - t1) / (t2 - t1) * (s2 - s1) + s1;\n  }\n  float remapUV(float x,float t1,float t2){\n    return remap(x,0.0,1.0,t1,t2);\n  }\n  float remapU(float x,vec4 c){\n    return remapUV(x,c.r,c.g);\n  }\n  float remapV(float x,vec4 c){\n    return remapUV(x,c.b,c.a);\n  }\n  vec4 frag () {\n    vec4 source = texture( cc_spriteTexture, uv0 );\n    vec3 resultHsv = vec3(source.rgb);\n      float cosHsv = HsvBright * HsvSaturation * cos(HsvShift * 3.14159265 / 180.0);\n      float sinHsv = HsvBright * HsvSaturation * sin(HsvShift * 3.14159265 / 180.0);\n      resultHsv.x = (0.299 * HsvBright + 0.701 * cosHsv + 0.168 * sinHsv) * source.x\n        + (0.587 * HsvBright - 0.587 * cosHsv + 0.330 * sinHsv) * source.y\n        + (0.114 * HsvBright - 0.114 * cosHsv - 0.497 * sinHsv) * source.z;\n      resultHsv.y = (0.299 * HsvBright - 0.299 * cosHsv - 0.328 * sinHsv) *source.x\n        + (0.587 * HsvBright + 0.413 * cosHsv + 0.035 * sinHsv) * source.y\n        + (0.114 * HsvBright - 0.114 * cosHsv + 0.292 * sinHsv) * source.z;\n      resultHsv.z = (0.299 * HsvBright - 0.3 * cosHsv + 1.25 * sinHsv) * source.x\n        + (0.587 * HsvBright - 0.588 * cosHsv - 1.05 * sinHsv) * source.y\n        + (0.114 * HsvBright + 0.886 * cosHsv - 0.203 * sinHsv) * source.z;\n    source.rgb = resultHsv;\n    float tScale = fract(cc_time.x*timeScale);\n    vec2 uvmask = vec2(tScale,tScale);\n    float oolf = outerOutlineFade;\n#if NoiseTex_ON\n    oolf = texture( outerOutlineNoiseTexture,uvmask).r*oolf;\n#endif\n    float outlineAlpha = ( ( 1.0 - source.a ) * min( ( oolf * 3.0 ) , 1.0 ) );\n    vec3 lineColor = mix( mix( source.rgb , outerOutlineColor.rgb , outlineAlpha) , outerOutlineColor.rgb , outlineAlpha);\n    vec2 uvoffset = uv0;\n    vec2 imageSize = (vec2(Tiling_Offset.z , Tiling_Offset.w));\n    vec2 uvScale = ( 100.0 / imageSize );\n    float su = remapU(0.0,color);\n    float eu = remapU(1.0,color);\n    float ev = remapV(1.0,color);\n    float sv = remapV(0.0,color);\n    float hu = remapU(0.705,color);\n    float hv = remapV(0.705,color);\n    float outalpha = mix( source.a , min( ( max( max( max( max( max( max( max( texture( cc_spriteTexture, ( uvoffset + ( ( outerOutlineWidth * vec2(su,-ev ) ) * uvScale ) ) ).a , texture( cc_spriteTexture, ( uvoffset + ( ( outerOutlineWidth * vec2( su,ev ) ) * uvScale ) ) ).a ) , texture( cc_spriteTexture, ( uvoffset + ( ( outerOutlineWidth * vec2( -eu,sv ) ) * uvScale ) ) ).a ) , texture( cc_spriteTexture, ( uvoffset + ( ( outerOutlineWidth * vec2( eu,sv ) ) * uvScale ) ) ).a ) , texture( cc_spriteTexture, ( uvoffset + ( ( outerOutlineWidth * vec2( hu,hv ) ) * uvScale ) ) ).a ) , texture( cc_spriteTexture, ( uvoffset + ( ( outerOutlineWidth * vec2( -hu,hv ) ) * uvScale ) ) ).a ) , texture( cc_spriteTexture, ( uvoffset + ( ( outerOutlineWidth * vec2( hu,-hv ) ) * uvScale ) ) ).a ) , texture( cc_spriteTexture, ( uvoffset + ( ( outerOutlineWidth * vec2( -hu,-hv ) ) * uvScale ) ) ).a ) * 3.0 ) , 1.0 ) , oolf);\n    vec4 c = vec4(lineColor , outalpha);\n    c.rgb *= c.a;\n    ALPHA_TEST(c);\n    return c;\n  }\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\n  precision highp float;\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n  #if USE_ALPHA_TEST\n    layout(std140) uniform ALPHA_TEST_DATA {\n      float alphaThreshold;\n    };\n  #endif\n  void ALPHA_TEST (in vec4 color) {\n    #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n    #endif\n  }\n  void ALPHA_TEST (in float alpha) {\n    #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n    #endif\n  }\n  in vec4 color;\n  in vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#if NoiseTex_ON\n      uniform sampler2D outerOutlineNoiseTexture;\n#endif\n  layout(std140) uniform RATE{\n    vec4 Tiling_Offset;\n    vec4 outerOutlineColor;\n    float HsvBright;\n    float HsvSaturation;\n    float HsvShift;\n    float outerOutlineWidth;\n    float outerOutlineFade;\n    float timeScale;\n  };\n  float remap(float x, float t1, float t2, float s1, float s2)\n  {\n    return (x - t1) / (t2 - t1) * (s2 - s1) + s1;\n  }\n  float remapUV(float x,float t1,float t2){\n    return remap(x,0.0,1.0,t1,t2);\n  }\n  float remapU(float x,vec4 c){\n    return remapUV(x,c.r,c.g);\n  }\n  float remapV(float x,vec4 c){\n    return remapUV(x,c.b,c.a);\n  }\n  vec4 frag () {\n    vec4 source = texture( cc_spriteTexture, uv0 );\n    vec3 resultHsv = vec3(source.rgb);\n      float cosHsv = HsvBright * HsvSaturation * cos(HsvShift * 3.14159265 / 180.0);\n      float sinHsv = HsvBright * HsvSaturation * sin(HsvShift * 3.14159265 / 180.0);\n      resultHsv.x = (0.299 * HsvBright + 0.701 * cosHsv + 0.168 * sinHsv) * source.x\n        + (0.587 * HsvBright - 0.587 * cosHsv + 0.330 * sinHsv) * source.y\n        + (0.114 * HsvBright - 0.114 * cosHsv - 0.497 * sinHsv) * source.z;\n      resultHsv.y = (0.299 * HsvBright - 0.299 * cosHsv - 0.328 * sinHsv) *source.x\n        + (0.587 * HsvBright + 0.413 * cosHsv + 0.035 * sinHsv) * source.y\n        + (0.114 * HsvBright - 0.114 * cosHsv + 0.292 * sinHsv) * source.z;\n      resultHsv.z = (0.299 * HsvBright - 0.3 * cosHsv + 1.25 * sinHsv) * source.x\n        + (0.587 * HsvBright - 0.588 * cosHsv - 1.05 * sinHsv) * source.y\n        + (0.114 * HsvBright + 0.886 * cosHsv - 0.203 * sinHsv) * source.z;\n    source.rgb = resultHsv;\n    float tScale = fract(cc_time.x*timeScale);\n    vec2 uvmask = vec2(tScale,tScale);\n    float oolf = outerOutlineFade;\n#if NoiseTex_ON\n    oolf = texture( outerOutlineNoiseTexture,uvmask).r*oolf;\n#endif\n    float outlineAlpha = ( ( 1.0 - source.a ) * min( ( oolf * 3.0 ) , 1.0 ) );\n    vec3 lineColor = mix( mix( source.rgb , outerOutlineColor.rgb , outlineAlpha) , outerOutlineColor.rgb , outlineAlpha);\n    vec2 uvoffset = uv0;\n    vec2 imageSize = (vec2(Tiling_Offset.z , Tiling_Offset.w));\n    vec2 uvScale = ( 100.0 / imageSize );\n    float su = remapU(0.0,color);\n    float eu = remapU(1.0,color);\n    float ev = remapV(1.0,color);\n    float sv = remapV(0.0,color);\n    float hu = remapU(0.705,color);\n    float hv = remapV(0.705,color);\n    float outalpha = mix( source.a , min( ( max( max( max( max( max( max( max( texture( cc_spriteTexture, ( uvoffset + ( ( outerOutlineWidth * vec2(su,-ev ) ) * uvScale ) ) ).a , texture( cc_spriteTexture, ( uvoffset + ( ( outerOutlineWidth * vec2( su,ev ) ) * uvScale ) ) ).a ) , texture( cc_spriteTexture, ( uvoffset + ( ( outerOutlineWidth * vec2( -eu,sv ) ) * uvScale ) ) ).a ) , texture( cc_spriteTexture, ( uvoffset + ( ( outerOutlineWidth * vec2( eu,sv ) ) * uvScale ) ) ).a ) , texture( cc_spriteTexture, ( uvoffset + ( ( outerOutlineWidth * vec2( hu,hv ) ) * uvScale ) ) ).a ) , texture( cc_spriteTexture, ( uvoffset + ( ( outerOutlineWidth * vec2( -hu,hv ) ) * uvScale ) ) ).a ) , texture( cc_spriteTexture, ( uvoffset + ( ( outerOutlineWidth * vec2( hu,-hv ) ) * uvScale ) ) ).a ) , texture( cc_spriteTexture, ( uvoffset + ( ( outerOutlineWidth * vec2( -hu,-hv ) ) * uvScale ) ) ).a ) * 3.0 ) , 1.0 ) , oolf);\n    vec4 c = vec4(lineColor , outalpha);\n    c.rgb *= c.a;\n    ALPHA_TEST(c);\n    return c;\n  }\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\n  precision highp float;\n  uniform highp vec4 cc_time;\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n  #if USE_ALPHA_TEST\n          uniform float alphaThreshold;\n  #endif\n  void ALPHA_TEST (in vec4 color) {\n    #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n    #endif\n  }\n  void ALPHA_TEST (in float alpha) {\n    #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n    #endif\n  }\n  varying vec4 color;\n  varying vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#if NoiseTex_ON\n      uniform sampler2D outerOutlineNoiseTexture;\n#endif\n       uniform vec4 Tiling_Offset;\n     uniform vec4 outerOutlineColor;\n     uniform float HsvBright;\n     uniform float HsvSaturation;\n     uniform float HsvShift;\n     uniform float outerOutlineWidth;\n     uniform float outerOutlineFade;\n     uniform float timeScale;\n  float remap(float x, float t1, float t2, float s1, float s2)\n  {\n    return (x - t1) / (t2 - t1) * (s2 - s1) + s1;\n  }\n  float remapUV(float x,float t1,float t2){\n    return remap(x,0.0,1.0,t1,t2);\n  }\n  float remapU(float x,vec4 c){\n    return remapUV(x,c.r,c.g);\n  }\n  float remapV(float x,vec4 c){\n    return remapUV(x,c.b,c.a);\n  }\n  vec4 frag () {\n    vec4 source = texture2D(cc_spriteTexture, uv0 );\n    vec3 resultHsv = vec3(source.rgb);\n      float cosHsv = HsvBright * HsvSaturation * cos(HsvShift * 3.14159265 / 180.0);\n      float sinHsv = HsvBright * HsvSaturation * sin(HsvShift * 3.14159265 / 180.0);\n      resultHsv.x = (0.299 * HsvBright + 0.701 * cosHsv + 0.168 * sinHsv) * source.x\n        + (0.587 * HsvBright - 0.587 * cosHsv + 0.330 * sinHsv) * source.y\n        + (0.114 * HsvBright - 0.114 * cosHsv - 0.497 * sinHsv) * source.z;\n      resultHsv.y = (0.299 * HsvBright - 0.299 * cosHsv - 0.328 * sinHsv) *source.x\n        + (0.587 * HsvBright + 0.413 * cosHsv + 0.035 * sinHsv) * source.y\n        + (0.114 * HsvBright - 0.114 * cosHsv + 0.292 * sinHsv) * source.z;\n      resultHsv.z = (0.299 * HsvBright - 0.3 * cosHsv + 1.25 * sinHsv) * source.x\n        + (0.587 * HsvBright - 0.588 * cosHsv - 1.05 * sinHsv) * source.y\n        + (0.114 * HsvBright + 0.886 * cosHsv - 0.203 * sinHsv) * source.z;\n    source.rgb = resultHsv;\n    float tScale = fract(cc_time.x*timeScale);\n    vec2 uvmask = vec2(tScale,tScale);\n    float oolf = outerOutlineFade;\n#if NoiseTex_ON\n    oolf = texture2D(outerOutlineNoiseTexture,uvmask).r*oolf;\n#endif\n    float outlineAlpha = ( ( 1.0 - source.a ) * min( ( oolf * 3.0 ) , 1.0 ) );\n    vec3 lineColor = mix( mix( source.rgb , outerOutlineColor.rgb , outlineAlpha) , outerOutlineColor.rgb , outlineAlpha);\n    vec2 uvoffset = uv0;\n    vec2 imageSize = (vec2(Tiling_Offset.z , Tiling_Offset.w));\n    vec2 uvScale = ( 100.0 / imageSize );\n    float su = remapU(0.0,color);\n    float eu = remapU(1.0,color);\n    float ev = remapV(1.0,color);\n    float sv = remapV(0.0,color);\n    float hu = remapU(0.705,color);\n    float hv = remapV(0.705,color);\n    float outalpha = mix( source.a , min( ( max( max( max( max( max( max( max( texture2D(cc_spriteTexture, ( uvoffset + ( ( outerOutlineWidth * vec2(su,-ev ) ) * uvScale ) ) ).a , texture2D(cc_spriteTexture, ( uvoffset + ( ( outerOutlineWidth * vec2( su,ev ) ) * uvScale ) ) ).a ) , texture2D(cc_spriteTexture, ( uvoffset + ( ( outerOutlineWidth * vec2( -eu,sv ) ) * uvScale ) ) ).a ) , texture2D(cc_spriteTexture, ( uvoffset + ( ( outerOutlineWidth * vec2( eu,sv ) ) * uvScale ) ) ).a ) , texture2D(cc_spriteTexture, ( uvoffset + ( ( outerOutlineWidth * vec2( hu,hv ) ) * uvScale ) ) ).a ) , texture2D(cc_spriteTexture, ( uvoffset + ( ( outerOutlineWidth * vec2( -hu,hv ) ) * uvScale ) ) ).a ) , texture2D(cc_spriteTexture, ( uvoffset + ( ( outerOutlineWidth * vec2( hu,-hv ) ) * uvScale ) ) ).a ) , texture2D(cc_spriteTexture, ( uvoffset + ( ( outerOutlineWidth * vec2( -hu,-hv ) ) * uvScale ) ) ).a ) * 3.0 ) , 1.0 ) , oolf);\n    vec4 c = vec4(lineColor , outalpha);\n    c.rgb *= c.a;\n    ALPHA_TEST(c);\n    return c;\n  }\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":[]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":49,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":48}},"defines":[{"name":"USE_LOCAL","type":"boolean","defines":[]},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"NoiseTex_ON","type":"boolean","defines":[]}]}],[{"passes":[{"program":"../shader/Outer Outline|s-vs:vert|s-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"outerOutlineNoiseTexture":{"value":"grey","type":28},"Tiling_Offset":{"type":16,"value":[1,1,720,1280]},"outerOutlineColor":{"type":16,"value":[1,1,0,0],"editor":{"type":"color"}},"HsvBright":{"type":13,"value":[1],"editor":{"range":[0,2,[0.1]]}},"HsvSaturation":{"type":13,"value":[1],"editor":{"range":[0,2,[0.1]]}},"HsvShift":{"type":13,"value":[0],"editor":{"range":[0,360,[0.1]]}},"timeScale":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.01,"range":[0,1]}},"outerOutlineWidth":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.01,"range":[0,1]}},"outerOutlineFade":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.01,"range":[0,1]}}}}]}]]],0,0,[],[],[]],[[{"name":"dt1","rect":{"x":0,"y":0,"width":160,"height":160},"offset":{"x":0,"y":0},"originalSize":{"width":160,"height":160},"rotated":false,"capInsets":[0,0,0,0],"packable":false}],[1],0,[0],[3],[2]],[[[5,"SeedItem"],[6,"SeedItem",33554432,[-6,-7],[[1,-2,[0,"bbhdD8u7dC0olCdMpmr2yt"],[5,160,160]],[9,-5,[0,"96nf889WhJxoxdIAjsW1Rg"],-4,-3]],[2,"a1NQL40QtEZ5cxihR/ZboQ",-1,0]],[7,"icon",33554432,1,[[[1,-8,[0,"4bknux/R1AwLay4Ga4MFFo"],[5,160,160]],-9],4,1],[2,"c5nIpiSMxGQooIW3qTnfKW",1,0]],[8,"Num",33554432,1,[[[1,-10,[0,"15fMum+i9BqYzSA94fsFqH"],[5,58.64,25.2]],-11],4,1],[2,"1exXR8kXJMrZfOd2lhkUqy",1,0],[1,0,-56.435,0]],[10,2,[0,"e5lBAocQxLZadTS+S3T2SO"]],[11,"00000",20,20,20,false,3,[0,"06hfogQrBLoZwlNJYNSQaH"]]],0,[0,4,1,0,0,1,0,5,5,0,6,4,0,0,1,0,-1,2,0,-2,3,0,0,2,0,-2,4,0,0,3,0,-2,5,0,7,1,11],[4,4,5],[8,9,10],[3,4,5]]]]
