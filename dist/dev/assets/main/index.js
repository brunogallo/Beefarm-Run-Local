System.register("chunks:///_virtual/Account.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstLanguage.ts', './ConfigFile.ts', './GameAllData.ts', './GameManager.ts', './UIManager.ts', './WebSocketMgr.ts', './MainGame.ts', './NodeHelp.ts', './SetSecondaryUI.ts', './SetSecondaryUIEntity.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Label, Sprite, find, ConstLanguage, ConfigFile, GameAllData, GameManager, UIManager, WebSocketMgr, MainGame, NodeHelp, SetSecondaryUI, SetSecondaryUIEntity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Label = module.Label;
      Sprite = module.Sprite;
      find = module.find;
    }, function (module) {
      ConstLanguage = module.ConstLanguage;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      MainGame = module.MainGame;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      SetSecondaryUI = module.SetSecondaryUI;
    }, function (module) {
      SetSecondaryUIEntity = module.SetSecondaryUIEntity;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "b29e3Fl+3RCka07lkdWrVFZ", "Account", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Account = exports('Account', (_dec = ccclass('Account'), _dec2 = property({
        type: [SpriteFrame],
        displayName: "登录icon"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SetSecondaryUIEntity) {
        _inheritsLoose(Account, _SetSecondaryUIEntity);

        function Account() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SetSecondaryUIEntity.call.apply(_SetSecondaryUIEntity, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "icons", _descriptor, _assertThisInitialized(_this));

          _this.inCloseGame = false;
          return _this;
        }

        var _proto = Account.prototype;

        _proto.init = function init() {
          this.inCloseGame = false;

          _SetSecondaryUIEntity.prototype.init.call(this);

          this.setShow();
        };

        _proto.setShow = function setShow() {
          var _this2 = this;

          NodeHelp.getchildlable(this.node, "LabelTitle", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.Set_PANEL_BUTTON4);
          });
          NodeHelp.getchildlable(this.node.getChildByName("LogOn"), "Icon", Sprite, function (comp) {
            var type = GameAllData.FarmUserResponse.UserType;
            var iconIndex = 0;

            switch (type) {
              case "GooglePlus":
                {
                  iconIndex = 0;
                  break;
                }

              case "Telegram":
                {
                  iconIndex = 3;
                  break;
                }

              case "Line":
                {
                  iconIndex = 5;
                  break;
                }

              case "Twitter":
                {
                  iconIndex = 2;
                  break;
                }

              case "Facebook":
                {
                  iconIndex = 1;
                  break;
                }

              default:
                iconIndex = 4;
            }

            comp.spriteFrame = _this2.icons[iconIndex];
          });
          NodeHelp.getchildlable(this.node, "LogOn", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.Set_PANEL_ACCOUNT1);
          });
          NodeHelp.getchildlable(this.node, "AccountSwitch", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.Set_PANEL_ACCOUNT4);
          });
          NodeHelp.getchildlable(this.node, "SecurityVerification", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8005);
          });
        };

        _proto.onChickAccountSwitch = function onChickAccountSwitch() {
          console.log("切换帐号 清除连接"); // GameAllData.FarmUserResponse = null;

          GameAllData.clearnAllData();
          GameAllData.jsonData = null;
          WebSocketMgr.close();
          this.closeGame();
          find("GameMain").getComponent("GameMain").openUILogin();
        };

        _proto.closeGame = function closeGame() {
          if (this.inCloseGame) return;
          this.inCloseGame = true;
          GameManager.getInstance().closeGame(MainGame);
        };

        _proto.onClickSafetySet = function onClickSafetySet() {
          var ui = UIManager.getInstance().getUI(SetSecondaryUI);

          if (GameAllData.isBandingEmail || GameAllData.isBandingPhone) {
            if (ui) {
              ui.setPanel(5);
            }
          } else {
            if (ui) {
              ui.setPanel(4);
            }
          }
        };

        return Account;
      }(SetSecondaryUIEntity), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "icons", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ActivityArena.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumDefine.ts', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './WebSocketMgr.ts', './DateUtil.ts', './NodeHelp.ts', './Pool.ts', './TweenHelp.ts', './UIHelp.ts', './BagUIItemTip.ts', './ActivityComponent.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Node, ScrollView, instantiate, Input, Label, resources, SpriteFrame, Sprite, EnumDefine, ConfigFile, GameAllData, EventManager, MessageManager, WebSocketMgr, DateUtil, NodeHelp, PoolOnce, TweenHelper, ETweenType, UIHelp, BagUIItemTip, Activitycoopent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      ScrollView = module.ScrollView;
      instantiate = module.instantiate;
      Input = module.Input;
      Label = module.Label;
      resources = module.resources;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      DateUtil = module.DateUtil;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      TweenHelper = module.TweenHelper;
      ETweenType = module.ETweenType;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }, function (module) {
      Activitycoopent = module.Activitycoopent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "b8ff2fO9ihECpLk7D1MXf2H", "ActivityArena", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActivityArena = exports('ActivityArena', (_dec = ccclass('ActivityArena'), _dec2 = property({
        type: Prefab,
        displayName: "奖励item"
      }), _dec3 = property({
        type: Prefab,
        displayName: "名次item"
      }), _dec4 = property(Node), _dec5 = property(ScrollView), _dec(_class = (_class2 = /*#__PURE__*/function (_Activitycoopent) {
        _inheritsLoose(ActivityArena, _Activitycoopent);

        function ActivityArena() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Activitycoopent.call.apply(_Activitycoopent, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "ActivityRewardItem", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "UIArenaItem", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodTip", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "list", _descriptor4, _assertThisInitialized(_this));

          _this.activityInfo = null;
          _this.tActivitiesInfo = null;
          _this.Rewards = null;
          _this.championReward = null;
          _this.rankData = null;
          _this.championnode = null;
          _this.listcomp = [];
          _this.remainTime = 0;
          _this.endTime = 0;
          _this.Pool = new PoolOnce(30, function () {
            return instantiate(_this.ActivityRewardItem);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          _this.itemPool = new PoolOnce(30, function () {
            return instantiate(_this.UIArenaItem);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          return _this;
        }

        var _proto = ActivityArena.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          NodeHelp.getchildlable(this.node, "champion", null, function (comp, node) {
            _this2.championnode = node;
          });
        };

        _proto.start = function start() {
          //初始话显示表
          this.setlabelShow(); //时间显示

          this.setEveryDayShow();
        };

        _proto.onEnable = function onEnable() {
          var _this3 = this;

          EventManager.getInstance().add(MessageManager.Net.FarmActivityRankResponse, this, this.onFarmActivityRankResponse);
          NodeHelp.getchildlable(this.node, "ScrollView", ScrollView, function (comp, node) {
            //this.ArenaGList = new GList(comp, this.UIArenaItem, ItemH, false, Space)
            comp.node.on(ScrollView.EventType.SCROLL_BEGAN, _this3.closeTip, _this3);
            comp.node.on(Input.EventType.TOUCH_START, _this3.closeTip, _this3);
          }); //数据初始化

          this.initdata(); //冠军奖励

          this.setChampionReward(); //其他名次显示

          this.setRank(); //发送活动排名请求

          WebSocketMgr.send(MessageManager.Net.FarmActivityRankRequest, {
            ActivityId: this.activityInfo.ActivityModeId
          });
        };

        _proto.onDisable = function onDisable() {
          var _this4 = this;

          EventManager.getInstance().remove(MessageManager.Net.FarmActivityRankResponse, this, this.onFarmActivityRankResponse);
          NodeHelp.getchildlable(this.node, "ScrollView", ScrollView, function (comp, node) {
            comp.node.off(ScrollView.EventType.SCROLL_BEGAN, _this4.closeTip, _this4);
            comp.node.off(Input.EventType.TOUCH_START, _this4.closeTip, _this4);
          });
          this.closeTip();
          this.nodTip.active = false;
        };

        _proto.initdata = function initdata() {
          //数据初始话
          this.activityInfo = GameAllData.FarmActivityListResponse.Activities.find(function (v, i) {
            return v.ActivityType == EnumDefine.ActivityType.Arena;
          });
          if (this.activityInfo) this.tActivitiesInfo = ConfigFile.getTActivitiesInfoByActivitiesId(this.activityInfo.ActivityModeId);

          if (this.tActivitiesInfo && this.tActivitiesInfo.Other) {
            this.Rewards = this.tActivitiesInfo.Other.split(";");
            var index = -1;
            this.Rewards.find(function (v, i) {
              var Reward = v.split(",");

              if (Reward && Reward[0] && Reward[0] == "1") {
                index = i;
                return true;
              }
            });

            if (index != -1) {
              this.championReward = this.Rewards.splice(index, 1)[0];
            }
          }
        };

        _proto.setlabelShow = function setlabelShow() {
          //显示设置
          NodeHelp.getchildlable(this.node, "LabelTitie", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(130243);
          });
          NodeHelp.getchildlable(this.node, "LabelText_2", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(130245);
          });
          NodeHelp.getchildlable(this.node, "nodTip", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(130250);
          });
        };

        _proto.setRank = function setRank() {
          var _this5 = this;

          while (this.listcomp.length > 0) {
            this.itemPool.put(this.listcomp.shift().node);
          }

          var i = 0;

          var func = function func() {
            if (!_this5.Rewards[i]) {
              i = 0;

              _this5.unschedule(func);

              return;
            }

            var item = _this5.itemPool.get();

            _this5.list.content.addChild(item);

            var UIArenaItemComp = item.getComponent("UIArenaItem");

            _this5.listcomp.push(UIArenaItemComp);

            UIArenaItemComp.init(_this5.Rewards[i], _this5);
            i++;

            if (i > _this5.Rewards.length - 1) {
              i = 0;

              _this5.unschedule(func);
            }
          };

          this.schedule(func, 0);
        };

        _proto.setChampionReward = function setChampionReward() {
          var _this6 = this;

          if (!this.championReward) return;
          var Reward = this.championReward.split(",");
          if (Reward.length < 2) return;
          var rankNum = Reward[0];
          if (Reward[0] != Reward[1]) rankNum = Reward[0] + "~" + Reward[1];
          NodeHelp.getchildlable(this.championnode, "LabelTitie", Label, function (comp_2) {
            comp_2.string = ConfigFile.findLanguage(130246).format(rankNum);
          }); //添加奖励item

          NodeHelp.getchildlable(this.championnode, "RewardItems", null, function (comp_2, node_2) {
            while (node_2.children.length > 0) {
              _this6.Pool.put(node_2.children[0]);
            }

            for (var index = 0; index < Reward.length; index += 2) {
              if (!Reward[index] || !Reward[index + 1]) return;
              if (index == 0) continue;

              var item = _this6.Pool.get();

              node_2.addChild(item);
              var itemComp = item.getComponent("ActivityRewardItem");
              itemComp.init(Reward[index], Reward[index + 1]);
              itemComp.tag = _this6;
            }

            switch (node_2.children.length) {
              case 1:
                node_2.children[0].setPosition(0, 0, 0);
                break;

              case 2:
                node_2.children.forEach(function (v, i) {
                  v.setPosition(-67 + i * 134, 0, 0);
                });
                break;

              case 3:
                node_2.children.forEach(function (v, i) {
                  v.setPosition(-67 + i * 134, -32 + i * 84, 0);
                });
                break;

              default:
                node_2.children.forEach(function (v, i) {
                  v.setPosition(-67 + i * 134, -32 + i * 84, 0);
                });
            }
          });
        };

        _proto.clearPool = function clearPool() {
          var _this7 = this;

          NodeHelp.getchildlable(this.championnode, "RewardItems", null, function (comp_2, node_2) {
            while (node_2.children.length > 0) {
              _this7.Pool.put(node_2.children[0]);
            }
          });

          while (this.listcomp.length > 0) {
            this.itemPool.put(this.listcomp.shift().node);
          }

          this.Pool.clear();
          this.itemPool.clear();
        };

        _proto.onClose = function onClose() {
          _Activitycoopent.prototype.onClose.call(this);

          this.clearPool(); // this.ArenaGList.Dispose()

          BagUIItemTip.getInstance().tipDestroy();
        };

        _proto.onClickedAgencyRule = function onClickedAgencyRule() {
          this.closeTip();

          if (this.nodTip.active) {
            this.nodTip.active = false;
            return;
          }

          this.nodTip.active = true;
          TweenHelper["default"](this.nodTip, ETweenType.Jelly);
        };

        _proto.onFarmActivityRankResponse = function onFarmActivityRankResponse(data) {
          this.rankData = data;
          this.upRankshow();
        };

        _proto.upRankshow = function upRankshow() {
          var _this8 = this; //玩家当前排名


          NodeHelp.getchildlable(this.node, "LabelMyRanking", Label, function (comp) {
            var rankStr = ConfigFile.findLanguage(130246).format(_this8.rankData.Self.Rank);
            comp.string = ConfigFile.findLanguage(130247) + rankStr;
          }); //第一二三名排名

          var championData = this.rankData.RankInfo.find(function (v, i) {
            return v.Rank == 1;
          }); //第一名排名显示

          if (championData) {
            //头像设置
            if (championData.Role) {
              var image = "headIcon/" + championData.Role + "/spriteFrame";
              resources.load(image, SpriteFrame, function (error, res) {
                if (res) {
                  NodeHelp.getchildlable(_this8.championnode, "IconHead", Sprite, function (comp_2) {
                    comp_2.spriteFrame = res;
                  });
                }

                if (error) {
                  console.log("加载头像 ==>", error);
                }
              });
            } //名字


            if (championData.NikiName) {
              NodeHelp.getchildlable(this.championnode, "LabelName", Label, function (comp) {
                comp.string = championData.NikiName;
              });
            } //佣金


            if (championData.point) {
              NodeHelp.getchildlable(this.championnode, "LabelCommission", Label, function (comp) {
                comp.string = ConfigFile.findLanguage(7032) + ":" + championData.point[0];
              });
            }
          }

          this.listcomp.forEach(function (v) {
            v.setRankpoint();
          });
        };

        _proto.setEveryDayShow = function setEveryDayShow() {
          // 取本地时间
          var localTime = UIHelp.getTimeMask() / 1000;
          var servertime = DateUtil.getServerTimeDiff2(localTime) / 1000;
          this.endTime = this.activityInfo.EndTime;
          var endTime = this.endTime;
          this.remainTime = Math.round(endTime - servertime);
          var str = DateUtil.getDHMSNewStr(this.remainTime);
          NodeHelp.getchildlable(this.node, "time", Label, function (comp, node) {
            comp.string = str;
          });
          this.schedule(this.updateRemainTime, 1);
        };

        _proto.updateRemainTime = function updateRemainTime() {
          this.remainTime--;
          var str = DateUtil.getDHMSNewStr(this.remainTime);
          NodeHelp.getchildlable(this.node, "time", Label, function (comp, node) {
            comp.string = str;
          });

          if (this.remainTime < 1) {
            this.unschedule(this.updateRemainTime);
          }
        };

        _proto.closeTip = function closeTip() {
          BagUIItemTip.getInstance().closeTip();
        };

        return ActivityArena;
      }(Activitycoopent), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "ActivityRewardItem", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "UIArenaItem", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nodTip", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "list", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ActivityBeeHomeItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './EventManager.ts', './MessageManager.ts', './UIManager.ts', './WebSocketMgr.ts', './producer.ts', './DateUtil.ts', './NumberUtil.ts', './UIHelp.ts', './UIDescription.ts', './ActivityComponent.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, view, sys, ConfigFile, EventManager, MessageManager, UIManager, WebSocketMgr, producer, DateUtil, NumberUtil, UIHelp, UIDescription, Activitycoopent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      view = module.view;
      sys = module.sys;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      DateUtil = module.DateUtil;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      UIDescription = module.UIDescription;
    }, function (module) {
      Activitycoopent = module.Activitycoopent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;

      cclegacy._RF.push({}, "c995e7MXR5EtIKb3tASGiUd", "ActivityBeeHomeItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActivityBeeHomeItem = exports('ActivityBeeHomeItem', (_dec = ccclass('ActivityBeeHomeItem'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Label), _dec8 = property(Label), _dec9 = property(Node), _dec10 = property([Node]), _dec(_class = (_class2 = /*#__PURE__*/function (_Activitycoopent) {
        _inheritsLoose(ActivityBeeHomeItem, _Activitycoopent);

        function ActivityBeeHomeItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Activitycoopent.call.apply(_Activitycoopent, [this].concat(args)) || this;
          _this.remainTime = 0;
          _this.beeData = null;

          _initializerDefineProperty(_this, "labTime", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labDesc", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labHCName", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labTotalRebate", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labTotalRebateNum", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labADTitle", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labADContent", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Panel", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodBeeList", _descriptor9, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = ActivityBeeHomeItem.prototype;

        _proto.onLoad = function onLoad() {
          this.labHCName.string = ConfigFile.findLanguage(130201);
          this.labTotalRebate.string = ConfigFile.findLanguage(130202);
          this.labADTitle.string = ConfigFile.findLanguage(130203);
          this.nodBeeList.forEach(function (v, i) {
            v.getChildByName("labBeeName").getComponent(Label).string = ConfigFile.findLanguage(130230 + i);
            v.getChildByName("labPerformance").getComponent(Label).string = ConfigFile.findLanguage(130204);
            v.getChildByName("labRebate").getComponent(Label).string = ConfigFile.findLanguage(130205);
          });
          EventManager.getInstance().add(MessageManager.Net.FarmActivityBeeResponse, this, this.onFarmActivityBeeResponse);
        };

        _proto.onDestroy = function onDestroy() {
          this.unscheduleAllCallbacks();
          EventManager.getInstance().remove(MessageManager.Net.FarmActivityBeeResponse, this, this.onFarmActivityBeeResponse);
        };

        _proto.start = function start() {
          var localTime = UIHelp.getTimeMask() / 1000;
          var servertime = producer.getServerTimeDiff(localTime);
          this.remainTime = this.activityInfo.EndTime - servertime;
          var data = DateUtil.getDHMS(this.remainTime);
          var str = "";
          data.forEach(function (v, i) {
            if (v != 0) {
              var messageId = 107001 + i;
              str += ConfigFile.findLanguage(messageId).format(v);
            }
          });
          this.labTime.string = str;
          this.schedule(this.updateRemainTime, 1);
          WebSocketMgr.send(MessageManager.Net.FarmActivityBeeRequest);
        };

        _proto.update = function update(deltaTime) {};

        _proto.setSafe = function setSafe() {
          var visibleSize = view.getVisibleSize();
          var screenWidth = visibleSize.width;
          var screenHeight = visibleSize.height;
          var safeArea = sys.getSafeAreaRect(); // widget.top = screenHeight - safeArea.y - safeArea.height;
          // widget.bottom = safeArea.y;
          // widget.left = safeArea.x;
          // widget.right = screenWidth - safeArea.x - safeArea.width;
          //const while= this.Panel.getComponent(UITransform).width
        };

        _proto.onClickedHelp = function onClickedHelp() {
          var _this2 = this;

          if (!this.beeData) {
            return;
          }

          UIManager.getInstance().openUI(UIDescription, 13, function (ui, args) {
            var tActivitiesInfo = ConfigFile.getTActivitiesInfoByActivitiesId(_this2.activityInfo.ActivityModeId);
            ui.Text.string = ConfigFile.findLanguage(tActivitiesInfo.Info).format(_this2.beeData.L1.Total, _this2.beeData.L2.Total, _this2.beeData.L3.Total, _this2.beeData.L1.Ratio, _this2.beeData.L2.Ratio, _this2.beeData.L3.Ratio);
          });
        };

        _proto.onFarmActivityBeeResponse = function onFarmActivityBeeResponse(data) {
          if (0 != data.Code) {
            return;
          }

          this.beeData = data;
          var tActivitiesInfo = ConfigFile.getTActivitiesInfoByActivitiesId(this.activityInfo.ActivityModeId);
          this.labDesc.string = ConfigFile.findLanguage(tActivitiesInfo.InfoLab);
          this.labADContent.string = ConfigFile.findLanguage(tActivitiesInfo.InfoDetails).format(data.L1.Ratio, data.L2.Ratio, data.L3.Ratio);
          this.labTotalRebateNum.string = NumberUtil.unitConversion(data.Rebate);
          this.nodBeeList.forEach(function (v, i) {
            v.getChildByName("labBeeNum").getComponent(Label).string = NumberUtil.unitConversion(Math.floor(data["L" + (i + 1)].Total), false);
            v.getChildByName("labPerformanceNum").getComponent(Label).string = NumberUtil.unitConversion(data["L" + (i + 1)].Achievement);
            v.getChildByName("labRebateNum").getComponent(Label).string = NumberUtil.unitConversion(data["L" + (i + 1)].Rebate);
          });
        };

        _proto.updateRemainTime = function updateRemainTime() {
          this.remainTime--;
          var data = DateUtil.getDHMS(this.remainTime);
          var str = "";
          data.forEach(function (v, i) {
            if (v != 0) {
              var messageId = 107001 + i;
              str += ConfigFile.findLanguage(messageId).format(v);
            }
          });
          this.labTime.string = str;

          if (this.remainTime < 1) {
            this.unschedule(this.updateRemainTime);
          }
        };

        return ActivityBeeHomeItem;
      }(Activitycoopent), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "labTime", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "labDesc", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labHCName", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "labTotalRebate", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "labTotalRebateNum", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "labADTitle", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "labADContent", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "Panel", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "nodBeeList", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ActivityComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "f68c3UPpBxMHpFsVTzCh+z+", "ActivityComponent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Activitycoopent = exports('Activitycoopent', (_dec = ccclass('Activitycoopent'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Activitycoopent, _Component);

        function Activitycoopent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.activitysKey = -1;
          _this.activitys = null;
          _this.activityInfo = null;
          _this.activitytype = -1;
          _this.activitydata = null;
          return _this;
        }

        var _proto = Activitycoopent.prototype;

        _proto.onClose = function onClose() {
          this.node.removeFromParent();
          this.node.destroy();
        };

        return Activitycoopent;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ActivityDirectlyunder.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumDefine.ts', './ConfigFile.ts', './GameAllData.ts', './DateUtil.ts', './NodeHelp.ts', './Pool.ts', './TweenHelp.ts', './UIHelp.ts', './BagUIItemTip.ts', './ActivityComponent.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Prefab, ScrollView, Node, instantiate, Input, EnumDefine, ConfigFile, GameAllData, DateUtil, NodeHelp, PoolOnce, TweenHelper, ETweenType, UIHelp, BagUIItemTip, Activitycoopent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Prefab = module.Prefab;
      ScrollView = module.ScrollView;
      Node = module.Node;
      instantiate = module.instantiate;
      Input = module.Input;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      DateUtil = module.DateUtil;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      TweenHelper = module.TweenHelper;
      ETweenType = module.ETweenType;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }, function (module) {
      Activitycoopent = module.Activitycoopent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "52aefLyzFBDfq3oZZdZxDZD", "ActivityDirectlyunder", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActivityDirectlyunder = exports('ActivityDirectlyunder', (_dec = ccclass('ActivityDirectlyunder'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Prefab), _dec6 = property(ScrollView), _dec7 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Activitycoopent) {
        _inheritsLoose(ActivityDirectlyunder, _Activitycoopent);

        function ActivityDirectlyunder() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Activitycoopent.call.apply(_Activitycoopent, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "LabTitle", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "LabShow", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "timeLabel", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "TaskUIRewardItem", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrollView", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodTip", _descriptor6, _assertThisInitialized(_this));

          _this.remainTime = 0;
          _this.endTime = 0;
          _this.Itemcomps = null;
          _this.activitysMap = void 0;
          _this.Pool = new PoolOnce(30, function () {
            return instantiate(_this.TaskUIRewardItem);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          return _this;
        }

        var _proto = ActivityDirectlyunder.prototype;

        _proto.start = function start() {
          this.activitysMap = GameAllData.getActivityInfoByType(EnumDefine.ActivityType.Directlyunder);

          if (!this.activitysMap || this.activitysMap.length <= 0) {
            return;
          }

          this.activitysMap.sort();
          this.setLabelShow();
          this.creatItemsCell();
          this.setEveryDayShow();
        };

        _proto.onEnable = function onEnable() {
          this.scrollView.node.on(ScrollView.EventType.SCROLL_BEGAN, this.closeTip, this);
          this.scrollView.node.on(Input.EventType.TOUCH_START, this.closeTip, this);
        };

        _proto.onDisable = function onDisable() {
          this.scrollView.node.off(ScrollView.EventType.SCROLL_BEGAN, this.closeTip, this);
          this.scrollView.node.off(Input.EventType.TOUCH_START, this.closeTip, this);
          this.closeTip();
          this.nodTip.active = false;
        };

        _proto.creatItemsCell = function creatItemsCell() {
          this.clearItem();

          for (var i = 0; i < this.activitysMap.length; i++) {
            var cell = this.Pool.get();
            var itemcomp = cell.getComponent("ActivityDirectlyunderItem");

            if (itemcomp) {
              itemcomp.setData(this.activitysMap[i], this);
              this.scrollView.content.addChild(cell);

              if (!this.Itemcomps) {
                this.Itemcomps = [];
              }

              this.Itemcomps.push(itemcomp);
            }
          }
        };

        _proto.clearItem = function clearItem() {
          if (this.Itemcomps && this.Itemcomps.length >= 1) {
            while (this.Itemcomps.length >= 1) {
              var item = this.Itemcomps.pop();
              item.clearData();
              this.Pool.put(item.node);
            }
          }
        };

        _proto.onClose = function onClose() {
          _Activitycoopent.prototype.onClose.call(this);

          this.clearItem();
          BagUIItemTip.getInstance().tipDestroy();
        };

        _proto.closeTip = function closeTip() {
          BagUIItemTip.getInstance().closeTip();
        };

        _proto.setLabelShow = function setLabelShow() {
          this.LabTitle.string = ConfigFile.findLanguage(130261);
          this.LabShow.string = ConfigFile.findLanguage(130262);
          NodeHelp.getchildlable(this.node, "nodTip", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(130265);
          });
        };

        _proto.setEveryDayShow = function setEveryDayShow() {
          // 取本地时间
          var localTime = UIHelp.getTimeMask() / 1000;
          var servertime = DateUtil.getServerTimeDiff2(localTime) / 1000;
          this.endTime = this.activitysMap[this.activitysMap.length - 1].EndTime;
          var endTime = this.endTime;
          this.remainTime = Math.round(endTime - servertime);
          var str = DateUtil.getDHMSNewStr(this.remainTime);
          this.timeLabel.string = str;
          this.schedule(this.updateRemainTime, 1);
        };

        _proto.updateRemainTime = function updateRemainTime() {
          this.remainTime--;
          var str = DateUtil.getDHMSNewStr(this.remainTime);
          this.timeLabel.string = str;

          if (this.remainTime < 1) {
            this.unschedule(this.updateRemainTime);
          }
        };

        _proto.onClickedAgencyRule = function onClickedAgencyRule() {
          this.closeTip();

          if (this.nodTip.active) {
            this.nodTip.active = false;
            return;
          }

          this.nodTip.active = true;
          TweenHelper["default"](this.nodTip, ETweenType.Jelly);
        };

        return ActivityDirectlyunder;
      }(Activitycoopent), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "LabTitle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "LabShow", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "timeLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "TaskUIRewardItem", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "scrollView", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "nodTip", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ActivityDirectlyunderItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './EventManager.ts', './MessageManager.ts', './WebSocketMgr.ts', './NodeHelp.ts', './Pool.ts', './BagUIItemTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, RichText, Node, instantiate, Label, Component, ConfigFile, EventManager, MessageManager, WebSocketMgr, NodeHelp, PoolOnce, BagUIItemTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      RichText = module.RichText;
      Node = module.Node;
      instantiate = module.instantiate;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "93675xG4FtFW4ZYzBOhLwmf", "ActivityDirectlyunderItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActivityDirectlyunderItem = exports('ActivityDirectlyunderItem', (_dec = ccclass('ActivityDirectlyunderItem'), _dec2 = property(Prefab), _dec3 = property(RichText), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActivityDirectlyunderItem, _Component);

        function ActivityDirectlyunderItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.data = null;
          _this.config = null;

          _initializerDefineProperty(_this, "rewardItem", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "LabTitle", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "LabelReceived", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rewardBg", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonGet", _descriptor5, _assertThisInitialized(_this));

          _this.tag = null;
          _this.RewardPool = new PoolOnce(30, function () {
            return instantiate(_this.rewardItem);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          return _this;
        }

        var _proto = ActivityDirectlyunderItem.prototype;

        _proto.start = function start() {
          EventManager.getInstance().add(MessageManager.Custom.ActivityInfoChange, this, this.setActivityGet);
        };

        _proto.setData = function setData(data, tag) {
          this.data = data;
          this.tag = tag;

          if (!data) {
            console.log("没有运营活动数据：" + data);
            return;
          }

          this.config = ConfigFile.getTActivitiesInfoByActivitiesId(data.ActivityModeId);
          this.setRewards();
          this.setLabelShow();
        };

        _proto.setRewards = function setRewards() {
          this.clearRewardBox();

          if (this.config && this.config.RewardNum) {
            var data = this.config.RewardNum.split(";");

            if (data) {
              for (var i = 0; i < data.length; i++) {
                var rewards = data[i].split(",");
                var rewardId = rewards[0];
                var rewardNum = rewards[1];
                var cell = this.RewardPool.get();
                var itemcomp = cell.getComponent("ActivityUIRewardItem");

                if (itemcomp) {
                  itemcomp.setData(rewardId, rewardNum);
                  itemcomp.tag = this.tag;
                  this.rewardBg.addChild(cell);
                }
              }
            }
          }
        };

        _proto.clearRewardBox = function clearRewardBox() {
          var _this2 = this; // this.data = null;
          // this.config = null;


          NodeHelp.getchildlable(this.node, "rewardBg", null, function (comp, node) {
            while (node.children.length >= 1) {
              _this2.RewardPool.put(node.children[0]);
            }
          });
        };

        _proto.clearData = function clearData() {
          this.data = null;
          this.config = null;
          this.clearRewardBox();
          EventManager.getInstance().remove(MessageManager.Custom.ActivityInfoChange, this, this.setActivityGet);
        };

        _proto.setActivityGet = function setActivityGet(data) {
          if (this.data.ActivityModeId == data.ActivityModeId) {
            this.data = data;
            this.setLabelShow();
          }
        };

        _proto.setLabelShow = function setLabelShow() {
          var nowCondition = 0;
          var maxCondition = 0;

          if (this.data.Conditions && this.data.Conditions.length > 0) {
            nowCondition = this.data.Conditions[0].nowCondition;
            maxCondition = this.data.Conditions[0].MaxCondition;
          }

          var str = "<color=#FA1B1B>(%s/%s)</color>";

          if (nowCondition >= maxCondition) {
            str = "<color=#4AE036>(%s/%s)</color>";

            if (this.data.TotalGet >= this.data.TotalGetTime) {
              //已领取
              this.buttonGet.active = false;
              this.LabelReceived.active = true;
            } else {
              //可领取
              this.buttonGet.active = true;
              this.LabelReceived.active = false;
            }
          } else {
            this.buttonGet.active = false;
            this.LabelReceived.active = false;
          }

          var language = "<color=#070707>%s</color>";
          this.LabTitle.string = "<b>" + language.format(ConfigFile.findLanguage(130263).format(maxCondition)) + str.format(nowCondition, maxCondition) + "</b>"; // this.LabTitle.string = ConfigFile.findLanguage(130263).format(maxCondition) + "(" + nowCondition + "/" + maxCondition + ")";

          NodeHelp.getchildlable(this.LabelReceived, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(130273);
          });
          NodeHelp.getchildlable(this.buttonGet, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(130272);
          });
        };

        _proto.onClickedButtonGet = function onClickedButtonGet() {
          BagUIItemTip.getInstance().closeTip();
          WebSocketMgr.send(MessageManager.Net.FarmActivityGetRequest, {
            ActivityModeId: this.data.ActivityModeId
          });
        };

        return ActivityDirectlyunderItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "rewardItem", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "LabTitle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "LabelReceived", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "rewardBg", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "buttonGet", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ActivityExtension.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstValue.ts', './EnumDefine.ts', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './TipManager.ts', './CommonUtil.ts', './DateUtil.ts', './GList.ts', './NodeHelp.ts', './PlatformUtil.ts', './TweenHelp.ts', './UIHelp.ts', './BagUIItemTip.ts', './ActivityComponent.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Node, ScrollView, Input, Label, Graphics, ConstValue, EnumDefine, ConfigFile, GameAllData, EventManager, MessageManager, TipManager, CommonUtil, DateUtil, GList, NodeHelp, PlatformUtil, TweenHelper, ETweenType, UIHelp, BagUIItemTip, Activitycoopent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      ScrollView = module.ScrollView;
      Input = module.Input;
      Label = module.Label;
      Graphics = module.Graphics;
    }, function (module) {
      ConstValue = module.ConstValue;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      CommonUtil = module.CommonUtil;
    }, function (module) {
      DateUtil = module.DateUtil;
    }, function (module) {
      GList = module.GList;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PlatformUtil = module.PlatformUtil;
    }, function (module) {
      TweenHelper = module.TweenHelper;
      ETweenType = module.ETweenType;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }, function (module) {
      Activitycoopent = module.Activitycoopent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "03907Zlf9pO1K5F4E8subpX", "ActivityExtension", undefined);
      /**item高度*/


      var ItemH = 156; //间距

      var Space = 6;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActivityExtension = exports('ActivityExtension', (_dec = ccclass('UIExtension'), _dec2 = property({
        type: Prefab,
        displayName: "名次item"
      }), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Activitycoopent) {
        _inheritsLoose(ActivityExtension, _Activitycoopent);

        function ActivityExtension() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Activitycoopent.call.apply(_Activitycoopent, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "UIExtensionItem", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodTip", _descriptor2, _assertThisInitialized(_this));

          _this.Code = null;
          _this.ExtensionGList = null;
          _this.activityInfos = null;
          _this.remainTime = 0;
          _this.endTime = 0;
          return _this;
        }

        var _proto = ActivityExtension.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          NodeHelp.getchildlable(this.node, "Code", null, function (comp, node) {
            _this2.Code = node;
          });
        };

        _proto.onEnable = function onEnable() {
          var _this3 = this; //初始话显示表


          EventManager.getInstance().add(MessageManager.Custom.VipOrRankChange, this, this.onVipOrRankChange);
          NodeHelp.getchildlable(this.node, "ScrollView", ScrollView, function (comp, node) {
            _this3.ExtensionGList = new GList(comp, _this3.UIExtensionItem, ItemH, false, Space);
            comp.node.on(ScrollView.EventType.SCROLL_BEGAN, _this3.closeTip, _this3);
            comp.node.on(Input.EventType.TOUCH_START, _this3.closeTip, _this3);
          });
          NodeHelp.getchildlable(this.Code, "scrLink", ScrollView, function (comp, node) {
            comp.node.on(ScrollView.EventType.SCROLL_BEGAN, _this3.closeTip, _this3);
            comp.node.on(Input.EventType.TOUCH_START, _this3.closeTip, _this3);
          });
          this.initdata();
          this.setRank();
        };

        _proto.onDisable = function onDisable() {
          var _this4 = this;

          EventManager.getInstance().remove(MessageManager.Custom.VipOrRankChange, this, this.onVipOrRankChange);
          NodeHelp.getchildlable(this.node, "ScrollView", ScrollView, function (comp, node) {
            comp.node.off(ScrollView.EventType.SCROLL_BEGAN, _this4.closeTip, _this4);
            comp.node.off(Input.EventType.TOUCH_START, _this4.closeTip, _this4);
          });
          NodeHelp.getchildlable(this.Code, "scrLink", ScrollView, function (comp, node) {
            comp.node.off(ScrollView.EventType.SCROLL_BEGAN, _this4.closeTip, _this4);
            comp.node.off(Input.EventType.TOUCH_START, _this4.closeTip, _this4);
          });
          this.closeTip();
          this.nodTip.active = false;
        };

        _proto.start = function start() {
          this.setlabelShow();
          this.setCodeShow();
          this.setEveryDayShow();
        };

        _proto.initdata = function initdata() {
          //数据初始话
          this.activityInfos = GameAllData.getActivityInfoByType(EnumDefine.ActivityType.Extension);
        };

        _proto.setlabelShow = function setlabelShow() {
          //显示设置
          NodeHelp.getchildlable(this.node, "LabelTitie", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(130251);
          });
          NodeHelp.getchildlable(this.node, "LabelText_2", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(130255);
          });
          NodeHelp.getchildlable(this.node, "nodTip", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(130258);
          });
        };

        _proto.setCodeShow = function setCodeShow() {
          NodeHelp.getchildlable(this.Code, "btnCopy", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(7204);
          });
          var strOperatorId = "?operater_id=%s&".format(GameAllData.operatorId);
          var strInvitationCode = "invite=%s&".format(GameAllData.FarmUserResponse.InvitationCode); //这个是自己的邀请码(千万不要弄成上级的了)

          var strChannelId = "agent_id=%s&".format(GameAllData.channelId);
          var strLanguageId = "language_id=%s".format(GameAllData.languageId);
          var labLinkstr = ConstValue.OPERATOR_URL + strOperatorId + strInvitationCode + strChannelId + strLanguageId;
          NodeHelp.getchildlable(this.Code, "labLink", Label, function (comp) {
            comp.string = labLinkstr;
          });
          NodeHelp.getchildlable(this.Code, "labInvitedNum", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(7201).format(GameAllData.FarmUserResponse.InvitationCount);
          });
          NodeHelp.getchildlable(this.Code, "graQRcode", Graphics, function (comp, node) {
            CommonUtil.createQRcode(labLinkstr, comp);
          });
        };

        _proto.setRank = function setRank() {
          var _this5 = this;

          if (this.activityInfos && this.activityInfos.length > 0) {
            this.ExtensionGList.itemRenderer = function (index, item) {
              var UIExtensionItemComp = item.getComponent("UIExtensionItem");
              UIExtensionItemComp.init(_this5.activityInfos[index], _this5);
            };

            this.ExtensionGList.SetItemNum(this.activityInfos.length);
          }
        };

        _proto.setEveryDayShow = function setEveryDayShow() {
          // 取本地时间
          var localTime = UIHelp.getTimeMask() / 1000;
          var servertime = DateUtil.getServerTimeDiff2(localTime) / 1000;
          this.endTime = this.activityInfos[this.activityInfos.length - 1].EndTime;
          var endTime = this.endTime;
          this.remainTime = Math.round(endTime - servertime);
          var str = DateUtil.getDHMSNewStr(this.remainTime);
          NodeHelp.getchildlable(this.node, "time", Label, function (comp, node) {
            comp.string = str;
          });
          this.schedule(this.updateRemainTime, 1);
        };

        _proto.updateRemainTime = function updateRemainTime() {
          this.remainTime--;
          var str = DateUtil.getDHMSNewStr(this.remainTime);
          NodeHelp.getchildlable(this.node, "time", Label, function (comp, node) {
            comp.string = str;
          });

          if (this.remainTime < 1) {
            this.unschedule(this.updateRemainTime);
          }
        };

        _proto.onVipOrRankChange = function onVipOrRankChange() {
          NodeHelp.getchildlable(this.Code, "labInvitedNum", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(7201).format(GameAllData.FarmUserResponse.InvitationCount);
          });
        };

        _proto.onClickedCopy = function onClickedCopy() {
          this.closeTip();
          NodeHelp.getchildlable(this.Code, "labLink", Label, function (comp) {
            if (PlatformUtil.writeClipboardText(comp.string)) TipManager.TipFromCode(7203);
          });
        };

        _proto.onClickedAgencyRule = function onClickedAgencyRule() {
          this.closeTip();

          if (this.nodTip.active) {
            this.nodTip.active = false;
            return;
          }

          this.nodTip.active = true;
          TweenHelper["default"](this.nodTip, ETweenType.Jelly);
        };

        _proto.onClose = function onClose() {
          _Activitycoopent.prototype.onClose.call(this);

          this.ExtensionGList.Dispose();
          BagUIItemTip.getInstance().tipDestroy();
        };

        _proto.closeTip = function closeTip() {
          BagUIItemTip.getInstance().closeTip();
        };

        return ActivityExtension;
      }(Activitycoopent), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "UIExtensionItem", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "nodTip", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ActivityFirstChargeItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './MessageManager.ts', './UIManager.ts', './WebSocketMgr.ts', './NodeHelp.ts', './UIConchExchange.ts', './ActivityPropsItem.ts', './UIActivity.ts', './ActivityComponent.ts', './BagUIItemTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, Button, Prefab, instantiate, Sprite, UITransform, Vec3, ConfigFile, MessageManager, UIManager, WebSocketMgr, NodeHelp, UIConchExchange, ActivityPropsItem, UIActivity, Activitycoopent, BagUIItemTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Button = module.Button;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      UIConchExchange = module.UIConchExchange;
    }, function (module) {
      ActivityPropsItem = module.ActivityPropsItem;
    }, function (module) {
      UIActivity = module.UIActivity;
    }, function (module) {
      Activitycoopent = module.Activitycoopent;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "bc104FLA4xBeoc/SYqbFo4i", "ActivityFirstChargeItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActivityFirstChargeItem = exports('ActivityFirstChargeItem', (_dec = ccclass('ActivityFirstChargeItem'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Label), _dec7 = property(Button), _dec8 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_Activitycoopent) {
        _inheritsLoose(ActivityFirstChargeItem, _Activitycoopent);

        function ActivityFirstChargeItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Activitycoopent.call.apply(_Activitycoopent, [this].concat(args)) || this;
          _this.isCanReceive = false;

          _initializerDefineProperty(_this, "labHintTitle", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labHintDesc", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodRewardProps1", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodRewardProps2", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labDesc", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnRecharge", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pfbActivityPropsItem", _descriptor7, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = ActivityFirstChargeItem.prototype;

        _proto.onDisable = function onDisable() {
          BagUIItemTip.getInstance().closeTip();
        };

        _proto.onClose = function onClose() {
          _Activitycoopent.prototype.onClose.call(this);

          BagUIItemTip.getInstance().tipDestroy();
        };

        _proto.start = function start() {
          var _this2 = this;

          var tActivitiesInfo = ConfigFile.getTActivitiesInfoByActivitiesId(this.activityInfo.ActivityModeId);
          this.labHintTitle.string = ConfigFile.findLanguage(tActivitiesInfo.InfoLab);
          this.labDesc.string = ConfigFile.findLanguage(tActivitiesInfo.InfoDetails);
          var conditionsInfo = this.activityInfo.Conditions[0];
          var tConditionInfo = ConfigFile.getTConditionInfoByConditionId(conditionsInfo.ConditionModeId);

          if (0 == tConditionInfo.Compare) {
            if (conditionsInfo.nowCondition >= conditionsInfo.MaxCondition) {
              this.isCanReceive = true;
            } else {
              this.isCanReceive = false;
            }
          } else {
            if (conditionsInfo.nowCondition <= conditionsInfo.MaxCondition) {
              this.isCanReceive = true;
            } else {
              this.isCanReceive = false;
            }
          }

          if (this.isCanReceive) {
            NodeHelp.getchildlable(this.btnRecharge.node, "redDot", null, function (comp, node) {
              node.active = true;
            });
            this.btnRecharge.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(130101);
          } else {
            NodeHelp.getchildlable(this.btnRecharge.node, "redDot", null, function (comp, node) {
              node.active = false;
            });
            this.btnRecharge.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(130102);
          }

          var rewardList = tActivitiesInfo.RewardNum.split(";");
          rewardList.forEach(function (v, i) {
            if (v == "") return;
            var reward = v.split(",");
            var nodActivityPropsItem = instantiate(_this2.pfbActivityPropsItem);

            if (i < 3) {
              nodActivityPropsItem.parent = _this2.nodRewardProps1;
            } else {
              nodActivityPropsItem.parent = _this2.nodRewardProps2;
            }

            var srtActivityPropsItem = nodActivityPropsItem.getComponent(ActivityPropsItem);
            srtActivityPropsItem.id = Number(reward[0]);
            srtActivityPropsItem.propNum = Number(reward[1]);
            srtActivityPropsItem.labNum.string = "X" + reward[1];
            NodeHelp.getchildlable(srtActivityPropsItem.sprIcon, "spricon", Sprite, function (comp, node) {
              NodeHelp.loadIcon("propIcon/itemicon", reward[0], function (res) {
                comp.spriteFrame = res;
                var scale = NodeHelp.setScopeLimitationMax(comp.node.getComponent(UITransform), 150, 150);
                comp.node.setScale(new Vec3(scale, scale, 1));
              });
            });
          });
        };

        _proto.onClickedRecharge = function onClickedRecharge() {
          BagUIItemTip.getInstance().closeTip();
          UIManager.getInstance().closeUI(UIActivity);

          if (this.isCanReceive) {
            WebSocketMgr.send(MessageManager.Net.FarmActivityGetRequest, {
              ActivityModeId: this.activityInfo.ActivityModeId
            });
          } else {
            UIManager.getInstance().openUI(UIConchExchange, 12, function (ui, args) {
              ui.initUI(1);
            });
          }
        };

        _proto.closeTip = function closeTip() {
          BagUIItemTip.getInstance().closeTip();
        };

        return ActivityFirstChargeItem;
      }(Activitycoopent), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "labHintTitle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "labHintDesc", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nodRewardProps1", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "nodRewardProps2", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "labDesc", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "btnRecharge", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "pfbActivityPropsItem", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ActivityGeneralAgentRewawrds.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumDefine.ts', './ConfigFile.ts', './GameAllData.ts', './DateUtil.ts', './NodeHelp.ts', './Pool.ts', './TweenHelp.ts', './UIHelp.ts', './BagUIItemTip.ts', './ActivityComponent.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Prefab, ScrollView, Node, instantiate, Input, EnumDefine, ConfigFile, GameAllData, DateUtil, NodeHelp, PoolOnce, TweenHelper, ETweenType, UIHelp, BagUIItemTip, Activitycoopent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Prefab = module.Prefab;
      ScrollView = module.ScrollView;
      Node = module.Node;
      instantiate = module.instantiate;
      Input = module.Input;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      DateUtil = module.DateUtil;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      TweenHelper = module.TweenHelper;
      ETweenType = module.ETweenType;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }, function (module) {
      Activitycoopent = module.Activitycoopent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "cb2acUX9DhFbIweyP3lKoU3", "ActivityGeneralAgentRewawrds", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActivityGeneralAgentRewawrds = exports('ActivityGeneralAgentRewawrds', (_dec = ccclass('ActivityGeneralAgentRewawrds'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Prefab), _dec6 = property(ScrollView), _dec7 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Activitycoopent) {
        _inheritsLoose(ActivityGeneralAgentRewawrds, _Activitycoopent);

        function ActivityGeneralAgentRewawrds() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Activitycoopent.call.apply(_Activitycoopent, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "LabTitle", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "LabShow", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "timeLabel", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "TaskUIRewardItem", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrollView", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodTip", _descriptor6, _assertThisInitialized(_this));

          _this.Itemcomps = null;
          _this.activitysMap = void 0;
          _this.remainTime = 0;
          _this.endTime = 0;
          _this.Pool = new PoolOnce(30, function () {
            return instantiate(_this.TaskUIRewardItem);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          return _this;
        }

        var _proto = ActivityGeneralAgentRewawrds.prototype;

        _proto.start = function start() {
          this.activitysMap = GameAllData.getActivityInfoByType(EnumDefine.ActivityType.Generalrepresentative);

          if (!this.activitysMap || this.activitysMap.length <= 0) {
            return;
          }

          this.setLabelShow();
          this.creatItemsCell();
          this.setEveryDayShow();
        };

        _proto.onEnable = function onEnable() {
          this.scrollView.node.on(ScrollView.EventType.SCROLL_BEGAN, this.closeTip, this);
          this.scrollView.node.on(Input.EventType.TOUCH_START, this.closeTip, this);
        };

        _proto.onDisable = function onDisable() {
          this.scrollView.node.off(ScrollView.EventType.SCROLL_BEGAN, this.closeTip, this);
          this.scrollView.node.off(Input.EventType.TOUCH_START, this.closeTip, this);
          this.closeTip();
          this.nodTip.active = false;
        };

        _proto.creatItemsCell = function creatItemsCell() {
          this.clearItem();

          for (var i = 0; i < this.activitysMap.length; i++) {
            var cell = this.Pool.get();
            var itemcomp = cell.getComponent("ActivityItem");

            if (itemcomp) {
              itemcomp.setData(this.activitysMap[i], this);
              this.scrollView.content.addChild(cell);

              if (!this.Itemcomps) {
                this.Itemcomps = [];
              }

              this.Itemcomps.push(itemcomp);
            }
          }
        };

        _proto.clearItem = function clearItem() {
          if (this.Itemcomps && this.Itemcomps.length >= 1) {
            while (this.Itemcomps.length >= 1) {
              var item = this.Itemcomps.pop();
              item.clearData();
              this.Pool.put(item.node);
            }
          }
        };

        _proto.setLabelShow = function setLabelShow() {
          this.LabTitle.string = ConfigFile.findLanguage(130268);
          this.LabShow.string = ConfigFile.findLanguage(130269) + "   " + ConfigFile.findLanguage(130270);
          NodeHelp.getchildlable(this.node, "nodTip", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(130274);
          });
        };

        _proto.onClose = function onClose() {
          _Activitycoopent.prototype.onClose.call(this);

          this.clearItem();
          BagUIItemTip.getInstance().tipDestroy();
        };

        _proto.closeTip = function closeTip() {
          BagUIItemTip.getInstance().closeTip();
        };

        _proto.setEveryDayShow = function setEveryDayShow() {
          // 取本地时间
          var localTime = UIHelp.getTimeMask() / 1000;
          var servertime = DateUtil.getServerTimeDiff2(localTime) / 1000;
          this.endTime = this.activitysMap[this.activitysMap.length - 1].EndTime;
          var endTime = this.endTime;
          this.remainTime = Math.round(endTime - servertime);
          var str = DateUtil.getDHMSNewStr(this.remainTime);
          this.timeLabel.string = str;
          this.schedule(this.updateRemainTime, 1);
        };

        _proto.updateRemainTime = function updateRemainTime() {
          this.remainTime--;
          var str = DateUtil.getDHMSNewStr(this.remainTime);
          this.timeLabel.string = str;

          if (this.remainTime < 1) {
            this.unschedule(this.updateRemainTime);
          }
        };

        _proto.onClickedAgencyRule = function onClickedAgencyRule() {
          this.closeTip();

          if (this.nodTip.active) {
            this.nodTip.active = false;
            return;
          }

          this.nodTip.active = true;
          TweenHelper["default"](this.nodTip, ETweenType.Jelly);
        };

        return ActivityGeneralAgentRewawrds;
      }(Activitycoopent), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "LabTitle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "LabShow", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "timeLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "TaskUIRewardItem", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "scrollView", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "nodTip", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ActivityItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './EventManager.ts', './MessageManager.ts', './WebSocketMgr.ts', './NodeHelp.ts', './Pool.ts', './BagUIItemTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, RichText, Node, instantiate, Label, Component, ConfigFile, EventManager, MessageManager, WebSocketMgr, NodeHelp, PoolOnce, BagUIItemTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      RichText = module.RichText;
      Node = module.Node;
      instantiate = module.instantiate;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "44212RFfV5FPZhcjNxCva+6", "ActivityItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActivityItem = exports('ActivityItem', (_dec = ccclass('ActivityItem'), _dec2 = property(Prefab), _dec3 = property(RichText), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActivityItem, _Component);

        function ActivityItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.data = null;
          _this.config = null;

          _initializerDefineProperty(_this, "rewardItem", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "LabTitle", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "LabelReceived", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rewardBg", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonGet", _descriptor5, _assertThisInitialized(_this));

          _this.tag = null;
          _this.RewardPool = new PoolOnce(30, function () {
            return instantiate(_this.rewardItem);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          return _this;
        }

        var _proto = ActivityItem.prototype;

        _proto.start = function start() {
          EventManager.getInstance().add(MessageManager.Custom.ActivityInfoChange, this, this.setActivityGet);
        };

        _proto.setData = function setData(data, tag) {
          this.data = data;
          this.tag = tag;

          if (!data) {
            console.log("没有运营活动数据：" + data);
            return;
          }

          this.config = ConfigFile.getTActivitiesInfoByActivitiesId(data.ActivityModeId);
          this.setRewards();
          this.setLabelShow();
        };

        _proto.setRewards = function setRewards() {
          this.clearRewardBox();

          if (this.config && this.config.RewardNum) {
            var data = this.config.RewardNum.split(";");

            if (data) {
              for (var i = 0; i < data.length; i++) {
                var rewards = data[i].split(",");
                var rewardId = rewards[0];
                var rewardNum = rewards[1];
                var cell = this.RewardPool.get();
                var itemcomp = cell.getComponent("ActivityUIRewardItem");

                if (itemcomp) {
                  itemcomp.setData(rewardId, rewardNum);
                  itemcomp.tag = this.tag;
                  this.rewardBg.addChild(cell);
                }
              }
            }
          }
        };

        _proto.clearRewardBox = function clearRewardBox() {
          var _this2 = this; // this.data = null;
          // this.config = null;


          NodeHelp.getchildlable(this.node, "rewardBg", null, function (comp, node) {
            while (node.children.length >= 1) {
              _this2.RewardPool.put(node.children[0]);
            }
          });
        };

        _proto.setActivityGet = function setActivityGet(data) {
          if (this.data.ActivityModeId == data.ActivityModeId) {
            this.data = data;
            this.setLabelShow();
          }
        };

        _proto.clearData = function clearData() {
          this.data = null;
          this.config = null;
          this.clearRewardBox();
          EventManager.getInstance().remove(MessageManager.Custom.ActivityInfoChange, this, this.setActivityGet);
        };

        _proto.setLabelShow = function setLabelShow() {
          var nowCondition = 0;
          var maxCondition = 0;

          if (this.data.Conditions && this.data.Conditions.length > 0) {
            nowCondition = this.data.Conditions[0].nowCondition;
            maxCondition = this.data.Conditions[0].MaxCondition;
          }

          var str = "<color=#FA1B1B>(%s/%s)</color>";

          if (nowCondition >= maxCondition) {
            str = "<color=#4AE036>(%s/%s)</color>";

            if (this.data.TotalGet >= this.data.TotalGetTime) {
              //已领取
              this.buttonGet.active = false;
              this.LabelReceived.active = true;
            } else {
              //可领取
              this.buttonGet.active = true;
              this.LabelReceived.active = false;
            }
          } else {
            this.buttonGet.active = false;
            this.LabelReceived.active = false;
          }

          var language = "<color=#070707>%s</color>";
          this.LabTitle.string = "<b>" + language.format(ConfigFile.findLanguage(130271).format(maxCondition)) + str.format(nowCondition, maxCondition) + "</b>";
          NodeHelp.getchildlable(this.LabelReceived, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(130273);
          });
          NodeHelp.getchildlable(this.buttonGet, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(130272);
          });
        };

        _proto.onClickedButtonGet = function onClickedButtonGet() {
          BagUIItemTip.getInstance().closeTip();
          WebSocketMgr.send(MessageManager.Net.FarmActivityGetRequest, {
            ActivityModeId: this.data.ActivityModeId
          });
        };

        return ActivityItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "rewardItem", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "LabTitle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "LabelReceived", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "rewardBg", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "buttonGet", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ActivityLuckyWheel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumDefine.ts', './ConfigFile.ts', './MessageManager.ts', './TipManager.ts', './UIManager.ts', './WebSocketMgr.ts', './NodeHelp.ts', './Pool.ts', './TweenHelp.ts', './UIHelp.ts', './UIActivityLuckGet.ts', './BagUIItemTip.ts', './ActivityComponent.ts', './ActivityLuckyWheelitem.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, Prefab, Node, CCFloat, instantiate, Tween, v3, Label, Button, Sprite, tween, Animation, EnumDefine, ConfigFile, MessageManager, TipManager, UIManager, WebSocketMgr, NodeHelp, PoolOnce, TweenHelper, UIHelp, UIActivityLuckGet, BagUIItemTip, Activitycoopent, ActivityLuckyWheelitem;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      CCFloat = module.CCFloat;
      instantiate = module.instantiate;
      Tween = module.Tween;
      v3 = module.v3;
      Label = module.Label;
      Button = module.Button;
      Sprite = module.Sprite;
      tween = module.tween;
      Animation = module.Animation;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      TweenHelper = module.TweenHelper;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      UIActivityLuckGet = module.UIActivityLuckGet;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }, function (module) {
      Activitycoopent = module.Activitycoopent;
    }, function (module) {
      ActivityLuckyWheelitem = module.ActivityLuckyWheelitem;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "9864e0Rr9hHyYFsXTNzgbOV", "ActivityLuckyWheel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActivityLuckyWheel = exports('ActivityLuckyWheel', (_dec = ccclass('ActivityLuckyWheel'), _dec2 = property(Prefab), _dec3 = property(Node), _dec4 = property(CCFloat), _dec5 = property(CCFloat), _dec(_class = (_class2 = /*#__PURE__*/function (_Activitycoopent) {
        _inheritsLoose(ActivityLuckyWheel, _Activitycoopent);

        function ActivityLuckyWheel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Activitycoopent.call.apply(_Activitycoopent, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "item", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeTurnCircular", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rotationTime", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rotationSpeed", _descriptor4, _assertThisInitialized(_this));

          _this.GoGetdata = null;
          _this.onGoGeting = false;
          _this.isGO = false;
          _this.skip = false;
          _this.allraffle = false;
          _this.startTime = 0;
          _this.Pool = new PoolOnce(10, function () {
            return instantiate(_this.item);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          return _this;
        }

        var _proto = ActivityLuckyWheel.prototype;

        _proto.start = function start() {
          this.isGO = false;
          this.skip = false;
          this.allraffle = false;
          this.setShow();
          this.setItem();
        };

        _proto.onEnable = function onEnable() {
          if (this.onGoGeting) {
            Tween.stopAllByTarget(this.nodeTurnCircular);
            this.nodeTurnCircular.setRotationFromEuler(v3(0, 0, 0));
            this.handleGoEnd(null);
          }
        };

        _proto.onDisable = function onDisable() {
          var data = this.GoGetdata;

          if (this.onGoGeting) {
            Tween.stopAllByTarget(this.nodeTurnCircular);
            this.nodeTurnCircular.setRotationFromEuler(v3(0, 0, 0));
            this.handleGoEnd(data);
          }

          BagUIItemTip.getInstance().closeTip();
        };

        _proto.onClose = function onClose() {
          _Activitycoopent.prototype.onClose.call(this);

          BagUIItemTip.getInstance().tipDestroy();
        };

        _proto.setShow = function setShow() {
          var _this2 = this;

          var tActivitiesInfo = ConfigFile.getTActivitiesInfoByActivitiesId(this.activityInfo.ActivityModeId);
          NodeHelp.getchildlable(this.node, "LabTitle", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(tActivitiesInfo.Name);
          });
          NodeHelp.getchildlable(this.node, "RemainingTimes", null, function (comp, node) {
            NodeHelp.getchildlable(node, "labName", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(135034);
            });
            NodeHelp.getchildlable(node, "labNum", Label, function (comp) {
              comp.string = _this2.activityInfo.TotalGetTime - _this2.activityInfo.TotalGet + "";
            });
          });
          NodeHelp.getchildlable(this.node, "HaveTimes", null, function (comp, node) {
            NodeHelp.getchildlable(node, "labName", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(135040);
            });
            NodeHelp.getchildlable(node, "labNum", Label, function (comp) {
              comp.string = _this2.activityInfo.TotalGet + "";
            });
          });
          NodeHelp.getchildlable(this.node, "BtnGO", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(135033);
          });
          NodeHelp.getchildlable(this.node, "ToggleSkip", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(135036);
          });
          NodeHelp.getchildlable(this.node, "ToggleAllReffle", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(135032);
          });
          NodeHelp.getchildlable(this.node, "LabTip", Label, function (comp) {
            var Condition = _this2.activityInfo.Conditions[0];
            var stillNeed = Condition.MaxCondition - Condition.nowCondition % Condition.MaxCondition;

            if (_this2.activityInfo.MaxTime == -1) {
              comp.string = ConfigFile.findLanguage(tActivitiesInfo.InfoLab).format(stillNeed);
            } else {
              if (_this2.activityInfo.TotalGetTime >= EnumDefine.ActivityData.ActivityLuckyWheelMaxGat) {
                comp.string = ConfigFile.findLanguage(135041);
              } else {
                comp.string = ConfigFile.findLanguage(tActivitiesInfo.InfoLab).format(stillNeed, _this2.activityInfo.MaxTime);
              }

              if (_this2.activityInfo.TotalGet >= _this2.activityInfo.MaxTime) {
                NodeHelp.getchildlable(_this2.node, "RemainingTimes", null, function (comp, node) {
                  node.active = false;
                });
              } else {
                NodeHelp.getchildlable(_this2.node, "RemainingTimes", null, function (comp, node) {
                  node.active = true;
                });
              }
            }
          });
          var date = new Date(this.activityInfo.EndTime * 1000);
          var year = date.getFullYear() + "";
          var month = date.getMonth() + 1 + "";
          var day = date.getDate() + "";
          var strEnd = month + "/" + day + "/" + year;
          date = new Date(this.activityInfo.StartTime * 1000);
          year = date.getFullYear() + "";
          month = date.getMonth() + 1 + "";
          day = date.getDate() + "";
          var strStart = month + "/" + day + "/" + year;
          NodeHelp.getchildlable(this.node, "LabTime", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(135035) + strStart + "-" + strEnd;
          });
        };

        _proto.setItem = function setItem() {
          var tActivitiesInfo = ConfigFile.getTActivitiesInfoByActivitiesId(this.activityInfo.ActivityModeId);
          var items = tActivitiesInfo.RewardOdds;
          if (!items || items.length <= 0) return;
          var Datas = items.split(";");
          var i = 0;

          for (var _iterator = _createForOfIteratorHelperLoose(Datas), _step; !(_step = _iterator()).done;) {
            var data = _step.value;
            if (data == "") continue;
            var item = this.Pool.get();
            var comp = item.getComponent(ActivityLuckyWheelitem);
            comp.init(data, i, this);

            if (this.activityInfo.other && this.activityInfo.other.length >= 0) {
              for (var _iterator2 = _createForOfIteratorHelperLoose(this.activityInfo.other), _step2; !(_step2 = _iterator2()).done;) {
                var other = _step2.value;

                if (other == i) {
                  comp.setGrayscale();
                }
              }
            }

            this.nodeTurnCircular.addChild(item);
            i++;
          }
        };

        _proto.onClickBtnGO = function onClickBtnGO() {
          var _this3 = this;

          BagUIItemTip.getInstance().closeTip();
          if (this.isGO) return;
          if (!this.canGo()) return;
          this.isGO = true;
          NodeHelp.getchildlable(this.node, "BtnGO", Button, function (comp) {
            comp.interactable = !_this3.isGO;
          });

          if (this.skip) {
            var raffle = 1;
            if (this.allraffle) raffle = this.activityInfo.TotalGetTime - this.activityInfo.TotalGet;
            WebSocketMgr.send(MessageManager.Net.FarmActivityGetRequest, {
              ActivityModeId: this.activityInfo.ActivityModeId,
              Count: raffle
            });
          } else {
            var _raffle = 1;
            if (this.allraffle) _raffle = this.activityInfo.TotalGetTime - this.activityInfo.TotalGet;
            WebSocketMgr.send(MessageManager.Net.FarmActivityGetRequest, {
              ActivityModeId: this.activityInfo.ActivityModeId,
              Count: _raffle
            });
            var openTiem = 360 / this.rotationSpeed;
            TweenHelper.getTween(this.nodeTurnCircular, "TurnUP", function (_tween) {
              _tween.call(function () {
                _this3.lightOpen();

                _this3.startTime = UIHelp.getTimeMask() / 1000;
              }).to(0, {
                eulerAngles: v3(0, 0, 0)
              }).by(openTiem, {
                eulerAngles: v3(0, 0, 360)
              }, {
                easing: "sineIn"
              }).to(0, {
                eulerAngles: v3(0, 0, 0)
              }).by(openTiem, {
                eulerAngles: v3(0, 0, 360)
              }).repeat(100000);
            }).start();
          }
        };

        _proto.onGoGet = function onGoGet(data) {
          BagUIItemTip.getInstance().closeTip();
          this.onGoGeting = true;
          this.GoGetdata = data;
          console.log("onGoGet--------->%o", data);
          this.setShow();
          var itms = null;
          var itmNum = null;

          if (data.Items && data.Items.length > 0) {
            itms = data.Items[0].ItemModeId;
            itmNum = data.Items[0].ChangeCount;
          } else if (data.Currency && data.Currency.length > 0) {
            itms = data.Currency[0].CurrencyModeId;
            itmNum = data.Currency[0].ChangeCount;
          }

          var index = 11;

          if (itms) {
            var node = this.nodeTurnCircular.children.find(function (v) {
              var reward = v.getComponent(ActivityLuckyWheelitem).data.split(",");
              var comp = NodeHelp.getchildlable(v, "Icon", Sprite);
              if (itmNum) return reward[0] == itms && reward[1] == itmNum;else return reward[0] == itms && !comp.grayscale;
            });

            if (itmNum && !node) {
              node = this.nodeTurnCircular.children.find(function (v) {
                var reward = v.getComponent(ActivityLuckyWheelitem).data.split(",");
                var comp = NodeHelp.getchildlable(v, "Icon", Sprite);
                return reward[0] == itms && !comp.grayscale;
              });
            }

            if (node) {
              index = node.getComponent(ActivityLuckyWheelitem).index;
            }

            this.onGoEnd(index, data);
          }
        };

        _proto.onGoEnd = function onGoEnd(index, data) {
          var _this4 = this;

          console.log("onGoEnd--------->%o", data);
          TweenHelper.stop(this.nodeTurnCircular, "TurnUP");
          var Angles = this.nodeTurnCircular.eulerAngles.z;
          var subNum = 360 - index * 30 - Angles;
          var num = Angles + 720 + subNum;
          var openTiem = num / this.rotationSpeed;

          if (this.skip) {
            this.handleGoEnd(data);
          } else {
            tween(this.nodeTurnCircular).to(openTiem, {
              eulerAngles: v3(0, 0, num)
            }, {
              easing: "sineOut"
            }).call(function () {
              _this4.handleGoEnd(data);
            }).start();
          }
        };

        _proto.handleGoEnd = function handleGoEnd(data) {
          var _this5 = this;

          console.log("handleGoEnd--------->%o", data);

          if (this.activityInfo.other && this.activityInfo.other.length >= 0) {
            this.nodeTurnCircular.children.forEach(function (v) {
              var comp = v.getComponent(ActivityLuckyWheelitem);

              for (var _iterator3 = _createForOfIteratorHelperLoose(_this5.activityInfo.other), _step3; !(_step3 = _iterator3()).done;) {
                var other = _step3.value;

                if (other == comp.index) {
                  comp.setGrayscale();
                }
              }
            });
          }

          this.isGO = false;
          NodeHelp.getchildlable(this.node, "BtnGO", Button, function (comp) {
            comp.interactable = !_this5.isGO;
          });
          NodeHelp.getchildlable(this.node, "LabTip", Label, function (comp) {
            var tActivitiesInfo = ConfigFile.getTActivitiesInfoByActivitiesId(_this5.activityInfo.ActivityModeId);
            var Condition = _this5.activityInfo.Conditions[0];
            var stillNeed = Condition.MaxCondition - Condition.nowCondition % Condition.MaxCondition;

            if (_this5.activityInfo.MaxTime == -1) {
              comp.string = ConfigFile.findLanguage(tActivitiesInfo.InfoLab).format(stillNeed);
            } else {
              if (_this5.activityInfo.TotalGetTime >= EnumDefine.ActivityData.ActivityLuckyWheelMaxGat) {
                comp.string = ConfigFile.findLanguage(135041);
              } else {
                comp.string = ConfigFile.findLanguage(tActivitiesInfo.InfoLab).format(stillNeed, _this5.activityInfo.MaxTime);
              }

              if (_this5.activityInfo.TotalGet >= _this5.activityInfo.MaxTime) {
                NodeHelp.getchildlable(_this5.node, "RemainingTimes", null, function (comp, node) {
                  node.active = false;
                });
              } else {
                NodeHelp.getchildlable(_this5.node, "RemainingTimes", null, function (comp, node) {
                  node.active = true;
                });
              }
            }
          });
          this.lightClose();

          if (data) {
            UIManager.getInstance().openUI(UIActivityLuckGet, 20, function (ui, args) {
              ui.init(data);
            }, undefined, null);
          }

          this.onGoGeting = false;
        };

        _proto.onClickToggleSkip = function onClickToggleSkip(toggle) {
          BagUIItemTip.getInstance().closeTip();
          this.skip = toggle.isChecked;
        };

        _proto.onClickToggleAllReffle = function onClickToggleAllReffle(toggle) {
          BagUIItemTip.getInstance().closeTip();
          this.allraffle = toggle.isChecked;
        };

        _proto.lightOpen = function lightOpen() {
          NodeHelp.getchildlable(this.node, "Lights", Animation, function (comp) {
            comp.play();
          });
        };

        _proto.lightClose = function lightClose() {
          NodeHelp.getchildlable(this.node, "Lights", Animation, function (comp) {
            comp.stop();
            comp.node.children.forEach(function (v) {
              v.getChildByName("up").active = false;
            });
          });
        };

        _proto.canGo = function canGo() {
          if (this.activityInfo.TotalGetTime - this.activityInfo.TotalGet <= 0) {
            if (this.activityInfo.MaxTime == -1) TipManager.tip(ConfigFile.findLanguage(135037));else {
              if (this.activityInfo.TotalGet >= this.activityInfo.MaxTime) TipManager.tip(ConfigFile.findLanguage(135041));else TipManager.tip(ConfigFile.findLanguage(135037));
            }
            return false;
          } else {
            return true;
          }
        };

        _proto.closeTip = function closeTip() {
          BagUIItemTip.getInstance().closeTip();
        };

        return ActivityLuckyWheel;
      }(Activitycoopent), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "item", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "nodeTurnCircular", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "rotationTime", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "rotationSpeed", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 360;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ActivityLuckyWheelitem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './UIManager.ts', './producer.ts', './NodeHelp.ts', './UIActivity.ts', './BagUIItemTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Input, Button, Sprite, UITransform, Vec3, Label, v3, Color, Component, ConfigFile, Configname, UIManager, producer, NodeHelp, UIActivity, BagUIItemTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Input = module.Input;
      Button = module.Button;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      Label = module.Label;
      v3 = module.v3;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      UIActivity = module.UIActivity;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "67f71pLwQhNgoYJ360sgEVe", "ActivityLuckyWheelitem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var iconSize = 107;
      var Colors = "ACACAC";
      var ActivityLuckyWheelitem = exports('ActivityLuckyWheelitem', (_dec = ccclass('ActivityLuckyWheelitem'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActivityLuckyWheelitem, _Component);

        function ActivityLuckyWheelitem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "icon", _descriptor, _assertThisInitialized(_this));

          _this.data = null;
          _this.index = 0;
          _this.parent = null;
          return _this;
        }

        var _proto = ActivityLuckyWheelitem.prototype;

        _proto.onEnable = function onEnable() {
          this.icon.on(Input.EventType.TOUCH_START, this.oniconStartTouch.bind(this));
          this.icon.on(Input.EventType.TOUCH_END, this.oniconEndTouch.bind(this));
          this.icon.on(Input.EventType.TOUCH_CANCEL, this.oniconEndTouch.bind(this));
        };

        _proto.onDisable = function onDisable() {
          this.icon.on(Input.EventType.TOUCH_START, this.oniconStartTouch.bind(this));
          this.icon.on(Input.EventType.TOUCH_END, this.oniconEndTouch.bind(this));
          this.icon.on(Input.EventType.TOUCH_CANCEL, this.oniconEndTouch.bind(this));
        };

        _proto.oniconStartTouch = function oniconStartTouch(event) {
          if (this.parent && this.parent.isGO) {
            return;
          }

          var node = event.target;
          var config = null;
          var reward = this.data.split(",");
          config = ConfigFile.getItemData(reward[0]);

          if (config) {
            var propTimeText = null;

            if (config.Type && (config.Type == 2 || config.Type == "2")) {
              var animalConfig = ConfigFile.getInstance().config.get(Configname.TAnimalInfo);

              if (animalConfig) {
                var animalConsumeTime = 0;
                animalConfig.forEach(function (v) {
                  if (v.AnimalConsumeId == config.ItemId && (animalConsumeTime == 0 || v.AnimalConsumeTime < animalConsumeTime)) {
                    animalConsumeTime = v.AnimalConsumeTime;
                  }
                });

                if (animalConsumeTime) {
                  propTimeText = producer.getTimeFormat(animalConsumeTime * reward[1]);
                }
              }
            }

            var propName = ConfigFile.findLanguage(config.Name);
            var propText = ConfigFile.findLanguage(config.Tips);
            var activityUi = UIManager.getInstance().getUI(UIActivity);

            if (activityUi) {
              BagUIItemTip.getInstance().openTip(activityUi.TipParent || this.node, propName, propText, node.getComponent(Button), propTimeText);
            }
          }
        };

        _proto.oniconEndTouch = function oniconEndTouch() {};

        _proto.init = function init(data, index, parent) {
          this.parent = parent;
          this.index = index;
          this.data = data;
          var reward = data.split(",");
          NodeHelp.getchildlable(this.node, "Light", null, function (comp, node) {
            node.active = false;
          });
          NodeHelp.getchildlable(this.node, "Icon", Sprite, function (comp, node) {
            NodeHelp.loadIcon("propIcon/itemicon", reward[0].toString(), function (res) {
              comp.spriteFrame = res;
              var scale = NodeHelp.setScopeLimitationInSize(comp.node.getComponent(UITransform), iconSize, iconSize);
              comp.node.setScale(new Vec3(scale, scale, 1));
            });
          });
          NodeHelp.getchildlable(this.node, "LabNum", Label, function (comp, node) {
            comp.string = "X" + reward[1];
          });
          this.node.setRotationFromEuler(v3(1, 1, index * 30));
        };

        _proto.setGrayscale = function setGrayscale() {
          NodeHelp.getchildlable(this.node, "Icon", Sprite, function (comp, node) {
            comp.grayscale = true;
          });
          NodeHelp.getchildlable(this.node, "LabNum", Label, function (comp, node) {
            comp.color = new Color().fromHEX(Colors);
          });
        };

        return ActivityLuckyWheelitem;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "icon", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ActivityNobletoken.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumDefine.ts', './ConfigFile.ts', './GameAllData.ts', './Pool.ts', './BagUIItemTip.ts', './ActivityComponent.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, RichText, Node, Prefab, ScrollView, instantiate, Input, EnumDefine, ConfigFile, GameAllData, PoolOnce, BagUIItemTip, Activitycoopent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      RichText = module.RichText;
      Node = module.Node;
      Prefab = module.Prefab;
      ScrollView = module.ScrollView;
      instantiate = module.instantiate;
      Input = module.Input;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }, function (module) {
      Activitycoopent = module.Activitycoopent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "0e4f0Fmm21GYa3pxNUMxqQe", "ActivityNobletoken", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActivityNobletoken = exports('ActivityNobletoken', (_dec = ccclass('ActivityNobletoken'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(RichText), _dec6 = property(Node), _dec7 = property(Prefab), _dec8 = property(ScrollView), _dec(_class = (_class2 = /*#__PURE__*/function (_Activitycoopent) {
        _inheritsLoose(ActivityNobletoken, _Activitycoopent);

        function ActivityNobletoken() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Activitycoopent.call.apply(_Activitycoopent, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "LabTitle", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "LabShow", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "LabMai", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "richTextLabel", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonMai", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "TaskUIRewardItem", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrollView", _descriptor7, _assertThisInitialized(_this));

          _this.Itemcomps = null;
          _this.activitysMap = void 0;
          _this.Pool = new PoolOnce(30, function () {
            return instantiate(_this.TaskUIRewardItem);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          return _this;
        }

        var _proto = ActivityNobletoken.prototype;

        _proto.start = function start() {
          this.activitysMap = GameAllData.getActivityInfoByType(EnumDefine.ActivityType.Nobletoken);

          if (!this.activitysMap || this.activitysMap.length <= 0) {
            return;
          }

          this.activitysMap.sort();
          this.setLabelShow();
          this.creatItemsCell(); // this.setEveryDayShow();
        };

        _proto.onEnable = function onEnable() {
          this.scrollView.node.on(ScrollView.EventType.SCROLL_BEGAN, this.closeTip, this);
          this.scrollView.node.on(Input.EventType.TOUCH_START, this.closeTip, this);
        };

        _proto.onDisable = function onDisable() {
          this.scrollView.node.off(ScrollView.EventType.SCROLL_BEGAN, this.closeTip, this);
          this.scrollView.node.off(Input.EventType.TOUCH_START, this.closeTip, this);
          this.closeTip(); // this.nodTip.active = false
        };

        _proto.creatItemsCell = function creatItemsCell() {
          this.clearItem();

          for (var i = 0; i < this.activitysMap.length; i++) {
            var cell = this.Pool.get();
            var itemcomp = cell.getComponent("ActivityDirectlyunderItem");

            if (itemcomp) {
              itemcomp.setData(this.activitysMap[i], this);
              this.scrollView.content.addChild(cell);

              if (!this.Itemcomps) {
                this.Itemcomps = [];
              }

              this.Itemcomps.push(itemcomp);
            }
          }
        };

        _proto.clearItem = function clearItem() {
          if (this.Itemcomps && this.Itemcomps.length >= 1) {
            while (this.Itemcomps.length >= 1) {
              var item = this.Itemcomps.pop();
              item.clearData();
              this.Pool.put(item.node);
            }
          }
        };

        _proto.onClose = function onClose() {
          _Activitycoopent.prototype.onClose.call(this);

          this.clearItem();
          BagUIItemTip.getInstance().tipDestroy();
        };

        _proto.closeTip = function closeTip() {
          BagUIItemTip.getInstance().closeTip();
        };

        _proto.setLabelShow = function setLabelShow() {
          this.LabTitle.string = ConfigFile.findLanguage(130261);
          this.LabShow.string = ConfigFile.findLanguage(130262); // NodeHelp.getchildlable(this.node, "nodTip", Label, (comp) => {
          //     comp.string = ConfigFile.findLanguage(130265);
          // })
        };

        return ActivityNobletoken;
      }(Activitycoopent), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "LabTitle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "LabShow", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "LabMai", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "richTextLabel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "buttonMai", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "TaskUIRewardItem", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "scrollView", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ActivityNobletokenItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './EventManager.ts', './MessageManager.ts', './WebSocketMgr.ts', './NodeHelp.ts', './Pool.ts', './BagUIItemTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, RichText, Node, instantiate, Component, ConfigFile, EventManager, MessageManager, WebSocketMgr, NodeHelp, PoolOnce, BagUIItemTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      RichText = module.RichText;
      Node = module.Node;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "d70b17bYKBHu7wB+EJg3ZY5", "ActivityNobletokenItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActivityNobletokenItem = exports('ActivityNobletokenItem', (_dec = ccclass('ActivityNobletokenItem'), _dec2 = property(Prefab), _dec3 = property(RichText), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActivityNobletokenItem, _Component);

        function ActivityNobletokenItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.data = null;
          _this.config = null;

          _initializerDefineProperty(_this, "rewardItem", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "LabTitle", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "LabelReceived", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rewardBg", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonGet", _descriptor5, _assertThisInitialized(_this));

          _this.tag = null;
          _this.RewardPool = new PoolOnce(30, function () {
            return instantiate(_this.rewardItem);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          return _this;
        }

        var _proto = ActivityNobletokenItem.prototype;

        _proto.start = function start() {
          EventManager.getInstance().add(MessageManager.Custom.ActivityInfoChange, this, this.setActivityGet);
        };

        _proto.setData = function setData(data, tag) {
          this.data = data;
          this.tag = tag;

          if (!data) {
            console.log("没有运营活动数据：" + data);
            return;
          }

          this.config = ConfigFile.getTActivitiesInfoByActivitiesId(data.ActivityModeId);
          this.setRewards();
          this.setLabelShow();
        };

        _proto.setRewards = function setRewards() {
          this.clearRewardBox();

          if (this.config && this.config.RewardNum) {
            var data = this.config.RewardNum.split(";");

            if (data) {
              for (var i = 0; i < data.length; i++) {
                var rewards = data[i].split(",");
                var rewardId = rewards[0];
                var rewardNum = rewards[1];
                var cell = this.RewardPool.get();
                var itemcomp = cell.getComponent("ActivityUIRewardItem");

                if (itemcomp) {
                  itemcomp.setData(rewardId, rewardNum);
                  itemcomp.tag = this.tag;
                  this.rewardBg.addChild(cell);
                }
              }
            }
          }
        };

        _proto.clearRewardBox = function clearRewardBox() {
          var _this2 = this; // this.data = null;
          // this.config = null;


          NodeHelp.getchildlable(this.node, "rewardBg", null, function (comp, node) {
            while (node.children.length >= 1) {
              _this2.RewardPool.put(node.children[0]);
            }
          });
        };

        _proto.clearData = function clearData() {
          this.data = null;
          this.config = null;
          this.clearRewardBox();
          EventManager.getInstance().remove(MessageManager.Custom.ActivityInfoChange, this, this.setActivityGet);
        };

        _proto.setActivityGet = function setActivityGet(data) {
          if (this.data.ActivityModeId == data.ActivityModeId) {
            this.data = data;
            this.setLabelShow();
          }
        };

        _proto.setLabelShow = function setLabelShow() {
          var nowCondition = 0;
          var maxCondition = 0;

          if (this.data.Conditions && this.data.Conditions.length > 0) {
            nowCondition = this.data.Conditions[0].nowCondition;
            maxCondition = this.data.Conditions[0].MaxCondition;
          }

          var str = "<color=#FA1B1B>(%s/%s)</color>";

          if (nowCondition >= maxCondition) {
            str = "<color=#4AE036>(%s/%s)</color>";

            if (this.data.TotalGet >= this.data.TotalGetTime) {
              //已领取
              this.buttonGet.active = false;
              this.LabelReceived.active = true;
            } else {
              //可领取
              this.buttonGet.active = true;
              this.LabelReceived.active = false;
            }
          } else {
            this.buttonGet.active = false;
            this.LabelReceived.active = false;
          }

          var language = "<color=#070707>%s</color>";
          this.LabTitle.string = "<b>" + language.format(ConfigFile.findLanguage(130263).format(maxCondition)) + str.format(nowCondition, maxCondition) + "</b>"; // this.LabTitle.string = ConfigFile.findLanguage(130263).format(maxCondition) + "(" + nowCondition + "/" + maxCondition + ")";

          NodeHelp.getchildlable(this.LabelReceived, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(130273);
          });
          NodeHelp.getchildlable(this.buttonGet, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(130272);
          });
        };

        _proto.onClickedButtonGet = function onClickedButtonGet() {
          BagUIItemTip.getInstance().closeTip();
          WebSocketMgr.send(MessageManager.Net.FarmActivityGetRequest, {
            ActivityModeId: this.data.ActivityModeId
          });
        };

        return ActivityNobletokenItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "rewardItem", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "LabTitle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "LabelReceived", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "rewardBg", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "buttonGet", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ActivityPropsItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './UIManager.ts', './producer.ts', './UIActivity.ts', './BagUIItemTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Input, Component, ConfigFile, Configname, UIManager, producer, UIActivity, BagUIItemTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Input = module.Input;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      UIActivity = module.UIActivity;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "2499aod5SJL5aupeBnWrFtd", "ActivityPropsItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActivityPropsItem = exports('ActivityPropsItem', (_dec = ccclass('ActivityPropsItem'), _dec2 = property(Node), _dec3 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActivityPropsItem, _Component);

        function ActivityPropsItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.id = 0;
          _this.config = null;
          _this.propName = "";
          _this.propText = "";
          _this.propTimeText = null;
          _this.propNum = 1;

          _initializerDefineProperty(_this, "sprIcon", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labNum", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = ActivityPropsItem.prototype; // onLoad() {
        // }

        _proto.onEnable = function onEnable() {
          this.sprIcon.on(Input.EventType.TOUCH_START, this.onTouchStart, this);
          this.sprIcon.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);
          this.sprIcon.on(Input.EventType.TOUCH_CANCEL, this.onTouchCancel, this);
        };

        _proto.onDisable = function onDisable() {
          this.sprIcon.off(Input.EventType.TOUCH_START, this.onTouchStart, this);
          this.sprIcon.off(Input.EventType.TOUCH_END, this.onTouchEnd, this);
          this.sprIcon.off(Input.EventType.TOUCH_CANCEL, this.onTouchCancel, this);
        };

        _proto.start = function start() {
          var _this2 = this;

          this.config = ConfigFile.getItemData(this.id);

          if (this.config) {
            this.propName = ConfigFile.findLanguage(this.config.Name);
            this.propText = ConfigFile.findLanguage(Number(this.config.Tips));
          }

          if (this.config.Type && (this.config.Type == 2 || this.config.Type == "2")) {
            var animalConfig = ConfigFile.getInstance().config.get(Configname.TAnimalInfo);

            if (animalConfig) {
              var animalConsumeTime = 0;
              animalConfig.forEach(function (v) {
                if (v.AnimalConsumeId == _this2.config.ItemId && (animalConsumeTime == 0 || v.AnimalConsumeTime < animalConsumeTime)) {
                  animalConsumeTime = v.AnimalConsumeTime;
                }
              });

              if (animalConsumeTime) {
                this.propTimeText = producer.getTimeFormat(animalConsumeTime * this.propNum);
              }
            }
          }
        };

        _proto.onTouchStart = function onTouchStart() {
          var activityUi = UIManager.getInstance().getUI(UIActivity);

          if (activityUi) {
            BagUIItemTip.getInstance().openTip(activityUi.TipParent, this.propName, this.propText, this, this.propTimeText);
          }
        };

        _proto.onTouchEnd = function onTouchEnd() {};

        _proto.onTouchCancel = function onTouchCancel() {};

        return ActivityPropsItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sprIcon", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "labNum", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ActivityRewardItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './UIManager.ts', './producer.ts', './NodeHelp.ts', './UIActivityOther.ts', './BagUIItemTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Input, Sprite, UITransform, Vec3, Label, Button, Component, ConfigFile, Configname, UIManager, producer, NodeHelp, UIActivityOther, BagUIItemTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Input = module.Input;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      Label = module.Label;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      UIActivityOther = module.UIActivityOther;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "02bf4ng5OtGjbsxvoHFXURw", "ActivityRewardItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActivityRewardItem = exports('ActivityRewardItem', (_dec = ccclass('ActivityRewardItem'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActivityRewardItem, _Component);

        function ActivityRewardItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.id = null;
          _this.num = null;
          _this.tag = null;

          _initializerDefineProperty(_this, "icon", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = ActivityRewardItem.prototype;

        _proto.onEnable = function onEnable() {
          this.icon.on(Input.EventType.TOUCH_START, this.oniconStartTouch, this);
        };

        _proto.onDisable = function onDisable() {
          this.icon.off(Input.EventType.TOUCH_START, this.oniconStartTouch, this);
        };

        _proto.init = function init(id, num) {
          this.id = id;
          this.num = num;
          this.setshow();
        };

        _proto.setshow = function setshow() {
          var _this2 = this;

          NodeHelp.getchildlable(this.node, "icon", Sprite, function (comp, node) {
            NodeHelp.loadIcon("propIcon/itemicon", _this2.id, function (res) {
              comp.spriteFrame = res;
              var scale = NodeHelp.setScopeLimitationMax(comp.node.getComponent(UITransform), 49, 49);
              comp.node.setScale(new Vec3(scale, scale, 1));
            });
          });
          NodeHelp.getchildlable(this.node, "Label", Label, function (comp, node) {
            comp.string = "" + _this2.num; //NumberUtil.unitConversion(Number(this.num));
          });
        };

        _proto.oniconStartTouch = function oniconStartTouch(event) {
          var node = event.target;
          var config = null;
          config = ConfigFile.getItemData(this.id);

          if (config) {
            var propTimeText = null;

            if (config.Type && (config.Type == 2 || config.Type == "2")) {
              var animalConfig = ConfigFile.getInstance().config.get(Configname.TAnimalInfo);

              if (animalConfig) {
                var animalConsumeTime = 0;
                animalConfig.forEach(function (v) {
                  if (v.AnimalConsumeId == config.ItemId && (animalConsumeTime == 0 || v.AnimalConsumeTime < animalConsumeTime)) {
                    animalConsumeTime = v.AnimalConsumeTime;
                  }
                });

                if (animalConsumeTime) {
                  propTimeText = producer.getTimeFormat(animalConsumeTime * this.num);
                }
              }
            }

            var propName = ConfigFile.findLanguage(config.Name);
            var propText = ConfigFile.findLanguage(config.Tips);
            var activityUi = UIManager.getInstance().getUI(UIActivityOther);
            if (activityUi) BagUIItemTip.getInstance().openTip(activityUi.TipParent || this.tag.node || this.node, propName, propText, node.getComponent(Button), propTimeText);
          }
        };

        return ActivityRewardItem;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "icon", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ActivitySignEveryDay.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './NodeHelp.ts', './BagUIItemTip.ts', './ActivityComponent.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, ConfigFile, GameAllData, EventManager, MessageManager, NodeHelp, BagUIItemTip, Activitycoopent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }, function (module) {
      Activitycoopent = module.Activitycoopent;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "a2c89E8+jxPvoZS+tsmngIq", "ActivitySignEveryDay", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActivitySignEveryDay = exports('ActivitySignEveryDay', (_dec = ccclass('ActivitySignEveryDay'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Activitycoopent) {
        _inheritsLoose(ActivitySignEveryDay, _Activitycoopent);

        function ActivitySignEveryDay() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Activitycoopent.call.apply(_Activitycoopent, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "items", _descriptor, _assertThisInitialized(_this));

          _this.nowSign = null;
          _this.Signs = [];
          return _this;
        }

        var _proto = ActivitySignEveryDay.prototype;

        _proto.start = function start() {
          this.setShow();
          this.setItem();
        };

        _proto.onEnable = function onEnable() {
          EventManager.getInstance().add(MessageManager.Custom.SignChange, this, this.setItem);
        };

        _proto.onDisable = function onDisable() {
          BagUIItemTip.getInstance().closeTip();
          EventManager.getInstance().remove(MessageManager.Custom.SignChange, this, this.setItem);
        };

        _proto.onClose = function onClose() {
          _Activitycoopent.prototype.onClose.call(this);

          BagUIItemTip.getInstance().tipDestroy();
        };

        _proto.bubbleSort = function bubbleSort(arr) {
          var i = arr.length,
              j;
          var tempExchangVal;

          while (i > 0) {
            for (j = 0; j < i - 1; j++) {
              if (arr[j].Week > arr[j + 1].Week && arr[j]) {
                tempExchangVal = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = tempExchangVal;
              }
            }

            i--;
          }
        };

        _proto.setShow = function setShow() {
          NodeHelp.getchildlable(this.node, "LabTitle", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(130233);
          });
        };

        _proto.setItem = function setItem() {
          var _this2 = this;

          this.nowSign = GameAllData.FarmActivityListResponse.IsTodaySign;
          this.Signs = GameAllData.FarmActivityListResponse.Signs;
          this.bubbleSort(this.Signs);

          if (this.Signs.length <= 0) {
            return;
          }

          this.items.children.forEach(function (v, i) {
            var sign = _this2.Signs[i];
            var comp = v.getComponent("ActivitySignEveryDayItem");
            comp.init(sign, _this2.nowSign);
          });
        };

        _proto.closeTip = function closeTip() {
          BagUIItemTip.getInstance().closeTip();
        };

        return ActivitySignEveryDay;
      }(Activitycoopent), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "items", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ActivitySignEveryDayItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './MessageManager.ts', './UIManager.ts', './WebSocketMgr.ts', './producer.ts', './NodeHelp.ts', './redDot.ts', './UIActivity.ts', './BagUIItemTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Input, Sprite, UITransform, Vec3, Label, Button, Component, ConfigFile, Configname, MessageManager, UIManager, WebSocketMgr, producer, NodeHelp, redDot, UIActivity, BagUIItemTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Input = module.Input;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      Label = module.Label;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      redDot = module.redDot;
    }, function (module) {
      UIActivity = module.UIActivity;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "a58b8g+gYhHwoHRTa1lDCbw", "ActivitySignEveryDayItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var iconSize = 100;
      var ActivitySignEveryDayItem = exports('ActivitySignEveryDayItem', (_dec = ccclass('ActivitySignEveryDayItem'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActivitySignEveryDayItem, _Component);

        function ActivitySignEveryDayItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "sprIcon", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mask", _descriptor2, _assertThisInitialized(_this));

          _this.sign = null;
          return _this;
        }

        var _proto = ActivitySignEveryDayItem.prototype;

        _proto.onEnable = function onEnable() {
          this.sprIcon.on(Input.EventType.TOUCH_START, this.onTouchStart, this);
        };

        _proto.onDisable = function onDisable() {
          this.sprIcon.off(Input.EventType.TOUCH_START, this.onTouchStart, this);
        };

        _proto.init = function init(sign, nowSign) {
          var _this2 = this;

          this.sign = sign;

          if (!this.sign || !this.sign.ModeId) {
            this.node.active = false;
            return;
          }

          var signinfo = ConfigFile.getTSignInfoBySignId(this.sign.ModeId);

          if (!signinfo) {
            this.node.active = false;
            return;
          }

          NodeHelp.getchildlable(this.node, "redDot", redDot, function (comp) {
            comp.uiName = "UIActivitySigns";
            comp.redName = sign.ModeId;
            comp.onRedChange();
          });
          this.node.active = true;
          var icon = signinfo.SignReward.split(",");
          NodeHelp.getchildlable(this.node, "sprIcon", Sprite, function (comp) {
            NodeHelp.loadIcon("propIcon/itemicon", icon[0].toString(), function (res) {
              comp.spriteFrame = res;
              var scale = NodeHelp.setScopeLimitation(comp.node.getComponent(UITransform), iconSize, iconSize);
              comp.node.setScale(new Vec3(scale, scale, 1));
            });
          });
          NodeHelp.getchildlable(this.node, "labNum", Label, function (comp) {
            comp.string = "X" + icon[1];
          });
          NodeHelp.getchildlable(this.node, "BgClick", null, function (comp, node) {
            if (sign.IsGet != 0) {
              node.active = false;
            } else {
              node.active = nowSign == sign.ModeId;
            }

            NodeHelp.getchildlable(_this2.node, "labDayClick", null, function (comp, node_1) {
              node_1.active = node.active;
            });
            NodeHelp.getchildlable(_this2.node, "labDay", null, function (comp, node_2) {
              node_2.active = !node.active;
            });
          });
          NodeHelp.getchildlable(this.node, "labDayClick", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(130233 + sign.Week);
          });
          NodeHelp.getchildlable(this.node, "labDay", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(130233 + sign.Week);
          });
          this.mask.active = nowSign > sign.ModeId || sign.IsGet != 0;
          NodeHelp.getchildlable(this.node, "Have", null, function (comp, node) {
            node.active = sign.IsGet != 0;
          });

          if (nowSign == sign.ModeId && sign.IsGet == 0) {
            this.node.getComponent(Button).interactable = true;
          } else {
            this.node.getComponent(Button).interactable = false;
          } //设置icon点击


          var canchick = false;
          NodeHelp.getchildlable(this.node, "BgClick", null, function (comp, node) {
            canchick = node.active;
          });
          this.sprIcon.getComponent(Button).interactable = !(!this.mask.active && canchick);
        };

        _proto.onClickedItem = function onClickedItem() {
          if (this.mask.active) return;
          BagUIItemTip.getInstance().closeTip();
          WebSocketMgr.send(MessageManager.Net.FarmSignRequest, {
            SignId: this.sign.ModeId
          });
        };

        _proto.onTouchStart = function onTouchStart(event) {
          var canchick = false;
          NodeHelp.getchildlable(this.node, "BgClick", null, function (comp, node) {
            canchick = node.active;
          });

          if (!this.mask.active && canchick) {
            BagUIItemTip.getInstance().closeTip();
            WebSocketMgr.send(MessageManager.Net.FarmSignRequest, {
              SignId: this.sign.ModeId
            });
            return;
          }

          var node = event.target;
          var config = null;
          var signinfo = ConfigFile.getTSignInfoBySignId(this.sign.ModeId);
          var reward = signinfo.SignReward.split(",");
          config = ConfigFile.getItemData(Number(reward[0]));

          if (config) {
            var propTimeText = null;

            if (config.Type && (config.Type == 2 || config.Type == "2")) {
              var animalConfig = ConfigFile.getInstance().config.get(Configname.TAnimalInfo);

              if (animalConfig) {
                var animalConsumeTime = 0;
                animalConfig.forEach(function (v) {
                  if (v.AnimalConsumeId == config.ItemId && (animalConsumeTime == 0 || v.AnimalConsumeTime < animalConsumeTime)) {
                    animalConsumeTime = v.AnimalConsumeTime;
                  }
                });

                if (animalConsumeTime) {
                  propTimeText = producer.getTimeFormat(animalConsumeTime * Number(reward[1]));
                }
              }
            }

            var propName = ConfigFile.findLanguage(config.Name);
            var propText = ConfigFile.findLanguage(config.Tips);
            var activityUi = UIManager.getInstance().getUI(UIActivity);

            if (activityUi) {
              BagUIItemTip.getInstance().openTip(activityUi.TipParent, propName, propText, node.getComponent(Button), propTimeText);
            }
          }
        };

        return ActivitySignEveryDayItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sprIcon", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "mask", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ActivitySignLimitedDay.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './EventManager.ts', './MessageManager.ts', './WebSocketMgr.ts', './producer.ts', './DateUtil.ts', './NodeHelp.ts', './UIHelp.ts', './BagUIItemTip.ts', './ActivityComponent.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, ConfigFile, EventManager, MessageManager, WebSocketMgr, producer, DateUtil, NodeHelp, UIHelp, BagUIItemTip, Activitycoopent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      DateUtil = module.DateUtil;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }, function (module) {
      Activitycoopent = module.Activitycoopent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "96d68ycNahOXpurCdSdxoZV", "ActivitySignLimitedDay", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActivitySignLimitedDay = exports('ActivitySignLimitedDay', (_dec = ccclass('ActivitySignLimitedDay'), _dec2 = property(Node), _dec3 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Activitycoopent) {
        _inheritsLoose(ActivitySignLimitedDay, _Activitycoopent);

        function ActivitySignLimitedDay() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Activitycoopent.call.apply(_Activitycoopent, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "items", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Time", _descriptor2, _assertThisInitialized(_this));

          _this.Showindex = 0;
          _this.remainTime = 0;
          return _this;
        }

        var _proto = ActivitySignLimitedDay.prototype; //活动结束时间

        _proto.start = function start() {
          this.setShow();
        };

        _proto.onEnable = function onEnable() {
          EventManager.getInstance().add(MessageManager.Custom.ActivityGetofPanel, this, this.ActivityGetofPanel);
          this.bubbleSort(this.activitys);
          this.setShowindex();
          this.setItem();
          this.setButtonShow();
          this.setTime();
        };

        _proto.onDisable = function onDisable() {
          EventManager.getInstance().remove(MessageManager.Custom.ActivityGetofPanel, this, this.ActivityGetofPanel);
          BagUIItemTip.getInstance().closeTip();
        };

        _proto.onClose = function onClose() {
          _Activitycoopent.prototype.onClose.call(this);

          BagUIItemTip.getInstance().tipDestroy();
        };

        _proto.ActivityGetofPanel = function ActivityGetofPanel() {
          this.bubbleSort(this.activitys);
          this.setShowindex();
          this.setItem();
          this.setButtonShow();
          this.setTime();
        };

        _proto.bubbleSort = function bubbleSort(arr) {
          var i = arr.length,
              j;
          var tempExchangVal;

          while (i > 0) {
            for (j = 0; j < i - 1; j++) {
              var MaxConditionj = arr[j].Conditions[0] && arr[j].Conditions[0].MaxCondition;
              var MaxConditionadd = arr[j + 1].Conditions[0] && arr[j + 1].Conditions[0].MaxCondition;

              if (MaxConditionj && MaxConditionadd && MaxConditionj > MaxConditionadd) {
                tempExchangVal = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = tempExchangVal;
              }
            }

            i--;
          }
        };

        _proto.setTime = function setTime() {
          var localTime = UIHelp.getTimeMask() / 1000;
          var servertime = producer.getServerTimeDiff(localTime);
          this.remainTime = this.activitys[this.Showindex].EndTime - servertime;
          var data = DateUtil.getDHMS(this.remainTime);
          var str = "";
          data.forEach(function (v, i) {
            if (v != 0) {
              var messageId = 107001 + i;
              str += ConfigFile.findLanguage(messageId).format(v);
            }
          });
          this.Time.string = str;
          this.schedule(this.updateRemainTime, 1);
        };

        _proto.updateRemainTime = function updateRemainTime() {
          this.remainTime--;
          var data = DateUtil.getDHMS(this.remainTime);
          var str = "";
          data.forEach(function (v, i) {
            if (v != 0) {
              var messageId = 107001 + i;
              str += ConfigFile.findLanguage(messageId).format(v);
            }
          });
          this.Time.string = str;

          if (this.remainTime < 1) {
            this.unschedule(this.updateRemainTime);
          }
        };

        _proto.setShowindex = function setShowindex() {
          var index = 0; // if (!this.activitydata) {

          index = this.findIndex();
          this.Showindex = index; //return
          //}
          // this.activitys.find((v, i) => {
          //     index = i
          //     return (v.ActivityModeId == this.activitydata)
          // })

          this.Showindex = index;
        };

        _proto.setShow = function setShow() {
          var tActivitiesInfo = ConfigFile.getTActivitiesInfoByActivitiesId(this.activityInfo.ActivityModeId);
          NodeHelp.getchildlable(this.node, "LabTitle", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(tActivitiesInfo.Name);
          });
          NodeHelp.getchildlable(this.node, "ButtonClick", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(130007);
          });
          NodeHelp.getchildlable(this.node, "Have", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(130008);
          });
          NodeHelp.getchildlable(this.node, "LabTitle", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(tActivitiesInfo.Name);
          });
        };

        _proto.setItem = function setItem() {
          var activity = this.activitys[this.Showindex];
          if (!activity || !activity.ActivityModeId) return;
          var tActivitie = ConfigFile.getTActivitiesInfoByActivitiesId(activity.ActivityModeId);
          if (!tActivitie) return;
          var items = tActivitie.RewardNum;
          if (!items || items.length <= 0) return;
          var itemslist = items.split(";");
          this.items.children.forEach(function (v, i) {
            if (v == "") return;
            var signs = itemslist[i];

            if (signs) {
              v.active = true;
              var comp = v.getComponent("ActivitySignLimitedDayItem");
              comp.init(signs);
            } else {
              v.active = false;
            }
          });
        };

        _proto.findIndex = function findIndex() {
          var index = 0;
          var activity = this.activitys.find(function (v, i) {
            index = i;
            var condition = v.Conditions[0];
            var ConditionOver = false;

            if (condition) {
              var tConditionInfo = ConfigFile.getTConditionInfoByConditionId(condition.ConditionModeId);
              if (tConditionInfo.Compare == 0) ConditionOver = condition.MaxCondition - condition.nowCondition <= 0;else ConditionOver = condition.nowCondition - condition.MaxCondition <= 0;
            }

            if (v.TotalGet >= v.TotalGetTime) {
              ConditionOver = false;
            }

            return ConditionOver;
          });

          if (activity) {
            return index;
          } else {
            activity = this.activitys.find(function (v, i) {
              index = i;
              var getOver = true;

              if (v.TotalGet >= v.TotalGetTime) {
                getOver = false;
              }

              return getOver;
            });

            if (activity) {
              return index;
            } else return this.activitys.length ? this.activitys.length - 1 : 0;
          }
        };

        _proto.setButtonShow = function setButtonShow() {
          var _this2 = this;

          NodeHelp.getchildlable(this.node, "ButtonRight", null, function (comp, node) {
            if (_this2.activitys[_this2.Showindex + 1]) node.active = true;else node.active = false;
          });
          NodeHelp.getchildlable(this.node, "ButtonLift", null, function (comp, node) {
            if (_this2.activitys[_this2.Showindex - 1]) node.active = true;else node.active = false;
          });
          NodeHelp.getchildlable(this.node, "ButtonClick", null, function (comp, node) {
            var activity = _this2.activitys[_this2.Showindex];

            if (!activity || !activity.ActivityModeId) {
              node.active = false;
              return;
            }

            var condition = activity.Conditions[0];

            if (condition) {
              var tConditionInfo = ConfigFile.getTConditionInfoByConditionId(condition.ConditionModeId);
              var ConditionOver = true;
              if (tConditionInfo.Compare == 0) ConditionOver = condition.MaxCondition - condition.nowCondition <= 0;else ConditionOver = condition.nowCondition - condition.MaxCondition <= 0;
              node.active = ConditionOver;
            } else {
              node.active = false;
            }

            if (activity.TotalGet >= activity.TotalGetTime && node.active) {
              node.active = false;
            }
          });
          NodeHelp.getchildlable(this.node, "Have", null, function (comp, node) {
            var activity = _this2.activitys[_this2.Showindex];

            if (!activity || !activity.ActivityModeId) {
              node.active = false;
              return;
            }

            node.active = activity.TotalGet >= activity.TotalGetTime;
          });
          NodeHelp.getchildlable(this.node, "LabDay", Label, function (comp, node) {
            var activity = _this2.activitys[_this2.Showindex];
            var condition = activity.Conditions[0];
            var day = 1;

            if (condition) {
              day = condition.MaxCondition;
            }

            comp.string = ConfigFile.findLanguage(130206).format(day);
          });
        };

        _proto.onclickLift = function onclickLift() {
          BagUIItemTip.getInstance().closeTip();
          this.Showindex -= 1;
          this.setItem();
          this.setTime();
          this.setButtonShow();
        };

        _proto.onclickRight = function onclickRight() {
          BagUIItemTip.getInstance().closeTip();
          this.Showindex += 1;
          this.setItem();
          this.setTime();
          this.setButtonShow();
        };

        _proto.onClickedTotalGet = function onClickedTotalGet() {
          BagUIItemTip.getInstance().closeTip();
          var activity = this.activitys[this.Showindex];
          WebSocketMgr.send(MessageManager.Net.FarmActivityGetRequest, {
            ActivityModeId: activity.ActivityModeId
          });
        };

        _proto.closeTip = function closeTip() {
          BagUIItemTip.getInstance().closeTip();
        };

        return ActivitySignLimitedDay;
      }(Activitycoopent), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "items", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Time", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ActivitySignLimitedDayItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './UIManager.ts', './producer.ts', './NodeHelp.ts', './UIActivity.ts', './BagUIItemTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Input, Sprite, UITransform, Vec3, Label, Button, Component, ConfigFile, Configname, UIManager, producer, NodeHelp, UIActivity, BagUIItemTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Input = module.Input;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      Label = module.Label;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      UIActivity = module.UIActivity;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "d14fa5bNn1F8YLWLnUJcIzT", "ActivitySignLimitedDayItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActivitySignLimitedDayItem = exports('ActivitySignLimitedDayItem', (_dec = ccclass('ActivitySignLimitedDayItem'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActivitySignLimitedDayItem, _Component);

        function ActivitySignLimitedDayItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "icon", _descriptor, _assertThisInitialized(_this));

          _this.index = 0;
          _this.signs = null;
          return _this;
        }

        var _proto = ActivitySignLimitedDayItem.prototype;

        _proto.onEnable = function onEnable() {
          this.icon.on(Input.EventType.TOUCH_START, this.oniconStartTouch, this);
        };

        _proto.onDisable = function onDisable() {
          this.icon.off(Input.EventType.TOUCH_START, this.oniconStartTouch, this);
        };

        _proto.init = function init(signs) {
          this.signs = signs;
          var sign = signs.split(",");
          NodeHelp.getchildlable(this.node, "Icon", Sprite, function (comp) {
            NodeHelp.loadIcon("propIcon/itemicon", sign[0].toString(), function (res) {
              comp.spriteFrame = res;
              var scale = NodeHelp.setScopeLimitation(comp.node.getComponent(UITransform), 120, 120);
              comp.node.setScale(new Vec3(scale, scale, 1));
            });
          });
          NodeHelp.getchildlable(this.node, "Label", Label, function (comp) {
            comp.string = "X" + sign[1];
          });
        };

        _proto.oniconStartTouch = function oniconStartTouch(event) {
          var node = event.target;
          var config = null;
          var reward = this.signs.split(",");
          config = ConfigFile.getItemData(Number(reward[0]));

          if (config) {
            var propTimeText = null;

            if (config.Type && (config.Type == 2 || config.Type == "2")) {
              var animalConfig = ConfigFile.getInstance().config.get(Configname.TAnimalInfo);

              if (animalConfig) {
                var animalConsumeTime = 0;
                animalConfig.forEach(function (v) {
                  if (v.AnimalConsumeId == config.ItemId && (animalConsumeTime == 0 || v.AnimalConsumeTime < animalConsumeTime)) {
                    animalConsumeTime = v.AnimalConsumeTime;
                  }
                });

                if (animalConsumeTime) {
                  propTimeText = producer.getTimeFormat(animalConsumeTime * Number(reward[1]));
                }
              }
            }

            var propName = ConfigFile.findLanguage(config.Name);
            var propText = ConfigFile.findLanguage(config.Tips);
            var activityUi = UIManager.getInstance().getUI(UIActivity);

            if (activityUi) {
              BagUIItemTip.getInstance().openTip(activityUi.TipParent, propName, propText, node.getComponent(Button), propTimeText);
            }
          }
        };

        return ActivitySignLimitedDayItem;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "icon", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ActivityTipItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './NodeHelp.ts', './NumberUtil.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Sprite, UITransform, Label, Component, ConfigFile, NodeHelp, NumberUtil;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "6264a90qT5JPqNA0A0J/BLh", "ActivityTipItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActivityTipItem = exports('ActivityTipItem', (_dec = ccclass('ActivityTipItem'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActivityTipItem, _Component);

        function ActivityTipItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.data = null;
          return _this;
        }

        var _proto = ActivityTipItem.prototype;

        _proto.init = function init(rewed, tag) {
          this.data = rewed;
          this.setshow();
        };

        _proto.setshow = function setshow() {
          var data = this.data.split(",");
          var id = data[0];
          var number = Number(data[1]);
          NodeHelp.getchildlable(this.node, "icon", Sprite, function (comp) {
            NodeHelp.loadIcon("propIcon/itemicon", id, function (res) {
              if (comp.isValid) {
                comp.spriteFrame = res;
                var scale = NodeHelp.setScopeLimitation(comp.node.getComponent(UITransform), 30, 30);
                comp.node.setScale(scale, scale);
              }
            });
          });
          NodeHelp.getchildlable(this.node, "num", Label, function (comp) {
            var str = NumberUtil.unitConversion(number, false);
            comp.string = str;
          });
          NodeHelp.getchildlable(this.node, "name", Label, function (comp) {
            var str = "";
            var config = ConfigFile.getItemData(id);

            if (config) {
              str = ConfigFile.findLanguage(config.Name);
            }

            comp.string = str;
          });
        };

        return ActivityTipItem;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ActivityUIRewardItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './UIManager.ts', './producer.ts', './NodeHelp.ts', './UIActivityOther.ts', './BagUIItemTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Input, Sprite, UITransform, Label, Button, Component, ConfigFile, Configname, UIManager, producer, NodeHelp, UIActivityOther, BagUIItemTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Input = module.Input;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      Label = module.Label;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      UIActivityOther = module.UIActivityOther;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "fc4b3Qw9IhJrrIM3UeuJxrX", "ActivityUIRewardItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActivityUIRewardItem = exports('ActivityUIRewardItem', (_dec = ccclass('ActivityUIRewardItem'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActivityUIRewardItem, _Component);

        function ActivityUIRewardItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.id = null;
          _this.num = null;
          _this.tag = null;

          _initializerDefineProperty(_this, "icon", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = ActivityUIRewardItem.prototype;

        _proto.onEnable = function onEnable() {
          this.icon.on(Input.EventType.TOUCH_START, this.oniconStartTouch, this);
        };

        _proto.onDisable = function onDisable() {
          this.icon.off(Input.EventType.TOUCH_START, this.oniconStartTouch, this);
        };

        _proto.setData = function setData(id, num) {
          this.id = id;
          this.num = num;
          var number = Number(num);
          NodeHelp.getchildlable(this.node, "SpriteIcon", Sprite, function (comp) {
            NodeHelp.loadIcon("propIcon/itemicon", id, function (res) {
              if (comp.isValid) {
                comp.spriteFrame = res;
                var scale = NodeHelp.setScopeLimitation(comp.node.getComponent(UITransform), 48, 48);
                comp.node.setScale(scale, scale);
              }
            });
          });
          NodeHelp.getchildlable(this.node, "Label", Label, function (comp) {
            //let str = NumberUtil.unitConversion(number)
            comp.string = "" + number;
          });
        };

        _proto.oniconStartTouch = function oniconStartTouch(event) {
          var node = event.target;
          var config = null;
          config = ConfigFile.getItemData(this.id);

          if (config) {
            var propTimeText = null;

            if (config.Type && (config.Type == 2 || config.Type == "2")) {
              var animalConfig = ConfigFile.getInstance().config.get(Configname.TAnimalInfo);

              if (animalConfig) {
                var animalConsumeTime = 0;
                animalConfig.forEach(function (v) {
                  if (v.AnimalConsumeId == config.ItemId && (animalConsumeTime == 0 || v.AnimalConsumeTime < animalConsumeTime)) {
                    animalConsumeTime = v.AnimalConsumeTime;
                  }
                });

                if (animalConsumeTime) {
                  propTimeText = producer.getTimeFormat(animalConsumeTime * this.num);
                }
              }
            }

            var propName = ConfigFile.findLanguage(config.Name);
            var propText = ConfigFile.findLanguage(config.Tips);
            var activityUi = UIManager.getInstance().getUI(UIActivityOther);
            if (activityUi) BagUIItemTip.getInstance().openTip(activityUi.TipParent || this.tag.node || this.node, propName, propText, node.getComponent(Button), propTimeText);
          }
        };

        return ActivityUIRewardItem;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "icon", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ActivityUpgradePackage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './EventManager.ts', './MessageManager.ts', './NodeHelp.ts', './Pool.ts', './BagUIItemTip.ts', './ActivityComponent.ts', './ActivityUpgradePackageItem.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, Prefab, Node, ScrollView, instantiate, Label, Layout, v2, ConfigFile, EventManager, MessageManager, NodeHelp, PoolOnce, BagUIItemTip, Activitycoopent, ActivityUpgradePackageItem;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      ScrollView = module.ScrollView;
      instantiate = module.instantiate;
      Label = module.Label;
      Layout = module.Layout;
      v2 = module.v2;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }, function (module) {
      Activitycoopent = module.Activitycoopent;
    }, function (module) {
      ActivityUpgradePackageItem = module.ActivityUpgradePackageItem;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "fe421wNQyhHv76Z9OEREQfC", "ActivityUpgradePackage", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActivityUpgradePackage = exports('ActivityUpgradePackage', (_dec = ccclass('ActivityUpgradePackage'), _dec2 = property(Prefab), _dec3 = property(Node), _dec4 = property(ScrollView), _dec(_class = (_class2 = /*#__PURE__*/function (_Activitycoopent) {
        _inheritsLoose(ActivityUpgradePackage, _Activitycoopent);

        function ActivityUpgradePackage() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Activitycoopent.call.apply(_Activitycoopent, [this].concat(args)) || this;
          _this.itmeHighetHalf = 142.5;

          _initializerDefineProperty(_this, "prefabItem", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "items", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrollitems", _descriptor3, _assertThisInitialized(_this));

          _this.Pool = new PoolOnce(10, function () {
            return instantiate(_this.prefabItem);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          return _this;
        }

        var _proto = ActivityUpgradePackage.prototype;

        _proto.start = function start() {
          this.setShow();
        };

        _proto.onEnable = function onEnable() {
          EventManager.getInstance().add(MessageManager.Custom.ActivityGetofPanel, this, this.ActivityGetofPanel);
          this.scrollitems.node.on(ScrollView.EventType.SCROLL_BEGAN, this.closeTip, this);
          this.bubbleSort(this.activitys);
          this.clearItem();
          this.setItem();
          this.cometoitem();
        };

        _proto.onDisable = function onDisable() {
          EventManager.getInstance().remove(MessageManager.Custom.ActivityGetofPanel, this, this.ActivityGetofPanel);
          this.scrollitems.node.off(ScrollView.EventType.SCROLL_BEGAN, this.closeTip, this);
          BagUIItemTip.getInstance().closeTip();
        };

        _proto.onClose = function onClose() {
          _Activitycoopent.prototype.onClose.call(this);

          BagUIItemTip.getInstance().tipDestroy();
          this.clearItem();
          this.Pool.clear();
        };

        _proto.ActivityGetofPanel = function ActivityGetofPanel() {
          this.bubbleSort(this.activitys);
          this.clearItem();
          this.setItem();
          this.cometoitem();
        };

        _proto.setShow = function setShow() {
          var tActivitiesInfo = ConfigFile.getTActivitiesInfoByActivitiesId(this.activityInfo.ActivityModeId);
          NodeHelp.getchildlable(this.node, "LabTitle", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(tActivitiesInfo.Name);
          });
          NodeHelp.getchildlable(this.node, "LabTip", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(tActivitiesInfo.Info);
          });
        };

        _proto.bubbleSort = function bubbleSort(arr) {
          var i = arr.length,
              j;
          var tempExchangVal;

          while (i > 0) {
            for (j = 0; j < i - 1; j++) {
              var MaxConditionj = arr[j].Conditions[0] && arr[j].Conditions[0].MaxCondition;
              var MaxConditionadd = arr[j + 1].Conditions[0] && arr[j + 1].Conditions[0].MaxCondition;

              if (MaxConditionj && MaxConditionadd && MaxConditionj > MaxConditionadd) {
                tempExchangVal = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = tempExchangVal;
              }
            }

            i--;
          }
        };

        _proto.setItem = function setItem() {
          if (!this.activitys || this.activitys.length <= 0) return;

          for (var _iterator = _createForOfIteratorHelperLoose(this.activitys), _step; !(_step = _iterator()).done;) {
            var activity = _step.value;
            var item = this.Pool.get();
            var comp = item.getComponent(ActivityUpgradePackageItem);
            comp.init(activity, this);
            this.items.addChild(item);
          }

          this.scrollitems.enabled = this.activitys.length > 3;
        };

        _proto.cometoitem = function cometoitem() {
          var spacingX = this.scrollitems.content.getComponent(Layout).spacingX;
          var index = 0;
          var item = this.items.children.find(function (v, i) {
            index = i;
            var can = v.getComponent(ActivityUpgradePackageItem).getConditionOver();
            return can == 1;
          });

          if (item) {
            var maxof = this.scrollitems.getMaxScrollOffset();
            var vec = maxof.x / (this.items.children.length - 3);
            var w = index * vec; //let width = this.items.getComponent(UITransform).width

            this.scrollitems.scrollToOffset(v2(w, 0), 0.1, true);
          } else {
            var have = this.items.children.find(function (v, i) {
              var can = v.getComponent(ActivityUpgradePackageItem).getConditionOver();
              return can == -1;
            });

            if (have) {
              var _w = Math.abs(have.getPosition().x) - this.itmeHighetHalf; //+ ((index - 1) * this.itmeHighetHalf) 
              //let width = this.items.getComponent(UITransform).width


              this.scrollitems.scrollToOffset(v2(_w, 0), 0.1, true);
            } else {
              this.scrollitems.scrollToRight(0.1);
            }
          }
        };

        _proto.clearItem = function clearItem() {
          while (this.items.children.length > 0) {
            var item = this.items.children[0];
            var comp = item.getComponent(ActivityUpgradePackageItem);
            comp.clear();
            this.Pool.put(item);
          }
        };

        _proto.closeTip = function closeTip() {
          BagUIItemTip.getInstance().closeTip();
        };

        return ActivityUpgradePackage;
      }(Activitycoopent), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "prefabItem", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "items", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "scrollitems", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ActivityUpgradePackageItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './MessageManager.ts', './WebSocketMgr.ts', './NodeHelp.ts', './BagUIItemTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, Prefab, ScrollView, Node, instantiate, Label, Sprite, Button, Color, Component, ConfigFile, MessageManager, WebSocketMgr, NodeHelp, BagUIItemTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      ScrollView = module.ScrollView;
      Node = module.Node;
      instantiate = module.instantiate;
      Label = module.Label;
      Sprite = module.Sprite;
      Button = module.Button;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "b5d0fJmsMpI3b+FQZnuV6fp", "ActivityUpgradePackageItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActivityUpgradePackageItem = exports('ActivityUpgradePackageItem', (_dec = ccclass('ActivityUpgradePackageItem'), _dec2 = property(Prefab), _dec3 = property(ScrollView), _dec4 = property(Node), _dec5 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActivityUpgradePackageItem, _Component);

        function ActivityUpgradePackageItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "prefabItem", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tip", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "content", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mask", _descriptor4, _assertThisInitialized(_this));

          _this.activity = null;
          _this.parent = null;
          return _this;
        }

        var _proto = ActivityUpgradePackageItem.prototype;

        _proto.init = function init(data, parent) {
          this.parent = parent;
          this.clear();
          this.activity = data;
          this.setShow();
        };

        _proto.setShow = function setShow() {
          var _this2 = this;

          var tActivitiesInfo = ConfigFile.getTActivitiesInfoByActivitiesId(this.activity.ActivityModeId);

          if (tActivitiesInfo && tActivitiesInfo.RewardNum && tActivitiesInfo.RewardNum != "") {
            var tipDatas = tActivitiesInfo.RewardNum.split(";");

            for (var _iterator = _createForOfIteratorHelperLoose(tipDatas), _step; !(_step = _iterator()).done;) {
              var tipData = _step.value;
              if (tipData == "") continue;
              var tip = instantiate(this.prefabItem);
              var comp = tip.getComponent("ActivityUpgradePackageItemTipItem");
              comp.init(tipData, this.parent || this.node.parent);
              this.content.addChild(tip);
            }

            this.tip.enabled = tipDatas.length > 3;
          }

          var conditionString = ""; //let numStr = ""

          var ConditionOver = true;

          for (var _iterator2 = _createForOfIteratorHelperLoose(this.activity.Conditions), _step2; !(_step2 = _iterator2()).done;) {
            var condition = _step2.value;
            var config = ConfigFile.getTConditionInfoByConditionId(condition.ConditionModeId);

            if (config) {
              if (conditionString == "") {
                var num = condition.nowCondition + "/" + condition.MaxCondition;
                conditionString = ConfigFile.findLanguage(Number(config.Des)).format(condition.MaxCondition);
                NodeHelp.getchildlable(this.node, "LabCondition", Label, function (comp) {
                  comp.string = conditionString;
                });
              } else {
                (function () {
                  var num = condition.nowCondition + "/" + condition.MaxCondition; // conditionString += "  " + ConfigFile.findLanguage(Number(config.Des)).format( condition.MaxCondition)

                  var str = ConfigFile.findLanguage(Number(config.Des)).format(condition.MaxCondition);
                  NodeHelp.getchildlable(_this2.node, "LabCondition2", Label, function (comp) {
                    comp.string = str;
                  });
                })();
              }

              if (ConditionOver) {
                if (config.Compare == 0) ConditionOver = condition.MaxCondition - condition.nowCondition <= 0;else ConditionOver = condition.nowCondition - condition.MaxCondition <= 0;
              }
            }
          }

          NodeHelp.getchildlable(this.node, "Button", Label, function (comp, node) {
            comp.string = ConfigFile.findLanguage(111017);
          });
          NodeHelp.getchildlable(this.node, "Have", Label, function (comp, node) {
            comp.string = ConfigFile.findLanguage(111018);
          });
          NodeHelp.getchildlable(this.node, "Button", null, function (comp, node) {
            node.getComponent(Sprite).grayscale = !ConditionOver;
            node.getComponent(Button).interactable = ConditionOver;
            NodeHelp.getchildlable(_this2.node, "Lable", Label, function (comp_2, node_2) {
              if (ConditionOver) comp_2.color = new Color().fromHEX("#FFFFFF");else comp_2.color = new Color().fromHEX("#B1B1B1");
            });
          });
          NodeHelp.getchildlable(this.node, "redDot", null, function (comp, node) {
            node.active = ConditionOver;
          });

          if (ConditionOver && this.activity.TotalGet >= this.activity.TotalGetTime) {
            NodeHelp.getchildlable(this.node, "Have", null, function (comp, node) {
              node.active = true;
            });
            NodeHelp.getchildlable(this.node, "Button", null, function (comp, node) {
              node.active = false;
            });
            this.mask.active = true;
          } else {
            NodeHelp.getchildlable(this.node, "Have", null, function (comp, node) {
              node.active = false;
            });
            NodeHelp.getchildlable(this.node, "Button", null, function (comp, node) {
              node.active = true;
            });
            this.mask.active = false;
          }
        }
        /**
         * 
         * @returns 2为已领取1为可领取-1为不可领取
         */
        ;

        _proto.getConditionOver = function getConditionOver() {
          var ConditionOver = true;

          for (var _iterator3 = _createForOfIteratorHelperLoose(this.activity.Conditions), _step3; !(_step3 = _iterator3()).done;) {
            var condition = _step3.value;
            var config = ConfigFile.getTConditionInfoByConditionId(condition.ConditionModeId);

            if (config) {
              if (ConditionOver) {
                if (config.Compare == 0) ConditionOver = condition.MaxCondition - condition.nowCondition <= 0;else ConditionOver = condition.nowCondition - condition.MaxCondition <= 0;
              }
            }
          }

          if (ConditionOver && this.activity.TotalGet >= this.activity.TotalGetTime) return 2;else if (ConditionOver) return 1;else return -1;
        };

        _proto.clear = function clear() {
          this.activity = null;
          this.content.destroyAllChildren();
        };

        _proto.onclick = function onclick() {
          BagUIItemTip.getInstance().closeTip();
          if (this.mask.active) return;
          WebSocketMgr.send(MessageManager.Net.FarmActivityGetRequest, {
            ActivityModeId: this.activity.ActivityModeId
          });
        };

        return ActivityUpgradePackageItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "prefabItem", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "tip", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "content", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "mask", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ActivityUpgradePackageItemTipItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './UIManager.ts', './producer.ts', './NodeHelp.ts', './UIActivity.ts', './BagUIItemTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Input, Sprite, UITransform, Vec3, Label, Button, Component, ConfigFile, Configname, UIManager, producer, NodeHelp, UIActivity, BagUIItemTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Input = module.Input;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      Label = module.Label;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      UIActivity = module.UIActivity;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "5f0ddTX6lNEs6dBFxc8jbFO", "ActivityUpgradePackageItemTipItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActivityUpgradePackageItemTipItem = exports('ActivityUpgradePackageItemTipItem', (_dec = ccclass('ActivityUpgradePackageItemTipItem'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActivityUpgradePackageItemTipItem, _Component);

        function ActivityUpgradePackageItemTipItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "icon", _descriptor, _assertThisInitialized(_this));

          _this.index = 0;
          _this.signs = null;
          _this.parent = null;
          return _this;
        }

        var _proto = ActivityUpgradePackageItemTipItem.prototype;

        _proto.onEnable = function onEnable() {
          this.icon.on(Input.EventType.TOUCH_START, this.oniconStartTouch, this);
        };

        _proto.onDisable = function onDisable() {
          this.icon.off(Input.EventType.TOUCH_START, this.oniconStartTouch, this);
        };

        _proto.init = function init(signs, parent) {
          this.parent = parent;
          this.signs = signs;
          var sign = signs.split(",");
          NodeHelp.getchildlable(this.node, "Icon", Sprite, function (comp) {
            NodeHelp.loadIcon("propIcon/itemicon", sign[0].toString(), function (res) {
              comp.spriteFrame = res;
              var scale = NodeHelp.setScopeLimitation(comp.node.getComponent(UITransform), 44, 44);
              comp.node.setScale(new Vec3(scale, scale, 1));
            });
          });
          NodeHelp.getchildlable(this.node, "Label", Label, function (comp) {
            comp.string = "*" + sign[1];
          });
        };

        _proto.oniconStartTouch = function oniconStartTouch(event) {
          var node = event.target;
          var config = null;
          var reward = this.signs.split(",");
          config = ConfigFile.getItemData(Number(reward[0]));

          if (config) {
            var propTimeText = null;

            if (config.Type && (config.Type == 2 || config.Type == "2")) {
              var animalConfig = ConfigFile.getInstance().config.get(Configname.TAnimalInfo);

              if (animalConfig) {
                var animalConsumeTime = 0;
                animalConfig.forEach(function (v) {
                  if (v.AnimalConsumeId == config.ItemId && (animalConsumeTime == 0 || v.AnimalConsumeTime < animalConsumeTime)) {
                    animalConsumeTime = v.AnimalConsumeTime;
                  }
                });

                if (animalConsumeTime) {
                  propTimeText = producer.getTimeFormat(animalConsumeTime * Number(reward[1]));
                }
              }
            }

            var propName = ConfigFile.findLanguage(config.Name);
            var propText = ConfigFile.findLanguage(config.Tips);
            var activityUi = UIManager.getInstance().getUI(UIActivity);

            if (activityUi) {
              BagUIItemTip.getInstance().openTip(activityUi.TipParent || this.node.parent.parent, propName, propText, node.getComponent(Button), propTimeText);
            }
          }
        };

        return ActivityUpgradePackageItemTipItem;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "icon", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimalCtl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './EventManager.ts', './GameManager.ts', './MessageManager.ts', './TaskManager.ts', './OperaleDef.ts', './MainGame.ts', './NodeHelp.ts', './UIHelp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, _createClass, cclegacy, _decorator, Vec3, sp, Node, UIOpacity, tween, Color, math, UITransform, Size, resources, instantiate, Sprite, Label, SpriteFrame, Component, ConfigFile, EventManager, GameManager, MessageManager, TaskManager, OperaleDef, MainGame, NodeHelp, UIHelp;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      sp = module.sp;
      Node = module.Node;
      UIOpacity = module.UIOpacity;
      tween = module.tween;
      Color = module.Color;
      math = module.math;
      UITransform = module.UITransform;
      Size = module.Size;
      resources = module.resources;
      instantiate = module.instantiate;
      Sprite = module.Sprite;
      Label = module.Label;
      SpriteFrame = module.SpriteFrame;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      TaskManager = module.TaskManager;
    }, function (module) {
      OperaleDef = module.OperaleDef;
    }, function (module) {
      MainGame = module.MainGame;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      UIHelp = module.UIHelp;
    }],
    execute: function () {
      exports('ANIMALSTATE', void 0);

      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "c753beFFw5NAIHzoO5eV+uH", "AnimalCtl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; // int64   AnimalModeId        = 1;  //动物Modeid
      // int64   State          = 2; //状态 1=幼崽期 2=成熟期 3=死亡
      // int64   Count          = 3;//产物个数
      // int64   UnusualState   = 4;//植物异常状态 0 正常    1便便  2蚊子 3 生病 4饥饿
      // int64   NextStateTime  = 5;//下一个状态时间搓
      // int64   Get            = 6;//已收获产物
      // int64   Total          = 7;//总共可收获果实
      // int64   NextFeedTime   = 8;//下一次喂食时间搓

      var mapCellWeight = exports('mapCellWeight', 120);
      var mapCellHeight = exports('mapCellHeight', 120);
      var mapCellColNum = exports('mapCellColNum', 7);
      var mapCellRowNum = exports('mapCellRowNum', 4);
      var ANIMALSTATE;

      (function (ANIMALSTATE) {
        ANIMALSTATE[ANIMALSTATE["AS_IDLE"] = 1] = "AS_IDLE";
        ANIMALSTATE[ANIMALSTATE["AS_MOV1"] = 2] = "AS_MOV1";
        ANIMALSTATE[ANIMALSTATE["AS_MOV2"] = 3] = "AS_MOV2";
        ANIMALSTATE[ANIMALSTATE["AS_EAT"] = 4] = "AS_EAT";
        ANIMALSTATE[ANIMALSTATE["AS_DIE"] = 5] = "AS_DIE";
        ANIMALSTATE[ANIMALSTATE["AS_TURN"] = 6] = "AS_TURN";
      })(ANIMALSTATE || (ANIMALSTATE = exports('ANIMALSTATE', {})));

      var ExceptionIcon = ["", "2", "5", "1", "1"]; //0=左 1=右

      var DirectionConfig = [{
        //左下
        1: {
          animation: "idle_d",
          sx: 1,
          sy: 1
        },
        2: {
          animation: "walk_d",
          sx: 1,
          sy: 1
        },
        3: {
          animation: "walk_d",
          sx: 1,
          sy: 1
        },
        4: {
          animation: "random",
          sx: 1,
          sy: 1
        },
        5: {
          animation: "die",
          sx: 1,
          sy: 1
        }
      }, {
        //左上
        1: {
          animation: "idle_u",
          sx: 1,
          sy: 1
        },
        2: {
          animation: "walk_u",
          sx: -1,
          sy: 1
        },
        3: {
          animation: "walk_u",
          sx: 1,
          sy: 1
        },
        4: {
          animation: "random",
          sx: 1,
          sy: 1
        },
        5: {
          animation: "die",
          sx: 1,
          sy: 1
        }
      }, {
        //右下
        1: {
          animation: "idle_d",
          sx: -1,
          sy: 1
        },
        2: {
          animation: "walk_d",
          sx: -1,
          sy: 1
        },
        3: {
          animation: "walk_d",
          sx: 1,
          sy: 1
        },
        4: {
          animation: "random",
          sx: -1,
          sy: 1
        },
        5: {
          animation: "die",
          sx: 1,
          sy: 1
        }
      }, {
        //右上
        1: {
          animation: "idle_u",
          sx: -1,
          sy: 1
        },
        2: {
          animation: "walk_u",
          sx: 1,
          sy: 1
        },
        3: {
          animation: "walk_u",
          sx: 1,
          sy: 1
        },
        4: {
          animation: "random",
          sx: -1,
          sy: 1
        },
        5: {
          animation: "die",
          sx: 1,
          sy: 1
        }
      }];
      var temp_V3_1 = new Vec3();
      var AnimalCtl = exports('AnimalCtl', (_dec = ccclass('AnimalCtl'), _dec2 = property(sp.Skeleton), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AnimalCtl, _Component);

        function AnimalCtl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "animationCtl", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "YieldNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ExceptionNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "HungerNode", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "HeadEffectNode", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pickBG", _descriptor6, _assertThisInitialized(_this));

          _this.Direction = 0;
          _this.animationState = 0;
          _this.animationLastState = 0;
          _this.animationChangeTime = 0;
          _this.socketID = "";
          _this.animalModeId = 0;
          _this.State = 0;
          _this.Count = 0;
          _this.UnusualState = 0;
          _this.NextStateTime = 0;
          _this.NextYieldTime = 10;
          _this.Get = 0;
          _this.Total = 0;
          _this.NextFeedTime = 0;
          _this.HungerState = 0;
          _this.StealMap = null;
          _this.updateState = false;
          _this.HungerDeadTime = 0;
          _this.moveStartTime = 0;
          _this.moveStartPos = new Vec3();
          _this.moveTargetPos = new Vec3();
          _this.x = 0;
          _this.y = 1;
          _this.AITime = 0;
          _this.lastAiTime = 0;
          _this.moveSpeed = 0;
          _this.CanGetTime = 0;
          _this._aniLock = false;
          _this._lockTime = 0;
          _this.dirty = true;
          _this.pastureScript = null;
          _this.curAnimationState = 0;
          _this.Colors = ["#FFFFFF", "#696969"];
          return _this;
        }

        var _proto = AnimalCtl.prototype;

        _proto.isAnimationLock = function isAnimationLock() {
          if (this._aniLock && UIHelp.getTimeDiff(this._lockTime) < 4000) {
            return true;
          }

          return false;
        };

        _proto.setAnimationLock = function setAnimationLock(value) {
          if (value) {
            this._aniLock = true;
          } else {
            this._aniLock = false;
          }

          this._lockTime = UIHelp.getTimeMask();
        };

        _proto.layerAnalysis = function layerAnalysis() {
          var mg = GameManager.getInstance().getGame(MainGame);
          var layer1Node = mg.layer1.getChildByName("l1-3");
          var l1 = layer1Node.getChildByName(this.pastureScript.ID.toString());
          this.YieldNode.parent.parent = l1;
        };

        _proto.syncScale = function syncScale() {
          var game = GameManager.getInstance().getGame(MainGame);
          var scale = game.node.scale;
          var sx = 2.0 - scale.x;
          this.ExceptionNode.setScale(sx, sx, sx);
          this.YieldNode.setScale(sx, sx, sx);
          this.HungerNode.setScale(sx, sx, sx);
        };

        _proto.start = function start() {
          EventManager.getInstance().add(MessageManager.Custom.ScaleChange, this, this.syncScale); //this.animationCtl.on("play", this.onPlay, this);
          //this.animationCtl.on(Animation.EventType.STOP, this.onStop, this);
          //this.animationCtl.on("finished", this.onfinish, this);
          // this.YieldNode.active = false;
          // this.ExceptiondNode.active = false;

          var gc = ConfigFile.getGlobalInfoByGlobalId(24);
          if (gc) this.moveSpeed = gc.IntValue;else this.moveSpeed = 100;
          this.layerAnalysis(); //this.changeState(ANIMALSTATE.AS_IDLE);
        };

        _proto.onDestroy = function onDestroy() {
          EventManager.getInstance().removeAll(this);
        };

        _proto.replaceEx = function replaceEx() {
          var opacity = this.ExceptionNode.getComponentsInChildren(UIOpacity);

          for (var _iterator = _createForOfIteratorHelperLoose(opacity), _step; !(_step = _iterator()).done;) {
            var value = _step.value;
            value.opacity = 255;
          }

          this.ExceptionNode.setScale(1, 1, 1);
        } //异常消失
        ;

        _proto.plantHideEx = function plantHideEx(cb) {
          var opacity = this.ExceptionNode.getComponentsInChildren(UIOpacity);

          for (var _iterator2 = _createForOfIteratorHelperLoose(opacity), _step2; !(_step2 = _iterator2()).done;) {
            var value = _step2.value;
            tween(value).to(0.5, {
              opacity: 0
            }).start();
          }

          tween(this.ExceptionNode).to(0.5, {
            scale: new Vec3(0, 0, 0)
          }).call(function () {
            cb && cb();
          }).start();
        };

        _proto.bodyHideEx = function bodyHideEx(cb) {
          tween(this.animationCtl.node).to(0.5, {
            scale: new Vec3(0, 0, 0)
          }).call(function () {
            cb && cb();
          }).start();
        };

        _proto.setUpdateState = function setUpdateState(value) {
          this.updateState = value;
        };

        _proto.isIdle = function isIdle() {
          return this.animationState == ANIMALSTATE.AS_IDLE && this.State != 3;
        };

        _proto.playHeadEffect = function playHeadEffect(name, type, data, cb) {
          if (this.isAnimationLock()) return;
          var mg = GameManager.getInstance().getGame(MainGame);

          if (type != 3) {
            mg.playEffect(this.HeadEffectNode, name, cb);
          } else {
            mg.playEffect(this.node, name, cb);
          }

          this.setAnimationLock(true);
        };

        _proto.playState = function playState(state) {
          var d = DirectionConfig[this.Direction];
          var c = d[state.toString()];
          if (!this.animationCtl) return;

          if (this.animationCtl.node.scale.x != c.sx) {
            this.animationCtl.node.setScale(new Vec3(c.sx, c.sy, 1));
            this.playAnimation(c.animation);
          } else {
            this.playAnimation(c.animation);
          }
        };

        _proto.changeState = function changeState(value) {
          var _this2 = this; //if (this.animationState == value) return;


          this.animationLastState = this.animationState;
          this.animationState = value;
          this.animationChangeTime = UIHelp.getTimeMask();

          switch (this.animationState) {
            case ANIMALSTATE.AS_IDLE:
              this.playState(ANIMALSTATE.AS_IDLE);
              break;

            case ANIMALSTATE.AS_MOV1:
              this.playState(ANIMALSTATE.AS_IDLE);
              this.scheduleOnce(function () {
                _this2.playState(ANIMALSTATE.AS_MOV1);
              }, 0.2);
              break;

            case ANIMALSTATE.AS_MOV2:
              this.playState(ANIMALSTATE.AS_IDLE);
              this.scheduleOnce(function () {
                _this2.playState(ANIMALSTATE.AS_MOV2);
              }, 0.2);
              break;

            case ANIMALSTATE.AS_EAT:
              this.playState(ANIMALSTATE.AS_IDLE);
              this.scheduleOnce(function () {
                _this2.playState(ANIMALSTATE.AS_EAT);
              }, 0.2);
              break;

            case ANIMALSTATE.AS_TURN:
              break;

            case ANIMALSTATE.AS_DIE:
              this.playState(ANIMALSTATE.AS_DIE);

              if (this.animationCtl) {
                this.animationCtl.color = new Color().fromHEX(this.Colors[1]);
              } //this.animationCtl.stop();


              break;
          }
        };

        _proto.ConverPos = function ConverPos(x, y) {
          var hx = mapCellColNum * mapCellWeight / 2;
          var hy = mapCellRowNum * mapCellHeight / 2; //放在每个单元的中心点

          var offsetX = x * mapCellWeight - hx + mapCellWeight / 2;
          var offsetY = y * mapCellHeight - hy + mapCellHeight / 2;
          return new Vec3(offsetX, offsetY, 0);
        };

        _proto.setPos = function setPos(x, y) {
          this.x = x;
          this.y = y;
          var pos = this.ConverPos(x, y);
          this.node.setPosition(pos);
          this.ExceptionNode.parent.setPosition(pos);
        };

        _proto.getMaskIndex = function getMaskIndex() {
          return this.y * mapCellColNum + this.x;
        };

        _proto.moveTo = function moveTo(dirindex, x, y) {
          if (this.animationState != ANIMALSTATE.AS_IDLE) return;
          this.x += x;
          this.y += y;
          this.Direction = dirindex;
          this.node.getPosition(this.moveStartPos);
          this.moveTargetPos.set(this.ConverPos(this.x, this.y));
          this.moveStartTime = UIHelp.getTimeMask();
          this.changeState(ANIMALSTATE.AS_MOV1);
          this.updateAITime();
        };

        _proto.eat = function eat() {
          if (this.animationState != ANIMALSTATE.AS_IDLE) return;
          this.changeState(ANIMALSTATE.AS_EAT);
          this.updateAITime();
        };

        _proto.onStop = function onStop(type, state) {
          //console.log("onStop==>", type);
          if (this.animationState == ANIMALSTATE.AS_IDLE) this.playState(ANIMALSTATE.AS_IDLE);else if (this.animationState == ANIMALSTATE.AS_MOV1) this.playState(ANIMALSTATE.AS_MOV1);else if (this.animationState == ANIMALSTATE.AS_MOV2) this.playState(ANIMALSTATE.AS_MOV2);else if (this.animationState == ANIMALSTATE.AS_EAT) this.changeState(ANIMALSTATE.AS_IDLE);
        };

        _proto.onPlay = function onPlay(type, state) {
          console.log("onPlay==>", type);
        };

        _proto.onfinish = function onfinish(type, state) {};

        _proto.getExceptionActionCode = function getExceptionActionCode() {
          if (this.UnusualState == 1) {
            return OperaleDef.CLEANING;
          } else if (this.UnusualState == 2) {
            return OperaleDef.FUMIGATE;
          } else if (this.UnusualState == 3) {
            return OperaleDef.REMEDY;
          }

          return OperaleDef.NONE;
        };

        _proto.canOperale = function canOperale(mode, data, show) {
          if (mode == OperaleDef.COLLECT) {
            if (this.Count > 0) return true;
          } else if (mode == OperaleDef.CLEANING) {
            if (this.UnusualState == 1) return true;
          } else if (mode == OperaleDef.FUMIGATE) {
            if (this.UnusualState == 2) return true;
          } else if (mode == OperaleDef.REMEDY) {
            if (this.UnusualState == 3) return true;
          } else if (mode == OperaleDef.CLEARDIE) {
            if (this.State == 3) return true;
          } else if (mode == OperaleDef.STEALANIMAL) {
            return true;
          }

          return false;
        };

        _proto.updateAITime = function updateAITime() {
          var timestring = "5,30";
          var gc = ConfigFile.getGlobalInfoByGlobalId(23);
          if (gc && gc.Text) timestring = gc.Text;
          var m1 = ConfigFile.getLimitInfo(timestring);
          this.AITime = math.randomRangeInt(m1.id, m1.val) * 1000;
        };

        _proto.setlayerIndex = function setlayerIndex(index) {
          this.node.setSiblingIndex(index);
          this.YieldNode.parent.setSiblingIndex(index);
        };

        _proto.initAnimal = function initAnimal(pastureScript, id, data) {
          this.AITime = 1000;
          this.pastureScript = pastureScript;
          this.updateAITime();
          this.changeState(ANIMALSTATE.AS_IDLE);
          this.socketID = id;
          if (this.animationCtl) this.animationCtl.node.setScale(1, 1, 1);
          this.Direction = math.randomRangeInt(0, 2);
          this.dataChange(data);
          this.loadAnimantion();
        };

        _proto.onSpingComplete = function onSpingComplete(trackEntry) {
          if (this.animationState == ANIMALSTATE.AS_IDLE) this.playState(ANIMALSTATE.AS_IDLE);else if (this.animationState == ANIMALSTATE.AS_MOV1) this.playState(ANIMALSTATE.AS_MOV1);else if (this.animationState == ANIMALSTATE.AS_MOV2) this.playState(ANIMALSTATE.AS_MOV2);else if (this.animationState == ANIMALSTATE.AS_EAT) this.changeState(ANIMALSTATE.AS_IDLE);
        };

        _proto.loadAnimantion = function loadAnimantion() {
          var _this3 = this;

          var self = this;
          var animal = ConfigFile.getAnimalFromModeId(this.animalModeId);
          var itemConfig = ConfigFile.getItemData(animal.AnimalCubId);

          if (itemConfig.ItemWidth && itemConfig.ItemHigh) {
            this.pickBG.getComponent(UITransform).setContentSize(new Size(itemConfig.ItemWidth, itemConfig.ItemHigh));
          }

          this.curAnimationState = this.State;
          var amid = animal.AnimalCubId;
          if (this.State == 1) amid -= 100;
          var name = "animal/" + amid;
          resources.load(name, function (error, res) {
            if (res) {
              var newani = instantiate(res);
              var script = newani.getComponent(sp.Skeleton);

              var body = _this3.node.getChildByName("body");

              body.removeAllChildren();
              newani.parent = body;
              _this3.animationCtl = script;

              _this3.animationCtl.setCompleteListener(_this3.onSpingComplete.bind(_this3));

              var as = _this3.animationState;
              _this3.animationState = ANIMALSTATE.AS_TURN;
              self.changeState(as);
              TaskManager.getInstance().onDataResponse("LandBreed", {
                select: _this3.pastureScript,
                animal: _this3
              });
            }
          });
        };

        _proto.setHungerInfo = function setHungerInfo(show) {
          var sp = this.HungerNode.children[1].getComponent(Sprite);

          if (show) {
            var animal = ConfigFile.getAnimalFromModeId(this.animalModeId);
            this.HungerNode.active = true;
            NodeHelp.loadIcon("propIcon/itemicon", animal.AnimalConsumeId.toString(), function (res) {
              sp.spriteFrame = res;
            });
          } else {
            sp.spriteFrame = null;
            this.HungerNode.active = false;
          }
        };

        _proto.setYieldInfo = function setYieldInfo(show) {
          var sp = this.YieldNode.children[1].getComponent(Sprite);
          var text = this.YieldNode.children[2].getComponent(Label);

          if (show) {
            var animal = ConfigFile.getAnimalFromModeId(this.animalModeId);
            this.YieldNode.active = true;
            text.string = "X" + this.Count;
            NodeHelp.loadIcon("propIcon/itemicon", animal.AnimalHusbandId.toString(), function (res) {
              sp.spriteFrame = res;
              var scale = NodeHelp.setScopeLimitation(sp.node.getComponent(UITransform), 80, 80);
              sp.node.setScale(new Vec3(scale, scale, 1));
            });
          } else {
            sp.spriteFrame = null;
            text.string = "";
            this.YieldNode.active = false;
          }
        };

        _proto.setExceptionInfo = function setExceptionInfo(show) {
          var sp = this.ExceptionNode.children[1].getComponent(Sprite);

          if (show) {
            this.replaceEx();
            var animal = ConfigFile.getAnimalFromModeId(this.animalModeId);
            this.ExceptionNode.active = true;

            if (this.UnusualState > 0 && this.UnusualState < 4) {
              var name = "icon/" + ExceptionIcon[this.UnusualState] + "/spriteFrame";
              resources.load(name, SpriteFrame, function (error, res) {
                if (res && sp && sp.isValid) {
                  sp.spriteFrame = res;
                }

                if (error) {
                  console.log("加载动物异常图 ==>", error);
                }
              });
            } else if (this.UnusualState == 4) {
              NodeHelp.loadIcon("propIcon/itemicon", animal.AnimalConsumeId.toString(), function (res) {
                sp.spriteFrame = res;
              });
            }
          } else {
            sp.spriteFrame = null;
            this.ExceptionNode.active = false;
          }
        };

        _proto.dataChange = function dataChange(data) {
          var oldCount = this.Count;
          var oldUnusualState = this.UnusualState;
          this.updateState = true;
          this.animalModeId = data.AnimalModeId;
          this.State = data.State;
          this.Count = data.Count;
          this.UnusualState = data.UnusualState;
          this.NextStateTime = data.NextStateTime;
          this.Get = data.Get;
          this.Total = data.Total;
          this.NextFeedTime = data.NextFeedTime;
          this.HungerState = data.HungerState;
          this.StealMap = data.StealMap;
          this.HungerDeadTime = data.HungerDeadTime;
          this.CanGetTime = data.CanGetTime;

          if (this.State == 3) {
            this.changeState(ANIMALSTATE.AS_DIE);
            this.setExceptionInfo(false);
            this.setYieldInfo(false);
            this.setHungerInfo(false);
            var game = GameManager.getInstance().getGame(MainGame);
            var obtn = game.getOperaBtnData();

            if (obtn && obtn.select == this) {
              if (obtn.mode != OperaleDef.CLEARDIE) {
                game.closeOperaleBtn();
              }
            }
          } else {
            if (this.UnusualState > 0) {
              this.setExceptionInfo(true);
            } else {
              this.setExceptionInfo(false);
            }

            if (this.Count > 0) {
              this.setYieldInfo(true);
            } else {
              this.setYieldInfo(false);
            }

            if (this.HungerState == 1) {
              this.setHungerInfo(true);
            } else {
              this.setHungerInfo(false);
            }
          }

          if (oldCount != this.Count || oldUnusualState != this.UnusualState) {
            var _game = GameManager.getInstance().getGame(MainGame);

            var tiptarget = _game.getTipAnimal();

            if (tiptarget && tiptarget == this) {
              _game.closeTip();
            }
          }

          if (this.curAnimationState != this.State) {
            this.loadAnimantion();
          }
        };

        _proto.playAnimation = function playAnimation(id) {
          // if(this.State == 1 && id<5){
          //     id = Number(id)+6;
          // }
          if (!this.animationCtl) return;

          if (this.animationCtl.animation == id && (id == "die" || id == "die2")) {
            return;
          }

          this.animationCtl.animation = id;
        };

        _proto.release = function release() {
          this.YieldNode.parent.parent = null;
          this.node.destroy();
        };

        _proto.onMove = function onMove() {};

        _proto.update = function update(deltaTime) {
          if (this.animationState === ANIMALSTATE.AS_MOV1) {
            var curTime = (UIHelp.getTimeMask() - this.moveStartTime) / 4000;

            if (curTime >= 1.0) {
              curTime = 1.0;
              this.changeState(ANIMALSTATE.AS_IDLE);
            }

            Vec3.lerp(temp_V3_1, this.moveStartPos, this.moveTargetPos, curTime);
            this.node.setPosition(temp_V3_1);
            this.ExceptionNode.parent.setPosition(temp_V3_1);
            this.dirty = true;
          } else if (this.animationState === ANIMALSTATE.AS_MOV2) {
            var _curTime = (UIHelp.getTimeMask() - this.moveStartTime) / 4000;

            if (_curTime >= 1.0) {
              _curTime = 1.0;
              this.changeState(ANIMALSTATE.AS_IDLE);
            }

            Vec3.lerp(temp_V3_1, this.moveStartPos, this.moveTargetPos, _curTime);
            this.node.setPosition(temp_V3_1);
            this.ExceptionNode.parent.setPosition(temp_V3_1);
            this.dirty = true;
          }
        };

        _proto.hungerClick = function hungerClick() {
          if (this.pastureScript) {
            this.pastureScript.showAnimalTip(this);
          }
        };

        _createClass(AnimalCtl, [{
          key: "socket",
          get: function get() {
            return this.socketID;
          }
        }]);

        return AnimalCtl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "animationCtl", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "YieldNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "ExceptionNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "HungerNode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "HeadEffectNode", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "pickBG", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimalInfoTip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './producer.ts', './NodeHelp.ts', './UIHelp.ts', './BaseTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Sprite, Node, ConfigFile, producer, NodeHelp, UIHelp, BaseTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Sprite = module.Sprite;
      Node = module.Node;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      BaseTip = module.BaseTip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "34d94P2mOVOCqHGUvDB0j8U", "AnimalInfoTip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AnimalInfoTip = exports('AnimalInfoTip', (_dec = ccclass('AnimalInfoTip'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Label), _dec8 = property(Sprite), _dec9 = property(Node), _dec10 = property(Node), _dec11 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseTip) {
        _inheritsLoose(AnimalInfoTip, _BaseTip);

        function AnimalInfoTip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseTip.call.apply(_BaseTip, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "Name", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "State", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Color", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "V1", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Text", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "time", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "image", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "consume", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Bar", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labConsume", _descriptor10, _assertThisInitialized(_this));

          _this._updateTime = 0;
          return _this;
        }

        var _proto = AnimalInfoTip.prototype;

        _proto.setBar = function setBar(index) {
          if (index < 2) {
            this.Bar.children[0].active = true;
            this.Bar.children[1].active = false;
          } else {
            this.Bar.children[0].active = false;
            this.Bar.children[1].active = true;
          }
        };

        _proto.updateText = function updateText(arg) {
          if (!arg) return;
          var self = this; //this.Name.string = arg.name;

          producer.replaceDefaultColor(this.Name, arg.name); //this.State.string = arg.state;

          producer.replaceDefaultColor(this.State, arg.state);
          this.Text.string = arg.text;
          this.labConsume.string = ConfigFile.findLanguage(101716);
          this.setBar(arg.StateIndex);

          if (arg.consumeId) {
            this.consume.active = true;
            NodeHelp.loadIcon("propIcon/itemicon", arg.consumeId.toString(), function (res) {
              self.image.spriteFrame = res;
            });
            this.time.string = arg.consumeTime;
          } else {
            this.consume.active = false;
          }

          if (arg.color) {
            this.Color.node.active = true;
            producer.replaceDefaultColor(this.Color, arg.color); //this.Color.string = arg.color;
          } else {
            this.Color.node.active = false;
          } //this.LV.string = arg.lv;


          if (arg.v1) {
            this.V1.node.active = true;
            this.V1.string = arg.v1;
          } else {
            this.V1.node.active = false;
          }
        };

        _proto.initUI = function initUI(arg) {
          this.popHeight = 100;
          this._cbData = arg;

          _BaseTip.prototype.initUI.call(this, arg);

          this.updateText(arg);
        };

        _proto.upText = function upText() {
          var select = this._cbData.select;
          var animal = this._cbData.animal;

          if (select && animal) {
            var info = select.getAnimalTip(animal);

            if (info) {
              this.updateText(info);
            }
          }
        };

        _proto.update = function update(deltaTime) {
          _BaseTip.prototype.update.call(this, deltaTime);

          if (UIHelp.getTimeDiff(this._updateTime) > 1000) {
            this._updateTime = UIHelp.getTimeMask();
            this.upText();
          }
        };

        return AnimalInfoTip;
      }(BaseTip), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Name", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "State", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "Color", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "V1", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "Text", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "time", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "image", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "consume", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "Bar", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "labConsume", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnswerItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './producer.ts', './NodeHelp.ts', './BagUIItemTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Node, Label, Input, UITransform, Vec3, Button, Component, ConfigFile, Configname, producer, NodeHelp, BagUIItemTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Node = module.Node;
      Label = module.Label;
      Input = module.Input;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "00d94XurXhGDpR2D0CQBGhM", "AnswerItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AnswerItem = exports('AnswerItem', (_dec = ccclass('AnswerItem'), _dec2 = property(Sprite), _dec3 = property(Node), _dec4 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AnswerItem, _Component);

        function AnswerItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "icon", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeIcon", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Text", _descriptor3, _assertThisInitialized(_this));

          _this.itemID = 0;
          _this.itemCnt = 0;
          return _this;
        }

        var _proto = AnswerItem.prototype;

        _proto.onEnable = function onEnable() {
          this.nodeIcon.on(Input.EventType.TOUCH_END, this.oniconStartTouch, this);
        };

        _proto.onDisable = function onDisable() {
          this.nodeIcon.off(Input.EventType.TOUCH_END, this.oniconStartTouch, this);
        };

        _proto.start = function start() {};

        _proto.setScopeLimitation = function setScopeLimitation(ui, sizew, sizeh) {
          var scale = 1;
          var scaleH = 1;
          var scaleW = 1;
          if (sizew && ui.width > sizew) scaleW = sizew / ui.width;
          if (sizeh && ui.height > sizeh) scaleH = sizeh / ui.height;
          scale = scaleW < scaleH ? scaleW : scaleH;
          return scale;
        };

        _proto.initUI = function initUI(itemID, Cnt) {
          var _this2 = this;

          if (!this.icon) {
            return;
          }

          var self = this;
          this.itemID = itemID;
          this.itemCnt = Cnt;
          if (Cnt > 0) this.Text.string = "X" + Cnt;else this.Text.string = "";
          NodeHelp.loadIcon("propIcon/itemicon", itemID.toString(), function (res) {
            if (res && self.icon) {
              self.icon.spriteFrame = res;

              var scale = _this2.setScopeLimitation(self.icon.node.getComponent(UITransform), 90, 90);

              self.icon.node.setScale(new Vec3(scale, scale, 1));
            }
          });
        };

        _proto.oniconStartTouch = function oniconStartTouch(event) {
          var node = event.target;
          var config = null;
          config = ConfigFile.getItemData(this.itemID);

          if (config) {
            var propTimeText = null;

            if (config.Type && (config.Type == 2 || config.Type == "2")) {
              var animalConfig = ConfigFile.getInstance().config.get(Configname.TAnimalInfo);

              if (animalConfig) {
                var animalConsumeTime = 0;
                animalConfig.forEach(function (v) {
                  if (v.AnimalConsumeId == config.ItemId && (animalConsumeTime == 0 || v.AnimalConsumeTime < animalConsumeTime)) {
                    animalConsumeTime = v.AnimalConsumeTime;
                  }
                });

                if (animalConsumeTime) {
                  propTimeText = producer.getTimeFormat(animalConsumeTime * (this.itemCnt || 1));
                }
              }
            }

            var propName = ConfigFile.findLanguage(config.Name);
            var propText = ConfigFile.findLanguage(config.Tips);
            BagUIItemTip.getInstance().openTip(this.node.parent.parent.parent || this.node.parent.parent || this.node.parent, propName, propText, node.getComponent(Button), propTimeText);
          }
        };

        return AnswerItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "icon", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "nodeIcon", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "Text", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AreaCodeConfig.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6bd9fbMjKpL3a8aaGey1pAo", "AreaCodeConfig", undefined);

      var AreaCodeConfig = exports('AreaCodeConfig', [// {
      //     "language_id": "zh_cn",
      //     "Countryname": "Hong Kong, China",
      //     "codeNumber": "852"
      // },
      {
        "language_id": "",
        "Countryname": "Angola",
        "codeNumber": "244"
      }, {
        "language_id": "",
        "Countryname": "Afghanistan",
        "codeNumber": "93"
      }, {
        "language_id": "",
        "Countryname": "Albania",
        "codeNumber": "355"
      }, {
        "language_id": "",
        "Countryname": "Algeria",
        "codeNumber": "213"
      }, {
        "language_id": "",
        "Countryname": "Republic of Andorra",
        "codeNumber": "376"
      }, {
        "language_id": "",
        "Countryname": "Anguilla island",
        "codeNumber": "1264"
      }, {
        "language_id": "",
        "Countryname": "Antigua and Barbuda",
        "codeNumber": "1268"
      }, {
        "language_id": "",
        "Countryname": "Argentina",
        "codeNumber": "54"
      }, {
        "language_id": "",
        "Countryname": "Armenia",
        "codeNumber": "374"
      }, {
        "language_id": "",
        "Countryname": "Ascension",
        "codeNumber": "247"
      }, {
        "language_id": "",
        "Countryname": "Australia",
        "codeNumber": "61"
      }, {
        "language_id": "",
        "Countryname": "Austria",
        "codeNumber": "43"
      }, {
        "language_id": "",
        "Countryname": "Azerbaijan",
        "codeNumber": "994"
      }, {
        "language_id": "",
        "Countryname": "Bahamas",
        "codeNumber": "1242"
      }, {
        "language_id": "",
        "Countryname": "Bahrain",
        "codeNumber": "973"
      }, {
        "language_id": "",
        "Countryname": "Bangladesh",
        "codeNumber": "880"
      }, {
        "language_id": "",
        "Countryname": "Barbados",
        "codeNumber": "1246"
      }, {
        "language_id": "",
        "Countryname": "Belarus",
        "codeNumber": "375"
      }, {
        "language_id": "nl_be",
        "Countryname": "Belgium",
        "codeNumber": "32"
      }, {
        "language_id": "",
        "Countryname": "Belize",
        "codeNumber": "501"
      }, {
        "language_id": "",
        "Countryname": "Benin",
        "codeNumber": "229"
      }, {
        "language_id": "",
        "Countryname": "Bermuda",
        "codeNumber": "1441"
      }, {
        "language_id": "",
        "Countryname": "Bolivia",
        "codeNumber": "591"
      }, {
        "language_id": "",
        "Countryname": "Botswana",
        "codeNumber": "267"
      }, {
        "language_id": "",
        "Countryname": "Brazil",
        "codeNumber": "55"
      }, {
        "language_id": "",
        "Countryname": "Brunei",
        "codeNumber": "673"
      }, {
        "language_id": "",
        "Countryname": "Bulgaria",
        "codeNumber": "359"
      }, {
        "language_id": "",
        "Countryname": "Burkina Faso",
        "codeNumber": "226"
      }, // {
      //     "language_id": "",
      //     "Countryname": "Myanmar",
      //     "codeNumber": "95"
      // },
      {
        "language_id": "",
        "Countryname": "Burundi",
        "codeNumber": "257"
      }, {
        "language_id": "",
        "Countryname": "Cameroon",
        "codeNumber": "237"
      }, {
        "language_id": "en_us",
        "Countryname": "United States",
        "codeNumber": "1"
      }, {
        "language_id": "",
        "Countryname": "Cayman Islands",
        "codeNumber": "1345"
      }, {
        "language_id": "",
        "Countryname": "Central African Republic",
        "codeNumber": "236"
      }, {
        "language_id": "",
        "Countryname": "Chad",
        "codeNumber": "235"
      }, {
        "language_id": "",
        "Countryname": "Chile",
        "codeNumber": "56"
      }, {
        "language_id": "",
        "Countryname": "Colombia",
        "codeNumber": "57"
      }, {
        "language_id": "",
        "Countryname": "Congo",
        "codeNumber": "242"
      }, {
        "language_id": "",
        "Countryname": "Cook Islands",
        "codeNumber": "682"
      }, {
        "language_id": "",
        "Countryname": "Costa Rica",
        "codeNumber": "506"
      }, {
        "language_id": "",
        "Countryname": "Cuba",
        "codeNumber": "53"
      }, {
        "language_id": "",
        "Countryname": "Cyprus",
        "codeNumber": "357"
      }, {
        "language_id": "cs_cz",
        "Countryname": "Czech Republic",
        "codeNumber": "420"
      }, {
        "language_id": "da_dk",
        "Countryname": "Denmark",
        "codeNumber": "45"
      }, {
        "language_id": "",
        "Countryname": "Djibouti",
        "codeNumber": "253"
      }, {
        "language_id": "",
        "Countryname": "Ecuador",
        "codeNumber": "593"
      }, {
        "language_id": "",
        "Countryname": "Egypt",
        "codeNumber": "20"
      }, {
        "language_id": "",
        "Countryname": "El Salvador",
        "codeNumber": "503"
      }, {
        "language_id": "",
        "Countryname": "Estonia",
        "codeNumber": "372"
      }, {
        "language_id": "",
        "Countryname": "Ethiopia",
        "codeNumber": "251"
      }, {
        "language_id": "",
        "Countryname": "Fiji",
        "codeNumber": "679"
      }, {
        "language_id": "fi_fi",
        "Countryname": "Finland",
        "codeNumber": "358"
      }, {
        "language_id": "fr_fr",
        "Countryname": "France",
        "codeNumber": "33"
      }, {
        "language_id": "",
        "Countryname": "French Guiana",
        "codeNumber": "594"
      }, {
        "language_id": "",
        "Countryname": "Gabon",
        "codeNumber": "241"
      }, {
        "language_id": "",
        "Countryname": "Gambia",
        "codeNumber": "220"
      }, {
        "language_id": "",
        "Countryname": "Georgia",
        "codeNumber": "995"
      }, {
        "language_id": "de_de",
        "Countryname": "Germany",
        "codeNumber": "49"
      }, {
        "language_id": "",
        "Countryname": "Ghana",
        "codeNumber": "233"
      }, {
        "language_id": "",
        "Countryname": "Gibraltar",
        "codeNumber": "350"
      }, {
        "language_id": "el_gr",
        "Countryname": "Greece",
        "codeNumber": "30"
      }, {
        "language_id": "",
        "Countryname": "Grenada",
        "codeNumber": "1473"
      }, {
        "language_id": "",
        "Countryname": "Guam",
        "codeNumber": "1671"
      }, {
        "language_id": "",
        "Countryname": "Guatemala",
        "codeNumber": "502"
      }, {
        "language_id": "",
        "Countryname": "guinea",
        "codeNumber": "224"
      }, {
        "language_id": "",
        "Countryname": "Guyana",
        "codeNumber": "592"
      }, {
        "language_id": "",
        "Countryname": "Haiti",
        "codeNumber": "509"
      }, {
        "language_id": "",
        "Countryname": "Honduras",
        "codeNumber": "504"
      }, {
        "language_id": "hu_hu",
        "Countryname": "Hungary",
        "codeNumber": "36"
      }, {
        "language_id": "",
        "Countryname": "Iceland",
        "codeNumber": "354"
      }, {
        "language_id": "",
        "Countryname": "India",
        "codeNumber": "91"
      }, {
        "language_id": "",
        "Countryname": "Indonesia",
        "codeNumber": "62"
      }, {
        "language_id": "",
        "Countryname": "Iran",
        "codeNumber": "98"
      }, {
        "language_id": "",
        "Countryname": "Iraq",
        "codeNumber": "964"
      }, {
        "language_id": "",
        "Countryname": "Ireland",
        "codeNumber": "353"
      }, {
        "language_id": "he_il",
        "Countryname": "Israel",
        "codeNumber": "972"
      }, {
        "language_id": "it_it",
        "Countryname": "Italy",
        "codeNumber": "39"
      }, {
        "language_id": "",
        "Countryname": "Jamaica",
        "codeNumber": "1876"
      }, {
        "language_id": "ja_jp",
        "Countryname": "Japan",
        "codeNumber": "81"
      }, {
        "language_id": "",
        "Countryname": "Jordan",
        "codeNumber": "962"
      }, // {
      //     "language_id": "",
      //     "Countryname": "Cambodia",
      //     "codeNumber": "855"
      // },
      {
        "language_id": "ru_ru",
        "Countryname": "Russia",
        "codeNumber": "7"
      }, {
        "language_id": "",
        "Countryname": "Kenya",
        "codeNumber": "254"
      }, {
        "language_id": "ko_kr",
        "Countryname": "Korea",
        "codeNumber": "82"
      }, {
        "language_id": "",
        "Countryname": "Kuwait",
        "codeNumber": "965"
      }, {
        "language_id": "",
        "Countryname": "Kyrgyzstan",
        "codeNumber": "996"
      }, {
        "language_id": "",
        "Countryname": "Laos",
        "codeNumber": "856"
      }, {
        "language_id": "",
        "Countryname": "Latvia",
        "codeNumber": "371"
      }, {
        "language_id": "",
        "Countryname": "Lebanon",
        "codeNumber": "961"
      }, {
        "language_id": "",
        "Countryname": "Lesotho",
        "codeNumber": "266"
      }, {
        "language_id": "",
        "Countryname": "Liberia",
        "codeNumber": "231"
      }, {
        "language_id": "",
        "Countryname": "Libya",
        "codeNumber": "218"
      }, {
        "language_id": "",
        "Countryname": "Liechtenstein",
        "codeNumber": "423"
      }, {
        "language_id": "",
        "Countryname": "Lithuania",
        "codeNumber": "370"
      }, {
        "language_id": "",
        "Countryname": "Luxembourg",
        "codeNumber": "352"
      }, {
        "language_id": "",
        "Countryname": "Macao (China)",
        "codeNumber": "853"
      }, {
        "language_id": "",
        "Countryname": "Madagascar",
        "codeNumber": "261"
      }, {
        "language_id": "",
        "Countryname": "Malawi",
        "codeNumber": "265"
      }, {
        "language_id": "",
        "Countryname": "Malaysia",
        "codeNumber": "60"
      }, {
        "language_id": "",
        "Countryname": "Maldives",
        "codeNumber": "960"
      }, {
        "language_id": "",
        "Countryname": "Mali",
        "codeNumber": "223"
      }, {
        "language_id": "",
        "Countryname": "Malta",
        "codeNumber": "356"
      }, {
        "language_id": "",
        "Countryname": "Mariana Islands",
        "codeNumber": "1670"
      }, {
        "language_id": "",
        "Countryname": "Martinique",
        "codeNumber": "596"
      }, {
        "language_id": "",
        "Countryname": "Mauritius",
        "codeNumber": "230"
      }, {
        "language_id": "",
        "Countryname": "Mexico",
        "codeNumber": "52"
      }, {
        "language_id": "",
        "Countryname": "Moldova",
        "codeNumber": "373"
      }, {
        "language_id": "",
        "Countryname": "Monaco",
        "codeNumber": "377"
      }, {
        "language_id": "",
        "Countryname": "Mongolia",
        "codeNumber": "976"
      }, {
        "language_id": "",
        "Countryname": "Montserrat",
        "codeNumber": "1664"
      }, {
        "language_id": "",
        "Countryname": "Morocco",
        "codeNumber": "212"
      }, {
        "language_id": "",
        "Countryname": "Mozambique",
        "codeNumber": "258"
      }, {
        "language_id": "",
        "Countryname": "Namibia",
        "codeNumber": "264"
      }, {
        "language_id": "",
        "Countryname": "Nauru",
        "codeNumber": "674"
      }, {
        "language_id": "",
        "Countryname": "Nepal",
        "codeNumber": "977"
      }, {
        "language_id": "",
        "Countryname": "Netherlands Antilles",
        "codeNumber": "599"
      }, {
        "language_id": "nl_nl",
        "Countryname": "Netherlands",
        "codeNumber": "31"
      }, {
        "language_id": "",
        "Countryname": "New Zealand",
        "codeNumber": "64"
      }, {
        "language_id": "",
        "Countryname": "Nicaragua",
        "codeNumber": "505"
      }, {
        "language_id": "",
        "Countryname": "Niger",
        "codeNumber": "227"
      }, {
        "language_id": "",
        "Countryname": "Nigeria",
        "codeNumber": "234"
      }, {
        "language_id": "",
        "Countryname": "North Korea",
        "codeNumber": "850"
      }, {
        "language_id": "no_no",
        "Countryname": "Norway",
        "codeNumber": "47"
      }, {
        "language_id": "",
        "Countryname": "Oman",
        "codeNumber": "968"
      }, {
        "language_id": "",
        "Countryname": "Pakistan",
        "codeNumber": "92"
      }, {
        "language_id": "",
        "Countryname": "Panama",
        "codeNumber": "507"
      }, {
        "language_id": "",
        "Countryname": "Papua New Guinea",
        "codeNumber": "675"
      }, {
        "language_id": "",
        "Countryname": "Paraguay",
        "codeNumber": "595"
      }, {
        "language_id": "",
        "Countryname": "Peru",
        "codeNumber": "51"
      }, {
        "language_id": "",
        "Countryname": "Philippines",
        "codeNumber": "63"
      }, {
        "language_id": "pl_pl",
        "Countryname": "Poland",
        "codeNumber": "48"
      }, {
        "language_id": "",
        "Countryname": "French Polynesia",
        "codeNumber": "689"
      }, {
        "language_id": "pt_pt",
        "Countryname": "Portugal",
        "codeNumber": "351"
      }, {
        "language_id": "",
        "Countryname": "Puerto Rico",
        "codeNumber": "1787"
      }, {
        "language_id": "",
        "Countryname": "Qatar",
        "codeNumber": "974"
      }, {
        "language_id": "",
        "Countryname": "Reunion",
        "codeNumber": "262"
      }, {
        "language_id": "",
        "Countryname": "Romania",
        "codeNumber": "40"
      }, {
        "language_id": "",
        "Countryname": "Saint Lucia",
        "codeNumber": "1758"
      }, {
        "language_id": "",
        "Countryname": "Saint Vincent island",
        "codeNumber": "1784"
      }, {
        "language_id": "",
        "Countryname": "Eastern Samoa (United States)",
        "codeNumber": "684"
      }, {
        "language_id": "",
        "Countryname": "Western Samoa",
        "codeNumber": "685"
      }, {
        "language_id": "",
        "Countryname": "San Marino",
        "codeNumber": "378"
      }, {
        "language_id": "",
        "Countryname": " Sao Tome and Principe",
        "codeNumber": "239"
      }, {
        "language_id": "",
        "Countryname": "Saudi Arabia",
        "codeNumber": "966"
      }, {
        "language_id": "",
        "Countryname": "Senegal",
        "codeNumber": "221"
      }, {
        "language_id": "",
        "Countryname": "Seychelles",
        "codeNumber": "248"
      }, {
        "language_id": "",
        "Countryname": "Sierra Leone",
        "codeNumber": "232"
      }, {
        "language_id": "",
        "Countryname": "Singapore",
        "codeNumber": "65"
      }, {
        "language_id": "",
        "Countryname": "Slovakia",
        "codeNumber": "421"
      }, {
        "language_id": "sl_sl",
        "Countryname": "Slovenia",
        "codeNumber": "386"
      }, {
        "language_id": "",
        "Countryname": "Solomon Islands",
        "codeNumber": "677"
      }, {
        "language_id": "",
        "Countryname": "Somalia",
        "codeNumber": "252"
      }, {
        "language_id": "",
        "Countryname": "South Africa",
        "codeNumber": "27"
      }, {
        "language_id": "es_es",
        "Countryname": "Spain",
        "codeNumber": "34"
      }, {
        "language_id": "",
        "Countryname": "Sri Lanka",
        "codeNumber": "94"
      }, {
        "language_id": "",
        "Countryname": "Sudan",
        "codeNumber": "249"
      }, {
        "language_id": "",
        "Countryname": "Suriname",
        "codeNumber": "597"
      }, {
        "language_id": "",
        "Countryname": "Eswatini",
        "codeNumber": "268"
      }, {
        "language_id": "sv_se",
        "Countryname": "Sweden",
        "codeNumber": "46"
      }, {
        "language_id": "",
        "Countryname": "Switzerland",
        "codeNumber": "41"
      }, {
        "language_id": "",
        "Countryname": "Syria",
        "codeNumber": "963"
      }, {
        "language_id": "",
        "Countryname": "Taiwan Province (China)",
        "codeNumber": "886"
      }, {
        "language_id": "",
        "Countryname": "Tajikistan",
        "codeNumber": "992"
      }, {
        "language_id": "",
        "Countryname": "Tanzania",
        "codeNumber": "255"
      }, // {
      //     "language_id": "",
      //     "Countryname": "Thailand",
      //     "codeNumber": "66"
      // },
      {
        "language_id": "",
        "Countryname": "Togo",
        "codeNumber": "228"
      }, {
        "language_id": "",
        "Countryname": "Tonga",
        "codeNumber": "676"
      }, {
        "language_id": "",
        "Countryname": "Trinidad and Tobago",
        "codeNumber": "1868"
      }, {
        "language_id": "",
        "Countryname": "Tunisia",
        "codeNumber": "216"
      }, {
        "language_id": "tr_tr",
        "Countryname": "turkey",
        "codeNumber": "90"
      }, {
        "language_id": "",
        "Countryname": "Turkmenistan",
        "codeNumber": "993"
      }, {
        "language_id": "",
        "Countryname": "Uganda",
        "codeNumber": "256"
      }, {
        "language_id": "",
        "Countryname": "Ukraine",
        "codeNumber": "380"
      }, // {
      //     "language_id": "",
      //     "Countryname": "United Arab Emirates",
      //     "codeNumber": "971"
      // },
      {
        "language_id": "",
        "Countryname": "UK",
        "codeNumber": "44"
      }, {
        "language_id": "",
        "Countryname": "Uruguay",
        "codeNumber": "598"
      }, {
        "language_id": "",
        "Countryname": "Uzbekistan",
        "codeNumber": "998"
      }, {
        "language_id": "",
        "Countryname": "Venezuela",
        "codeNumber": "58"
      }, {
        "language_id": "",
        "Countryname": "Vietnam",
        "codeNumber": "84"
      }, {
        "language_id": "",
        "Countryname": "Yemen",
        "codeNumber": "967"
      }, {
        "language_id": "",
        "Countryname": "Yugoslavia",
        "codeNumber": "381"
      }, {
        "language_id": "",
        "Countryname": "Zimbabwe",
        "codeNumber": "263"
      }, {
        "language_id": "",
        "Countryname": "Zambia",
        "codeNumber": "260"
      }, {
        "language_id": "",
        "Countryname": "Diego Garcia island",
        "codeNumber": "246"
      }, {
        "language_id": "",
        "Countryname": "Aruba",
        "codeNumber": "297"
      }, {
        "language_id": "",
        "Countryname": "Bhutan",
        "codeNumber": "975"
      }, {
        "language_id": "",
        "Countryname": "Bosnia and Herzegovina",
        "codeNumber": "387"
      }, {
        "language_id": "",
        "Countryname": "Cape Verde",
        "codeNumber": "238"
      }, {
        "language_id": "",
        "Countryname": "Comoros",
        "codeNumber": "269"
      }, {
        "language_id": "",
        "Countryname": "DRC",
        "codeNumber": "243"
      }, {
        "language_id": "",
        "Countryname": "Republic of Croatia",
        "codeNumber": "385"
      }, {
        "language_id": "",
        "Countryname": "Dominican Republic",
        "codeNumber": "1809"
      }, {
        "language_id": "",
        "Countryname": "Equatorial Guinea",
        "codeNumber": "240"
      }, {
        "language_id": "",
        "Countryname": "Falkland Islands",
        "codeNumber": "500"
      }, {
        "language_id": "",
        "Countryname": "Faroe Islands",
        "codeNumber": "298"
      }, {
        "language_id": "",
        "Countryname": "Greenland",
        "codeNumber": "299"
      }, {
        "language_id": "",
        "Countryname": "Guadeloupe island",
        "codeNumber": "590"
      }, {
        "language_id": "",
        "Countryname": "Guinea Bissau",
        "codeNumber": "245"
      }, {
        "language_id": "",
        "Countryname": "Macedonia",
        "codeNumber": "389"
      }, {
        "language_id": "",
        "Countryname": "Mauritania",
        "codeNumber": "222"
      }, {
        "language_id": "",
        "Countryname": "Federated States of Micronesia",
        "codeNumber": "691"
      }, {
        "language_id": "",
        "Countryname": "Montenegro",
        "codeNumber": "382"
      }, {
        "language_id": "",
        "Countryname": "New Caledonia",
        "codeNumber": "687"
      }, {
        "language_id": "",
        "Countryname": "Norfolk Island",
        "codeNumber": "6723"
      }, {
        "language_id": "",
        "Countryname": "Palau",
        "codeNumber": "680"
      }, {
        "language_id": "",
        "Countryname": "Palestine",
        "codeNumber": "970"
      }, {
        "language_id": "",
        "Countryname": "Republic of Rwanda",
        "codeNumber": "250"
      }, {
        "language_id": "",
        "Countryname": "Saint Kitts and Nevis",
        "codeNumber": "1869"
      }, {
        "language_id": "",
        "Countryname": "Serbia",
        "codeNumber": "381"
      }, {
        "language_id": "",
        "Countryname": "South Sudan",
        "codeNumber": "211"
      }, {
        "language_id": "",
        "Countryname": "Vanuatu",
        "codeNumber": "678"
      }, {
        "language_id": "",
        "Countryname": "British Virgin Islands",
        "codeNumber": "1809"
      }, {
        "language_id": "",
        "Countryname": "Republic of C ô te d'Ivoire",
        "codeNumber": "225"
      }, {
        "language_id": "",
        "Countryname": "Dominica",
        "codeNumber": "1767"
      }, {
        "language_id": "",
        "Countryname": "East Timor",
        "codeNumber": "670"
      }, {
        "language_id": "",
        "Countryname": "state of Eritrea",
        "codeNumber": "291"
      }, {
        "language_id": "",
        "Countryname": "Wallis and Futuna Islands",
        "codeNumber": "681"
      }, {
        "language_id": "",
        "Countryname": "Virgin Islands (United States)",
        "codeNumber": "1340"
      }, {
        "language_id": "",
        "Countryname": "Tuvalu",
        "codeNumber": "688"
      }, {
        "language_id": "",
        "Countryname": "Turks and Caicos Islands",
        "codeNumber": "1809"
      }, {
        "language_id": "",
        "Countryname": "Tokelau",
        "codeNumber": "690"
      }, {
        "language_id": "",
        "Countryname": "Marshall Islands",
        "codeNumber": "692"
      }, {
        "language_id": "",
        "Countryname": "Kiribati",
        "codeNumber": "686"
      }, {
        "language_id": "",
        "Countryname": "Hawaii",
        "codeNumber": "1808"
      }, {
        "language_id": "",
        "Countryname": "Saint Pierre island and Miquelon island",
        "codeNumber": "508"
      }, {
        "language_id": "",
        "Countryname": "Niue",
        "codeNumber": "683"
      }, {
        "language_id": "",
        "Countryname": "St. Helena",
        "codeNumber": "290"
      }, {
        "language_id": "",
        "Countryname": "Vatican",
        "codeNumber": "379"
      }, {
        "language_id": "",
        "Countryname": "Wake Island (United States)",
        "codeNumber": "1808"
      }]);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AreaCodeItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventManager.ts', './MessageManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Label, Component, EventManager, MessageManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "36de43X/9pJUZdLvIBMKvBb", "AreaCodeItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AreaCodeItem = exports('AreaCodeItem', (_dec = ccclass('AreaCodeItem'), _dec2 = property(Sprite), _dec3 = property(Label), _dec4 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AreaCodeItem, _Component);

        function AreaCodeItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.data = null;

          _initializerDefineProperty(_this, "sprFlag", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labCountry", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labAreaCode", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = AreaCodeItem.prototype;

        _proto.start = function start() {
          //国旗有资源后需要根据配的地址动态加载
          // this.labCountry.string = ConfigFile.findLanguage(this.data.countryName);
          this.labCountry.string = this.data.Countryname;
          this.labAreaCode.string = "+" + this.data.codeNumber;
        };

        _proto.onClicked = function onClicked() {
          EventManager.getInstance().trigger(MessageManager.Custom.SelectedAreaCode, this.labAreaCode.string);
        };

        return AreaCodeItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sprFlag", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "labCountry", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labAreaCode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ArrayExtension.ts", ['cc'], function () {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b3c43649FJPOYY5RRtV5J/f", "ArrayExtension", undefined);

      Array.prototype.min = function () {
        var min = this[0];
        var len = this.length;

        for (var i = 1; i < len; i++) {
          if (this[i] < min) min = this[i];
        }

        return min;
      }; // 最大值


      Array.prototype.max = function () {
        var max = this[0];
        var len = this.length;

        for (var i = 1; i < len; i++) {
          if (this[i] > max) max = this[i];
        }

        return max;
      };

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AudioManager.ts", ['cc', './ConstValue.ts', './GameDataManager.ts', './TimerMgr.ts', './NumberUtil.ts'], function (exports) {
  'use strict';

  var cclegacy, AudioSource, resources, AudioClip, error, find, ConstValue, GameDataManager, TimerMgr, NumberUtil;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      AudioSource = module.AudioSource;
      resources = module.resources;
      AudioClip = module.AudioClip;
      error = module.error;
      find = module.find;
    }, function (module) {
      ConstValue = module.ConstValue;
    }, function (module) {
      GameDataManager = module.GameDataManager;
    }, function (module) {
      TimerMgr = module.TimerMgr;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }],
    execute: function () {
      cclegacy._RF.push({}, "16d7aVnmU1PQrpFj9P1Fxvb", "AudioManager", undefined);

      var AudioManager = exports('AudioManager', /*#__PURE__*/function () {
        /**音频资源池 */
        AudioManager.getInstance = function getInstance() {
          if (this.instance == null) {
            this.instance = new AudioManager();
          }

          return this.instance;
        };

        function AudioManager() {
          this.SoundRoot = null;
          this.MusicRoot = null;
          this.playMusicUrl = "";
          this.loadMap = new Map();
          this.curMusic = null;
          this.backCallEnd = void 0;
          this.backgrund = ["backgrund/BGM_Login0", "backgrund/BGM_Login1", "backgrund/BGM_UI0", "backgrund/BGM_UI1"];
          this.SoundRoot = find("Canvas/AudioSound");
          this.MusicRoot = find("Canvas/AudioMusic");
        }

        var _proto = AudioManager.prototype;

        _proto.playSound = function playSound(url, loop, volume) {
          var _this = this;

          if (loop === void 0) {
            loop = false;
          }

          if (GameDataManager.getInstance().getGameData().settingInfo.closeSound) {
            return;
          }

          var path = ConstValue.AUDIO_DIR + url;
          var source = this.loadMap.get(path);
          if (!source) this.load(path, function (succes) {
            if (succes) _this.playSound(url);
          });else {
            source.loop = loop;
            source.volume = GameDataManager.getInstance().getGameData().settingInfo.volume;
            source.playOneShot(source.clip);
          }
        };

        _proto.stopSound = function stopSound() {
          var _this2 = this;

          this.loadMap.forEach(function (clip) {
            if (clip != _this2.curMusic) if (clip.playing) clip.stop();
          });
        }
        /**
             * 播放背景音乐
             * @param url 
             * @param loop 
             * @param volume 
             * @returns 
             */
        ;

        _proto.playMusic = function playMusic(url, loop, allLoop) {
          var _this3 = this;

          if (loop === void 0) {
            loop = true;
          }

          if (allLoop === void 0) {
            allLoop = -1;
          }

          console.log("url------------->", url);
          var path = ConstValue.AUDIO_DIR + url;
          this.playMusicUrl = path;

          if (GameDataManager.getInstance().getGameData().settingInfo.closeMusic) {
            return;
          }

          var source = this.loadMap.get(path);
          if (!source) this.loadMusic(path, function (succes) {
            if (succes) _this3.playMusic(url, loop, allLoop);
          });else {
            if (this.curMusic) {
              if (this.curMusic != source) {
                this.curMusic.stop();
              }
            }

            this.curMusic = source;

            if (allLoop != -1) {
              this.curMusic.node.once(AudioSource.EventType.ENDED, function () {
                allLoop++;
                if (allLoop >= _this3.backgrund.length) allLoop = 0;

                _this3.playMusic(_this3.backgrund[allLoop], false, allLoop);
              });
            }

            this.curMusic.volume = GameDataManager.getInstance().getGameData().settingInfo.volume;
            this.curMusic.loop = loop;
            if (!this.curMusic.playing) this.curMusic.play();
          }
        }
        /**
             * 停止背景音乐
             * @returns 
             */
        ;

        _proto.stopMusic = function stopMusic() {
          if (!this.curMusic) return;
          this.curMusic.stop();
        };

        _proto.pauseMusic = function pauseMusic() {
          if (!this.curMusic) return; // this.curMusic.volume = 0
          // if (this.curMusic.state == AudioSource.AudioState.PLAYING)

          this.curMusic.pause();
          TimerMgr.clear(this, this._resumeMusic);
        };

        _proto.resumeMusic = function resumeMusic(delay) {
          if (delay === void 0) {
            delay = 0;
          }

          if (!this.curMusic) return;
          TimerMgr.once(this, this._resumeMusic, delay);
        };

        _proto._resumeMusic = function _resumeMusic() {
          if (!this.curMusic) return;
          this.updateMusic();
        };

        _proto.updateMusic = function updateMusic() {
          if (!GameDataManager.getInstance().getGameData().settingInfo.closeMusic) {
            if (this.playMusicUrl) {
              var index = NumberUtil.minToMax(0, this.backgrund.length - 1);
              this.playMusic(this.backgrund[index], false, index);
            }
          } else this.stopMusic();
        }
        /**
         * 加载一个音频
         * @param url 
         * @param cb 
         */
        ;

        _proto.load = function load(url, cb) {
          var self = this;

          if (this.loadMap.has(url)) {
            if (cb) cb(true);
            return;
          }

          resources.load(url, AudioClip, function (err, clip) {
            if (err) {
              error(err);
              if (cb) cb(false);
              return;
            }

            var source = self.SoundRoot.addComponent(AudioSource);
            source.clip = clip;
            self.loadMap.set(url, source);
            if (cb) cb(true);
          });
        }
        /**
         * 加载一个音频
         * @param url 
         * @param cb 
         */
        ;

        _proto.loadMusic = function loadMusic(url, cb) {
          var self = this;

          if (this.loadMap.has(url)) {
            if (cb) cb(true);
            return;
          }

          resources.load(url, AudioClip, function (err, clip) {
            if (err) {
              error(err);
              if (cb) cb(false);
              return;
            }

            var source = self.MusicRoot.addComponent(AudioSource);
            source.clip = clip;
            self.loadMap.set(url, source);
            if (cb) cb(true);
          });
        };

        return AudioManager;
      }());
      AudioManager.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/authereum.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, _extends, cclegacy;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
      _extends = module.extends;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "fec71XYdfpIvbyjx6MNW4DO", "authereum", undefined);

      var ConnectToAuthereum = exports('default', function ConnectToAuthereum(Authereum, opts) {
        if (opts === void 0) {
          opts = {};
        }

        return new Promise( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
          var authereum, provider;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.prev = 0;
                  authereum = new Authereum(_extends({}, opts, {
                    networkName: opts.networkName || opts.network
                  }));
                  provider = authereum.getProvider();
                  provider.authereum = authereum;
                  _context.next = 6;
                  return provider.enable();

                case 6:
                  resolve(provider);
                  _context.next = 12;
                  break;

                case 9:
                  _context.prev = 9;
                  _context.t0 = _context["catch"](0);
                  return _context.abrupt("return", reject(_context.t0));

                case 12:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[0, 9]]);
        })));
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BagUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PlayButtonSound.ts', './ConstLanguage.ts', './EnumDefine.ts', './ConfigFile.ts', './GameAllData.ts', './NodeHelp.ts', './NumberUtil.ts', './Pool.ts', './TweenHelp.ts', './BasePanel.ts', './BagUIItemTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, Prefab, ScrollView, Node, instantiate, Input, UIOpacity, Button, Label, Layout, PlayButtonSound, ConstLanguage, EnumDefine, ConfigFile, Configname, GameAllData, NodeHelp, NumberUtil, PoolOnce, TweenHelper, ETweenType, BasePanel, BagUIItemTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      ScrollView = module.ScrollView;
      Node = module.Node;
      instantiate = module.instantiate;
      Input = module.Input;
      UIOpacity = module.UIOpacity;
      Button = module.Button;
      Label = module.Label;
      Layout = module.Layout;
    }, function (module) {
      PlayButtonSound = module.PlayButtonSound;
    }, function (module) {
      ConstLanguage = module.ConstLanguage;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      TweenHelper = module.TweenHelper;
      ETweenType = module.ETweenType;
    }, function (module) {
      BasePanel = module.BasePanel;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _class3;

      cclegacy._RF.push({}, "e3998J9c8xDcaYGIEu9ns7F", "BagUI", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BagUI = exports('BagUI', (_dec = ccclass('BagUI'), _dec2 = property({
        type: Prefab,
        displayName: "道具模版"
      }), _dec3 = property({
        type: ScrollView,
        displayName: "list"
      }), _dec4 = property({
        type: Node,
        displayName: "道具显示"
      }), _dec5 = property({
        type: Node,
        displayName: "没有道具显示empty"
      }), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(Node), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(BagUI, _BasePanel);

        function BagUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "item", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "list", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "goods", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "empty", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconUsdt", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconGemStone", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconColoredGold", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconShell", _descriptor8, _assertThisInitialized(_this));

          _this.Pool = new PoolOnce(30, function () {
            return instantiate(_this.item);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          return _this;
        }

        var _proto = BagUI.prototype;

        _proto.start = function start() {
          _BasePanel.prototype.start.call(this);

          this.iconUsdt.on(Input.EventType.TOUCH_START, this.oniconStartTouch.bind(this));
          this.iconUsdt.on(Input.EventType.TOUCH_END, this.oniconEndTouch.bind(this));
          this.iconUsdt.on(Input.EventType.TOUCH_CANCEL, this.oniconEndTouch.bind(this));
          this.iconGemStone.on(Input.EventType.TOUCH_START, this.oniconStartTouch.bind(this));
          this.iconGemStone.on(Input.EventType.TOUCH_END, this.oniconEndTouch.bind(this));
          this.iconGemStone.on(Input.EventType.TOUCH_CANCEL, this.oniconEndTouch.bind(this));
          this.iconColoredGold.on(Input.EventType.TOUCH_START, this.oniconStartTouch.bind(this));
          this.iconColoredGold.on(Input.EventType.TOUCH_END, this.oniconEndTouch.bind(this));
          this.iconColoredGold.on(Input.EventType.TOUCH_CANCEL, this.oniconEndTouch.bind(this));
          this.iconShell.on(Input.EventType.TOUCH_START, this.oniconStartTouch.bind(this));
          this.iconShell.on(Input.EventType.TOUCH_END, this.oniconEndTouch.bind(this));
          this.iconShell.on(Input.EventType.TOUCH_CANCEL, this.oniconEndTouch.bind(this));
          this.list.node.on(ScrollView.EventType.SCROLL_BEGAN, this.onCloseTip, this);
          this.list.node.on(Input.EventType.TOUCH_START, this.onCloseTip, this);
          this.node.getChildByName("Panel").on(Input.EventType.TOUCH_START, this.onCloseTip, this);
          this.node.getComponent(PlayButtonSound).play();
          this.setGoodsShow();
          this.getItemGenerator();
          TweenHelper["default"](this.node.getChildByName("Panel"), ETweenType.Jelly);
          TweenHelper.getTween(this.node.getChildByName("Mask").getComponent(UIOpacity), "open", function (_tween) {
            var sartOpacity = 0;
            var opacity = 150;

            _tween.to(0, {
              opacity: sartOpacity
            }).to(0.1, {
              opacity: opacity
            });
          }).start();
        };

        _proto.onDisable = function onDisable() {
          this.iconUsdt.off(Input.EventType.TOUCH_START, this.oniconStartTouch.bind(this));
          this.iconUsdt.off(Input.EventType.TOUCH_END, this.oniconEndTouch.bind(this));
          this.iconUsdt.off(Input.EventType.TOUCH_CANCEL, this.oniconEndTouch.bind(this));
          this.iconGemStone.off(Input.EventType.TOUCH_START, this.oniconStartTouch.bind(this));
          this.iconGemStone.off(Input.EventType.TOUCH_END, this.oniconEndTouch.bind(this));
          this.iconGemStone.off(Input.EventType.TOUCH_CANCEL, this.oniconEndTouch.bind(this));
          this.iconColoredGold.off(Input.EventType.TOUCH_START, this.oniconStartTouch.bind(this));
          this.iconColoredGold.off(Input.EventType.TOUCH_END, this.oniconEndTouch.bind(this));
          this.iconColoredGold.off(Input.EventType.TOUCH_CANCEL, this.oniconEndTouch.bind(this));
          this.iconShell.off(Input.EventType.TOUCH_START, this.oniconStartTouch.bind(this));
          this.iconShell.off(Input.EventType.TOUCH_END, this.oniconEndTouch.bind(this));
          this.iconShell.off(Input.EventType.TOUCH_CANCEL, this.oniconEndTouch.bind(this));
          this.list.node.off(ScrollView.EventType.SCROLL_BEGAN, this.onCloseTip, this);
          this.list.node.off(Input.EventType.TOUCH_START, this.onCloseTip, this);
          this.node.getChildByName("Panel").off(Input.EventType.TOUCH_START, this.onCloseTip, this);
        };

        _proto.oniconStartTouch = function oniconStartTouch(event) {
          var node = event.target;
          var type = EnumDefine.CurrencyType.USDT;

          if (node.parent.name == "Shell") {
            type = EnumDefine.CurrencyType.Conch;
          } else if (node.parent.name == "ColoredGold") {
            type = EnumDefine.CurrencyType.ColoredGold;
          } else if (node.parent.name == "GemStone") {
            type = EnumDefine.CurrencyType.PEARL;
          }

          this.unscheduleAllCallbacks();
          var config = null;

          for (var _iterator = _createForOfIteratorHelperLoose(ConfigFile.getInstance().config.get(Configname.TItemInfo)), _step; !(_step = _iterator()).done;) {
            var itemConfig = _step.value;

            if (itemConfig.ItemId == type) {
              config = itemConfig;
              break;
            }
          }

          if (config) {
            var props = [];
            props.push(type);

            if (type == EnumDefine.CurrencyType.Conch) {
              props.push(EnumDefine.CurrencyType.ColoredGold);
            }

            var propName = ConfigFile.findLanguage(config.Name);
            BagUIItemTip.getInstance().openTipGoods(this.node, propName, props, node.getComponent(Button));
          } // this.scheduleOnce(() => {
          //     let config = null
          //     for (let itemConfig of ConfigFile.getInstance().config.get(Configname.TItemInfo)) {
          //         if (itemConfig.ItemId == type) {
          //             config = itemConfig
          //             break
          //         }
          //     }
          //     if (config) {
          //         let propName = ConfigFile.findLanguage(config.Name)
          //         let propText = ConfigFile.findLanguage(config.Tips)
          //         BagUIItemTip.getInstance().openTip(this.node, propName, propText, node.getComponent(Button), null)
          //     }
          // }, 0.2)

        };

        _proto.oniconEndTouch = function oniconEndTouch() {// BagUIItemTip.getInstance().closeTip()
          // this.unscheduleAllCallbacks()
        };

        _proto.onClickedClose = function onClickedClose(anction) {
          if (anction === void 0) {
            anction = true;
          }

          _BasePanel.prototype.onClickedClose.call(this, anction);

          this.node.getChildByName("Mask").getComponent(UIOpacity).opacity = 0;
          BagUIItemTip.getInstance().tipDestroy();

          while (this.list.content.children.length >= 1) {
            this.Pool.put(this.list.content.children[0]);
          }

          this.Pool.clear();
          this.unscheduleAllCallbacks();
        }
        
        //NumberUtil.numberFormat(GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.ColoredGold),ConstValue.DECIMAL_PLACES_NUM) + "";
        ;

        _proto.setGoodsShow = function setGoodsShow() {
          NodeHelp.getchildlable(this.node, "LabelTitle", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.BAG_PANEL_TEXT1);
          });
          var usdtNum = NumberUtil.unitConversion(GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.USDT));
          var gemStoneNum = NumberUtil.unitConversion(GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.PEARL));
          var shellNum = NumberUtil.unitConversion(GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.Conch));
          var coloredGoldNum = NumberUtil.unitConversion(GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.ColoredGold));
          if (usdtNum.length > 5) NodeHelp.getchildlable(this.goods, "Usdt", Layout, function (comp) {
            comp.enabled = true;
            comp.updateLayout();
          });
          if (shellNum.length > 5) NodeHelp.getchildlable(this.goods, "Shell", Layout, function (comp) {
            comp.enabled = true;
            comp.updateLayout();
          });
          if (gemStoneNum.length > 5) NodeHelp.getchildlable(this.goods, "GemStone", Layout, function (comp) {
            comp.enabled = true;
            comp.updateLayout();
          });
          if (coloredGoldNum.length > 5) NodeHelp.getchildlable(this.goods, "ColoredGold", Layout, function (comp) {
            comp.enabled = true;
            comp.updateLayout();
          });
          NodeHelp.getchildlable(this.goods, "Usdt", Label, function (comp) {
            comp.string = usdtNum;
          });
          NodeHelp.getchildlable(this.goods, "GemStone", Label, function (comp) {
            comp.string = gemStoneNum;
          });
          NodeHelp.getchildlable(this.goods, "Shell", Label, function (comp) {
            comp.string = shellNum;
          });
          NodeHelp.getchildlable(this.goods, "ColoredGold", Label, function (comp) {
            comp.string = coloredGoldNum;
          });
        };

        _proto.getItemGenerator = function getItemGenerator() {
          var _this2 = this;

          this.empty.active = false;

          NodeHelp.getchildlable(this.empty, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(111034);
          });

          var itemDatas = GameAllData.FarmStoreResponse.items;
          console.log("aa"+JSON.stringify(itemDatas));
          this.bubbleSort(itemDatas);
          var config = ConfigFile.getInstance().config.get(Configname.TItemInfo);
          console.log("aa"+JSON.stringify(config));

          NodeHelp.getchildlable(this.empty, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(111034);
          });

          var i = 0;

          var func = function func() {
            if (!itemDatas[i]) {
              i = 0;

              _this2.unschedule(func);

              return;
            }

            var itemData = itemDatas[i];

            for (var _iterator2 = _createForOfIteratorHelperLoose(config), _step2; !(_step2 = _iterator2()).done;) {
              var itemConfig = _step2.value;

              if (itemConfig.ItemId == itemData.ItemModeId && itemConfig.ItemId > 0) {
                var item = _this2.Pool.get();

                _this2.list.content.addChild(item);

                item.getComponent("BagUIItem").init(itemConfig, itemData.ItemCount, _this2.list.node);
              }
            }

            i++;

            if (i > itemDatas.length - 1) {
              i = 0;

              _this2.unschedule(func);
            }
          };

          this.schedule(func, 0);
        };

        _proto.bubbleSort = function bubbleSort(arr) {
          var i = arr.length,
              j;
          var tempExchangVal;

          while (i > 0) {
            for (j = 0; j < i - 1; j++) {
              if (arr[j].ItemModeId > arr[j + 1].ItemModeId && arr[j]) {
                tempExchangVal = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = tempExchangVal;
              }
            }

            i--;
          }
        };

        _proto.onCloseTip = function onCloseTip() {
          BagUIItemTip.getInstance().closeTip();
        };

        return BagUI;
      }(BasePanel), _class3.className = "BagUI", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "item", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "list", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "goods", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "empty", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "iconUsdt", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "iconGemStone", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "iconColoredGold", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "iconShell", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BagUIItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './BagUIItemTip.ts', './NodeHelp.ts', './producer.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Label, UITransform, Component, ConfigFile, Configname, BagUIItemTip, NodeHelp, producer;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      producer = module.producer;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "d26cbBNCjtKCJuHMVHu2F1l", "BagUIItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BagUIItem = exports('BagUIItem', (_dec = ccclass('BagUIItem'), _dec2 = property(Sprite), _dec3 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BagUIItem, _Component);

        function BagUIItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "sprIcon", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labNum", _descriptor2, _assertThisInitialized(_this));

          _this.Config = null;
          _this.propNum = 0;
          _this.propText = "";
          _this.propName = "";
          _this.propTimeText = "";
          _this.list = null;
          _this.ismove = false;
          return _this;
        }

        var _proto = BagUIItem.prototype;

        _proto.init = function init(Config, propNum, list) {
          var _this2 = this;

          this.list = list;
          this.Config = Config;
          this.propName = ConfigFile.findLanguage(this.Config.Name);
          this.propText = ConfigFile.findLanguage(Number(this.Config.Tips));
          this.propNum = propNum;
          NodeHelp.loadIcon("propIcon/itemicon", Config.ItemRes.toString(), function (res) {
            _this2.sprIcon.spriteFrame = res;
            var scale = NodeHelp.setScopeLimitation(_this2.sprIcon.node.getComponent(UITransform), 116, 116);

            _this2.sprIcon.node.setScale(scale, scale);

            var str = "1";
            if (_this2.propNum >= 1000000000) str = Math.floor(_this2.propNum / 1000000000) + "B";else if (_this2.propNum >= 1000000) str = Math.floor(_this2.propNum / 1000000) + "M";else if (_this2.propNum >= 1000) str = Math.floor(_this2.propNum / 1000) + "K";else str = "" + Math.floor(_this2.propNum);
            _this2.labNum.string = str;
          });

          if (this.Config.Type && (this.Config.Type == 2 || this.Config.Type == "2")) {
            var animalConfig = ConfigFile.getInstance().config.get(Configname.TAnimalInfo);

            if (animalConfig) {
              var animalConsumeTime = 0;
              animalConfig.forEach(function (v) {
                if (v.AnimalConsumeId == _this2.Config.ItemId && (animalConsumeTime == 0 || v.AnimalConsumeTime < animalConsumeTime)) {
                  animalConsumeTime = v.AnimalConsumeTime;
                }
              });

              if (animalConsumeTime) {
                this.propTimeText = producer.getTimeFormat(animalConsumeTime * this.propNum);
              }
            }
          }
        };

        _proto.ChickTip = function ChickTip() {
          var bagUIItemTip = BagUIItemTip.getInstance();

          if (!bagUIItemTip.tip || !bagUIItemTip.tip.activeInHierarchy || bagUIItemTip.tag != this && bagUIItemTip.tip.activeInHierarchy) {
            if (this.list) BagUIItemTip.getInstance().openTip(this.list, this.propName, this.propText, this, this.propTimeText);
          } else {
            BagUIItemTip.getInstance().closeTip();
          }
        };

        _proto.onDestroy = function onDestroy() {};

        return BagUIItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sprIcon", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "labNum", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BagUIItemGoodsTip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "fcffbsGThVCp4uctVfb3S/g", "BagUIItemGoodsTip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BagUIItemGoodsTip = exports('BagUIItemGoodsTip', (_dec = ccclass('BagUIItemGoodsTip'), _dec2 = property({
        type: Prefab,
        displayName: "道具模版"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BagUIItemGoodsTip, _Component);

        function BagUIItemGoodsTip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "item", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        return BagUIItemGoodsTip;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "item", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BagUIItemTip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstValue.ts', './ConfigFile.ts', './GameAllData.ts', './NodeHelp.ts', './NumberUtil.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Vec3, UITransform, resources, instantiate, Label, v3, Component, Sprite, ConstValue, ConfigFile, GameAllData, NodeHelp, NumberUtil;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      resources = module.resources;
      instantiate = module.instantiate;
      Label = module.Label;
      v3 = module.v3;
      Component = module.Component;
      Sprite = module.Sprite;
    }, function (module) {
      ConstValue = module.ConstValue;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "720faECjQBKx75NZV7X+N68", "BagUIItemTip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var v3_1 = new Vec3(1, 1, 1);
      var v3_2 = new Vec3(-1, 1, 1);
      var BagUIItemTip = exports('BagUIItemTip', (_dec = ccclass('BagUIItemTip'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BagUIItemTip, _Component);

        function BagUIItemTip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.tip = null;
          _this.tipGoods = null;
          _this.tag = null;
          return _this;
        }

        BagUIItemTip.getInstance = function getInstance() {
          if (this.instance == null) {
            this.instance = new BagUIItemTip();
          }

          return this.instance;
        };

        var _proto = BagUIItemTip.prototype;

        _proto.openTipGoods = function openTipGoods(parentNode, name, types, tag) {
          var _this2 = this;

          if (!tag.node || !tag.node.worldPosition) {
            return;
          }

          this.tag = tag;
          var tagPos = parentNode.getComponent(UITransform).convertToNodeSpaceAR(tag.node.worldPosition);
          var tagSizeH = tag.node.getComponent(UITransform).height;
          this.closeTip();
          if (!this.tipGoods) resources.load("prefabs/ui/item/BagUIItemGoodsTip", function (completedCount, totalCount, item) {}, function (error, prefab) {
            if (error) {
              console.log(error);
              return;
            }

            _this2.tipDestroy();

            _this2.tipGoods = instantiate(prefab);
            parentNode.addChild(_this2.tipGoods);
            NodeHelp.getchildlable(_this2.tipGoods, "LabelName", Label, function (comp) {
              comp.string = name;
            });

            var GoodsTipComp = _this2.tipGoods.getComponent("BagUIItemGoodsTip");

            NodeHelp.getchildlable(_this2.tipGoods, "Golds", null, function (comp, node) {
              var _loop = function _loop(index) {
                var element = types[index];
                var config = ConfigFile.getItemData(element);

                if (config) {
                  var propName = ConfigFile.findLanguage(config.Name);
                  var item = instantiate(GoodsTipComp.item);
                  node.addChild(item);
                  NodeHelp.getchildlable(item, "goldName", Label, function (comp, node) {
                    comp.string = ConfigFile.findLanguage(111035).format(propName);
                  });
                  NodeHelp.getchildlable(item, "goldNum", Label, function (comp, node) {
                    comp.string = NumberUtil.numberFormat(GameAllData.getCurrencyNumByType(element), ConstValue.DECIMAL_PLACES_NUM, false, "");
                  });
                  NodeHelp.getchildlable(item, "Icon", Sprite, function (comp, node) {
                    NodeHelp.loadIcon("propIcon/itemicon", String(element), function (res) {
                      comp.spriteFrame = res;
                      var scale = NodeHelp.setScopeLimitation(node.getComponent(UITransform), 60, 60);
                      node.setScale(new Vec3(scale, scale, 1));
                    });
                  });
                }
              };

              for (var index = 0; index < types.length; index++) {
                _loop(index);
              }
            });
            var positionY = tagPos.y - tagSizeH / 2 - _this2.tipGoods.getComponent(UITransform).height / 2;

            _this2.tipGoods.setPosition(v3(tagPos.x, positionY, tagPos.z));

            if (tagPos.x <= 0) {
              _this2.tipGoods.getChildByName("Tipbg").setScale(v3_1);

              _this2.tipGoods.getChildByName("Tipbg").children.forEach(function (v) {
                v.setScale(v3_1);
              });
            } else {
              _this2.tipGoods.getChildByName("Tipbg").setScale(v3_2);

              _this2.tipGoods.getChildByName("Tipbg").children.forEach(function (v) {
                v.setScale(v3_2);
              });
            }
          });else {
            NodeHelp.getchildlable(this.tipGoods, "Golds", null, function (comp, node) {
              node.destroyAllChildren();
            });
            parentNode.addChild(this.tipGoods);
            this.tipGoods.active = true;
            NodeHelp.getchildlable(this.tipGoods, "LabelName", Label, function (comp) {
              comp.string = name;
            });
            var GoodsTipComp = this.tipGoods.getComponent("BagUIItemGoodsTip");
            NodeHelp.getchildlable(this.tipGoods, "Golds", null, function (comp, node) {
              var _loop2 = function _loop2(index) {
                var element = types[index];
                var config = ConfigFile.getItemData(element);

                if (config) {
                  var propName = ConfigFile.findLanguage(config.Name);
                  var item = instantiate(GoodsTipComp.item);
                  node.addChild(item);
                  NodeHelp.getchildlable(item, "goldName", Label, function (comp, node) {
                    comp.string = ConfigFile.findLanguage(111035).format(propName);
                  });
                  NodeHelp.getchildlable(item, "goldNum", Label, function (comp, node) {
                    comp.string = NumberUtil.numberFormat(GameAllData.getCurrencyNumByType(element), ConstValue.DECIMAL_PLACES_NUM, false, "");
                  });
                  NodeHelp.getchildlable(item, "Icon", Sprite, function (comp, node) {
                    NodeHelp.loadIcon("propIcon/itemicon", String(element), function (res) {
                      comp.spriteFrame = res;
                      var scale = NodeHelp.setScopeLimitation(node.getComponent(UITransform), 60, 60);
                      node.setScale(new Vec3(scale, scale, 1));
                    });
                  });
                }
              };

              for (var index = 0; index < types.length; index++) {
                _loop2(index);
              }
            });
            var positionY = tagPos.y - tagSizeH / 2 - this.tipGoods.getComponent(UITransform).height / 2;
            this.tipGoods.setPosition(v3(tagPos.x, positionY, tagPos.z));

            if (tagPos.x <= 0) {
              this.tipGoods.getChildByName("Tipbg").setScale(v3_1);
              this.tipGoods.getChildByName("Tipbg").children.forEach(function (v) {
                v.setScale(v3_1);
              });
            } else {
              this.tipGoods.getChildByName("Tipbg").setScale(v3_2);
              this.tipGoods.getChildByName("Tipbg").children.forEach(function (v) {
                v.setScale(v3_2);
              });
            }
          }
        };

        _proto.openTip = function openTip(parentNode, name, Text, tag, Timetext) {
          var _this3 = this;

          if (!tag.node || !tag.node.worldPosition) {
            return;
          }

          this.tag = tag;
          var tagPos = parentNode.getComponent(UITransform).convertToNodeSpaceAR(tag.node.worldPosition);
          var tagSizeW = tag.node.getComponent(UITransform).width;
          this.closeTip();
          if (!this.tip) resources.load("prefabs/ui/item/BagUIItemTip", function (completedCount, totalCount, item) {}, function (error, prefab) {
            if (error) {
              console.log(error);
              return;
            }

            _this3.tipDestroy();

            _this3.tip = instantiate(prefab);
            parentNode.addChild(_this3.tip);
            NodeHelp.getchildlable(_this3.tip, "LabelName", Label, function (comp) {
              comp.string = name;
            });
            NodeHelp.getchildlable(_this3.tip, "LabelText", Label, function (comp) {
              comp.string = Text;
            });

            if (Timetext) {
              NodeHelp.getchildlable(_this3.tip, "UseUp", null, function (comp, node) {
                node.active = true;
              });
              NodeHelp.getchildlable(_this3.tip, "UseUp", Label, function (comp) {
                comp.string = Timetext;
              });
            } else {
              NodeHelp.getchildlable(_this3.tip, "UseUp", null, function (comp, node) {
                node.active = false;
              });
            }

            var positionX = tagPos.x > 0 ? tagPos.x - tagSizeW / 2 - _this3.tip.getComponent(UITransform).width / 2 : tagPos.x + tagSizeW / 2 + _this3.tip.getComponent(UITransform).width / 2;

            _this3.tip.setPosition(v3(positionX, tagPos.y, tagPos.z));

            if (tagPos.x <= 0) {
              _this3.tip.getChildByName("Tipbg").setScale(v3_1);

              _this3.tip.getChildByName("Tipbg").children.forEach(function (v) {
                v.setScale(v3_1);
              });
            } else {
              _this3.tip.getChildByName("Tipbg").setScale(v3_2);

              _this3.tip.getChildByName("Tipbg").children.forEach(function (v) {
                v.setScale(v3_2);
              });
            }
          });else {
            //this.tip.parent=null
            parentNode.addChild(this.tip);
            this.tip.active = true;
            NodeHelp.getchildlable(this.tip, "LabelName", Label, function (comp) {
              comp.string = name;
            });
            NodeHelp.getchildlable(this.tip, "LabelText", Label, function (comp) {
              comp.string = Text;
            });

            if (Timetext) {
              NodeHelp.getchildlable(this.tip, "UseUp", null, function (comp, node) {
                node.active = true;
              });
              NodeHelp.getchildlable(this.tip, "UseUp", Label, function (comp) {
                comp.string = Timetext;
              });
            } else {
              NodeHelp.getchildlable(this.tip, "UseUp", null, function (comp, node) {
                node.active = false;
              });
            }

            var positionX = tagPos.x > 0 ? tagPos.x - tagSizeW / 2 - this.tip.getComponent(UITransform).width / 2 : tagPos.x + tagSizeW / 2 + this.tip.getComponent(UITransform).width / 2;
            this.tip.setPosition(v3(positionX, tagPos.y, tagPos.z));

            if (tagPos.x <= 0) {
              this.tip.getChildByName("Tipbg").setScale(v3_1);
              this.tip.getChildByName("Tipbg").children.forEach(function (v) {
                v.setScale(v3_1);
              });
            } else {
              this.tip.getChildByName("Tipbg").setScale(v3_2);
              this.tip.getChildByName("Tipbg").children.forEach(function (v) {
                v.setScale(v3_2);
              });
            }
          }
        };

        _proto.closeTip = function closeTip() {
          if (this.tip) this.tip.active = false;
          if (this.tipGoods) this.tipGoods.active = false;
        };

        _proto.tipDestroy = function tipDestroy() {
          if (this.tip) {
            this.tip.destroy();
            this.tip = null;
          }

          if (this.tipGoods) {
            NodeHelp.getchildlable(this.tipGoods, "Golds", null, function (comp, node) {
              node.destroyAllChildren();
            });
            this.tipGoods.destroy();
            this.tipGoods = null;
          }
        };

        return BagUIItemTip;
      }(Component), _class2.instance = void 0, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseConfigContainer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstValue.ts', './LogWrap.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, resources, ConstValue, LogWrap;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      resources = module.resources;
    }, function (module) {
      ConstValue = module.ConstValue;
    }, function (module) {
      LogWrap = module.LogWrap;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1c6bdetEdRCYr7gDGtjFH+T", "BaseConfigContainer", undefined);

      var BaseConfigContainer = exports('BaseConfigContainer', /*#__PURE__*/function () {
        function BaseConfigContainer(name, callback, caller, arg) {
          this.mTag = void 0;
          this.ConfigData = void 0;
          var self = this;
          resources.load(ConstValue.CONFIG_FILE_DIR + name, function (err, object) {
            if (err) {
              LogWrap.log("load [" + name + "] err");
              LogWrap.log(err);
            } else {
              if (self && self.ConfigData) self.ConfigData = object.json;
            }

            if (callback) {
              callback.call(caller, arg);
            }
          });
        }

        _createClass(BaseConfigContainer, [{
          key: "data",
          get: function get() {
            return this.ConfigData;
          }
        }, {
          key: "tag",
          get: function get() {
            return this.mTag;
          },
          set: function set(value) {
            this.mTag = value;
          }
        }]);

        return BaseConfigContainer;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseGame.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstValue.ts', './EventManager.ts', './UIManager.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _createClass, cclegacy, _decorator, Component, ConstValue, EventManager, UIManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      ConstValue = module.ConstValue;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      UIManager = module.UIManager;
    }],
    execute: function () {
      var _class, _class2;

      cclegacy._RF.push({}, "da74fTXxzNOkLD2K0hCYFxH", "BaseGame", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BaseGame = exports('BaseGame', ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BaseGame, _Component);

        function BaseGame() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.mTag = void 0;
          return _this;
        }

        BaseGame.getUrl = function getUrl() {
          return ConstValue.PREFAB_GAME_DIR + this.className;
        };

        var _proto = BaseGame.prototype;

        _proto.initData = function initData(args) {};

        _proto.closeGame = function closeGame() {
          //EventManager.getInstance().removeAllInGame();
          UIManager.getInstance().closeAllUI();
        };

        _proto.onDestroy = function onDestroy() {
          EventManager.getInstance().removeAll(this);
        };

        _createClass(BaseGame, [{
          key: "tag",
          get: function get() {
            return this.mTag;
          },
          set: function set(value) {
            this.mTag = value;
          }
        }]);

        return BaseGame;
      }(Component), _class2.className = "BaseGame", _class2)) || _class);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BasePanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UIManager.ts', './BaseUI.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _createClass, cclegacy, _decorator, tween, v3, UIManager, BaseUI;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      v3 = module.v3;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      BaseUI = module.BaseUI;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "fa669Ih/zpGq454R+ThNLem", "BasePanel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BasePanel = exports('BasePanel', (_dec = ccclass('BasePanel'), _dec(_class = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(BasePanel, _BaseUI);

        function BasePanel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;
          _this._startPos = null;
          _this._endPos = null;
          return _this;
        }

        var _proto = BasePanel.prototype;

        _proto.onLoad = function onLoad() {};

        _proto.start = function start() {// this.node.position = this._startPos || this.node.position;
          // this._startPos = v3(this.node.position);
          // this._endPos = this._endPos || v3(0, 0, 0);
          // this.node.scale = v3(0, 0, 0);
          // tween(this.node)
          //     .to(0.1, { position: this._endPos, scale: v3(1, 1, 1) })
          //     .start();
        };

        _proto.onClickedClose = function onClickedClose(Action) {
          var _this2 = this;

          if (Action === void 0) {
            Action = true;
          }

          if (Action) tween(this.node).to(0.1, {
            position: this._startPos,
            scale: v3(0, 0, 0)
          }).call(function () {
            _this2.node.destroy();

            UIManager.getInstance().closeUI(_this2.tag);
          }).start();else {
            this.node.destroy();
            UIManager.getInstance().closeUI(this.tag);
          }
        };

        _createClass(BasePanel, [{
          key: "startPos",
          get: function get() {
            return this._startPos;
          },
          set: function set(v) {
            this._startPos = v;
          }
        }, {
          key: "endPos",
          get: function get() {
            return this._endPos;
          },
          set: function set(v) {
            this._endPos = v;
          }
        }]);

        return BasePanel;
      }(BaseUI)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseTip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventManager.ts', './MainGame.ts', './GameManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, Node, tween, Component, EventManager, MainGame, GameManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Node = module.Node;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MainGame = module.MainGame;
    }, function (module) {
      GameManager = module.GameManager;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "b873eOPp3lHpaMukeMtqEe8", "BaseTip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var temp_v3 = new Vec3();
      var BaseTip = exports('BaseTip', (_dec = ccclass('BaseTip'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BaseTip, _Component);

        function BaseTip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.popHeight = 100;
          _this._cbData = null;
          _this.isAnimation = false;

          _initializerDefineProperty(_this, "follow", _descriptor, _assertThisInitialized(_this));

          _this._Game = null;
          return _this;
        }

        var _proto = BaseTip.prototype;

        _proto.onDestroy = function onDestroy() {
          EventManager.getInstance().removeAll(this);
        };

        _proto.initUI = function initUI(arg) {
          var _this2 = this;

          this._Game = GameManager.getInstance().getGame(MainGame);
          this.node.setScale(0, 0, 0);
          this.isAnimation = true;
          this.follow = arg.follow;

          if (this.follow) {
            this.follow.getWorldPosition(temp_v3);
            this.node.setWorldPosition(temp_v3);
          }

          var t1 = tween(this.node).by(0.1, {
            position: new Vec3(0, this.popHeight, 0)
          });
          var t2 = tween(this.node).to(0.1, {
            scale: new Vec3(1, 1, 1)
          });
          tween(this.node).parallel(t1, t2).call(function () {
            _this2.isAnimation = false;
          }).start();
        };

        _proto.testClick = function testClick(uipos) {
          return false;
        };

        _proto.update = function update(delay) {
          if (!this.isAnimation && this.follow) {
            this.follow.getWorldPosition(temp_v3);
            temp_v3.y += this.popHeight;
            this.node.setWorldPosition(temp_v3);
          }
        };

        return BaseTip;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "follow", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstValue.ts', './EventManager.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _createClass, cclegacy, _decorator, UITransform, Node, tween, Vec3, Component, ConstValue, EventManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      Node = module.Node;
      tween = module.tween;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      ConstValue = module.ConstValue;
    }, function (module) {
      EventManager = module.EventManager;
    }],
    execute: function () {
      var _class, _class2;

      cclegacy._RF.push({}, "35178dDUSlGAbHnrKr20936", "BaseUI", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BaseUI = exports('BaseUI', ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BaseUI, _Component);

        function BaseUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.mTag = void 0;
          return _this;
        }

        BaseUI.getclassName = function getclassName() {
          return this.className;
        };

        BaseUI.getUrl = function getUrl() {
          // cc.log(this.className);
          return ConstValue.PREFAB_UI_DIR + this.className;
        };

        var _proto = BaseUI.prototype;

        _proto.setPriority = function setPriority(name, index) {
          var child = this.node.getChildByPath(name);

          if (child) {
            child.setSiblingIndex(index);
          }
        };

        BaseUI.getNodeRect = function getNodeRect(target) {
          if (!target) return {
            Xmin: 0,
            Xmax: 0,
            Ymin: 0,
            Ymax: 0
          };
          var trans = target.getComponent(UITransform);
          var bx = target.position.x;
          var by = target.position.y;
          var cx = trans.width * trans.anchorX;
          var cy = trans.height * trans.anchorY;
          return {
            left: bx - cx,
            right: bx - cx + trans.width,
            top: by - cy + trans.height,
            bottom: by - cy
          };
        };

        BaseUI.getTop = function getTop(target) {
          if (!target) return 0;
          var trans = target.getComponent(UITransform);
          return target.position.y - trans.height * trans.anchorY + trans.height;
        };

        BaseUI.getBottom = function getBottom(target) {
          if (!target) return 0;
          var trans = target.getComponent(UITransform);
          return target.position.y - trans.height * trans.anchorY;
        };

        BaseUI.getLeft = function getLeft(target) {
          if (!target) return 0;
          var trans = target.getComponent(UITransform);
          return target.position.x - trans.width * trans.anchorX;
        };

        BaseUI.getRight = function getRight(target) {
          if (!target) return 0;
          var trans = target.getComponent(UITransform);
          return target.position.x - trans.width * trans.anchorX + trans.width;
        };

        BaseUI.removeAllEvent = function removeAllEvent(node) {
          node.targetOff(node);
        };

        BaseUI.addClickEvent = function addClickEvent(node, efunc) {
          node.on(Node.EventType.TOUCH_END, function (event) {
            if (efunc) efunc(event); //ya.music.playEffect(ya.res.sound_click);

            event.propagationStopped = true;
          });
        };

        BaseUI.addStartEvent = function addStartEvent(node, sfunc) {
          node.on(Node.EventType.TOUCH_START, function (event) {
            if (sfunc) sfunc(event);
            event.propagationStopped = true;
          });
        };

        BaseUI.addMoveEvent = function addMoveEvent(node, mfunc) {
          node.on(Node.EventType.TOUCH_MOVE, function (event) {
            if (mfunc) mfunc(event);
            event.propagationStopped = true;
          });
        };

        BaseUI.addCancelEvent = function addCancelEvent(node, cfunc) {
          node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (cfunc) cfunc(event);
          });
        };

        BaseUI.addTouchEvent = function addTouchEvent(node, efunc, mfunc, bfunc, cfunc) {
          node.on(Node.EventType.TOUCH_END, function (event) {
            if (efunc) efunc(event);
            event.propagationStopped = true;
          });
          node.on(Node.EventType.TOUCH_START, function (event) {
            if (bfunc) bfunc(event);
            event.propagationStopped = true;
          });
          node.on(Node.EventType.TOUCH_MOVE, function (event) {
            if (mfunc) mfunc(event);
            event.propagationStopped = true;
          });
          node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (cfunc) cfunc(event);
          });
        };

        _proto.elasticEffect = function elasticEffect(target, cb) {
          target.setScale(0.9, 0.9, 0.9);
          tween(target).to(0.2, {
            scale: new Vec3(1.05, 1.05, 1.05)
          }).to(0.10, {
            scale: new Vec3(0.95, 0.95, 0.95)
          }).to(0.10, {
            scale: new Vec3(1.0, 1.0, 1.0)
          }).call(function () {
            cb && cb();
          }).start();
        };

        _proto.onDestroy = function onDestroy() {
          EventManager.getInstance().removeAll(this);
        };

        _proto.onShow = function onShow() {};

        _createClass(BaseUI, [{
          key: "tag",
          get: function get() {
            return this.mTag;
          },
          set: function set(value) {
            this.mTag = value;
          }
        }]);

        return BaseUI;
      }(Component), _class2.className = "BaseUI", _class2)) || _class);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BasicPlatform.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, sys, view;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      view = module.view;
    }],
    execute: function () {
      cclegacy._RF.push({}, "144e7O+mE1MC69dT8YEozdv", "BasicPlatform", undefined);

      var BasicPlatform = exports('BasicPlatform', /*#__PURE__*/function () {
        // 无需做适配的手机品牌
        // 需要适配的品牌中为全面屏但是无刘海的手机型号（无需适配）
        // 型号统一用小写
        function BasicPlatform() {
          this.os_name = "web";
          this._not_adapted_brands = void 0;
          this._not_adapted_modes = void 0;
          this.rn = "";
          this.pid = "";
          this.cn = "";
          this.initIPhoneXConfig();
          this.listen();
          this.rn = this.getQueryString("rn");
          this.pid = this.getQueryString("pid");
          this.cn = this.getQueryString("cn");
        }

        var _proto = BasicPlatform.prototype;

        _proto.setItem = function setItem(key, value) {
          sys.localStorage.setItem(key, value);
        };

        _proto.getItem = function getItem(key) {
          return sys.localStorage.getItem(key);
        };

        _proto.getQueryString = function getQueryString(name) {
          if (!window.location || !window.location.search) return null;
          var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
          var r = window.location.search.substr(1).match(reg);
          if (r != null) return unescape(r[2]);
          return null;
        } //切后台
        ;

        _proto.onHide = function onHide() {// game.on(game.EVENT_HIDE, () => {
          //     EventManager.getInstance().trigger("ON_HIDE",null);
          // }, this);
        } //切前台
        ;

        _proto.onShow = function onShow() {// game.on(game.EVENT_SHOW, (params) => {
          //     EventManager.getInstance().trigger("ON_SHOW",null);
          // }, this);
        };

        _proto.onError = function onError() {
          window.onerror = function () {};
        } //上报数据
        ;

        _proto.report = function report(params) {} //检查登录态是否有效
        ;

        _proto.checkSession = function checkSession(cb) {
          if (cb) cb(0);
        } //授权
        ;

        _proto.authorize = function authorize() {} //登录
        ;

        _proto.login = function login() {} //创建用户授权按钮
        ;

        _proto.createUserInfoButton = function createUserInfoButton() {
          return true;
        } //分享
        ;

        _proto.share = function share(params) {
          params && params.cb && params.cb(0, {});
        } //保持屏幕常亮
        ;

        _proto.keepScreenOn = function keepScreenOn() {} //隐藏输入键盘
        ;

        _proto.hideKeyboard = function hideKeyboard() {} //退出游戏
        ;

        _proto.exit = function exit() {} //强制更新游戏
        ;

        _proto.forceUpdate = function forceUpdate() {} //获取系统信息
        ;

        _proto.getSystemInfoSync = function getSystemInfoSync() {
          return {
            statusBarHeight: 0,
            model: 0,
            brand: 0
          };
        } //设置剪切板数据
        ;

        _proto.setClipboardData = function setClipboardData() {} //是否支持跳转
        ;

        _proto.isSupportNavigate = function isSupportNavigate() {
          return false;
        } //是否支持广告
        ;

        _proto.isSupportAd = function isSupportAd() {
          return false;
        } //跳转到第三方程序
        ;

        _proto.navigateToProgram = function navigateToProgram() {} //预览图片
        ;

        _proto.previewImage = function previewImage() {} //保存图片到相册
        ;

        _proto.saveImageToPhotosAlbum = function saveImageToPhotosAlbum() {} //获取用户的设置信息
        ;

        _proto.getSetting = function getSetting() {} //打开用户的设置界面
        ;

        _proto.openSetting = function openSetting(cb) {
          cb && cb(0);
        } //垃圾回收
        ;

        _proto.garbageCollect = function garbageCollect() {
          sys.garbageCollect();
        } //电池电量
        ;

        _proto.getBatteryLevel = function getBatteryLevel() {
          return "0";
        } //平台名称
        ;

        _proto.getPlatformName = function getPlatformName() {
          return this.os_name;
        } //显示banner广告
        ;

        _proto.showBannerAd = function showBannerAd() {};

        _proto.destoryBannerAd = function destoryBannerAd() {};

        _proto.hideBannerAd = function hideBannerAd() {} //创建视频广告
        ;

        _proto.createVideoAd = function createVideoAd() {};

        _proto.checkAdLoaded = function checkAdLoaded(name) {
          return true;
        } //显示视频广告
        ;

        _proto.showVideoAd = function showVideoAd(name, cb) {
          !cb && (cb = name, name = "common");
          cb && cb(true);
        };

        _proto.createInterstitialAd = function createInterstitialAd() {
          return false;
        };

        _proto.showInterstitialAd = function showInterstitialAd() {};

        _proto.destoryInterstitialAd = function destoryInterstitialAd() {} //游戏圈
        ;

        _proto.createGameClubButton = function createGameClubButton() {};

        _proto.destoryGameClubButton = function destoryGameClubButton() {};

        _proto.isSupportGameClub = function isSupportGameClub() {
          return false;
        } //客服
        ;

        _proto.openCustomerService = function openCustomerService() {};

        _proto.isSupportCustomerService = function isSupportCustomerService() {
          return false;
        } //监听一些平台信息
        ;

        _proto.listen = function listen() {
          this.onShow();
          this.onHide();
        };

        _proto.initIPhoneXConfig = function initIPhoneXConfig() {
          // 无需做适配的手机品牌
          this._not_adapted_brands = [// "HUAWEI",
          "xiaomi", "samsung", "oneplus", "meizu", "honor"]; // 需要适配的品牌中为全面屏但是无刘海的手机型号（无需适配）
          // 型号统一用小写

          this._not_adapted_modes = ["vivo nex", "oppo r17", "oppo find", "vivo x23"];
        } //手机品牌是否需要适配
        ;

        _proto.isAdaptedBrand = function isAdaptedBrand(brand) {
          if (!brand) return false;
          brand = brand.toLowerCase();

          for (var i = 0; i < this._not_adapted_brands.length; i++) {
            if (brand === this._not_adapted_brands[i]) {
              return false;
            }
          }

          return true;
        } //手机型号是否需要适配
        ;

        _proto.isAdaptedMode = function isAdaptedMode(model) {
          if (!model) return false;
          model = model.toLowerCase();

          for (var i = 0; i < this._not_adapted_modes.length; i++) {
            if (model.indexOf(this._not_adapted_modes[i]) !== -1) {
              return false;
            }
          }

          return true;
        } //获取刘海屏偏移量
        ;

        _proto.getIPhoneXOffsetHeight = function getIPhoneXOffsetHeight() {
          var t = view.getFrameSize(),
              height = 0;

          if (t.width === 1125 && t.height === 2436 || //iPhoneX
          t.width === 1242 && t.height === 2688) //iphone XS max
            {
              height = 189;
            } else if (t.width === 375 && t.height === 812 || //iPhoneX
          t.width === 414 && t.height === 896) //iphone XS/XS max/XR
            {
              height = 63;
            } else if (t.width === 828 && t.height === 1792) {
            //iphone XR
            height = 126;
          } else if (t.width === 1080 && t.height === 2208) {
            //vivo Y85A
            height = 171;
          } else if (t.width === 360 && t.height === 736) {
            //vivo Y85A
            height = 57;
          } else {
            var system_info = this.getSystemInfoSync();
            var status_height = system_info.statusBarHeight || 0;

            if (status_height < 28) {
              height = 0;
            } else {
              var model = system_info.model;
              var brand = system_info.brand;
              if (!this.isAdaptedBrand(brand) || !this.isAdaptedMode(model)) ;else if (t.width < t.height) {
                // 未知分辨率机型统一按iphoneX适配
                height = 63;
              }
            }
          }

          return height;
        };

        _proto.videoShare = function videoShare(videopath, title, cb) {
          cb && cb(false);
        };

        _proto.gameRecorderStart = function gameRecorderStart() {};

        _proto.gameRecorderPause = function gameRecorderPause() {};

        _proto.gameRecorderResume = function gameRecorderResume() {};

        _proto.gameRecorderRecodeClip = function gameRecorderRecodeClip() {
          return -1;
        };

        _proto.gameRecorderClipVide = function gameRecorderClipVide(args, cb) {
          cb && cb(null);
          return;
        };

        _proto.gameRecorderStop = function gameRecorderStop(cb) {
          cb && cb(null);
          return;
        };

        _proto.gameRecoderClear = function gameRecoderClear() {};

        return BasicPlatform;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/binancechainwallet.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, cclegacy;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d4a0d6Ute5J9aRYrvsTcTnP", "binancechainwallet", undefined);

      var ConnectToBinanceChainWallet = exports('default', /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var provider;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  provider = null;

                  if (!(typeof window.BinanceChain !== 'undefined')) {
                    _context.next = 13;
                    break;
                  }

                  provider = window.BinanceChain;
                  _context.prev = 3;
                  _context.next = 6;
                  return provider.request({
                    method: 'eth_requestAccounts'
                  });

                case 6:
                  _context.next = 11;
                  break;

                case 8:
                  _context.prev = 8;
                  _context.t0 = _context["catch"](3);
                  throw new Error("User Rejected");

                case 11:
                  _context.next = 14;
                  break;

                case 13:
                  throw new Error("No Binance Chain Wallet found");

                case 14:
                  return _context.abrupt("return", provider);

                case 15:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[3, 8]]);
        }));

        return function ConnectToBinanceChainWallet() {
          return _ref.apply(this, arguments);
        };
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/bitski.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, cclegacy;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9d556W2kSFMYoCIIdKOZft0", "bitski", undefined);

      var ConnectToBitski = exports('default', /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(Bitski, opts) {
          var bitski, provider;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  bitski = new Bitski(opts.clientId, opts.callbackUrl, opts.extraBitskiOptions);
                  _context.next = 3;
                  return bitski.signIn();

                case 3:
                  provider = bitski.getProvider(opts.extraProviderOptions);
                  return _context.abrupt("return", provider);

                case 5:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function ConnectToBitski(_x, _x2) {
          return _ref.apply(this, arguments);
        };
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BoatCtl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d0c8162ZaJBS59Tf/xQs7Ta", "BoatCtl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BoatCtl = exports('BoatCtl', (_dec = ccclass('BoatCtl'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BoatCtl, _Component);

        function BoatCtl() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = BoatCtl.prototype;

        _proto.start = function start() {};

        return BoatCtl;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/boltx.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, cclegacy;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "88ffaIKz8tOkKzF8UkLofNO", "boltx", undefined);

      var ConnectToBoltX = exports('default', /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var provider;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  provider = null;

                  if (!(typeof window.boltX !== 'undefined')) {
                    _context.next = 13;
                    break;
                  }

                  provider = window.boltX.ethereum;
                  _context.prev = 3;
                  _context.next = 6;
                  return provider.request({
                    method: 'eth_requestAccounts'
                  });

                case 6:
                  _context.next = 11;
                  break;

                case 8:
                  _context.prev = 8;
                  _context.t0 = _context["catch"](3);
                  throw new Error("User Rejected");

                case 11:
                  _context.next = 14;
                  break;

                case 13:
                  throw new Error("BoltX not found");

                case 14:
                  return _context.abrupt("return", provider);

                case 15:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[3, 8]]);
        }));

        return function ConnectToBoltX() {
          return _ref.apply(this, arguments);
        };
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/build.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './producer.ts', './OperaleDef.ts', './ConfigFile.ts', './GameAllData.ts', './MessageManager.ts', './EventManager.ts', './UIHouse.ts', './UIManager.ts', './ExperienceUI.ts', './GameManager.ts', './MainGame.ts', './TaskManager.ts', './UIHelp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, Vec3, _decorator, SpriteFrame, Sprite, Node, UITransform, producer, OperaleDef, ConfigFile, Configname, GameAllData, MessageManager, EventManager, UIHouse, UIManager, ExperienceUI, GameManager, MainGame, TaskManager, UIHelp;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      Node = module.Node;
      UITransform = module.UITransform;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      OperaleDef = module.OperaleDef;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      UIHouse = module.UIHouse;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      ExperienceUI = module.ExperienceUI;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      MainGame = module.MainGame;
    }, function (module) {
      TaskManager = module.TaskManager;
    }, function (module) {
      UIHelp = module.UIHelp;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "f93869SS1tL2oiSZnO2Xcbn", "build", undefined);

      var _temp_V3 = new Vec3();

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var prop_Text = {
        1: 4020,
        2: 4021,
        3: 4022,
        4: 4023,
        100: 4031,
        101: 4024,
        102: 4025,
        103: 4026,
        104: 4027,
        105: 4028,
        106: 4029,
        107: 4030
      };
      var chimneyPos = [{
        x: 0,
        y: 0
      }, {
        x: -89.829,
        y: 266.031
      }, {
        x: -127.834,
        y: 266.031
      }, {
        x: -140.502,
        y: 317.855
      }, {
        x: -146.26,
        y: 328.22
      }, {
        x: 153.17,
        y: 306.339
      }, {
        x: 0,
        y: 0
      }, {
        x: 0,
        y: 0
      }, {
        x: 26.073,
        y: 786.276
      }, {
        x: 0,
        y: 0
      }, {
        x: 0,
        y: 0
      }];
      var build = exports('build', (_dec = ccclass('build'), _dec2 = property([SpriteFrame]), _dec3 = property(Sprite), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_producer) {
        _inheritsLoose(build, _producer);

        function build() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _producer.call.apply(_producer, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "buildIcon", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "image", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "kind", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nameCode", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "chuizi", _descriptor5, _assertThisInitialized(_this));

          _this._curLevel = null;
          _this._lastLevel = null;
          _this._lock = false;
          return _this;
        }

        var _proto = build.prototype;

        _proto.getType = function getType() {
          return "build";
        };

        _proto.layerAnalysis = function layerAnalysis() {
          var mainGame = GameManager.getInstance().getGame(MainGame);
          mainGame.scensTree.insertNode(this.node);
        };

        _proto.onLoad = function onLoad() {
          if (this.kind == 1001) this.state = OperaleDef.OPENMAIN;else if (this.kind == 1002) this.state = OperaleDef.OPENVIP;else this.state = OperaleDef.SHOWINFO;
          this.ID = this.kind;
          EventManager.getInstance().add(MessageManager.Custom.ScaleChange, this, this.syncScale);
          EventManager.getInstance().add(MessageManager.Custom.HOUSEEXPEVENT, this, this.onExp);
          EventManager.getInstance().add(MessageManager.Custom.VipOrRankChange, this, this.onVipChange);
          EventManager.getInstance().add(MessageManager.Custom.PropOnChange, this, this.onVipChange);
          EventManager.getInstance().add(MessageManager.Custom.HouseDataChange, this, this.onHousechange);
          EventManager.getInstance().add(MessageManager.Custom.OterVipOrRankChange, this, this.onVipChange);
        };

        _proto.start = function start() {};

        _proto.onExp = function onExp() {
          if (this.kind == 1001) this.elasticEffect();
        };

        _proto.syncScale = function syncScale() {
          var game = GameManager.getInstance().getGame(MainGame);
          var scale = game.node.scale;
          var sx = 2.0 - scale.x;

          if (this.chuizi) {
            this.chuizi.setScale(sx, sx, sx);
            this.syncPosition();
          } // this.ExceptionNode.setScale(sx,sx,sx);
          // this.YieldNode.setScale(sx,sx,sx);

        };

        _proto.onDestroy = function onDestroy() {
          EventManager.getInstance().removeAll(this);
        };

        _proto.getConfigData = function getConfigData(level) {
          return ConfigFile.getStatueInfo(this.kind, level);
        };

        _proto.syncPosition = function syncPosition() {
          if (!this.chuizi) return;
          var game = GameManager.getInstance().getGame(MainGame);
          var scale = game.node.scale;
          var fh = this.image.node.getComponent(UITransform).contentSize.height * scale.x;
          var pos = this.image.node.getWorldPosition();
          pos.y += fh;
          this.chuizi.setWorldPosition(pos);
        };

        _proto.onHousechange = function onHousechange() {
          if (this.kind == 1001) {
            this.showLevel();
          } else if (this.kind == 1002) {
            this.showLevel();
          }
        };

        _proto.showHouseEffect = function showHouseEffect() {
          var na = this.node.getChildByName("Chimney");
          if (!na) return;
          var index = GameAllData.FarmHouseResponse.HouseLevel;
          if (index < 0) index = 0;
          if (index >= this.buildIcon.length) index = this.buildIcon.length - 1;
          var pos = chimneyPos[index];

          if (pos.x == 0 && pos.y == 0) {
            na.active = false;
          } else {
            na.active = true;
            na.setPosition(new Vec3(pos.x, pos.y, 0));
          }
        };

        _proto.houseCanUpgrade = function houseCanUpgrade() {
          var HouseData = GameAllData.FarmHouseResponse;
          var con = ConfigFile.getInstance().config.get(Configname.THouseInfo);
          var c = con.find(function (item) {
            return item.HouseId == HouseData.HouseLevel;
          });
          if (!c) return false;
          var next = con.find(function (item) {
            return item.HouseId == HouseData.HouseLevel + 1;
          });
          if (!next) return false;
          if (HouseData.HouseExp >= c.HouseExp) return true;
          return false;
        };

        _proto.showLevel = function showLevel() {
          if (!GameAllData.visitState) {
            if (!GameAllData.FarmUserResponse) return;

            if (this.kind == 1001) {
              var index = GameAllData.FarmHouseResponse.HouseLevel;
              if (index < 0) index = 0;
              if (index >= this.buildIcon.length) index = this.buildIcon.length - 1;
              this.image.spriteFrame = this.buildIcon[index];

              if (this.houseCanUpgrade() && this.chuizi) {
                this.chuizi.active = true;
                this.syncPosition();
              } else {
                this.chuizi.active = false;
              }

              this.showHouseEffect();
            } else {
              var _index = GameAllData.FarmUserResponse.RankLevel;
              if (_index < 0) _index = 0;
              if (_index >= this.buildIcon.length) _index = this.buildIcon.length - 1;
              this.image.spriteFrame = this.buildIcon[_index];
            }
          } else {
            if (!GameAllData.FarmVisitUserResponse) return;

            if (this.kind == 1001) {
              var _index2 = GameAllData.FarmHouseResponse.HouseLevel;
              if (_index2 < 0) _index2 = 0;
              if (_index2 >= this.buildIcon.length) _index2 = this.buildIcon.length - 1;
              this.image.spriteFrame = this.buildIcon[_index2];
            } else {
              var _index3 = GameAllData.FarmVisitUserResponse.RankLevel;
              if (_index3 < 0) _index3 = 0;
              if (_index3 >= this.buildIcon.length) _index3 = this.buildIcon.length - 1;
              this.image.spriteFrame = this.buildIcon[_index3];
            }
          }
        };

        _proto.onVipChange = function onVipChange() {
          this.level = 0;
          this.upData();
          if (this.kind == 1002) this.showLevel();else if (this.kind == 1001) this.showLevel();
        };

        _proto.checkAction = function checkAction(mode, data) {};

        _proto.getBuildType = function getBuildType() {
          return Math.floor(this.nameCode / 4000);
        };

        _proto.upData = function upData() {
          if (GameAllData.visitState) {
            for (var r = 0; r < 5; r++) {
              var l1 = this.getConfigData(r + 1);

              if (l1) {
                if (GameAllData.checkConditionArrayVisit(l1.StatueUnlock)) this.level = r + 1;
              }
            }
          } else {
            for (var _r = 0; _r < 5; _r++) {
              var _l = this.getConfigData(_r + 1);

              if (_l) {
                if (GameAllData.checkConditionArray(_l.StatueUnlock)) this.level = _r + 1;
              }
            }
          }

          var type = this.getBuildType();

          if (type == 1) {
            this._curLevel = this.getConfigData(this.level);
            this._lastLevel = this.getConfigData(this.level + 1);
          }

          if (this.level < 1 && type == 1) {
            var sp = this.node.getComponentsInChildren(Sprite);
            sp.forEach(function (item) {
              item.grayscale = true;
            });
          } else {
            var _sp = this.node.getComponentsInChildren(Sprite);

            _sp.forEach(function (item) {
              item.grayscale = false;
            });
          }
        };

        _proto.canOperale = function canOperale(mode, data, show) {
          if (mode == OperaleDef.SHOWINFO) return false;

          if (_producer.prototype.canOperale.call(this, mode, data, show)) {
            return true;
          }

          return false;
        };

        _proto.getFirstProp = function getFirstProp(prop) {
          var a = prop.split(";");

          for (var index = 0; index < a.length; index++) {
            var m1 = ConfigFile.getLimitInfo(a[index]);
            if (m1.val != 0) return m1;
          }

          return null;
        };

        _proto.getPropString = function getPropString(prop) {
          var m1 = this.getFirstProp(prop);
          var pp = producer.getMessageText(prop_Text[m1.id]);

          if (m1.id >= 100) {
            m1.val = m1.val / 100;
          }

          return pp.format(m1.val);
        };

        _proto.getCondString = function getCondString(cond, prop) {
          var rankname = "";
          var a = cond.split(":");
          var m1 = ConfigFile.getLimitInfo(a[0]);
          var m2 = this.getFirstProp(prop);

          if (m1.id == 1) {
            var pp = producer.getMessageText(4010);
            return pp.format(m1.val, m2.val);
          } else {
            var _pp = producer.getMessageText(4011);

            var duketable = ConfigFile.getInstance().config.get(Configname.TDukeInfo);
            var curDuke = duketable.find(function (item) {
              return item.DukeLevel == m1.val;
            });
            if (curDuke) rankname = producer.getMessageText(curDuke.DukeName);
            return _pp.format(rankname, m2.val);
          }
        };

        _proto.getCondString1 = function getCondString1(level, cond, prop) {
          var rankname = "";
          var a = cond.split(":");
          var m1 = ConfigFile.getLimitInfo(a[0]);

          if (m1.id == 1) {
            var pp = producer.getMessageText(4014);
            return pp.format(m1.val, level) + this.getPropString(prop);
          } else {
            var _pp2 = producer.getMessageText(4015);

            var duketable = ConfigFile.getInstance().config.get(Configname.TDukeInfo);
            var curDuke = duketable.find(function (item) {
              return item.DukeLevel == m1.val;
            });
            if (curDuke) rankname = producer.getMessageText(curDuke.DukeName);
            return _pp2.format(rankname, level) + this.getPropString(prop);
          }
        };

        _proto.onClick = function onClick(uipos) {
          var _this2 = this;

          if (UIManager.getInstance().getUiListNumExceptUIgame() > 0) {
            return;
          }

          if (UIHelp.getTimeDiff(TaskManager.getInstance().clickLastTime) < 500) {
            return;
          }

          TaskManager.getInstance().clickLastTime = UIHelp.getTimeMask();

          _producer.prototype.onClick.call(this, uipos);

          this.upData();
          var showInfo = {};

          if (!this._curLevel) {
            if (this._lastLevel) {
              //wei
              showInfo["tip"] = "StatueUnlockTip";
              showInfo["lock"] = producer.getMessageText(4012); //"待解锁";

              showInfo["text"] = producer.AddDefaultColor(this.getPropString(this._lastLevel.StatueProp));
              showInfo["cond"] = producer.AddDefaultColor(this.getCondString(this._lastLevel.StatueUnlock, this._lastLevel.StatueProp));
            }
          } else {
            //yi
            showInfo["tip"] = "StatueUnlockTip";
            showInfo["lock"] = "LV." + this.level;
            showInfo["text"] = producer.AddDefaultColor(this.getPropString(this._curLevel.StatueProp));

            if (this._lastLevel) {
              showInfo["cond"] = producer.AddDefaultColor(this.getCondString1(this.level + 1, this._lastLevel.StatueUnlock, this._lastLevel.StatueProp));
            }
          }

          var type = this.getBuildType();

          if (type == 1) {
            showInfo["name"] = producer.getMessageText(this.nameCode); //ConfigFile.findLanguage(this.nameCode);

            this.showTip(showInfo, this.state);
          } else {
            //再别人农场不弹窗
            if (!GameAllData.visitState) {
              if (this.kind == 1001) {
                UIManager.getInstance().openUI(UIHouse, 99, function (ui, arg) {
                  ui.initUI();
                }, null, null);
              } else if (this.kind == 1002) {
                UIManager.getInstance().openUI(ExperienceUI, 11, function (ui, args) {
                  ui.PropName = "title";

                  var v3_1 = _this2.node.getWorldPosition(new Vec3());

                  ui.startPos = ui.node.parent.getComponent(UITransform).convertToNodeSpaceAR(v3_1);
                  TaskManager.getInstance().onWindowsOpen("ExpreienceUI+" + ui.PropName);
                }, undefined, null);
              }
            }
          }
        };

        _createClass(build, [{
          key: "state",
          get: function get() {
            return this.getState();
          },
          set: function set(val) {
            this.setState(val);
          }
        }, {
          key: "ID",
          get: function get() {
            return this.getID();
          },
          set: function set(val) {
            this.setID(val);
          }
        }, {
          key: "level",
          get: function get() {
            return this.getLevel();
          },
          set: function set(val) {
            this.setLevel(val);
          }
        }]);

        return build;
      }(producer), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "buildIcon", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "image", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "kind", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "nameCode", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "chuizi", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/burnerconnect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, cclegacy;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1035aNwQfxJ0ZqXzHz1cbKu", "burnerconnect", undefined);

      var ConnectToBurnerConnect = exports('default', /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(BurnerConnectProvider, opts) {
          var provider;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  opts.defaultNetwork = opts.defaultNetwork || opts.network;
                  provider = new BurnerConnectProvider(opts);
                  _context.next = 4;
                  return provider.enable();

                case 4:
                  return _context.abrupt("return", provider);

                case 5:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function ConnectToBurnerConnect(_x, _x2) {
          return _ref.apply(this, arguments);
        };
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CashOutItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './NodeHelp.ts', './ExchangeRecodItem.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, ConfigFile, NodeHelp, ExchangeRecodItem;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      ExchangeRecodItem = module.ExchangeRecodItem;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "05407eYymhBNrW5Vpdx7AV0", "CashOutItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CashOutItem = exports('CashOutItem', (_dec = ccclass('CashOutItem'), _dec(_class = /*#__PURE__*/function (_ExchangeRecodItem) {
        _inheritsLoose(CashOutItem, _ExchangeRecodItem);

        function CashOutItem() {
          return _ExchangeRecodItem.apply(this, arguments) || this;
        }

        var _proto = CashOutItem.prototype;

        _proto.init = function init(data, index) {
          var _this = this;

          _ExchangeRecodItem.prototype.init.call(this, data, index);

          if ((index + 1) % 2 == 0) {
            this.node.getChildByName("bg_2").active = true;
          }

          NodeHelp.getchildlable(this.node, "orderID", Label, function (comp) {
            comp.string = _this.data.order_id;
          });
          NodeHelp.getchildlable(this.node, "currencyType", Label, function (comp) {
            var currencyData = ConfigFile.getItemData(_this.data.currency_type);
            var currencyName = ConfigFile.findLanguage(currencyData.Name);
            comp.string = currencyName;
          });
          NodeHelp.getchildlable(this.node, "currency", Label, function (comp) {
            comp.string = _this.data.currency;
          });
          NodeHelp.getchildlable(this.node, "cashTime", Label, function (comp) {
            //时间显示
            var date = new Date(_this.data.cash_time * 1000);
            var year = date.getFullYear() + "";
            var month = date.getMonth() + 1 + "";
            var day = date.getDate() + "";
            var hours = date.getHours() < 10 ? "0" + date.getHours() : date.getHours() + "";
            var minutes = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes() + "";
            var seconds = date.getSeconds() < 10 ? "0" + date.getSeconds() : date.getSeconds() + "";
            comp.string = month + "/" + day + "/" + year + " " + hours + ":" + minutes + ":" + seconds;
          });
          NodeHelp.getchildlable(this.node, "toTime", Label, function (comp) {
            //时间显示
            var date = new Date(_this.data.to_time * 1000);
            var year = date.getFullYear() + "";
            var month = date.getMonth() + 1 + "";
            var day = date.getDate() + "";
            var hours = date.getHours() < 10 ? "0" + date.getHours() : date.getHours() + "";
            var minutes = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes() + "";
            var seconds = date.getSeconds() < 10 ? "0" + date.getSeconds() : date.getSeconds() + "";
            comp.string = month + "/" + day + "/" + year + " " + hours + ":" + minutes + ":" + seconds;
          });
        };

        return CashOutItem;
      }(ExchangeRecodItem)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CashOutView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstValue.ts', './ConfigFile.ts', './EventManager.ts', './MessageManager.ts', './WebSocketMgr.ts', './NodeHelp.ts', './NumberUtil.ts', './BasePanel.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Button, Slider, ProgressBar, ConstValue, ConfigFile, EventManager, MessageManager, WebSocketMgr, NodeHelp, NumberUtil, BasePanel;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Button = module.Button;
      Slider = module.Slider;
      ProgressBar = module.ProgressBar;
    }, function (module) {
      ConstValue = module.ConstValue;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }, function (module) {
      BasePanel = module.BasePanel;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _class3;

      cclegacy._RF.push({}, "b6469dkT5dGcKbHSieHuChL", "CashOutView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CashOutView = exports('CashOutView', (_dec = ccclass('CashOutView'), _dec2 = property(Label), _dec3 = property(Button), _dec4 = property(Label), _dec5 = property(Slider), _dec6 = property(Label), _dec7 = property(Label), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(CashOutView, _BasePanel);

        function CashOutView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;
          _this.residualCommissionNum = 0;

          _initializerDefineProperty(_this, "labTitle", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnCashOut", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labDesc", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sliNum", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labCashOut", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labCashOutNum", _descriptor6, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = CashOutView.prototype;

        _proto.onLoad = function onLoad() {
          EventManager.getInstance().add(MessageManager.Net.FarmCommissionsGetResponse, this, this.onFarmCommissionsGetResponse);
        };

        _proto.onDestroy = function onDestroy() {
          EventManager.getInstance().remove(MessageManager.Net.FarmCommissionsGetResponse, this, this.onFarmCommissionsGetResponse);
        };

        _proto.start = function start() {
          var strResidualCommissionNum = NumberUtil.numberFormat(this.residualCommissionNum, ConstValue.DECIMAL_PLACES_NUM);
          this.labDesc.string = ConfigFile.findLanguage(7034).format(strResidualCommissionNum);
          this.labTitle.string = ConfigFile.findLanguage(7039);
          this.labCashOut.string = ConfigFile.findLanguage(7035);
          this.labCashOutNum.string = "0";
          NodeHelp.getchildlable(this.btnCashOut.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(7036);
          });
        };

        _proto.onSlidedNum = function onSlidedNum(slider) {
          slider.node.getChildByName("ProgressBar").getComponent(ProgressBar).progress = slider.progress;
          var cashOutNum = NumberUtil.numberFormat(this.residualCommissionNum * slider.progress, ConstValue.DECIMAL_PLACES_NUM);
          this.labCashOutNum.string = cashOutNum;
        };

        _proto.onClickedCashOut = function onClickedCashOut() {
          var num = this.residualCommissionNum * this.sliNum.progress;

          if ("" == this.labCashOutNum.string || num <= 0) {
            return;
          }

          num = Number(NumberUtil.numberFormat(num, ConstValue.DECIMAL_PLACES_NUM, false, ""));
          WebSocketMgr.send(MessageManager.Net.FarmCommissionsGetRequest, {
            num: num
          });
        };

        _proto.onFarmCommissionsGetResponse = function onFarmCommissionsGetResponse(data) {
          if (0 == data.Code) {
            this.residualCommissionNum = data.Commission;
            var strResidualCommissionNum = NumberUtil.numberFormat(this.residualCommissionNum, ConstValue.DECIMAL_PLACES_NUM);
            this.labDesc.string = ConfigFile.findLanguage(7034).format(strResidualCommissionNum);
            this.sliNum.progress = 0;
            this.sliNum.node.getChildByName("ProgressBar").getComponent(ProgressBar).progress = this.sliNum.progress;
            this.labCashOutNum.string = "0";
          }
        };

        return CashOutView;
      }(BasePanel), _class3.className = "CashOutView", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "labTitle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnCashOut", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labDesc", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "sliNum", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "labCashOut", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "labCashOutNum", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/chains.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "82abapzjH5P8IP+NUyNV/mS", "chains", undefined);

      var CHAIN_DATA_LIST = exports('CHAIN_DATA_LIST', {
        1: {
          chainId: 1,
          chain: "ETH",
          network: "mainnet",
          networkId: 1
        },
        2: {
          chainId: 2,
          chain: "EXP",
          network: "expanse",
          networkId: 1
        },
        3: {
          chainId: 3,
          chain: "ETH",
          network: "ropsten",
          networkId: 3
        },
        4: {
          chainId: 4,
          chain: "ETH",
          network: "rinkeby",
          networkId: 4
        },
        5: {
          chainId: 5,
          chain: "ETH",
          network: "goerli",
          networkId: 5
        },
        6: {
          chainId: 6,
          chain: "ETC",
          network: "kotti",
          networkId: 6
        },
        8: {
          chainId: 8,
          chain: "UBQ",
          network: "ubiq",
          networkId: 88
        },
        9: {
          chainId: 9,
          chain: "UBQ",
          network: "ubiq-testnet",
          networkId: 2
        },
        10: {
          chainId: 10,
          chain: "ETH",
          network: "optimism",
          networkId: 10
        },
        11: {
          chainId: 11,
          chain: "META",
          network: "metadium",
          networkId: 11
        },
        12: {
          chainId: 12,
          chain: "META",
          network: "metadium-testnet",
          networkId: 12
        },
        18: {
          chainId: 18,
          chain: "TST",
          network: "thundercore-testnet",
          networkId: 18
        },
        22: {
          chainId: 22,
          chain: "LYX",
          network: "lukso-l14-testnet",
          networkId: 22
        },
        23: {
          chainId: 23,
          chain: "LYX",
          network: "lukso-l15-testnet",
          networkId: 23
        },
        25: {
          chainId: 25,
          chain: "CRO",
          network: "cronos",
          networkId: 25
        },
        30: {
          chainId: 30,
          chain: "RSK",
          network: "rsk",
          networkId: 30
        },
        31: {
          chainId: 31,
          chain: "RSK",
          network: "rsk-testnet",
          networkId: 31
        },
        42: {
          chainId: 42,
          chain: "ETH",
          network: "kovan",
          networkId: 42
        },
        56: {
          chainId: 56,
          chain: "BSC",
          network: "binance",
          networkId: 56
        },
        60: {
          chainId: 60,
          chain: "GO",
          network: "gochain",
          networkId: 60
        },
        61: {
          chainId: 61,
          chain: "ETC",
          network: "etc",
          networkId: 1
        },
        62: {
          chainId: 62,
          chain: "ETC",
          network: "etc-morden",
          networkId: 2
        },
        63: {
          chainId: 63,
          chain: "ETC",
          network: "etc-testnet",
          networkId: 7
        },
        64: {
          chainId: 64,
          chain: "ELLA",
          network: "ellaism",
          networkId: 64
        },
        69: {
          chainId: 69,
          chain: "ETH",
          network: "optimism-kovan",
          networkId: 69
        },
        76: {
          chainId: 76,
          chain: "MIX",
          network: "mix",
          networkId: 76
        },
        77: {
          chainId: 77,
          chain: "POA",
          network: "poa-sokol",
          networkId: 77
        },
        88: {
          chainId: 88,
          chain: "TOMO",
          network: "tomochain",
          networkId: 88
        },
        97: {
          chainId: 97,
          chain: "BSC",
          network: "binance-testnet",
          networkId: 97
        },
        99: {
          chainId: 99,
          chain: "POA",
          network: "poa-core",
          networkId: 99
        },
        100: {
          chainId: 100,
          chain: "XDAI",
          network: "xdai",
          networkId: 100
        },
        101: {
          chainId: 101,
          chain: "ETI",
          network: "etherinc",
          networkId: 1
        },
        108: {
          chainId: 108,
          chain: "TT",
          network: "thundercore",
          networkId: 108
        },
        162: {
          chainId: 162,
          chain: "PHT",
          network: "sirius",
          networkId: 162
        },
        163: {
          chainId: 163,
          chain: "PHT",
          network: "lightstreams",
          networkId: 163
        },
        211: {
          chainId: 211,
          chain: "FTN",
          network: "freight",
          networkId: 0
        },
        250: {
          chainId: 250,
          chain: "FTM",
          network: "fantom",
          networkId: 250
        },
        269: {
          chainId: 269,
          chain: "HPB",
          network: "hpb",
          networkId: 100
        },
        338: {
          chainId: 338,
          chain: "CRO",
          network: "cronos-testnet",
          networkId: 338
        },
        385: {
          chainId: 385,
          chain: "CRO",
          network: "lisinski",
          networkId: 385
        },
        534: {
          chainId: 534,
          chain: "CNDL",
          network: "candle",
          networkId: 534
        },
        820: {
          chainId: 820,
          chain: "CLO",
          network: "callisto",
          networkId: 1
        },
        821: {
          chainId: 821,
          chain: "CLO",
          network: "callisto-testnet",
          networkId: 2
        },
        137: {
          chainId: 137,
          chain: "MATIC",
          network: "matic",
          networkId: 137
        },
        1284: {
          chainId: 1284,
          chain: "GLMR",
          network: "moonbeam",
          networkId: 1284
        },
        1285: {
          chainId: 1285,
          chain: "MOVR",
          network: "moonriver",
          networkId: 1285
        },
        42161: {
          chainId: 42161,
          chain: "ETH",
          network: "arbitrum",
          networkId: 42161
        },
        42220: {
          chainId: 42220,
          chain: "CELO",
          network: "celo",
          networkId: 42220
        },
        44787: {
          chainId: 44787,
          chain: "CELO",
          network: "celo-alfajores",
          networkId: 44787
        },
        62320: {
          chainId: 62320,
          chain: "CELO",
          network: "celo-baklava",
          networkId: 62320
        },
        80001: {
          chainId: 80001,
          chain: "MUMBAI",
          network: "mumbai",
          networkId: 80001
        },
        43113: {
          chainId: 43113,
          chain: "AVAX",
          network: "avalanche-fuji-testnet",
          networkId: 43113
        },
        43114: {
          chainId: 43114,
          chain: "AVAX",
          network: "avalanche-mainnet",
          networkId: 43114
        },
        246529: {
          chainId: 246529,
          chain: "ARTIS sigma1",
          network: "artis-s1",
          networkId: 246529
        },
        246785: {
          chainId: 246785,
          chain: "ARTIS tau1",
          network: "artis-t1",
          networkId: 246785
        },
        1007: {
          chainId: 1007,
          chain: "NewChain TestNet",
          network: "newchain-testnet",
          networkId: 1007
        },
        1012: {
          chainId: 1012,
          chain: "NewChain MainNet",
          network: "newchain-mainnet",
          networkId: 1012
        },
        421611: {
          chainId: 421611,
          chain: "ETH",
          network: "arbitrum-rinkeby",
          networkId: 421611
        },
        1666600000: {
          chainId: 1666600000,
          chain: "ONE",
          network: "harmony-shard1",
          networkId: 1666600000
        },
        1313161554: {
          chainId: 1313161554,
          chain: "AETH",
          network: "aurora",
          networkId: 1313161554
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ChickBox.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumDefine.ts', './ConfigFile.ts', './UIManager.ts', './DateUtil.ts', './NodeHelp.ts', './UIHelp.ts', './BasePanel.ts', './UIConchExchange.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Button, EnumDefine, ConfigFile, UIManager, DateUtil, NodeHelp, UIHelp, BasePanel, UIConchExchange;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Button = module.Button;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      DateUtil = module.DateUtil;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      BasePanel = module.BasePanel;
    }, function (module) {
      UIConchExchange = module.UIConchExchange;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _class3;

      cclegacy._RF.push({}, "bb993vcbJJMK7zKtH6IaRaE", "ChickBox", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ChickBox = exports('ChickBox', (_dec = ccclass('ChickBox'), _dec2 = property({
        type: Label,
        displayName: "文字显示"
      }), _dec3 = property(Label), _dec4 = property(Button), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(ChickBox, _BasePanel);

        function ChickBox() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "Show", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labelY", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "exchange", _descriptor3, _assertThisInitialized(_this));

          _this.text = null;
          _this.code = null;
          _this.moneyType = null;
          _this.confirmCb = null;
          return _this;
        }

        var _proto = ChickBox.prototype;

        _proto.start = function start() {
          var _this2 = this; //this.text = producer.AddDefaultColor(this.text);


          if (this.code == 8047) {
            var cdTime = UIHelp.getBandSafeCodeTime();

            if (cdTime > 0) {
              var str = DateUtil.getDHMSNew(cdTime);
              this.Show.string = ConfigFile.findLanguage(8047).format(str);

              var func = function func() {
                cdTime--;
                str = DateUtil.getDHMSNew(cdTime);

                if (cdTime < 1) {
                  _this2.unschedule(func);

                  _this2.Show.string = ConfigFile.findLanguage(8047).format(0);
                  return;
                }

                _this2.Show.string = ConfigFile.findLanguage(8047).format(str);
              };

              this.schedule(func, 1);
            } else {
              this.Show.string = this.text;
            }
          } else {
            this.Show.string = this.text;
          }

          this.labelY.string = ConfigFile.findLanguage(114001);
          this.exchange.node.active = false;

          if (this.moneyType && this.moneyType != 0) {
            this.exchange.node.active = true;
            NodeHelp.getchildlable(this.exchange.node, "Label", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(10007);
            });
          }
        };

        _proto.onChickConfirmCb = function onChickConfirmCb() {
          if (this.confirmCb) this.confirmCb();
          this.onClickedClose();
        };

        _proto.onExchange = function onExchange() {
          if (this.moneyType == EnumDefine.CurrencyType.Conch) {
            UIManager.getInstance().openUI(UIConchExchange, 12, function (ui, args) {
              ui.initUI(1);
            });
          } else if (this.moneyType == EnumDefine.CurrencyType.PEARL) {
            UIManager.getInstance().openUI(UIConchExchange, 12, function (ui, args) {
              ui.initUI(2);
            });
          }

          UIManager.getInstance().closeUI(ChickBox);
        };

        return ChickBox;
      }(BasePanel), _class3.className = "ChickBox", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Show", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "labelY", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "exchange", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ChoiceBox.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './BasePanel.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, ConfigFile, BasePanel;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      BasePanel = module.BasePanel;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _class3;

      cclegacy._RF.push({}, "fd664PEINFC8IiBEJ5tbbed", "ChoiceBox", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ChoiceBox = exports('ChoiceBox', (_dec = ccclass('ChoiceBox'), _dec2 = property({
        type: Label,
        displayName: "文字显示"
      }), _dec3 = property(Label), _dec4 = property(Label), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(ChoiceBox, _BasePanel);

        function ChoiceBox() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "Show", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labelN", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labelY", _descriptor3, _assertThisInitialized(_this));

          _this.text = null;
          _this.confirmCb = null;
          _this.cancelCb = null;
          return _this;
        }

        var _proto = ChoiceBox.prototype;

        _proto.start = function start() {
          //this.text = producer.AddDefaultColor(this.text);
          this.Show.string = this.text;
          this.labelY.string = ConfigFile.findLanguage(114001);
          this.labelN.string = ConfigFile.findLanguage(114002);
        };

        _proto.onChickConfirm = function onChickConfirm() {
          if (this.confirmCb) this.confirmCb();
          this.onClickedClose();
        };

        _proto.onChickCancel = function onChickCancel() {
          if (this.cancelCb) this.cancelCb();
          this.onClickedClose();
        };

        return ChoiceBox;
      }(BasePanel), _class3.className = "ChoiceBox", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Show", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "labelN", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labelY", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/classNames.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "84c4dyQDG5JDYWONb/RvUe5", "classNames", undefined);

      var MODAL_LIGHTBOX_CLASSNAME = exports('MODAL_LIGHTBOX_CLASSNAME', "web3modal-modal-lightbox");
      var MODAL_CONTAINER_CLASSNAME = exports('MODAL_CONTAINER_CLASSNAME', "web3modal-modal-container");
      var MODAL_HITBOX_CLASSNAME = exports('MODAL_HITBOX_CLASSNAME', "web3modal-modal-hitbox");
      var MODAL_CARD_CLASSNAME = exports('MODAL_CARD_CLASSNAME', "web3modal-modal-card");
      var PROVIDER_WRAPPER_CLASSNAME = exports('PROVIDER_WRAPPER_CLASSNAME', "web3modal-provider-wrapper");
      var PROVIDER_CONTAINER_CLASSNAME = exports('PROVIDER_CONTAINER_CLASSNAME', "web3modal-provider-container");
      var PROVIDER_ICON_CLASSNAME = exports('PROVIDER_ICON_CLASSNAME', "web3modal-provider-icon");
      var PROVIDER_NAME_CLASSNAME = exports('PROVIDER_NAME_CLASSNAME', "web3modal-provider-name");
      var PROVIDER_DESCRIPTION_CLASSNAME = exports('PROVIDER_DESCRIPTION_CLASSNAME', "web3modal-provider-description");
      var CONNECT_BUTTON_CLASSNAME = exports('CONNECT_BUTTON_CLASSNAME', "web3modal-connect-button");

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ClickMask.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './MainGame.ts', './GameManager.ts', './TaskManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, Node, Input, UITransform, resources, instantiate, Size, Component, MainGame, GameManager, TaskManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Node = module.Node;
      Input = module.Input;
      UITransform = module.UITransform;
      resources = module.resources;
      instantiate = module.instantiate;
      Size = module.Size;
      Component = module.Component;
    }, function (module) {
      MainGame = module.MainGame;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      TaskManager = module.TaskManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "af317kcOM9NQqBcytUbHu+3", "ClickMask", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var temp_v3_1 = new Vec3();
      var ClickMask = exports('ClickMask', (_dec = ccclass('ClickMask'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ClickMask, _Component);

        function ClickMask() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "BG", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mask", _descriptor2, _assertThisInitialized(_this));

          _this.follow = null;
          _this.exitCb = null;
          _this.type = 0;
          _this.curDir = 0;
          _this._Game = null;
          _this._GameUI = null;
          _this._Aligment = false;
          _this["double"] = 1.0;
          _this.jiantou = null;
          _this.bt = void 0;
          _this.mt = void 0;
          _this.st = void 0;
          return _this;
        }

        var _proto = ClickMask.prototype;

        _proto.onLoad = function onLoad() {
          this._Game = GameManager.getInstance().getGame(MainGame);
          if (this._Game) this._Game.stopTow();
          this.BG.on(Input.EventType.TOUCH_START, this.onBeginTouch, this);
          this.BG.on(Input.EventType.TOUCH_MOVE, this.onMoveTouch, this);
          this.BG.on(Input.EventType.TOUCH_END, this.onStopTouch, this);
          this.BG.on(Input.EventType.TOUCH_CANCEL, this.onStopTouch, this);
        };

        _proto.start = function start() {
          TaskManager.getInstance().moveMapLock = true;
        };

        _proto.onDestroy = function onDestroy() {
          TaskManager.getInstance().moveMapLock = false;
          this.exitCb && this.exitCb();
        };

        ClickMask.getTop = function getTop(target) {
          if (!target) return 0;
          var trans = target.getComponent(UITransform);
          return target.worldPosition.y - trans.height * trans.anchorY + trans.height;
        };

        ClickMask.getBottom = function getBottom(target) {
          if (!target) return 0;
          var trans = target.getComponent(UITransform);
          return target.worldPosition.y - trans.height * trans.anchorY;
        };

        ClickMask.getLeft = function getLeft(target) {
          if (!target) return 0;
          var trans = target.getComponent(UITransform);
          return target.worldPosition.x - trans.width * trans.anchorX;
        };

        ClickMask.getRight = function getRight(target) {
          if (!target) return 0;
          var trans = target.getComponent(UITransform);
          return target.worldPosition.x - trans.width * trans.anchorX + trans.width;
        };

        ClickMask.getNodeRect = function getNodeRect(target) {
          if (!target) return {
            Xmin: 0,
            Xmax: 0,
            Ymin: 0,
            Ymax: 0
          };
          var trans = target.getComponent(UITransform);
          var bx = target.worldPosition.x;
          var by = target.worldPosition.y;
          var cx = trans.width * trans.anchorX;
          var cy = trans.height * trans.anchorY;
          return {
            left: bx - cx,
            right: bx - cx + trans.width,
            top: by - cy + trans.height,
            bottom: by - cy
          };
        };

        _proto.getEdge = function getEdge(target, dir) {
          var cs = target.getComponent(UITransform).contentSize;

          if (dir == 1) {
            return new Vec3(target.worldPosition.x, target.worldPosition.y + cs.height, 0);
          } else if (dir == 2) {
            return new Vec3(target.worldPosition.x + cs.width, target.worldPosition.y, 0);
          } else if (dir == 3) {
            return new Vec3(target.worldPosition.x, target.worldPosition.y - cs.height, 0);
          } else {
            return new Vec3(target.worldPosition.x - cs.width, target.worldPosition.y, 0);
          }
        };

        _proto.updateMaskShape = function updateMaskShape() {
          if (this.type == 1) {
            this["double"] = 1.0;
          } else if (this.type == 0) {
            this["double"] = 3.0;
          }
        };

        _proto.syncJiantouPos = function syncJiantouPos() {
          var cs = null;
          if (!this.jiantou) return;

          if (!this.node || !this.node.getWorldPosition) {
            return;
          }

          this.node.getWorldPosition(temp_v3_1);
          var tcs = this.jiantou.getComponent(UITransform).contentSize;
          if (this._Aligment) cs = this._Game.getMapObjectSize(this.follow);else cs = this.follow.getComponent(UITransform).contentSize;
          var radius = cs.width > cs.height ? cs.width : cs.height;

          if (this.type == 1) {
            if (this.curDir == 4) {
              this.jiantou.setRotationFromEuler(0, 0, 90);
              temp_v3_1.x -= cs.width - 20;
            } else if (this.curDir == 2) {
              this.jiantou.setRotationFromEuler(0, 0, -90);
              temp_v3_1.x += cs.width + 40;
            } else if (this.curDir == 3) {
              this.jiantou.setRotationFromEuler(0, 0, 180);
              temp_v3_1.y -= cs.height;
              temp_v3_1.y -= tcs.height;
            } else {
              temp_v3_1.y += cs.height;
              temp_v3_1.y += tcs.height;
            }
          } else {
            if (this.curDir == 4) {
              this.jiantou.setRotationFromEuler(0, 0, 90);
              temp_v3_1.x -= radius;
            } else if (this.curDir == 2) {
              temp_v3_1.x += radius;
              temp_v3_1.x += tcs.width;
              this.jiantou.setRotationFromEuler(0, 0, -90);
            } else if (this.curDir == 3) {
              this.jiantou.setRotationFromEuler(0, 0, 180);
              temp_v3_1.y -= radius;
              temp_v3_1.y -= tcs.height;
            } else {
              temp_v3_1.y += radius;
              temp_v3_1.y += tcs.height;
            }
          }

          this.jiantou.setWorldPosition(temp_v3_1);
        };

        _proto.initUI = function initUI(target, type, showJiantou, aligmentTarget, dir, cb) {
          var _this2 = this;

          this.follow = target;
          this.type = type;
          this.curDir = dir;
          this.updateMaskShape();
          this.exitCb = cb;
          var self = this;
          this.mask.active = false;
          this._Aligment = aligmentTarget;

          if (target) {
            target.getWorldPosition(temp_v3_1);
            this.node.setWorldPosition(temp_v3_1);

            if (showJiantou) {
              resources.load("prefabs/ui/item/jiantou", function (error, res) {
                if (res) {
                  var jiantou = instantiate(res);
                  jiantou.parent = self.node;
                  _this2.jiantou = jiantou;

                  _this2.syncJiantouPos();
                }
              });
            }
          }
        };

        _proto.onBeginTouch = function onBeginTouch(event) {};

        _proto.onMoveTouch = function onMoveTouch(event) {};

        _proto.onStopTouch = function onStopTouch(event) {};

        _proto.update = function update(deltaTime) {
          if (this.follow) {
            this.follow.getWorldPosition(temp_v3_1);
            this.node.setWorldPosition(temp_v3_1);
            var cs = null;
            if (this._Aligment) cs = this._Game.getMapObjectSize(this.follow);else cs = this.follow.getComponent(UITransform).contentSize;

            if (this.type == 1) {
              var t = new Size(cs.width * this["double"], cs.height * (this["double"] + 0.1));
              this.mask.getComponent(UITransform).setContentSize(t);
            } else {
              var radius = cs.width > cs.height ? cs.width : cs.height;
              radius *= this["double"];
              this.mask.getComponent(UITransform).setContentSize(new Size(radius, radius));
            }

            this.syncJiantouPos();
            if (!this.mask.active) this.mask.active = true;
          }
        };

        return ClickMask;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "BG", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "mask", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CloudCtl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "f0addYG0ZJGi5bh526KzEY2", "CloudCtl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CloudCtl = exports('CloudCtl', (_dec = ccclass('CloudCtl'), _dec2 = property({
        type: sp.Skeleton
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CloudCtl, _Component);

        function CloudCtl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "spineAni", _descriptor, _assertThisInitialized(_this));

          _this._cb = null;
          _this._data = null;
          return _this;
        }

        var _proto = CloudCtl.prototype;

        _proto.start = function start() {
          if (this.spineAni) {
            this.spineAni.setCompleteListener(this.onSpingComplete.bind(this));
            this.spineAni.animation = 'animation'; // 
            //this.spineAni.timeScale = -1;

            this.spineAni.loop = false; // 是否循环
          }
        };

        _proto.onSpingComplete = function onSpingComplete(trackEntry) {
          this._cb && this._cb(this._data);
          this.node.destroy();
          console.log("ccccc");
        };

        return CloudCtl;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "spineAni", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/clvwallet.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, cclegacy;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a1719z1WKJMZpuM5ZPJj0Bd", "clvwallet", undefined);

      var ConnectToClvWallet = exports('default', /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var provider;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  provider = null;

                  if (!(typeof window.clover !== 'undefined')) {
                    _context.next = 13;
                    break;
                  }

                  provider = window.clover;
                  _context.prev = 3;
                  _context.next = 6;
                  return provider.request({
                    method: 'eth_requestAccounts'
                  });

                case 6:
                  _context.next = 11;
                  break;

                case 8:
                  _context.prev = 8;
                  _context.t0 = _context["catch"](3);
                  throw new Error("User Rejected");

                case 11:
                  _context.next = 14;
                  break;

                case 13:
                  throw new Error("No CLV Wallet found");

                case 14:
                  return _context.abrupt("return", provider);

                case 15:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[3, 8]]);
        }));

        return function ConnectToClvWallet() {
          return _ref.apply(this, arguments);
        };
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/coinbasewallet.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, cclegacy;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8afbcvtKhFFmao0IRHnyC1Y", "coinbasewallet", undefined);

      var ConnectToCoinbaseWalletSdk = exports('default', function ConnectToCoinbaseWalletSdk(CoinbaseWalletSdk, opts) {
        return new Promise( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
          var options, infuraId, chainId, appName, appLogoUrl, darkMode, rpc, coinbaseWalletSdk, provider;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  options = opts || {};
                  infuraId = options.infuraId || "";
                  chainId = options.chainId || 1;
                  appName = options.appName || "";
                  appLogoUrl = options.appLogoUrl;
                  darkMode = options.darkMode || false;
                  rpc = options.rpc || undefined;

                  if (options.infuraId && !options.rpc) {
                    rpc = "https://mainnet.infura.io/v3/" + infuraId;
                  }

                  coinbaseWalletSdk = new CoinbaseWalletSdk({
                    appName: appName,
                    appLogoUrl: appLogoUrl,
                    darkMode: darkMode
                  });
                  _context.prev = 9;
                  provider = coinbaseWalletSdk.makeWeb3Provider(rpc, chainId);
                  _context.next = 13;
                  return provider.send("eth_requestAccounts");

                case 13:
                  resolve(provider);
                  _context.next = 19;
                  break;

                case 16:
                  _context.prev = 16;
                  _context.t0 = _context["catch"](9);
                  reject(_context.t0);

                case 19:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[9, 16]]);
        })));
      });
      /**
       * @deprecated WalletLink is deprecated in favor of CoinbaseWalletSdk
       */

      var walletlink = exports('walletlink', ConnectToCoinbaseWalletSdk);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CommonUtil.ts", ['cc', './GameAllData.ts'], function (exports) {
  'use strict';

  var cclegacy, Color, UITransform, GameAllData;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Color = module.Color;
      UITransform = module.UITransform;
    }, function (module) {
      GameAllData = module.GameAllData;
    }],
    execute: function () {
      cclegacy._RF.push({}, "95409bfIu9AO4lkhT3+rna1", "CommonUtil", undefined);

      var CommonUtil = exports('CommonUtil', /*#__PURE__*/function () {
        function CommonUtil() {}
        /**@description 生成二维码 */


        CommonUtil.createQRcode = function createQRcode(url, graQRcode) {
          var qrcode = new window["QRCode"](-1, 2);
          qrcode.addData(url);
          qrcode.make();
          graQRcode.fillColor = Color.BLACK; //块宽高

          var tileW = graQRcode.node.getComponent(UITransform).width / qrcode.getModuleCount();
          var tileH = graQRcode.node.getComponent(UITransform).height / qrcode.getModuleCount(); // draw in the Graphics

          for (var row = 0; row < qrcode.getModuleCount(); row++) {
            for (var col = 0; col < qrcode.getModuleCount(); col++) {
              if (qrcode.isDark(row, col)) {
                var w = Math.ceil((col + 1) * tileW) - Math.floor(col * tileW);
                var h = Math.ceil((row + 1) * tileW) - Math.floor(row * tileW);
                graQRcode.rect(Math.round(col * tileW), Math.round(row * tileH), w, h);
                graQRcode.fill();
              }
            }
          }
        }
        /**@description 判断当前运行的网络环境是否是测试环境*/
        ;

        CommonUtil.isTestNet = function isTestNet() {
          //需求用点击打开，这里暂时屏蔽
          if (!GameAllData.httpServerUrl) return false;

          if (GameAllData.httpServerUrl.includes("192.168")) {
            return true;
          }

          if (GameAllData.httpServerUrl.includes("farm-sms.c92.xyz")) {
            return true;
          }

          return false;
        };

        return CommonUtil;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/condition.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _createForOfIteratorHelperLoose, cclegacy, _decorator;

  return {
    setters: [function (module) {
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d6fa3rGd+pLfLLK/v1q2tQp", "condition", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Condition = exports('Condition', (_dec = ccclass('Condition'), _dec(_class = /*#__PURE__*/function () {
        function Condition() {}

        Condition.getRate = function getRate(type, value) {
          switch (type) {
            case 'times':
              if (value >= 100) return {
                2: 6
              };
              if (value >= 70) return {
                2: 5
              };
              if (value >= 50) return {
                2: 4
              };
              if (value >= 30) return {
                2: 3
              };
              if (value >= 10) return {
                2: 2
              };
              return {
                2: 1
              };

            case 'achievement':
              if (value >= 100) return {
                3: 6
              };
              if (value >= 70) return {
                3: 5
              };
              if (value >= 50) return {
                3: 4
              };
              if (value >= 30) return {
                3: 3
              };
              if (value >= 10) return {
                3: 2
              };
              return {
                3: 1
              };

            default:
              return {};
          }
        };

        Condition.getGrade = function getGrade(type, value) {
          switch (type) {
            case 'times':
            case 'achievement':
              if (value >= 100) return 3;
              if (value >= 50) return 2;
              if (value >= 10) return 1;
              return 0;

            case 'talentRate':
              if (value >= 0.9) return 3;
              if (value >= 0.6) return 2;
              if (value >= 0.3) return 1;
              return 0;

            case 'eventRate':
              if (value >= 0.6) return 3;
              if (value >= 0.4) return 2;
              if (value >= 0.2) return 1;
              return 0;

            default:
              return 0;
          }
        };

        Condition.parseCondition = function parseCondition(condition) {
          var conditions = [];
          var length = condition.length;
          var stack = [];
          stack.unshift(conditions);
          var cursor = 0;

          var catchString = function catchString(i) {
            var str = condition.substring(cursor, i).trim();
            cursor = i;
            if (str) stack[0].push(str);
          };

          for (var i = 0; i < length; i++) {
            switch (condition[i]) {
              case ' ':
                continue;

              case '(':
                catchString(i);
                cursor++;
                var sub = [];
                stack[0].push(sub);
                stack.unshift(sub);
                break;

              case ')':
                catchString(i);
                cursor++;
                stack.shift();
                break;

              case '|':
              case '&':
                catchString(i);
                catchString(i + 1);
                break;

              default:
                continue;
            }
          }

          catchString(length);
          return conditions;
        };

        Condition.checkCondition = function checkCondition(property, condition) {
          var conditions = Condition.parseCondition(condition);
          return Condition.checkParsedConditions(property, conditions);
        };

        Condition.checkParsedConditions = function checkParsedConditions(property, conditions) {
          if (!Array.isArray(conditions)) return Condition.checkProp(property, conditions);
          if (conditions.length == 0) return true;
          if (conditions.length == 1) return Condition.checkParsedConditions(property, conditions[0]);
          var ret = Condition.checkParsedConditions(property, conditions[0]);

          for (var i = 1; i < conditions.length; i += 2) {
            switch (conditions[i]) {
              case '&':
                if (ret) ret = Condition.checkParsedConditions(property, conditions[i + 1]);
                break;

              case '|':
                if (ret) return true;
                ret = Condition.checkParsedConditions(property, conditions[i + 1]);
                break;

              default:
                return false;
            }
          }

          return ret;
        };

        Condition.ParsedExpress = function ParsedExpress(condition) {
          var length = condition.length;
          var i = condition.search(/[><\!\?=]/);
          var prop = condition.substring(0, i);
          var symbol = condition.substring(i, i += condition[i + 1] == '=' ? 2 : 1);
          var d = condition.substring(i, length);
          var conditionData = null;
          var subSymbol = null;
          var subprop = null;
          if (d[0] == '[') conditionData = JSON.parse(d);else {
            i = d.search(/[><\!\?=]/);

            if (i > 0) {
              subprop = d.substring(0, i);
              subSymbol = d.substring(i, i += d[i + 1] == '=' ? 2 : 1);
              conditionData = Number(d.substring(i, d.length));
            } else {
              conditionData = Number(d);
            }
          }
          return {
            prop: prop,
            subprop: subprop,
            symbol: symbol,
            subSymbol: subSymbol,
            conditionData: conditionData
          };
        };

        Condition.checkProp = function checkProp(property, condition) {
          var length = condition.length;
          var i = condition.search(/[><\!\?=]/);
          var prop = condition.substring(0, i);
          var symbol = condition.substring(i, i += condition[i + 1] == '=' ? 2 : 1);
          var d = condition.substring(i, length);
          var conditionData = null;
          var subSymbol = null;
          var subprop = null;
          if (d[0] == '[') conditionData = JSON.parse(d);else {
            i = d.search(/[><\!\?=]/);

            if (i > 0) {
              subprop = d.substring(0, i);
              subSymbol = d.substring(i, i += d[i + 1] == '=' ? 2 : 1);
              conditionData = Number(d.substring(i, d.length));
            } else {
              conditionData = Number(d);
            }
          }
          var propData = null;

          if (subprop) {
            propData = property.getVal(prop, subprop);
            symbol = subSymbol;
          } else {
            propData = property.get(prop);
          }

          if (propData === undefined) return false;
          if (propData === null) return false;

          switch (symbol) {
            case '>':
              return propData > conditionData;

            case '<':
              return propData < conditionData;

            case '>=':
              return propData >= conditionData;

            case '<=':
              return propData <= conditionData;

            case '=':
              if (Array.isArray(propData)) return propData.includes(conditionData);
              return propData == conditionData;

            case '!=':
              if (Array.isArray(propData)) return !propData.includes(conditionData);
              return propData == conditionData;

            case '?':
              if (Array.isArray(propData)) {
                for (var _iterator = _createForOfIteratorHelperLoose(propData), _step; !(_step = _iterator()).done;) {
                  var p = _step.value;
                  if (conditionData.includes(p)) return true;
                }

                return false;
              }

              return conditionData.includes(propData);

            case '!':
              if (Array.isArray(propData)) {
                for (var _iterator2 = _createForOfIteratorHelperLoose(propData), _step2; !(_step2 = _iterator2()).done;) {
                  var _p = _step2.value;
                  if (conditionData.includes(_p)) return false;
                }

                return true;
              }

              return !conditionData.includes(propData);

            default:
              return false;
          }
        };

        Condition.extractMaxTriggers = function extractMaxTriggers(condition) {
          // Assuming only age related talents can be triggered multiple times.
          var RE_AGE_CONDITION = /AGE\?\[([0-9\,]+)\]/;
          var match_object = RE_AGE_CONDITION.exec(condition);

          if (match_object == null) {
            // Not age related, single trigger.
            return 1;
          }

          var age_list = match_object[1].split(",");
          return age_list.length;
        };

        return Condition;
      }()) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ConfigFile.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumDefine.ts', './GameAllData.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, EnumDefine, GameAllData;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      GameAllData = module.GameAllData;
    }],
    execute: function () {
      exports('Configname', void 0);

      cclegacy._RF.push({}, "d2eb5tA1plFQYpop9fvESor", "ConfigFile", undefined);

      var Configname;

      (function (Configname) {
        Configname["TAnimalInfo"] = "TAnimalInfo";
        Configname["TBotanyInfo"] = "TBotanyInfo";
        Configname["TDukeInfo"] = "TDukeInfo";
        Configname["TFarmInfo"] = "TFarmInfo";
        Configname["TFenceInfo"] = "TFenceInfo";
        Configname["TGlobalInfo"] = "TGlobalInfo";
        Configname["THouseInfo"] = "THouseInfo";
        Configname["TItemInfo"] = "TItemInfo";
        Configname["TLandInfo"] = "TLandInfo";
        Configname["TMessageInfo"] = "TMessageInfo";
        Configname["TPastureInfo"] = "TPastureInfo";
        Configname["TStatueInfo"] = "TStatueInfo";
        Configname["TVersionInfo"] = "TVersionInfo";
        Configname["TVipInfo"] = "TVipInfo";
        Configname["TRoleInfo"] = "TRoleInfo";
        Configname["TBrokerInfo"] = "TBrokerInfo";
        Configname["TVerifyInfo"] = "TVerifyInfo";
        Configname["TConditionInfo"] = "TConditionInfo";
        Configname["TTalkSegmentInfo"] = "TTalkSegmentInfo";
        Configname["TTaskInfo"] = "TTaskInfo";
        Configname["TActivitiesInfo"] = "TActivitiesInfo";
        Configname["TSignInfo"] = "TSignInfo";
        Configname["TLanguageInfo"] = "TLanguageInfo";
      })(Configname || (Configname = exports('Configname', {})));

      var ConfigFile = exports('ConfigFile', /*#__PURE__*/function () {
        function ConfigFile() {
          this._configMap = new Map();
        }

        ConfigFile.getInstance = function getInstance() {
          if (this.instance == null) {
            this.instance = new ConfigFile();
          }

          return this.instance;
        };

        var _proto = ConfigFile.prototype;

        _proto.addconfig = function addconfig(name, data) {
          if (this._configMap.has(name)) {
            this._configMap.get(name).push(data);
          } else {
            var arr = [];
            arr.push(data);

            this._configMap.set(name, arr);
          }
        };

        _proto.clearConfig = function clearConfig(name) {
          if (this._configMap.has(name)) {
            this._configMap["delete"](name);
          }
        }; //


        ConfigFile.findLanguageData = function findLanguageData(messageId) {
          var config = ConfigFile.getInstance().config.get(Configname.TMessageInfo);
          if (!config) return {};
          var data = config.find(function (v) {
            return v.MessageId == messageId;
          });
          if (data) return data;else return {};
        };

        ConfigFile.findLanguage = function findLanguage(messageId, iType) {
          var text = this._findLanguage(messageId);

          var itemData = this.getItemData(iType || EnumDefine.CurrencyType.Conch);

          if (!itemData) {
            return text;
          }

          var iTextId = itemData.Name;

          var iText = this._findLanguage(iTextId);

          text = text.iformat(iText);
          return text;
        };

        ConfigFile._findLanguage = function _findLanguage(messageId) {
          var config = ConfigFile.getInstance().config.get(Configname.TMessageInfo);
          if (!config) return "" + messageId;
          var text = config.find(function (v) {
            return v.MessageId == messageId;
          });

          if (text) {
            var strId = GameAllData.languageId;
            return text[strId] || "" + messageId;
          } else return "" + messageId;
        };

        ConfigFile.getBotanyFromSeedId = function getBotanyFromSeedId(id) {
          var tabledata = ConfigFile.getInstance().config.get(Configname.TBotanyInfo);
          var botany = tabledata.find(function (item) {
            return item.BotanySeedId == id;
          });
          return botany;
        };

        ConfigFile.getAnimalFromCubId = function getAnimalFromCubId(id) {
          var tabledata = ConfigFile.getInstance().config.get(Configname.TAnimalInfo);
          var animal = tabledata.find(function (item) {
            return item.AnimalCubId == id;
          });
          return animal;
        };

        ConfigFile.getAnimalFromModeId = function getAnimalFromModeId(id) {
          var tabledata = ConfigFile.getInstance().config.get(Configname.TAnimalInfo);
          var animal = tabledata.find(function (item) {
            return item.AnimalId == id;
          });
          return animal;
        };

        ConfigFile.getBotanyFromId = function getBotanyFromId(id) {
          var tabledata = ConfigFile.getInstance().config.get(Configname.TBotanyInfo);
          var botany = tabledata.find(function (item) {
            return item.BotanyId == id;
          });
          return botany;
        } //根据道具id获取对应的植物信息
        ;

        ConfigFile.getBotanyFromByItemId = function getBotanyFromByItemId(id) {
          var tabledata = ConfigFile.getInstance().config.get(Configname.TBotanyInfo);
          var botany = tabledata.find(function (item) {
            return item.BotanySeedId == id;
          });
          return botany;
        };

        ConfigFile.getItemData = function getItemData(modeId) {
          var Config = ConfigFile.getInstance().config.get(Configname.TItemInfo);
          if (!Config) return null;
          return Config.find(function (item) {
            return item.ItemId == modeId;
          });
        };

        ConfigFile.getItemName = function getItemName(nameID) {
          var messageConfig = ConfigFile.getInstance().config.get(Configname.TMessageInfo);
          var message = messageConfig.find(function (item) {
            return item.MessageId == nameID;
          });
          return message;
        };

        ConfigFile.getPastureInfo = function getPastureInfo(PastureId, level) {
          var PastureConfig = ConfigFile.getInstance().config.get(Configname.TPastureInfo);
          if (!PastureConfig) return null;
          var data = PastureConfig.find(function (item) {
            return level == item.PastureLevel && PastureId == item.PastureId;
          });
          return data;
        };

        ConfigFile.getGlobalInfo = function getGlobalInfo(tableId) {
          var FarmConfig = ConfigFile.getInstance().config.get(Configname.TGlobalInfo);
          if (!FarmConfig) return null;
          var data = FarmConfig.find(function (item) {
            return item.GlobalId == tableId;
          });
          return data;
        };

        ConfigFile.getFarmAllInfo = function getFarmAllInfo(LandId) {
          var FarmConfig = ConfigFile.getInstance().config.get(Configname.TFarmInfo);
          if (!FarmConfig) return [];
          var data = FarmConfig.filter(function (item) {
            return LandId == item.LandId;
          });
          return data;
        };

        ConfigFile.getFarmInfo = function getFarmInfo(LandId, level) {
          var FarmConfig = ConfigFile.getInstance().config.get(Configname.TFarmInfo);
          if (!FarmConfig) return null;
          var data = FarmConfig.find(function (item) {
            return level == item.FarmLevel && LandId == item.LandId;
          });
          if (data) return data;
          return FarmConfig[FarmConfig.length - 1];
        };

        ConfigFile.getFarmInfoNew = function getFarmInfoNew(LandId, level) {
          var FarmConfig = ConfigFile.getInstance().config.get(Configname.TFarmInfo);
          if (!FarmConfig) return null;
          var data = FarmConfig.find(function (item) {
            return level == item.FarmLevel && LandId == item.LandId;
          });

          if (data) {
            return data;
          } else {
            return null;
          }
        };

        ConfigFile.getFenceInfo = function getFenceInfo(level) {
          var FenceConfig = ConfigFile.getInstance().config.get(Configname.TFenceInfo);
          var data = FenceConfig.find(function (item) {
            return level == item.FenceId;
          });
          if (data) return data;
          return FenceConfig[FenceConfig.length - 1];
        };

        ConfigFile.getFenceInfoNew = function getFenceInfoNew(level) {
          var FenceConfig = ConfigFile.getInstance().config.get(Configname.TFenceInfo);
          var data = FenceConfig.find(function (item) {
            return level == item.FenceId;
          });
          if (data) return data;
          return null;
        };

        ConfigFile.getLandInfo = function getLandInfo(level) {
          var LandConfig = ConfigFile.getInstance().config.get(Configname.TLandInfo);
          var data = LandConfig.find(function (item) {
            return level == item.LandId;
          });
          if (data) return data;
          return LandConfig[LandConfig.length - 1];
        };

        ConfigFile.getLandInfoNew = function getLandInfoNew(level) {
          var LandConfig = ConfigFile.getInstance().config.get(Configname.TLandInfo);
          var data = LandConfig.find(function (item) {
            return level == item.LandId;
          });
          if (data) return data;
          return null;
        };

        ConfigFile.getStatueInfo = function getStatueInfo(StatueId, level) {
          var Config = ConfigFile.getInstance().config.get(Configname.TStatueInfo);
          if (!Config) return null;
          Config = Config.filter(function (item) {
            return item.Kind == StatueId;
          });
          var data = Config.find(function (item) {
            return item.StatueLevel == level;
          }); //if(data) return data;
          //return Config[Config.length-1];

          return data;
        };

        ConfigFile.getLimitInfo = function getLimitInfo(condition) {
          var a = condition.split(",");
          return {
            id: parseInt(a[0]),
            val: parseInt(a[1])
          };
        };

        ConfigFile.getGlobalInfoByGlobalId = function getGlobalInfoByGlobalId(globalId) {
          var info = ConfigFile.getInstance().config.get(Configname.TGlobalInfo);
          return info.find(function (v) {
            return v.GlobalId == globalId;
          });
        };

        ConfigFile.getRoleInfoByRoleId = function getRoleInfoByRoleId(roleId) {
          var info = ConfigFile.getInstance().config.get(Configname.TRoleInfo);
          return info.find(function (v) {
            return v.RoleId == roleId;
          });
        };

        ConfigFile.getRoleInfoBySex = function getRoleInfoBySex(RoleSex) {
          var info = ConfigFile.getInstance().config.get(Configname.TRoleInfo);
          var RoleInfo = info.filter(function (v) {
            return v.RoleSex == RoleSex;
          });
          return RoleInfo;
        };

        ConfigFile.getBrokerInfoByBrokerId = function getBrokerInfoByBrokerId(BrokerId) {
          var Config = ConfigFile.getInstance().config.get(Configname.TBrokerInfo);
          if (!Config) return null;
          var data = Config.find(function (item) {
            return item.BrokerId == BrokerId;
          });
          return data;
        };

        ConfigFile.getBrokerageByPerformance = function getBrokerageByPerformance(Performance) {
          var Config = ConfigFile.getInstance().config.get(Configname.TBrokerInfo);
          if (!Config) return null;
          var data = Config.find(function (item) {
            return item.PerformanceMin <= Performance && item.PerformanceMax > Performance;
          });

          if (!data && Performance >= Config[Config.length - 1].BrokerageCoefficient) {
            data = Config[Config.length - 1];
          }

          if (!data) {
            return 0;
          }

          return data.BrokerageCoefficient;
        }
        /*是否为最大值*/
        ;

        ConfigFile.getBrokerageIsMax = function getBrokerageIsMax(BrokerId) {
          var Config = ConfigFile.getInstance().config.get(Configname.TBrokerInfo);
          if (!Config) return false;
          var isMax = true;
          var data = Config.find(function (item) {
            if (item.BrokerId > BrokerId) {
              isMax = false;
            }
          });
          return isMax;
        };

        ConfigFile.getTTaskInfoByTaskId = function getTTaskInfoByTaskId(TaskId) {
          var Config = ConfigFile.getInstance().config.get(Configname.TTaskInfo);
          if (!Config) return null;
          var data = Config.find(function (item) {
            return item.TaskId == TaskId;
          });
          return data;
        };

        ConfigFile.getTConditionInfoByConditionId = function getTConditionInfoByConditionId(ConditionId) {
          var Config = ConfigFile.getInstance().config.get(Configname.TConditionInfo);
          if (!Config) return null;
          var data = Config.find(function (item) {
            return item.ConditionId == ConditionId;
          });
          return data;
        };

        ConfigFile.getTTalkSegmentInfoByTalkSegmentId = function getTTalkSegmentInfoByTalkSegmentId(TalkSegmentId) {
          var Config = ConfigFile.getInstance().config.get(Configname.TTalkSegmentInfo);
          if (!Config) return null;
          var data = Config.find(function (item) {
            return item.TalkSegmentId == TalkSegmentId;
          });
          return data;
        };

        ConfigFile.getTTalkSegmentInfoByIDSection = function getTTalkSegmentInfoByIDSection(minID, maxID) {
          var Config = ConfigFile.getInstance().config.get(Configname.TTalkSegmentInfo);
          if (!Config) return null;
          var data = [];
          Config.forEach(function (item) {
            if (item.TalkSegmentId >= minID && item.TalkSegmentId <= maxID) {
              data.push(item);
            }
          });
          return data;
        };

        ConfigFile.getTActivitiesInfoByActivitiesId = function getTActivitiesInfoByActivitiesId(activitiesId) {
          var Config = ConfigFile.getInstance().config.get(Configname.TActivitiesInfo);
          if (!Config) return null;
          var data = Config.find(function (item) {
            return item.ActivitiesId == activitiesId;
          });
          return data;
        };

        ConfigFile.getTSignInfoBySignId = function getTSignInfoBySignId(signId) {
          var Config = ConfigFile.getInstance().config.get(Configname.TSignInfo);
          if (!Config) return null;
          var data = Config.find(function (item) {
            return item.SignId == signId;
          });
          return data;
        };

        ConfigFile.getTLanguage = function getTLanguage() {
          var Config = ConfigFile.getInstance().config.get(Configname.TLanguageInfo);
          if (!Config) return null;
          return Config;
        };

        ConfigFile.getTLanguageById = function getTLanguageById(id) {
          var Config = ConfigFile.getInstance().config.get(Configname.TLanguageInfo);
          if (!Config) return null;
          var data = Config.find(function (item) {
            return item.LanguageId == id;
          });
          return data;
        };

        _createClass(ConfigFile, [{
          key: "config",
          get: function get() {
            return this._configMap;
          }
        }]);

        return ConfigFile;
      }());
      ConfigFile.instance = void 0;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ConfigManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseConfigContainer.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, BaseConfigContainer;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      BaseConfigContainer = module.BaseConfigContainer;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1bad8XK0ktAOK78Pk/rWdkS", "ConfigManager", undefined);

      var ConfigManager = exports('ConfigManager', /*#__PURE__*/function () {
        function ConfigManager() {
          this.configContainerList = [];
          this.curLoadedCount = 0;
        }

        ConfigManager.getInstance = function getInstance() {
          if (this.instance == null) {
            this.instance = new ConfigManager();
          }

          return this.instance;
        };

        var _proto = ConfigManager.prototype;

        _proto.getConfig = function getConfig(configClass) {
          for (var i = 0; i < this.configContainerList.length; ++i) {
            if (this.configContainerList[i].tag == configClass) {
              return this.configContainerList[i];
            }
          }

          return null;
        };

        _proto.loadConfig = function loadConfig(name, callback, arg) {
          var config = new BaseConfigContainer(name, callback, this, arg);
          config.tag = name;
          this.configContainerList.push(config);
        };

        _proto.callback = function callback(_callback) {
          this.curLoadedCount += 1;

          if (this.configContainerList.length == this.curLoadedCount) {
            if (_callback) {
              _callback();
            }
          }
        };

        _createClass(ConfigManager, [{
          key: "size",
          get: function get() {
            return this.configContainerList.length;
          }
        }, {
          key: "loadedConunt",
          get: function get() {
            return this.curLoadedCount;
          }
        }]);

        return ConfigManager;
      }());
      ConfigManager.instance = void 0;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ConstLanguage.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "73373v3mjxMTqyWoBQm5FlJ", "ConstLanguage", undefined);

      var ConstLanguage = exports('ConstLanguage', function ConstLanguage() {});
      ConstLanguage.ACCOUNT = 100001;
      ConstLanguage.PASSWORD = 100002;
      ConstLanguage.LOCKSTATE = 100003;
      ConstLanguage.STATUE_EFFECT_1 = 101011;
      ConstLanguage.STATUE_EFFECT_2 = 101012;
      ConstLanguage.STATUE_EFFECT_3 = 101013;
      ConstLanguage.STATUE_EFFECT_4 = 101014;
      ConstLanguage.STATUE_EFFECT_5 = 101015;
      ConstLanguage.STATUE_EFFECT_6 = 101021;
      ConstLanguage.STATUE_EFFECT_7 = 101022;
      ConstLanguage.STATUE_EFFECT_8 = 101023;
      ConstLanguage.STATUE_EFFECT_9 = 101024;
      ConstLanguage.STATUE_EFFECT_10 = 101025;
      ConstLanguage.STATUE_EFFECT_11 = 101031;
      ConstLanguage.STATUE_EFFECT_12 = 101032;
      ConstLanguage.STATUE_EFFECT_13 = 101033;
      ConstLanguage.STATUE_EFFECT_14 = 101034;
      ConstLanguage.STATUE_EFFECT_15 = 101035;
      ConstLanguage.STATUE_EFFECT_16 = 101041;
      ConstLanguage.STATUE_EFFECT_17 = 101042;
      ConstLanguage.STATUE_EFFECT_18 = 101043;
      ConstLanguage.STATUE_EFFECT_19 = 101044;
      ConstLanguage.STATUE_EFFECT_20 = 101045;
      ConstLanguage.STATUE_EFFECT_21 = 101051;
      ConstLanguage.STATUE_EFFECT_22 = 101052;
      ConstLanguage.STATUE_EFFECT_23 = 101053;
      ConstLanguage.STATUE_EFFECT_24 = 101054;
      ConstLanguage.STATUE_EFFECT_25 = 101055;
      ConstLanguage.STATUE_EFFECT_26 = 101061;
      ConstLanguage.STATUE_EFFECT_27 = 101062;
      ConstLanguage.STATUE_EFFECT_28 = 101063;
      ConstLanguage.STATUE_EFFECT_29 = 101064;
      ConstLanguage.STATUE_EFFECT_30 = 101065;
      ConstLanguage.STATUE_LIMIT_1 = 102011;
      ConstLanguage.STATUE_LIMIT_2 = 102012;
      ConstLanguage.STATUE_LIMIT_3 = 102013;
      ConstLanguage.STATUE_LIMIT_4 = 102014;
      ConstLanguage.STATUE_LIMIT_5 = 102015;
      ConstLanguage.STATUE_LIMIT_6 = 102021;
      ConstLanguage.STATUE_LIMIT_7 = 102022;
      ConstLanguage.STATUE_LIMIT_8 = 102023;
      ConstLanguage.STATUE_LIMIT_9 = 102024;
      ConstLanguage.STATUE_LIMIT_10 = 102025;
      ConstLanguage.STATUE_LIMIT_11 = 102031;
      ConstLanguage.STATUE_LIMIT_12 = 102032;
      ConstLanguage.STATUE_LIMIT_13 = 102033;
      ConstLanguage.STATUE_LIMIT_14 = 102034;
      ConstLanguage.STATUE_LIMIT_15 = 102035;
      ConstLanguage.STATUE_LIMIT_16 = 102041;
      ConstLanguage.STATUE_LIMIT_17 = 102042;
      ConstLanguage.STATUE_LIMIT_18 = 102043;
      ConstLanguage.STATUE_LIMIT_19 = 102044;
      ConstLanguage.STATUE_LIMIT_20 = 102045;
      ConstLanguage.STATUE_LIMIT_21 = 102051;
      ConstLanguage.STATUE_LIMIT_22 = 102052;
      ConstLanguage.STATUE_LIMIT_23 = 102053;
      ConstLanguage.STATUE_LIMIT_24 = 102054;
      ConstLanguage.STATUE_LIMIT_25 = 102055;
      ConstLanguage.STATUE_LIMIT_26 = 102061;
      ConstLanguage.STATUE_LIMIT_27 = 102062;
      ConstLanguage.STATUE_LIMIT_28 = 102063;
      ConstLanguage.STATUE_LIMIT_29 = 102064;
      ConstLanguage.STATUE_LIMIT_30 = 102065;
      ConstLanguage.LAND_UNLOCK_LIMIT1 = 103001;
      ConstLanguage.LAND_UNLOCK_LIMIT2 = 103002;
      ConstLanguage.LAND_UNLOCK_LIMIT3 = 103003;
      ConstLanguage.TIME_FORMAT_DAY = 104001;
      ConstLanguage.TIME_FORMAT_HOUR = 104002;
      ConstLanguage.TIME_FORMAT_MINS = 104003;
      ConstLanguage.TIME_FORMAT_SECOND = 104004;
      ConstLanguage.SEED_UNLOCK_LIMIT1 = 105001;
      ConstLanguage.SEED_UNLOCK_LIMIT2 = 105002;
      ConstLanguage.SEED_UNLOCK_LIMIT3 = 105003;
      ConstLanguage.SEED_UNLOCK_LIMIT4 = 105004;
      ConstLanguage.VIP_EXPERIENCE_NAME1 = 108001;
      ConstLanguage.VIP_EXPERIENCE_NAME2 = 108002;
      ConstLanguage.VIP_EXPERIENCE_TIP1 = 108003;
      ConstLanguage.VIP_EXPERIENCE_TIP2 = 108004;
      ConstLanguage.VIP_EXPERIENCE_TIP3 = 108005;
      ConstLanguage.VIP_EXPERIENCE_BUTTON1 = 108011;
      ConstLanguage.VIP_EXPERIENCE_BUTTON2 = 108012;
      ConstLanguage.VIP_EXPERIENCE_UNLOCKSICON1 = 108013;
      ConstLanguage.VIP_EXPERIENCE_UNLOCKSICON2 = 108014;
      ConstLanguage.VIP_EXPERIENCE_LEVEL = 108016;
      ConstLanguage.MARKET_VIEW_CURRENCY_TEXT1 = 106001;
      ConstLanguage.MARKET_VIEW_CURRENCY_TEXT2 = 106002;
      ConstLanguage.MARKET_VIEW_CURRENCY_TEXT3 = 106003;
      ConstLanguage.MARKET_VIEW_CURRENCY_TEXT4 = 106004;
      ConstLanguage.MARKET_VIEW_CURRENCY_TEXT5 = 106005;
      ConstLanguage.MARKET_VIEW_CURRENCY_TEXT6 = 106006;
      ConstLanguage.MARKET_VIEW_CURRENCY_TIPS1 = 106007;
      ConstLanguage.MARKET_VIEW_CURRENCY_TIPS2 = 106008;
      ConstLanguage.MARKET_VIEW_CURRENCY_TIPS3 = 106009;
      ConstLanguage.MARKET_VIEW_CURRENCY_TIPS4 = 106010;
      ConstLanguage.MARKET_VIEW_CURRENCY_TIPS5 = 106011;
      ConstLanguage.MARKET_VIEW_CURRENCY_TIPS6 = 106012;
      ConstLanguage.MARKET_VIEW_CURRENCY_TIPS7 = 106013;
      ConstLanguage.MARKET_VIEW_CURRENCY_TIPS8 = 106014;
      ConstLanguage.MARKET_TRADE_RECORD_TIME1 = 106015;
      ConstLanguage.MARKET_TRADE_RECORD_BUTTON1 = 106017;
      ConstLanguage.MARKET_TRADE_RECORD_BUTTON2 = 106018;
      ConstLanguage.MARKET_TRADE_RECORD_BUTTON3 = 106019;
      ConstLanguage.MARKET_TRADE_RECORD_BUTTON4 = 106021;
      ConstLanguage.MARKET_TRADE_RECORD_BUTTON5 = 106022;
      ConstLanguage.MARKET_TRADE_RECORD_BUTTON6 = 106024;
      ConstLanguage.MARKET_TRADE_RECORD_BUTTON7 = 106025;
      ConstLanguage.MARKET_TRADE_RECORD_BUTTON8 = 106026;
      ConstLanguage.MARKET_TRADE_RECORD_BUTTON9 = 106027;
      ConstLanguage.MARKET_TRADE_RECORD_BUTTON10 = 106028;
      ConstLanguage.MARKET_TRADE_RECORD_BUTTON11 = 106029;
      ConstLanguage.MARKET_TRADE_RECORD_BUTTON12 = 106030;
      ConstLanguage.MARKET_TRADE_RECORD_BUTTON13 = 106031;
      ConstLanguage.MARKET_VIEW_PANEL_TITLE1 = 106032;
      ConstLanguage.MARKET_VIEW_PANEL_TITLE2 = 106033;
      ConstLanguage.MARKET_VIEW_LOBBY_NOTICE = 106034;
      ConstLanguage.MARKET_VIEW_LOBBY_GOODSINFO = 106035;
      ConstLanguage.MARKET_VIEW_LOBBY_BUTTON2 = 106036;
      ConstLanguage.MARKET_VIEW_LOBBY_BUTTON3 = 106037;
      ConstLanguage.MARKET_VIEW_LOBBY_BUTTON4 = 106038;
      ConstLanguage.MARKET_VIEW_LOBBY_LINEINFO = 106039;
      ConstLanguage.MARKET_VIEW_LOBBY_LINEINFO2 = 106040;
      ConstLanguage.MARKET_VIEW_TRADE_BUTTON1 = 106041;
      ConstLanguage.MARKET_VIEW_TRADE_BUTTON2 = 106042;
      ConstLanguage.MARKET_VIEW_TRADE_RECORD = 106043;
      ConstLanguage.MARKET_VIEW_TRADE_INFO1 = 106045;
      ConstLanguage.MARKET_VIEW_TRADE_INFO2 = 106046;
      ConstLanguage.MARKET_VIEW_TRADE_BUYSELLORDER1 = 106047;
      ConstLanguage.MARKET_VIEW_TRADE_BUYSELLORDER2 = 106048;
      ConstLanguage.MARKET_VIEW_TRADE_BUYSELLORDER3 = 106049;
      ConstLanguage.MARKET_VIEW_TRADE_BUYSELLORDER4 = 106050;
      ConstLanguage.MARKET_VIEW_TRADE_MINEORDER1 = 106051;
      ConstLanguage.MARKET_VIEW_TRADE_MINEORDER2 = 106052;
      ConstLanguage.MARKET_VIEW_TRADE_DESC = 106053;
      ConstLanguage.MARKET_VIEW_TRADE_TIP1 = 106058;
      ConstLanguage.MARKET_VIEW_TRADE_TIP2 = 106069;
      ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT1 = 106061;
      ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT2 = 106062;
      ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT3 = 106063;
      ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT4 = 106064;
      ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT5 = 106065;
      ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT6 = 106066;
      ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT7 = 106067;
      ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT8 = 106068;
      ConstLanguage.MARKET_TRADE_MINE_BUTTON1 = 106071;
      ConstLanguage.MARKET_TRADE_MINE_GOODSINFO = 106072;
      ConstLanguage.MARKET_TRADE_THEIR_GOODSINFO1 = 106081;
      ConstLanguage.MARKET_TRADE_THEIR_GOODSINFO2 = 106082;
      ConstLanguage.MARKET_TRADE_THEIR_GOODSINFO3 = 106083;
      ConstLanguage.MARKET_TRADE_THEIR_GOODSINFO4 = 106084;
      ConstLanguage.SHOP_ITEM_TIME1 = 107001;
      ConstLanguage.SHOP_ITEM_TIME2 = 107002;
      ConstLanguage.SHOP_ITEM_TIME3 = 107003;
      ConstLanguage.SHOP_ITEM_TIME4 = 107004;
      ConstLanguage.SHOP_ITEM_BUYNUM1 = 107005;
      ConstLanguage.SHOP_ITEM_MASK_VIPUNLOCK = 107006;
      ConstLanguage.SHOP_ITEM_MASK_VIPUNLOCK2 = 107007;
      ConstLanguage.SHOP_ITEM_MASK_VIPUNLOCK3 = 107008;
      ConstLanguage.SHOP_ITEM_MASK_BUYTEXT = 107009;
      ConstLanguage.SHOP_ITEM_MASK_TIP = 107010;
      ConstLanguage.SHOP_ITEM_MASK_TIP2 = 107011;
      ConstLanguage.SHOP_ITEM_MASK_BUYNUM = 107012;
      ConstLanguage.SHOP_ITEM_MASK_BUYNUM2 = 107013;
      ConstLanguage.SHOP_ITEM_USE_UP = 107014;
      ConstLanguage.Set_PANEL_TEXT1 = 109001;
      ConstLanguage.Set_PANEL_TEXT2 = 109002;
      ConstLanguage.Set_PANEL_TEXT3 = 109003;
      ConstLanguage.Set_PANEL_BUTTON1 = 109011;
      ConstLanguage.Set_PANEL_BUTTON2 = 109012;
      ConstLanguage.Set_PANEL_BUTTON3 = 109013;
      ConstLanguage.Set_PANEL_BUTTON4 = 109014;
      ConstLanguage.Set_PANEL_BUTTON5 = 109015;
      ConstLanguage.Set_PANEL_BUTTON6 = 109016;
      ConstLanguage.Set_PANEL_BUTTON7 = 109017;
      ConstLanguage.Set_PANEL_NOTICE1 = 109021;
      ConstLanguage.Set_PANEL_NOTICE2 = 109022;
      ConstLanguage.Set_PANEL_ACCOUNT1 = 109031;
      ConstLanguage.Set_PANEL_ACCOUNT2 = 109032;
      ConstLanguage.Set_PANEL_ACCOUNT3 = 109033;
      ConstLanguage.Set_PANEL_ACCOUNT4 = 109034;
      ConstLanguage.VERIFICATION_PANEL_TEXT1 = 110001;
      ConstLanguage.VERIFICATION_PANEL_TEXT2 = 110002;
      ConstLanguage.VERIFICATION_PANEL_TIP1 = 110003;
      ConstLanguage.VERIFICATION_PANEL_TIP2 = 8004;
      ConstLanguage.NOTICE_PANEL_TEXT1 = 111011;
      ConstLanguage.NOTICE_PANEL_BUTTON1 = 111012;
      ConstLanguage.NOTICE_PANEL_BUTTON2 = 111013;
      ConstLanguage.NOTICE_PANEL_BUTTON3 = 111014;
      ConstLanguage.NOTICE_PANEL_BUTTON4 = 111015;
      ConstLanguage.NOTICE_PANEL_CONTENT1 = 111016;
      ConstLanguage.NOTICE_PANEL_CONTENT2 = 111017;
      ConstLanguage.NOTICE_PANEL_CONTENT3 = 111018;
      ConstLanguage.NOTICE_PANEL_NOTHAVE1 = 111019;
      ConstLanguage.NOTICE_PANEL_NOTHAVE2 = 111020;
      ConstLanguage.BAG_PANEL_TEXT1 = 111031;
      ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT9 = 112058;
      ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT10 = 112059;
      ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT11 = 112060;
      ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT12 = 112061;
      ConstLanguage.MARKET_TRADE_EDITBOX_PLACEHOLDER1 = 112062;
      ConstLanguage.UIHEAD_TRADE_MSG_TIP1 = 112063;
      ConstLanguage.UIHEAD_TRADE_MSG_TIP2 = 112064;
      ConstLanguage.UIHEAD_TRADE_BUTTON_TEXT1 = 112065;
      ConstLanguage.UIHEAD_TRADE_BG_TIP1 = 112066;
      ConstLanguage.UIHEAD_TRADE_Describe_BUTTON1 = 112067;
      ConstLanguage.UIHEAD_TRADE_Describe_QTXET1 = 112068;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ConstValue.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "66b51obcd1Mi4dcboc3fwIs", "ConstValue", undefined);

      var ConstValue = exports('ConstValue', function ConstValue() {});
      ConstValue.CONFIG_FILE_DIR = "config/";
      ConstValue.STORY_FILE_DIR = "story/";
      ConstValue.PREFAB_UI_DIR = "prefabs/ui/view/";
      ConstValue.PREFAB_GAME_DIR = "prefabs/game/";
      ConstValue.AUDIO_DIR = "audio/";
      ConstValue.MANIFEST_ROOT_DIR = "manifest/";
      ConstValue.PROJECT_MANIFEST_FILE = "project.manifest";
      ConstValue.SCREEN_HEIGHT = 1280;
      ConstValue.SCREEN_WIDTH = 720;
      ConstValue.DECIMAL_PLACES_NUM = 4;
      ConstValue.WEB_VERSION = "1.0.0";
      ConstValue.LANGUAGE = "en_us";
      ConstValue.OPERATOR_ID = 999;
      ConstValue.CHANNEL_ID = 1000;
      ConstValue.OPERATOR_URL = "https://websitefarm.mrmb.xyz?";
      ConstValue.RRCHANGE_URL = "http://webapifarm.mrmb.xyz/goApi/";
      ConstValue.HTTP_SERVER_URL = "https://gameapifarm.mrmb.xyz/api/v1/";
      ConstValue.HOT_UPDATE_URL = "";

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Core.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './events.ts', './keys.ts', './utils.ts', './index8.ts', './events2.ts', './providers.ts'], function (exports) {
  'use strict';

  var _createClass, _asyncToGenerator, _regeneratorRuntime, _extends, cclegacy, CONNECT_EVENT, ERROR_EVENT, CLOSE_EVENT, SELECT_EVENT, WEB3_CONNECT_MODAL_ID, getThemeColors, themesList, EventController, ProviderController;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
      _extends = module.extends;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CONNECT_EVENT = module.CONNECT_EVENT;
      ERROR_EVENT = module.ERROR_EVENT;
      CLOSE_EVENT = module.CLOSE_EVENT;
      SELECT_EVENT = module.SELECT_EVENT;
    }, function (module) {
      WEB3_CONNECT_MODAL_ID = module.WEB3_CONNECT_MODAL_ID;
    }, function (module) {
      getThemeColors = module.getThemeColors;
    }, function (module) {
      themesList = module.themesList;
    }, function (module) {
      EventController = module.EventController;
    }, function (module) {
      ProviderController = module.ProviderController;
    }],
    execute: function () {
      cclegacy._RF.push({}, "66f88JoXz5Jgay+fEpnOnda", "Core", undefined);

      var INITIAL_STATE = {
        show: false
      };
      var defaultOpts = {
        lightboxOpacity: 0.4,
        theme: themesList["default"].name,
        cacheProvider: false,
        disableInjectedProvider: false,
        providerOptions: {},
        network: ""
      };
      var Core = exports('Core', /*#__PURE__*/function () {
        function Core(opts) {
          var _this = this;

          this.show = INITIAL_STATE.show;
          this.themeColors = void 0;
          this.eventController = new EventController();
          this.lightboxOpacity = void 0;
          this.providerController = void 0;
          this.userOptions = void 0;

          this.connect = function () {
            return new Promise( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
              return _regeneratorRuntime().wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _this.on(CONNECT_EVENT, function (provider) {
                        return resolve(provider);
                      });

                      _this.on(ERROR_EVENT, function (error) {
                        reject(error);
                      });

                      _this.on(CLOSE_EVENT, function () {
                        return reject("Modal closed by user");
                      });

                      _context.next = 5;
                      return _this.toggleModal();

                    case 5:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            })));
          };

          this.connectTo = function (id) {
            return new Promise( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve, reject) {
              var provider;
              return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      _this.on(CONNECT_EVENT, function (provider) {
                        return resolve(provider);
                      });

                      _this.on(ERROR_EVENT, function (error) {
                        reject(error);
                      });

                      _this.on(CLOSE_EVENT, function () {
                        return reject("Modal closed by user");
                      });

                      provider = _this.providerController.getProvider(id);

                      if (provider) {
                        _context2.next = 6;
                        break;
                      }

                      return _context2.abrupt("return", reject(new Error("Cannot connect to provider (" + id + "), check provider options")));

                    case 6:
                      _context2.next = 8;
                      return _this.providerController.connectTo(provider.id, provider.connector);

                    case 8:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2);
            })));
          };

          this._toggleModal = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            var d, body;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    d = typeof window !== "undefined" ? document : "";
                    body = d ? d.body || d.getElementsByTagName("body")[0] : "";

                    if (body) {
                      if (_this.show) {
                        body.style.overflow = "";
                      } else {
                        body.style.overflow = "hidden";
                      }
                    }

                    _context3.next = 5;
                    return _this.updateState({
                      show: !_this.show
                    });

                  case 5:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3);
          }));
          this.onError = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(error) {
            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    if (!_this.show) {
                      _context4.next = 3;
                      break;
                    }

                    _context4.next = 3;
                    return _this._toggleModal();

                  case 3:
                    if (error.message == "User closed modal") {
                      _this.eventController.trigger(CLOSE_EVENT, "User closed modal");
                    } else _this.eventController.trigger(ERROR_EVENT, error);

                  case 4:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4);
          }));

          this.onProviderSelect = function (providerId) {
            _this.eventController.trigger(SELECT_EVENT, providerId);
          };

          this.onConnect = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(provider) {
            return _regeneratorRuntime().wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    if (!_this.show) {
                      _context5.next = 3;
                      break;
                    }

                    _context5.next = 3;
                    return _this._toggleModal();

                  case 3:
                    _this.eventController.trigger(CONNECT_EVENT, provider);

                  case 4:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5);
          }));
          this.onClose = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
            return _regeneratorRuntime().wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    if (!_this.show) {
                      _context6.next = 3;
                      break;
                    }

                    _context6.next = 3;
                    return _this._toggleModal();

                  case 3:
                    _this.eventController.trigger(CLOSE_EVENT);

                  case 4:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6);
          }));
          this.updateState = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(state) {
            return _regeneratorRuntime().wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    Object.keys(state).forEach(function (key) {
                      _this[key] = state[key];
                    });
                  //await window.updateWeb3Modal(state);

                  case 1:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7);
          }));

          this.resetState = function () {
            return _this.updateState(_extends({}, INITIAL_STATE));
          };

          var options = _extends({}, defaultOpts, opts);

          this.lightboxOpacity = options.lightboxOpacity;
          this.themeColors = getThemeColors(options.theme);
          this.providerController = new ProviderController({
            disableInjectedProvider: options.disableInjectedProvider,
            cacheProvider: options.cacheProvider,
            providerOptions: options.providerOptions,
            network: options.network
          });
          this.providerController.on(CONNECT_EVENT, function (provider) {
            return _this.onConnect(provider);
          });
          this.providerController.on(ERROR_EVENT, function (error) {
            return _this.onError(error);
          });
          this.providerController.on(SELECT_EVENT, this.onProviderSelect);
          this.userOptions = this.providerController.getUserOptions();
          this.renderModal();
        }

        var _proto = Core.prototype;

        _proto.toggleModal = /*#__PURE__*/function () {
          var _toggleModal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
            return _regeneratorRuntime().wrap(function _callee8$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    if (!this.cachedProvider) {
                      _context8.next = 4;
                      break;
                    }

                    _context8.next = 3;
                    return this.providerController.connectToCachedProvider();

                  case 3:
                    return _context8.abrupt("return");

                  case 4:
                    if (!(this.userOptions && this.userOptions.length === 1 && this.userOptions[0].name)) {
                      _context8.next = 14;
                      break;
                    }

                    _context8.prev = 5;
                    _context8.next = 8;
                    return this.userOptions[0].onClick();

                  case 8:
                    _context8.next = 13;
                    break;

                  case 10:
                    _context8.prev = 10;
                    _context8.t0 = _context8["catch"](5);
                    console.log("onClick error");

                  case 13:
                    return _context8.abrupt("return");

                  case 14:
                    _context8.next = 16;
                    return this._toggleModal();

                  case 16:
                  case "end":
                    return _context8.stop();
                }
              }
            }, _callee8, this, [[5, 10]]);
          }));

          function toggleModal() {
            return _toggleModal.apply(this, arguments);
          }

          return toggleModal;
        }();

        _proto.on = function on(event, callback) {
          var _this2 = this;

          this.eventController.on({
            event: event,
            callback: callback
          });
          return function () {
            return _this2.eventController.off({
              event: event,
              callback: callback
            });
          };
        };

        _proto.off = function off(event, callback) {
          this.eventController.off({
            event: event,
            callback: callback
          });
        };

        _proto.getUserOptions = function getUserOptions() {
          return this.userOptions;
        };

        _proto.clearCachedProvider = function clearCachedProvider() {
          this.providerController.clearCachedProvider();
        };

        _proto.setCachedProvider = function setCachedProvider(id) {
          this.providerController.setCachedProvider(id);
        };

        _proto.updateTheme = /*#__PURE__*/function () {
          var _updateTheme = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(theme) {
            return _regeneratorRuntime().wrap(function _callee9$(_context9) {
              while (1) {
                switch (_context9.prev = _context9.next) {
                  case 0:
                    this.themeColors = getThemeColors(theme);
                    _context9.next = 3;
                    return this.updateState({
                      themeColors: this.themeColors
                    });

                  case 3:
                  case "end":
                    return _context9.stop();
                }
              }
            }, _callee9, this);
          }));

          function updateTheme(_x8) {
            return _updateTheme.apply(this, arguments);
          }

          return updateTheme;
        }() // --------------- PRIVATE METHODS --------------- //
        ;

        _proto.renderModal = function renderModal() {
          var el = document.createElement("div");
          el.id = WEB3_CONNECT_MODAL_ID;
          document.body.appendChild(el); // ReactDOM.render(
          //   <Modal
          //     themeColors={this.themeColors}
          //     userOptions={this.userOptions}
          //     onClose={this.onClose}
          //     resetState={this.resetState}
          //     lightboxOpacity={this.lightboxOpacity}
          //   />,
          //   document.getElementById(WEB3_CONNECT_MODAL_ID)
          // );
        };

        _createClass(Core, [{
          key: "cachedProvider",
          get: function get() {
            return this.providerController.cachedProvider;
          } // --------------- PUBLIC METHODS --------------- //

        }]);

        return Core;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CubInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './BaseTip.ts', './producer.ts', './GameAllData.ts', './NodeHelp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Sprite, Color, ConfigFile, BaseTip, producer, GameAllData, NodeHelp;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Sprite = module.Sprite;
      Color = module.Color;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      BaseTip = module.BaseTip;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "472eakbazFDh4QdVM54dc/i", "CubInfo", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CubInfo = exports('CubInfo', (_dec = ccclass('CubInfo'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Sprite), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Label), _dec8 = property(Sprite), _dec9 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseTip) {
        _inheritsLoose(CubInfo, _BaseTip);

        function CubInfo() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseTip.call.apply(_BaseTip, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "Name", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Money", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "MoneyItem", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Time", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "MoneyTitle", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "consumeTitle", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "consumeItem", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "consumeTime", _descriptor8, _assertThisInitialized(_this));

          _this.itemConfig = null;
          _this.type = "";
          return _this;
        }

        var _proto = CubInfo.prototype;

        _proto.showBotany = function showBotany() {
          var _this2 = this; //this.MoneyTitle.string = producer.getMessageText(10001);


          producer.replaceDefaultColor(this.MoneyTitle, producer.getMessageText(10001));
          producer.replaceDefaultColor(this.consumeTitle, producer.getMessageText(101716)); //this.Name.string = producer.getMessageText(this.itemConfig.Name);

          producer.replaceDefaultColor(this.Name, producer.getMessageText(this.itemConfig.Name));
          var botany = ConfigFile.getBotanyFromSeedId(this.itemConfig.ItemId);
          var timearray = botany.BotanyTime.split(",");
          var totalTime = parseInt(timearray[0]) + parseInt(timearray[1]);
          this.Time.string = producer.getTimeFormat(totalTime);
          var m = ConfigFile.getLimitInfo(this.itemConfig.ItemPrice);
          var curMoney = GameAllData.getTotalConch(m.id);
          this.Money.string = m.val.toString();
          NodeHelp.loadIcon("propIcon/itemicon", m.id, function (res) {
            _this2.MoneyItem.spriteFrame = res;
          });

          if (m.val > curMoney) {
            this.Money.color = new Color(255, 0, 0, 255);
          } else {
            this.Money.color = new Color(193, 125, 60, 255);
          }
        };

        _proto.showAnimal = function showAnimal() {
          var _this3 = this;

          var self = this; //this.MoneyTitle.string = producer.getMessageText(10001);

          producer.replaceDefaultColor(this.MoneyTitle, producer.getMessageText(10001));
          producer.replaceDefaultColor(this.consumeTitle, producer.getMessageText(101716)); //this.Name.string = producer.getMessageText(this.itemConfig.Name);

          producer.replaceDefaultColor(this.Name, producer.getMessageText(this.itemConfig.Name));
          var animal = ConfigFile.getAnimalFromCubId(this.itemConfig.ItemId); //this.LV.node.active = false;
          //this.LV.string = "LV."+animal.AnimalLevel;

          this.consumeTime.string = producer.getTimeFormat(animal.AnimalConsumeTime) + producer.getMessageText(3041);
          var timearray = animal.AnimalTime.split(",");
          var totalTime = parseInt(timearray[0]);
          this.Time.string = producer.getTimeFormat(totalTime);
          var m = ConfigFile.getLimitInfo(this.itemConfig.ItemPrice);
          var curMoney = GameAllData.getTotalConch(m.id);
          this.Money.string = m.val.toString();

          if (m.val > curMoney) {
            this.Money.color = new Color(255, 0, 0, 255);
          } else {
            this.Money.color = new Color(193, 125, 60, 255);
          }

          var bagitem = GameAllData.getStoreItemByModeId(animal.AnimalConsumeId);

          if (bagitem && bagitem.ItemCount > 0) {
            this.consumeTime.color = new Color(193, 125, 60, 255);
          } else {
            this.consumeTime.color = new Color(255, 0, 0, 255);
          }

          NodeHelp.loadIcon("propIcon/itemicon", m.id, function (res) {
            _this3.MoneyItem.spriteFrame = res;
          });
          NodeHelp.loadIcon("propIcon/itemicon", animal.AnimalConsumeId.toString(), function (res) {
            self.consumeItem.spriteFrame = res;
          });
        };

        _proto.initUI = function initUI(arg) {
          this.popHeight = 100;
          this.type = arg.type;
          this._cbData = arg.item;
          this.itemConfig = arg.config;

          _BaseTip.prototype.initUI.call(this, arg);

          if (this.type == "pasture") {
            this.showAnimal();
          } else {
            this.showBotany();
          }
        };

        return CubInfo;
      }(BaseTip), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Name", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Money", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "MoneyItem", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "Time", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "MoneyTitle", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "consumeTitle", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "consumeItem", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "consumeTime", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomLabel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Color, labelAssembler, Label;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Color = module.Color;
      labelAssembler = module.labelAssembler;
      Label = module.Label;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "57303tfgDZAypx8XR//00Oe", "CustomLabel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var WHITE = Color.WHITE.clone();
      var customAssembler = exports('customAssembler', {
        createData: function createData(comp) {
          var renderData = comp.requestRenderData();
          renderData.dataLength = 4;
          renderData.vertexCount = 4;
          renderData.indicesCount = 6;
          var vData = renderData.vData = new Float32Array(4 * 9);
          vData[3] = vData[21] = vData[22] = vData[31] = 0;
          vData[4] = vData[12] = vData[13] = vData[30] = 1;
          var offset = 5;

          for (var i = 0; i < 4; i++) {
            Color.toArray(vData, WHITE, offset);
            offset += 9;
          }

          return renderData;
        },
        fillBuffers: function fillBuffers(comp, renderer) {
          var renderData = comp.renderData;
          var dataList = renderData.data;
          var node = comp.node;
          var buffer = renderer.acquireBufferBatch();
          var vertexOffset = buffer.byteOffset >> 2;
          var indicesOffset = buffer.indicesOffset;
          var vertexId = buffer.vertexOffset;
          var isRecreate = buffer.request();

          if (!isRecreate) {
            buffer = renderer.currBufferBatch;
            indicesOffset = 0;
            vertexId = 0;
            vertexOffset = 0;
          } // buffer data may be reallocated, need get reference after request.


          var vBuf = buffer.vData;
          var iBuf = buffer.iData;
          var vData = renderData.vData;
          var data0 = dataList[0];
          var data3 = dataList[3];
          /* */

          node.updateWorldTransform(); // @ts-expect-error private property access

          var pos = node._pos;
          var rot = node._rot;
          var scale = node._scale;
          var ax = data0.x * scale.x;
          var bx = data3.x * scale.x;
          var ay = data0.y * scale.y;
          var by = data3.y * scale.y;
          var qx = rot.x;
          var qy = rot.y;
          var qz = rot.z;
          var qw = rot.w;
          var qxy = qx * qy;
          var qzw = qz * qw;
          var qxy2 = qx * qx - qy * qy;
          var qzw2 = qw * qw - qz * qz;
          var cx1 = qzw2 + qxy2;
          var cx2 = (qxy - qzw) * 2;
          var cy1 = qzw2 - qxy2;
          var cy2 = (qxy + qzw) * 2;
          var x = pos.x;
          var y = pos.y; // left bottom

          vData[0] = cx1 * ax + cx2 * ay + x;
          vData[1] = cy1 * ay + cy2 * ax + y; // right bottom

          vData[9] = cx1 * bx + cx2 * ay + x;
          vData[10] = cy1 * ay + cy2 * bx + y; // left top

          vData[18] = cx1 * ax + cx2 * by + x;
          vData[19] = cy1 * by + cy2 * ax + y; // right top

          vData[27] = cx1 * bx + cx2 * by + x;
          vData[28] = cy1 * by + cy2 * bx + y;
          vBuf.set(vData, vertexOffset); // fill index data

          iBuf[indicesOffset++] = vertexId;
          iBuf[indicesOffset++] = vertexId + 1;
          iBuf[indicesOffset++] = vertexId + 2;
          iBuf[indicesOffset++] = vertexId + 2;
          iBuf[indicesOffset++] = vertexId + 1;
          iBuf[indicesOffset++] = vertexId + 3;
        },
        updateVertexData: function updateVertexData(comp) {
          var renderData = comp.renderData;

          if (!renderData) {
            return;
          }

          var uiTrans = comp.node._uiProps.uiTransformComp;
          var width = uiTrans.width;
          var height = uiTrans.height;
          var appX = uiTrans.anchorX * width;
          var appY = uiTrans.anchorY * height;
          var data = renderData.data;
          data[0].x = -appX;
          data[0].y = -appY;
          data[3].x = width - appX;
          data[3].y = height - appY;
        },
        updateUvs: function updateUvs(comp) {
          var renderData = comp.renderData;

          if (!renderData) {
            return;
          }

          var vData = renderData.vData;

          if (!vData || !renderData.uvDirty) {
            return;
          }

          var uv = comp.ttfSpriteFrame.uv;
          vData[3] = uv[0];
          vData[4] = uv[1];
          vData[12] = uv[2];
          vData[13] = uv[3];
          vData[21] = uv[4];
          vData[22] = uv[5];
          vData[30] = uv[6];
          vData[31] = uv[7];
          renderData.uvDirty = false;
          console.log("updateUVs");
        }
      }); //js.addon(customAssembler, ttf);

      var CustomLabel = exports('CustomLabel', (_dec = ccclass('CustomLabel'), _dec(_class = /*#__PURE__*/function (_Label) {
        _inheritsLoose(CustomLabel, _Label);

        function CustomLabel() {
          return _Label.apply(this, arguments) || this;
        }

        var _proto = CustomLabel.prototype;

        _proto._flushAssembler = function _flushAssembler() {
          var assembler = labelAssembler.getAssembler(this);

          if (this._assembler !== assembler) {
            this.destroyRenderData();
            this._assembler = assembler;
          }

          this._assembler.createData = customAssembler.createData;
          this._assembler.fillBuffers = customAssembler.fillBuffers;
          this._assembler.updateVertexData = customAssembler.updateVertexData;
          this._assembler.updateUvs = customAssembler.updateUvs;

          if (!this._renderData) {
            if (this._assembler && this._assembler.createData) {
              this._renderData = this._assembler.createData(this);
              this._renderData.material = this.material;
            }
          }
        };

        _proto.start = function start() {// [3]
        };

        return CustomLabel;
      }(Label)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/customScrollView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UIManager.ts', './UIGame.ts', './UIHelp.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, ScrollView, UIManager, UIGame, UIHelp;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ScrollView = module.ScrollView;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      UIGame = module.UIGame;
    }, function (module) {
      UIHelp = module.UIHelp;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "0bb3bP/uadGYLd9Xc/iVmRi", "customScrollView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var customScrollView = exports('customScrollView', (_dec = ccclass('customScrollView'), _dec(_class = /*#__PURE__*/function (_ScrollView) {
        _inheritsLoose(customScrollView, _ScrollView);

        function customScrollView() {
          return _ScrollView.apply(this, arguments) || this;
        }

        var _proto = customScrollView.prototype;

        _proto._onTouchBegan = function _onTouchBegan(event, captureListeners) {
          _ScrollView.prototype._onTouchBegan.call(this, event, captureListeners);

          event.preventSwallow = true;
        };

        _proto._onTouchMoved = function _onTouchMoved(event, captureListeners) {
          var uipos = event.touch.getUILocation();

          if (UIHelp.TestUIPoint(uipos, this.node)) {
            _ScrollView.prototype._onTouchMoved.call(this, event, captureListeners);
          }

          event.preventSwallow = true;
        };

        _proto._onTouchEnded = function _onTouchEnded(event, captureListeners) {
          _ScrollView.prototype._onTouchEnded.call(this, event, captureListeners);

          event.preventSwallow = true;
        };

        _proto._onTouchCancelled = function _onTouchCancelled(event, captureListeners) {
          var uipos = event.touch.getUILocation();

          if (UIHelp.TestUIPoint(uipos, this.node)) {
            _ScrollView.prototype._onTouchCancelled.call(this, event, captureListeners);
          } else {
            var GameUi = UIManager.getInstance().getUI(UIGame);
            if (GameUi) GameUi.onStopTouch(event);
          }

          event.preventSwallow = true;
        };

        return customScrollView;
      }(ScrollView)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomSprite.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Color, dynamicAtlasManager, Sprite;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Color = module.Color;
      dynamicAtlasManager = module.dynamicAtlasManager;
      Sprite = module.Sprite;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "95ca5W5nKpNWaw5mx87UzyG", "CustomSprite", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var WHITE = Color.WHITE.clone();
      var customSpriteAssembler = exports('customSpriteAssembler', {
        createData: function createData(sprite) {
          var renderData = sprite.requestRenderData();
          renderData.dataLength = 2;
          renderData.resize(4, 6);
          return renderData;
        },
        updateRenderData: function updateRenderData(sprite) {
          var frame = sprite.spriteFrame;
          dynamicAtlasManager.packToDynamicAtlas(sprite, frame);
          this.updateUVs(sprite);
          var renderData = sprite.renderData;

          if (renderData && frame) {
            if (renderData.vertDirty) {
              this.updateVertexData(sprite);
            }

            renderData.updateRenderData(sprite, frame);
          }
        },
        updateWorldVerts: function updateWorldVerts(sprite, chunk) {
          var renderData = sprite.renderData;
          var vData = chunk.vb;
          var dataList = renderData.data;
          var node = sprite.node;
          var data0 = dataList[0];
          var data3 = dataList[1];
          var matrix = node.worldMatrix;
          var a = matrix.m00;
          var b = matrix.m01;
          var c = matrix.m04;
          var d = matrix.m05;
          var justTranslate = a === 1 && b === 0 && c === 0 && d === 1;
          var tx = matrix.m12;
          var ty = matrix.m13;
          var vl = data0.x;
          var vr = data3.x;
          var vb = data0.y;
          var vt = data3.y;

          if (justTranslate) {
            var vltx = vl + tx;
            var vrtx = vr + tx;
            var vbty = vb + ty;
            var vtty = vt + ty; // left bottom

            vData[0] = vltx;
            vData[1] = vbty; // right bottom

            vData[9] = vrtx;
            vData[10] = vbty; // left top

            vData[18] = vltx;
            vData[19] = vtty; // right top

            vData[27] = vrtx;
            vData[28] = vtty;
          } else {
            var al = a * vl;
            var ar = a * vr;
            var bl = b * vl;
            var br = b * vr;
            var cb = c * vb;
            var ct = c * vt;
            var db = d * vb;
            var dt = d * vt;
            var cbtx = cb + tx;
            var cttx = ct + tx;
            var dbty = db + ty;
            var dtty = dt + ty; // left bottom

            vData[0] = al + cbtx;
            vData[1] = bl + dbty; // right bottom

            vData[9] = ar + cbtx;
            vData[10] = br + dbty; // left top

            vData[18] = al + cttx;
            vData[19] = bl + dtty; // right top

            vData[27] = ar + cttx;
            vData[28] = br + dtty;
          }
        },
        fillBuffers: function fillBuffers(sprite, renderer) {
          if (sprite === null) {
            return;
          }

          var renderData = sprite.renderData;
          var chunk = renderData.chunk;

          if (sprite.node.hasChangedFlags || renderData.vertDirty) {
            // const vb = chunk.vertexAccessor.getVertexBuffer(chunk.bufferId);
            this.updateWorldVerts(sprite, chunk);
            renderData.vertDirty = false;
          } // quick version


          var bid = chunk.bufferId;
          var vid = chunk.vertexOffset;
          var meshBuffer = chunk.vertexAccessor.getMeshBuffer(bid);
          var ib = chunk.vertexAccessor.getIndexBuffer(bid);
          var indexOffset = meshBuffer.indexOffset;
          ib[indexOffset++] = vid;
          ib[indexOffset++] = vid + 1;
          ib[indexOffset++] = vid + 2;
          ib[indexOffset++] = vid + 2;
          ib[indexOffset++] = vid + 1;
          ib[indexOffset++] = vid + 3;
          meshBuffer.indexOffset += 6;
        },
        updateVertexData: function updateVertexData(sprite) {
          var renderData = sprite.renderData;

          if (!renderData) {
            return;
          }

          var uiTrans = sprite.node._uiProps.uiTransformComp;
          var dataList = renderData.data;
          var cw = uiTrans.width;
          var ch = uiTrans.height;
          var appX = uiTrans.anchorX * cw;
          var appY = uiTrans.anchorY * ch;
          var l = 0;
          var b = 0;
          var r = 0;
          var t = 0;

          if (sprite.trim) {
            l = -appX;
            b = -appY;
            r = cw - appX;
            t = ch - appY;
          } else {
            var frame = sprite.spriteFrame;
            var originSize = frame.getOriginalSize();
            var rect = frame.getRect();
            var ow = originSize.width;
            var oh = originSize.height;
            var rw = rect.width;
            var rh = rect.height;
            var offset = frame.getOffset();
            var scaleX = cw / ow;
            var scaleY = ch / oh;
            var trimLeft = offset.x + (ow - rw) / 2;
            var trimRight = offset.x - (ow - rw) / 2;
            var trimBottom = offset.y + (oh - rh) / 2;
            var trimTop = offset.y - (oh - rh) / 2;
            l = trimLeft * scaleX - appX;
            b = trimBottom * scaleY - appY;
            r = cw + trimRight * scaleX - appX;
            t = ch + trimTop * scaleY - appY;
          }

          dataList[0].x = l;
          dataList[0].y = b;
          dataList[1].x = r;
          dataList[1].y = t;
          renderData.vertDirty = true;
        },
        updateUVs: function updateUVs(sprite) {
          if (!sprite.spriteFrame) return;
          var renderData = sprite.renderData;
          var vData = renderData.chunk.vb;
          var uv = sprite.spriteFrame.uv;
          vData[3] = uv[0];
          vData[4] = uv[1];
          vData[12] = uv[2];
          vData[13] = uv[3];
          vData[21] = uv[4];
          vData[22] = uv[5];
          vData[30] = uv[6];
          vData[31] = uv[7];
          var Umin = 1;
          var Umax = 0;
          var Vmin = 1;
          var Vmax = 0;

          for (var index = 0; index < 4; index++) {
            var u = uv[index * 2];
            var v = uv[index * 2 + 1];
            if (u < Umin) Umin = u;
            if (u > Umax) Umax = u;
            if (v < Vmin) Vmin = v;
            if (v > Vmax) Vmax = v;
          }

          var colorOffset = 5;

          for (var i = 0; i < 4; i++, colorOffset += renderData.floatStride) {
            vData[colorOffset] = Umin;
            vData[colorOffset + 1] = Umax;
            vData[colorOffset + 2] = Vmin;
            vData[colorOffset + 3] = Vmax;
          }
        },
        updateColor: function updateColor(sprite) {// const renderData = sprite.renderData!;
          // const vData = renderData.chunk.vb;
          // let colorOffset = 5;
          // const color = sprite.color;
          // const colorR = color.r / 255;
          // const colorG = color.g / 255;
          // const colorB = color.b / 255;
          // const colorA = color.a / 255;
          // for (let i = 0; i < 4; i++, colorOffset += renderData.floatStride) {
          //     vData[colorOffset] = colorR;
          //     vData[colorOffset + 1] = colorG;
          //     vData[colorOffset + 2] = colorB;
          //     vData[colorOffset + 3] = colorA;
          // }
        }
      });
      var CustomSprite = exports('CustomSprite', (_dec = ccclass('CustomSprite'), _dec(_class = /*#__PURE__*/function (_Sprite) {
        _inheritsLoose(CustomSprite, _Sprite);

        function CustomSprite() {
          return _Sprite.apply(this, arguments) || this;
        }

        var _proto = CustomSprite.prototype;

        _proto._flushAssembler = function _flushAssembler() {
          //const assembler = spriteAssembler.getAssembler(this);
          if (this._assembler !== customSpriteAssembler) {
            this.destroyRenderData();
            this._assembler = customSpriteAssembler;
          }

          if (!this._renderData) {
            if (this._assembler && this._assembler.createData) {
              this._renderData = this._assembler.createData(this);
              this._renderData.material = this.material;
            }
          }
        };

        return CustomSprite;
      }(Sprite)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CutscenesView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameAllData.ts', './UIManager.ts', './BaseUI.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, v3, sp, GameAllData, UIManager, BaseUI;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      sp = module.sp;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      BaseUI = module.BaseUI;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _class3;

      cclegacy._RF.push({}, "37fd6n009JAm6Tjqe4sehjM", "CutscenesView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var OUTSIDE_POS_TL = v3(-900, 500, 0);
      var OUTSIDE_POS_TR = v3(900, 500, 0);
      var OUTSIDE_POS_BL = v3(-900, -500, 0);
      var OUTSIDE_POS_BR = v3(900, -500, 0);
      var CutscenesView = exports('CutscenesView', (_dec = ccclass('CutscenesView'), _dec2 = property({
        type: sp.Skeleton
      }), _dec3 = property({
        type: sp.Skeleton
      }), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(CutscenesView, _BaseUI);

        function CutscenesView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "spineAni1", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spineAni2", _descriptor2, _assertThisInitialized(_this));

          _this.callEntry = null;
          _this.callback = null;
          _this._data = null;
          _this.entry = false;
          return _this;
        }

        var _proto = CutscenesView.prototype; // isIntegral: boolean = false;//是否是完整的动画(云进入散出)
        // callback: Function = null;
        // @property(Node)
        // nodTopLeft: Node = null;
        // @property(Node)
        // nodTopRight: Node = null;
        // @property(Node)
        // nodBottomLeft: Node = null;
        // @property(Node)
        // nodBottomRight: Node = null;

        _proto.onLoad = function onLoad() {// this.nodTopLeft.position = OUTSIDE_POS_TL;
          // this.nodTopRight.position = OUTSIDE_POS_TR;
          // this.nodBottomLeft.position = OUTSIDE_POS_BL;
          // this.nodBottomRight.position = OUTSIDE_POS_BR;
        };

        _proto.onSpingComplete = function onSpingComplete(trackEntry) {
          this.entry = false;
          this.callEntry && this.callEntry(this._data);
          this.spineAni2.node.active = true;
          this.spineAni1.node.active = false;
          this.spineAni2.animation = 'animation'; // 
        };

        _proto.onSping2Complete = function onSping2Complete(trackEntry) {
          this.callback && this.callback(this._data);
          UIManager.getInstance().closeUI(CutscenesView);
          GameAllData.canVerification = true;
        };

        _proto.onDestroy = function onDestroy() {
          _BaseUI.prototype.onDestroy.call(this);
        };

        _proto.start = function start() {
          //this.entry=true;
          if (this.spineAni1) {
            this.spineAni1.setCompleteListener(this.onSpingComplete.bind(this));
            this.spineAni1.animation = 'animation'; // 
            //this.spineAni.timeScale = -1;

            this.spineAni1.loop = false; // 是否循环

            this.spineAni1.node.active = true;
          }

          if (this.spineAni2) {
            this.spineAni2.setCompleteListener(this.onSping2Complete.bind(this));
            this.spineAni2.loop = false; // 是否循环

            this.spineAni2.node.active = false;
          }
        };

        return CutscenesView;
      }(BaseUI), _class3.className = "CutscenesView", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spineAni1", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spineAni2", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DailyTaskUIItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TaskConfig.ts', './ConfigFile.ts', './GameAllData.ts', './MessageManager.ts', './TipManager.ts', './WebSocketMgr.ts', './NodeHelp.ts', './PlatformUtil.ts', './BagUIItemTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, Node, sys, Sprite, resources, SpriteFrame, Label, Component, TaskConfig, ConfigFile, GameAllData, MessageManager, TipManager, WebSocketMgr, NodeHelp, PlatformUtil, BagUIItemTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      sys = module.sys;
      Sprite = module.Sprite;
      resources = module.resources;
      SpriteFrame = module.SpriteFrame;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      TaskConfig = module.TaskConfig;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PlatformUtil = module.PlatformUtil;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "753dbOYJ1dBkJLrTWTv6F88", "DailyTaskUIItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DailyTaskUIItem = exports('DailyTaskUIItem', (_dec = ccclass('DailyTaskUIItem'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DailyTaskUIItem, _Component);

        function DailyTaskUIItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "ButtonGo", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ButtonReceive", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "LabelReceived", _descriptor3, _assertThisInitialized(_this));

          _this.data = null;
          _this.tag = null;
          _this.config = null;
          _this.showShare = void 0;
          return _this;
        }

        var _proto = DailyTaskUIItem.prototype;

        _proto.init = function init(itemData, tag, showShare) {
          if (showShare === void 0) {
            showShare = true;
          }

          this.data = itemData;
          this.tag = tag;
          this.showShare = showShare;
          this.config = ConfigFile.getTTaskInfoByTaskId(this.data.TaskModeId);
          this.setShow();
        };

        _proto.setShow = function setShow() {
          var _this2 = this;

          this.chickState();
          var fistCondition = null;
          var title = "";
          var iosTitle = "";
          var conditionString = "";

          if (this.data && this.data.conditions && this.data.conditions.length >= 1) {
            fistCondition = ConfigFile.getTConditionInfoByConditionId(this.data.conditions[0].ConditionModeId); //得到条件内容

            var _loop = function _loop() {
              var condition = _step.value;
              var config = ConfigFile.getTConditionInfoByConditionId(condition.ConditionModeId);

              if (!config) {
                console.log("UIGameTaskItemTip----->notHaveConfig");
                return {
                  v: void 0
                };
              }

              iosTitle = ConfigFile.findLanguage(Number(config.Others));
              var numStr = "";

              if (config.Other) {
                var gameConfig = TaskConfig.find(function (v) {
                  return v.id == config.ConditionType;
                });

                if (gameConfig.configName == "") {
                  numStr = config.Other + "";
                } else {
                  var Itemconfig = ConfigFile.getInstance().config.get(gameConfig.configName);

                  if (Itemconfig) {
                    var Item = Itemconfig.find(function (item) {
                      return item[gameConfig.configIdName] == config.Other;
                    });

                    if (Item) {
                      numStr = ConfigFile.findLanguage(Number(Item[gameConfig.configField]));
                    }
                  }
                }
              }

              if (conditionString == "") {
                if (numStr == "") {
                  numStr += condition.nowCondition + "/" + condition.MaxCondition;
                  conditionString = ConfigFile.findLanguage(Number(config.Des)).format(numStr);
                } else {
                  var num = condition.nowCondition + "/" + condition.MaxCondition;
                  conditionString = ConfigFile.findLanguage(Number(config.Des)).format(numStr, num);
                }
              } else {
                if (numStr == "") {
                  numStr += condition.nowCondition + "/" + condition.MaxCondition;
                  conditionString += "," + ConfigFile.findLanguage(Number(config.Des)).format(numStr);
                } else {
                  var _num = condition.nowCondition + "/" + condition.MaxCondition;

                  conditionString += "," + ConfigFile.findLanguage(Number(config.Des)).format(numStr, _num);
                }
              }
            };

            for (var _iterator = _createForOfIteratorHelperLoose(this.data.conditions), _step; !(_step = _iterator()).done;) {
              var _ret = _loop();

              if (typeof _ret === "object") return _ret.v;
            }
          }

          if (fistCondition) //得到icon
            var iconId = PlatformUtil.ShareIconByID(this.data.conditions[0].ConditionModeId);

          if (sys.Platform.IOS === sys.platform) {
            //ios特殊处理
            iconId = 2040;
          }

          NodeHelp.getchildlable(this.node, "SpriteIcon", Sprite, function (comp) {
            var image = "TaskIcon/" + iconId + "/spriteFrame";
            resources.load(image, SpriteFrame, function (error, res) {
              if (res && comp.isValid) {
                comp.spriteFrame = res;
              }

              if (error) {
                console.log("加载任务图 ==>", error);
              }
            });
          });

          if (this.config) {
            //得到任务名
            title += ConfigFile.findLanguage(this.config.TaskName); //得到奖励

            if (this.config.TaskReward) {
              this.clearRewardBox();
              var rewards = this.config.TaskReward.split(";");

              var _loop2 = function _loop2() {
                var reward = _step2.value;
                if (reward == "") return "continue";

                var rewardnode = _this2.tag.RewardPool.get();

                var comp = rewardnode.getComponent("TaskUIRewardItem");
                comp.init(reward, _this2.tag);
                NodeHelp.getchildlable(_this2.node, "RewardBox", null, function (comp, node) {
                  node.addChild(rewardnode);
                });
              };

              for (var _iterator2 = _createForOfIteratorHelperLoose(rewards), _step2; !(_step2 = _iterator2()).done;) {
                var _ret2 = _loop2();

                if (_ret2 === "continue") continue;
              }
            }
          }

          if (sys.Platform.IOS === sys.platform) {
            //ios特殊处理
            NodeHelp.getchildlable(this.node, "LabelName", Label, function (comp) {
              comp.string = iosTitle;
            });
          } else {
            NodeHelp.getchildlable(this.node, "LabelName", Label, function (comp) {
              comp.string = title;
            });
          }

          NodeHelp.getchildlable(this.ButtonReceive, "Label", Label, function (comp, node) {
            comp.string = ConfigFile.findLanguage(111017);
          });
          NodeHelp.getchildlable(this.LabelReceived, "Label", Label, function (comp, node) {
            comp.string = ConfigFile.findLanguage(111018);
          });
          NodeHelp.getchildlable(this.ButtonGo, "Label", Label, function (comp, node) {
            comp.string = ConfigFile.findLanguage(7202);
          });
        };

        _proto.clearRewardBox = function clearRewardBox() {
          var _this3 = this;

          NodeHelp.getchildlable(this.node, "RewardBox", null, function (comp, node) {
            while (node.children.length >= 1) {
              _this3.tag.RewardPool.put(node.children[0]);
            }
          });
        };

        _proto.chickState = function chickState() {
          console.log("this.data.TaskState:", this.data.conditions[0].ConditionModeId + "状态：" + this.data.TaskState);

          if (!this.data || !this.tag) {
            return;
          }

          if (this.showShare == false) {
            this.ButtonGo.active = false;
            this.ButtonReceive.active = false;
            this.LabelReceived.active = false;
          } else {
            if (this.data.TaskState == 1) {
              if (this.data.conditions[0].MaxCondition <= this.data.conditions[0].nowCondition) {
                this.ButtonGo.active = false;
                this.ButtonReceive.active = true;
                this.LabelReceived.active = false;
              } else {
                this.ButtonGo.active = true;
                this.ButtonReceive.active = false;
                this.LabelReceived.active = false;
              }
            } else if (this.data.TaskState == 2) {
              this.ButtonGo.active = false;
              this.ButtonReceive.active = false;
              this.LabelReceived.active = true;
            }
          }
        };

        _proto.share = function share() {
          //测试者账号 
          if (GameAllData.IsAccountTypeIsTest) {
            return;
          }

          BagUIItemTip.getInstance().closeTip();

          if (sys.isBrowser) {
            TipManager.TipFromCode(7205);
          } else {
            if (this.data && this.data.conditions && this.data.conditions.length >= 1) {
              var id = this.data.conditions[0].ConditionModeId;
              PlatformUtil.ShareId = id;
              var name = PlatformUtil.AndroidShareNameByID(id);
              PlatformUtil.share(name); // let name = PlatformUtil.AndroidShareSDKNameByID(id);
              // PlatformUtil.loginThirdPartyNew(name);
            }
          }
        };

        _proto.reqFinishRequest = function reqFinishRequest() {
          BagUIItemTip.getInstance().closeTip();
          WebSocketMgr.send(MessageManager.Net.FarmTaskFinishRequest, {
            ID: this.data.TaskModeId
          });
        };

        return DailyTaskUIItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "ButtonGo", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "ButtonReceive", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "LabelReceived", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/dark.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3fd86SE79hGpYwjbmcWVXpa", "dark", undefined);

      var darkTheme = exports('default', {
        name: "dark",
        colors: {
          background: "rgb(39, 49, 56)",
          main: "rgb(199, 199, 199)",
          secondary: "rgb(136, 136, 136)",
          border: "rgba(195, 195, 195, 0.14)",
          hover: "rgb(16, 26, 32)"
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DateUtil.ts", ['cc', './ConfigFile.ts', './GameAllData.ts', './UIHelp.ts'], function (exports) {
  'use strict';

  var cclegacy, ConfigFile, GameAllData, UIHelp;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      UIHelp = module.UIHelp;
    }],
    execute: function () {
      cclegacy._RF.push({}, "5d207lHoKFPuJ87rxC0tL53", "DateUtil", undefined);

      var DateUtil = exports('DateUtil', /*#__PURE__*/function () {
        function DateUtil() {} //一天的秒数
        //一小时的秒数
        //一分钟的秒数

        /**@description 获取时间戳转换的天时分秒(为0了就不显示，天时、时分、分秒、秒) */


        DateUtil.getDHMS = function getDHMS(timestamp) {
          var times = [0, 0, 0, 0];

          if (timestamp >= DateUtil.SECOND_DAY) {
            var dayNum = Math.floor(timestamp / DateUtil.SECOND_DAY);
            var hourNum = Math.floor(timestamp % DateUtil.SECOND_DAY / this.SECOND_HOUR);
            dayNum && (times[0] = dayNum);
            hourNum && (times[1] = hourNum);
          } else if (timestamp >= this.SECOND_HOUR) {
            var _hourNum = Math.floor(timestamp / DateUtil.SECOND_HOUR);

            var minuteNum = Math.floor(timestamp % DateUtil.SECOND_HOUR / this.SECOND_MINUTE);
            _hourNum && (times[1] = _hourNum);
            minuteNum && (times[2] = minuteNum);
          } else if (timestamp >= DateUtil.SECOND_MINUTE) {
            var _minuteNum = Math.floor(timestamp / DateUtil.SECOND_MINUTE);

            var secondNum = Math.floor(timestamp % DateUtil.SECOND_MINUTE);
            _minuteNum && (times[2] = _minuteNum);
            secondNum && (times[3] = secondNum);
          } else if (timestamp > 0) {
            times[3] = Math.floor(timestamp);
          }

          return times;
        };

        DateUtil.getDHMSNew = function getDHMSNew(timestamp) {
          var time = "";
          var dayNum;
          var hourNum;
          var minutes;
          var secondNum;

          if (timestamp >= DateUtil.SECOND_DAY) {
            dayNum = Math.floor(timestamp / DateUtil.SECOND_DAY);
            hourNum = Math.floor(timestamp % DateUtil.SECOND_DAY / this.SECOND_HOUR);
            time = dayNum + ":" + hourNum;
          } else if (timestamp >= this.SECOND_HOUR) {
            hourNum = Math.floor(timestamp / DateUtil.SECOND_HOUR);
            minutes = Math.floor(timestamp % DateUtil.SECOND_HOUR / this.SECOND_MINUTE);
            time = hourNum + ":" + minutes;
          } else if (timestamp >= DateUtil.SECOND_MINUTE) {
            minutes = Math.floor(timestamp / DateUtil.SECOND_MINUTE);
            secondNum = Math.floor(timestamp % DateUtil.SECOND_MINUTE);
            time = minutes + ":" + secondNum;
          } else if (timestamp > 0) {
            secondNum = Math.floor(timestamp);
            time = secondNum;
          }

          return time;
        }
        /**带文字**/
        ;

        DateUtil.getDHMSNewStr = function getDHMSNewStr(timestamp) {
          var time = "";
          var dayNum;
          var hourNum;
          var minutes;
          var secondNum;

          if (timestamp >= DateUtil.SECOND_DAY) {
            dayNum = Math.floor(timestamp / DateUtil.SECOND_DAY);
            hourNum = Math.floor(timestamp % DateUtil.SECOND_DAY / this.SECOND_HOUR);
            time = ConfigFile.findLanguage(104001).format(dayNum, hourNum); // time = dayNum + ":" + hourNum;
          } else if (timestamp >= this.SECOND_HOUR) {
            hourNum = Math.floor(timestamp / DateUtil.SECOND_HOUR);
            minutes = Math.floor(timestamp % DateUtil.SECOND_HOUR / this.SECOND_MINUTE); // time =  hourNum + ":" + minutes;

            time = ConfigFile.findLanguage(104002).format(hourNum, minutes);
          } else if (timestamp >= DateUtil.SECOND_MINUTE) {
            minutes = Math.floor(timestamp / DateUtil.SECOND_MINUTE);
            secondNum = Math.floor(timestamp % DateUtil.SECOND_MINUTE); // time = minutes + ":" + secondNum;

            time = ConfigFile.findLanguage(104003).format(minutes, secondNum);
          } else if (timestamp > 0) {
            secondNum = Math.floor(timestamp); // time = secondNum;

            time = ConfigFile.findLanguage(104004).format(secondNum);
          }

          return time;
        } //时：分：秒
        ;

        DateUtil.getDHMSAll = function getDHMSAll(timestamp) {
          var time = "0";
          var hourNum;
          var minutes;
          var secondNum;

          if (timestamp >= this.SECOND_HOUR) {
            hourNum = Math.floor(timestamp / DateUtil.SECOND_HOUR);
            minutes = Math.floor(timestamp % DateUtil.SECOND_HOUR / this.SECOND_MINUTE);
            secondNum = Math.floor(timestamp % DateUtil.SECOND_HOUR % this.SECOND_MINUTE);
            time = hourNum + ":" + minutes + ":" + secondNum;
          } else if (timestamp >= DateUtil.SECOND_MINUTE) {
            minutes = Math.floor(timestamp / DateUtil.SECOND_MINUTE);
            secondNum = Math.floor(timestamp % DateUtil.SECOND_MINUTE);
            time = minutes + ":" + secondNum;
          } else if (timestamp > 0) {
            secondNum = Math.floor(timestamp);
            time = secondNum;
          }

          return time;
        }
        /**@description 获取服务器时间 -转换的月 日 时分(3/11 20:32) */
        ;

        DateUtil.getMDHM = function getMDHM() {
          var time = "";
          var localTime = UIHelp.getTimeMask() / 1000; // 取本地时间

          var localtime = new Date(); // 取本地毫秒数

          var localmesc = localtime.getTime(); // 取本地时区与格林尼治所在时区的偏差毫秒数

          var localOffset = localtime.getTimezoneOffset() * 60000; // 反推得到格林尼治时间

          var servertime = DateUtil.getServerTimeDiff(localTime);
          var date = new Date(servertime * 1000);
          var month = date.getMonth() + 1 + "";
          var day = date.getDate() + "";
          var hours = date.getHours() + "";
          var minutes = date.getMinutes() + "";
          time = month + "/" + day + " " + hours + ":" + minutes;
          return time;
        };

        DateUtil.getServerTimeDiff = function getServerTimeDiff(localTime) {
          var heart = GameAllData.GameHeartResponse;
          if (!heart) return 0;
          var date = new Date((heart.time + localTime) * 1000);
          var timezone = GameAllData.severTimeZoneDiff; // 服务器时区与UTC的差值

          var offset_GMT = date.getTimezoneOffset(); // 本地时间和格林威治的时间差，单位为分钟

          var nowDate = date.getTime(); // 本地时间距 1970 年 1 月 1 日午夜（GMT 时间）之间的毫秒数

          var targetDate = new Date(nowDate + offset_GMT * 60 * 1000 + timezone * 1000);
          return targetDate.getTime();
        };

        DateUtil.getServerTimeDiff2 = function getServerTimeDiff2(localTime) {
          var heart = GameAllData.GameHeartResponse;
          if (!heart) return 0;
          var date = new Date((heart.time + localTime) * 1000);
          return date.getTime();
        };

        DateUtil.getMDHMNew = function getMDHMNew() {
          var time = ""; // 取本地时间

          var localTime = UIHelp.getTimeMask() / 1000;
          var servertime = DateUtil.getServerTimeDiff(localTime);
          var targetDate = new Date(servertime); // var timezone = GameAllData.severTimeZoneDiff;// 服务器时区与UTC的差值
          // var offset_GMT = date.getTimezoneOffset(); // 本地时间和格林威治的时间差，单位为分钟
          // var nowDate = date.getTime(); // 本地时间距 1970 年 1 月 1 日午夜（GMT 时间）之间的毫秒数
          // var targetDate = new Date(nowDate + offset_GMT * 60 * 1000 + timezone * 1000);

          var month = targetDate.getMonth() + 1 + "";
          var day = targetDate.getDate() + "";
          var hours = targetDate.getHours() + "";
          var minutes = targetDate.getMinutes() < 10 ? "0" + targetDate.getMinutes() : targetDate.getMinutes() + "";
          time = month + "/" + day + " " + hours + ":" + minutes;
          return time;
        };

        DateUtil.getSaveCodeUNLockTime = function getSaveCodeUNLockTime() {
          var time = 0;
          return time;
        };

        return DateUtil;
      }());
      DateUtil.SECOND_DAY = 86400;
      DateUtil.SECOND_HOUR = 3600;
      DateUtil.SECOND_MINUTE = 60;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/dcentwallet.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, cclegacy;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2bb2fX2Ac9IAZGoche75lKN", "dcentwallet", undefined);

      var ConnectToDcentWallet = exports('default', /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(DcentProvider, opts) {
          var provider;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  provider = new DcentProvider(opts);
                  _context.next = 3;
                  return provider.enable();

                case 3:
                  return _context.abrupt("return", provider);

                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function ConnectToDcentWallet(_x, _x2) {
          return _ref.apply(this, arguments);
        };
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EnumDefine.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      exports('EnumDefine', void 0);

      cclegacy._RF.push({}, "8956a/XFBhCIrMrfThysyiJ", "EnumDefine", undefined);

      var EnumDefine;

      (function (_EnumDefine) {
        var CurrencyType;

        (function (CurrencyType) {
          CurrencyType[CurrencyType["Conch"] = -2] = "Conch";
          CurrencyType[CurrencyType["USDT"] = -1] = "USDT";
          CurrencyType[CurrencyType["ColoredGold"] = -6] = "ColoredGold";
          CurrencyType[CurrencyType["PEARL"] = -7] = "PEARL";
          CurrencyType[CurrencyType["ACTIVITY"] = -8] = "ACTIVITY";
        })(CurrencyType || (CurrencyType = {}));

        _EnumDefine.CurrencyType = CurrencyType;
        var MarketTradeRecordType;

        (function (MarketTradeRecordType) {
          MarketTradeRecordType[MarketTradeRecordType["CurrentBuy"] = 1] = "CurrentBuy";
          MarketTradeRecordType[MarketTradeRecordType["CurrentSell"] = 2] = "CurrentSell";
          MarketTradeRecordType[MarketTradeRecordType["HistoryBuy"] = 3] = "HistoryBuy";
          MarketTradeRecordType[MarketTradeRecordType["HistorySell"] = 4] = "HistorySell";
        })(MarketTradeRecordType || (MarketTradeRecordType = {}));

        _EnumDefine.MarketTradeRecordType = MarketTradeRecordType;
        var MarketTradeRecordOrderType;

        (function (MarketTradeRecordOrderType) {
          MarketTradeRecordOrderType[MarketTradeRecordOrderType["Code"] = 1] = "Code";
          MarketTradeRecordOrderType[MarketTradeRecordOrderType["Goods"] = 2] = "Goods";
          MarketTradeRecordOrderType[MarketTradeRecordOrderType["Price"] = 3] = "Price";
          MarketTradeRecordOrderType[MarketTradeRecordOrderType["Total"] = 4] = "Total";
          MarketTradeRecordOrderType[MarketTradeRecordOrderType["CompleteNum"] = 5] = "CompleteNum";
          MarketTradeRecordOrderType[MarketTradeRecordOrderType["Operation"] = 6] = "Operation";
        })(MarketTradeRecordOrderType || (MarketTradeRecordOrderType = {}));

        _EnumDefine.MarketTradeRecordOrderType = MarketTradeRecordOrderType;
        var SetSecondaryType;

        (function (SetSecondaryType) {
          SetSecondaryType[SetSecondaryType["Notice"] = 0] = "Notice";
          SetSecondaryType[SetSecondaryType["Recharge"] = 1] = "Recharge";
          SetSecondaryType[SetSecondaryType["Account"] = 2] = "Account";
          SetSecondaryType[SetSecondaryType["GiftCode"] = 3] = "GiftCode";
          SetSecondaryType[SetSecondaryType["SafetyCode"] = 4] = "SafetyCode";
          SetSecondaryType[SetSecondaryType["Language"] = 6] = "Language";
        })(SetSecondaryType || (SetSecondaryType = {}));

        _EnumDefine.SetSecondaryType = SetSecondaryType;
        var NoticeEailType;

        (function (NoticeEailType) {
          NoticeEailType[NoticeEailType["Notice"] = 1] = "Notice";
          NoticeEailType[NoticeEailType["Eail"] = 2] = "Eail";
        })(NoticeEailType || (NoticeEailType = {}));

        _EnumDefine.NoticeEailType = NoticeEailType;
        var ThirdPartyName;

        (function (ThirdPartyName) {
          ThirdPartyName["GooglePlus"] = "GooglePlus";
          ThirdPartyName["Facebook"] = "Facebook";
          ThirdPartyName["Telegram"] = "Telegram";
          ThirdPartyName["Twitter"] = "Twitter";
          ThirdPartyName["Line"] = "Line";
          ThirdPartyName["MetaMask"] = "MetaMask";
          ThirdPartyName["Whatsapp"] = "Whatsapp";
          ThirdPartyName["YouTube"] = "YouTube";
          ThirdPartyName["Tiktok"] = "Tiktok";
          ThirdPartyName["Instagram"] = "Instagram";
        })(ThirdPartyName || (ThirdPartyName = {}));

        _EnumDefine.ThirdPartyName = ThirdPartyName;
        var vipIconUrl;

        (function (vipIconUrl) {
          vipIconUrl["Title"] = "vip/titleIcon/%s/spriteFrame";
          vipIconUrl["vipSmall"] = "vip/VIPicon/VIPiconSMALL/%s/spriteFrame";
          vipIconUrl["vipBig"] = "vip/VIPicon/VIPiocnBIG/%s/spriteFrame";
        })(vipIconUrl || (vipIconUrl = {}));

        _EnumDefine.vipIconUrl = vipIconUrl;
        var vipColor;

        (function (vipColor) {
          vipColor["color0"] = "373a3c";
          vipColor["color1"] = "6a2016";
          vipColor["color3"] = "22276f";
          vipColor["color5"] = "820e57";
          vipColor["color7"] = "93450b";
          vipColor["color9"] = "93450b";
        })(vipColor || (vipColor = {}));

        _EnumDefine.vipColor = vipColor;
        var TaskFindType;

        (function (TaskFindType) {
          TaskFindType[TaskFindType["ExperienceUI"] = 1] = "ExperienceUI";
          TaskFindType[TaskFindType["UIShop"] = 2] = "UIShop";
          TaskFindType[TaskFindType["UIHouse"] = 3] = "UIHouse";
          TaskFindType[TaskFindType["UIConchExchange"] = 4] = "UIConchExchange";
          TaskFindType[TaskFindType["RechargeView"] = 5] = "RechargeView";
          TaskFindType[TaskFindType["MarketView"] = 6] = "MarketView";
          TaskFindType[TaskFindType["InvitationCodeView"] = 7] = "InvitationCodeView";
          TaskFindType[TaskFindType["FamilyView"] = 8] = "FamilyView";
          TaskFindType[TaskFindType["PerformanceView"] = 9] = "PerformanceView";
          TaskFindType[TaskFindType["FarmLand"] = 10] = "FarmLand";
          TaskFindType[TaskFindType["Pasture"] = 11] = "Pasture";
          TaskFindType[TaskFindType["Build"] = 12] = "Build";
          TaskFindType[TaskFindType["TaskUI"] = 13] = "TaskUI";
        })(TaskFindType || (TaskFindType = {}));

        _EnumDefine.TaskFindType = TaskFindType;
        var ActivityType;

        (function (ActivityType) {
          ActivityType[ActivityType["EveryDay"] = 0] = "EveryDay";
          ActivityType[ActivityType["FirstCharge"] = 1] = "FirstCharge";
          ActivityType[ActivityType["BeeHome"] = 2] = "BeeHome";
          ActivityType[ActivityType["GrowthFund"] = 3] = "GrowthFund";
          ActivityType[ActivityType["LimitedDay"] = 4] = "LimitedDay";
          ActivityType[ActivityType["UpgradePackage"] = 5] = "UpgradePackage";
          ActivityType[ActivityType["loopTurntable"] = 6] = "loopTurntable";
          ActivityType[ActivityType["notLoopTurntable"] = 7] = "notLoopTurntable";
          ActivityType[ActivityType["Extension"] = 8] = "Extension";
          ActivityType[ActivityType["Directlyunder"] = 9] = "Directlyunder";
          ActivityType[ActivityType["Arena"] = 10] = "Arena";
          ActivityType[ActivityType["Generalrepresentative"] = 11] = "Generalrepresentative";
          ActivityType[ActivityType["Everyrecharge"] = 12] = "Everyrecharge";
          ActivityType[ActivityType["NobletokenBuy"] = 13] = "NobletokenBuy";
          ActivityType[ActivityType["Nobletoken"] = 14] = "Nobletoken";
        })(ActivityType || (ActivityType = {}));

        _EnumDefine.ActivityType = ActivityType;
        var ActivityData;

        (function (ActivityData) {
          ActivityData[ActivityData["ActivityLuckyWheelMaxGat"] = 12] = "ActivityLuckyWheelMaxGat";
        })(ActivityData || (ActivityData = {}));

        _EnumDefine.ActivityData = ActivityData;
        var ShareIcon;

        (function (ShareIcon) {
          ShareIcon[ShareIcon["Telegram"] = 2033] = "Telegram";
          ShareIcon[ShareIcon["Whatsapp"] = 2034] = "Whatsapp";
          ShareIcon[ShareIcon["youtube"] = 2035] = "youtube";
          ShareIcon[ShareIcon["Facebook"] = 2036] = "Facebook";
          ShareIcon[ShareIcon["TikTok"] = 2037] = "TikTok";
          ShareIcon[ShareIcon["Instagram"] = 2038] = "Instagram";
          ShareIcon[ShareIcon["Twitter"] = 2039] = "Twitter";
        })(ShareIcon || (ShareIcon = {}));

        _EnumDefine.ShareIcon = ShareIcon;
      })(EnumDefine || (EnumDefine = exports('EnumDefine', {})));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EventManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _createClass, _createForOfIteratorHelperLoose, cclegacy;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f2dffZjjZBC+ZTBK+olIWcJ", "EventManager", undefined);

      var Delegate = exports('Delegate', /*#__PURE__*/function () {
        function Delegate(listener, argArray, isOnce) {
          if (isOnce === void 0) {
            isOnce = false;
          }

          this.mListener = void 0;
          this.mArgArray = void 0;
          this.mIsOnce = false;
          this.mListener = listener;
          this.mArgArray = argArray;
          this.mIsOnce = isOnce;
        }

        _createClass(Delegate, [{
          key: "listener",
          get: function get() {
            return this.mListener;
          }
        }, {
          key: "argArray",
          get: function get() {
            return this.mArgArray;
          }
        }, {
          key: "isOnce",
          get: function get() {
            return this.mIsOnce;
          },
          set: function set(isOnce) {
            this.mIsOnce = isOnce;
          }
        }]);

        return Delegate;
      }());
      var EventManager = exports('EventManager', /*#__PURE__*/function () {
        function EventManager() {
          this.mListenerMap = new Map();
        }

        EventManager.getInstance = function getInstance() {
          if (this.instance == null) {
            this.instance = new EventManager();
          }

          return this.instance;
        };

        var _proto = EventManager.prototype;

        _proto.has = function has(type, caller, listener) {
          return this.find(type, caller, listener) !== null;
        };

        _proto.trigger = function trigger(type) {
          if (!type) {
            console.log("Listener type is null!");
            return false;
          } //cc.log("trigger " + type + (argArray.length > 0 ? ": " : "."), ...argArray);


          var delegateList = [];
          var callerList = [];
          var listenerMap = this.mListenerMap.get(type);

          if (listenerMap) {
            listenerMap.forEach(function (listenerList, caller) {
              for (var _iterator = _createForOfIteratorHelperLoose(listenerList), _step; !(_step = _iterator()).done;) {
                var _delegate = _step.value;
                delegateList.push(_delegate);
                callerList.push(caller);
              }

              for (var index = listenerList.length - 1; index >= 0; --index) {
                if (listenerList[index].isOnce) {
                  listenerList.splice(index, 1);
                }
              }

              if (listenerList.length <= 0) {
                listenerMap["delete"](caller);
              }
            });

            if (listenerMap.size <= 0) {
              this.mListenerMap["delete"](type);
            }
          }

          var length = delegateList.length;

          for (var _len = arguments.length, argArray = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            argArray[_key - 1] = arguments[_key];
          }

          for (var index = 0; index < length; index++) {
            var _delegate2$listener;

            var _delegate2 = delegateList[index];

            (_delegate2$listener = _delegate2.listener).call.apply(_delegate2$listener, [callerList[index]].concat(_delegate2.argArray, argArray));
          }

          return length > 0;
        };

        _proto.add = function add(type, caller, listener) {
          for (var _len2 = arguments.length, argArray = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
            argArray[_key2 - 3] = arguments[_key2];
          }

          this.addListener.apply(this, [type, caller, listener, false].concat(argArray));
        };

        _proto.addOnce = function addOnce(type, caller, listener) {
          for (var _len3 = arguments.length, argArray = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
            argArray[_key3 - 3] = arguments[_key3];
          }

          this.addListener.apply(this, [type, caller, listener, true].concat(argArray));
        };

        _proto.remove = function remove(type, caller, listener, onceOnly) {
          this.removeBy(function (listenerType, listenerCaller, delegate) {
            if (type && type !== listenerType) {
              return false;
            }

            if (caller && caller !== listenerCaller) {
              return false;
            }

            if (listener && listener !== delegate.listener) {
              return false;
            }

            if (onceOnly && !delegate.isOnce) {
              return false;
            }

            return true;
          });
        };

        _proto.removeAll = function removeAll(caller) {
          var _this = this;

          this.mListenerMap.forEach(function (listenerMap, type) {
            listenerMap["delete"](caller);

            if (listenerMap.size <= 0) {
              _this.mListenerMap["delete"](type);
            }
          });
        };

        _proto.removeAllInGame = function removeAllInGame() {
          this.mListenerMap.forEach(function (listenerMap, type) {
            listenerMap.clear();
          });
          this.mListenerMap.clear();
        };

        _proto.addListener = function addListener(type, caller, listener, isOnce) {
          var delegate = this.find(type, caller, listener);

          if (delegate) {
            delegate.isOnce = isOnce;
            console.log("Listener is already exist!");
          } else {
            for (var _len4 = arguments.length, argArray = new Array(_len4 > 4 ? _len4 - 4 : 0), _key4 = 4; _key4 < _len4; _key4++) {
              argArray[_key4 - 4] = arguments[_key4];
            }

            var delegate1 = new Delegate(listener, argArray, isOnce);
            this.mListenerMap.get(type).get(caller).push(delegate1);
          }
        };

        _proto.removeBy = function removeBy(predicate) {
          var _this2 = this;

          if (!predicate) {
            return;
          }

          this.mListenerMap.forEach(function (listenerMap, type) {
            listenerMap.forEach(function (listenerList, caller) {
              for (var index = listenerList.length - 1; index >= 0; --index) {
                var _delegate3 = listenerList[index];

                if (predicate(type, caller, _delegate3)) {
                  listenerList.splice(index, 1);
                }
              }

              if (listenerList.length <= 0) {
                listenerMap["delete"](caller);
              }
            });

            if (listenerMap.size <= 0) {
              _this2.mListenerMap["delete"](type);
            }
          });
        };

        _proto.find = function find(type, caller, listener) {
          if (!type) {
            console.log("Listener type is null!");
            return null;
          }

          if (!caller) {
            console.log("Caller type is null!");
            return null;
          }

          if (!listener) {
            console.log("Listener is null! -->", type);
            return null;
          }

          var listenerMap;

          if (this.mListenerMap.has(type)) {
            listenerMap = this.mListenerMap.get(type);
          } else {
            listenerMap = new Map();
            this.mListenerMap.set(type, listenerMap);
          }

          var listenerList;

          if (listenerMap.has(caller)) {
            listenerList = listenerMap.get(caller);
          } else {
            listenerList = [];
            listenerMap.set(caller, listenerList);
          }

          for (var _iterator2 = _createForOfIteratorHelperLoose(listenerList), _step2; !(_step2 = _iterator2()).done;) {
            var _delegate4 = _step2.value;

            if (_delegate4.mListener === listener) {
              return _delegate4;
            }
          }

          return null;
        };

        return EventManager;
      }());
      EventManager.instance = void 0;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/events.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7b509yd+k5KUowUujH3guoJ", "events", undefined);

      var CONNECT_EVENT = exports('CONNECT_EVENT', "connect");
      var ERROR_EVENT = exports('ERROR_EVENT', "error");
      var CLOSE_EVENT = exports('CLOSE_EVENT', "close");
      var SELECT_EVENT = exports('SELECT_EVENT', "select");

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/events2.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "dc3e0AnBqVC/6mVgLSEIjB9", "events", undefined); // -- EventController --------------------------------------------------------- //


      var EventController = exports('EventController', /*#__PURE__*/function () {
        function EventController() {
          this._eventCallbacks = void 0;
          this._eventCallbacks = [];
        }

        var _proto = EventController.prototype;

        _proto.on = function on(eventCallback) {
          this._eventCallbacks.push(eventCallback);
        };

        _proto.off = function off(eventObj) {
          // remove specific event callback
          if (eventObj) {
            if (eventObj.callback) {
              this._eventCallbacks = this._eventCallbacks.filter(function (eventCallback) {
                return eventCallback.event !== eventObj.event || eventCallback.callback !== eventObj.callback;
              });
            } // No callback to remove, remove entire event
            else {
                this._eventCallbacks = this._eventCallbacks.filter(function (eventCallback) {
                  return eventCallback.event !== eventObj.event;
                });
              }
          } else {
            this._eventCallbacks = [];
          }
        };

        _proto.trigger = function trigger(event, result) {
          var eventCallbacks = this._eventCallbacks.filter(function (eventCallback) {
            return eventCallback.event === event;
          });

          if (eventCallbacks && eventCallbacks.length) {
            eventCallbacks.forEach(function (eventCallback) {
              eventCallback.callback(result);
            });
          }
        };

        return EventController;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EveryDayActivityTaskItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './MessageManager.ts', './WebSocketMgr.ts', './NodeHelp.ts', './TweenHelp.ts', './BagUIItemTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Label, Sprite, sp, v3, Component, MessageManager, WebSocketMgr, NodeHelp, TweenHelper, ETweenType, BagUIItemTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Label = module.Label;
      Sprite = module.Sprite;
      sp = module.sp;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      TweenHelper = module.TweenHelper;
      ETweenType = module.ETweenType;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "ace0cAWkORG5YXH4gN5jY3A", "EveryDayActivityTaskItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActivityTaskW = 799;
      var EveryDayActivityTaskItem = exports('EveryDayActivityTaskItem', (_dec = ccclass('EveryDayActivityTaskItem'), _dec2 = property({
        type: [SpriteFrame],
        displayName: "未领取宝箱"
      }), _dec3 = property({
        type: [SpriteFrame],
        displayName: "已领取宝箱"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EveryDayActivityTaskItem, _Component);

        function EveryDayActivityTaskItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "BG_1", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "BG_2", _descriptor2, _assertThisInitialized(_this));

          _this.index = 0;
          _this.data = null;
          _this.maxnum = 100;
          _this.tag = null;
          return _this;
        }

        var _proto = EveryDayActivityTaskItem.prototype;

        _proto.init = function init(index, data, maxnum, tag) {
          var _this2 = this;

          this.index = index;
          this.data = data;
          this.maxnum = maxnum;
          this.tag = tag;
          var condition = 0;
          NodeHelp.getchildlable(this.node, "ActivityNum", Label, function (comp) {
            comp.string = _this2.data.conditions[0].MaxCondition;
            condition = _this2.data.conditions[0].MaxCondition || 0;
          });
          NodeHelp.getchildlable(this.node, "icon", Sprite, function (comp) {
            var index = _this2.index >= 5 ? 4 : _this2.index;
            if (data.TaskState == 2) comp.spriteFrame = _this2.BG_2[index];else comp.spriteFrame = _this2.BG_1[index];
          });
          NodeHelp.getchildlable(this.node, "Light", sp.Skeleton, function (comp, node) {
            if (_this2.data.conditions[0].MaxCondition <= _this2.data.conditions[0].nowCondition && _this2.data.TaskState != 2) {
              node.active = true;
              comp.setAnimation(1, "animation", true);

              _this2.schedule(_this2.playIconAnimation, 2);
            } else {
              _this2.unschedule(_this2.playIconAnimation);

              comp.clearTracks();
              node.active = false;
            }
          });
          var x = condition / this.maxnum * ActivityTaskW;
          this.node.setPosition(v3(x, -35, 0));
        };

        _proto.playIconAnimation = function playIconAnimation() {
          NodeHelp.getchildlable(this.node, "icon", null, function (iconComp, iconNode) {
            TweenHelper["default"](iconNode, ETweenType.jumptow);
          });
        };

        _proto.onClicked = function onClicked() {
          BagUIItemTip.getInstance().closeTip();

          if (this.data.conditions[0].MaxCondition <= this.data.conditions[0].nowCondition && this.data.TaskState != 2) {
            WebSocketMgr.send(MessageManager.Net.FarmTaskFinishRequest, {
              ID: this.data.TaskModeId
            });
          } else {
            this.tag.openActivityTaskTip(this.data, this.node.getChildByName("ActivityNum").getWorldPosition());
          }
        };

        return EveryDayActivityTaskItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "BG_1", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "BG_2", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ExceptionView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './OperaleDef.ts', './BaseUI.ts', './UIHelp.ts', './BaseTip.ts', './ToolItem.ts', './GameManager.ts', './MainGame.ts', './UIManager.ts', './UIGame.ts', './towAnimation.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, Node, Input, resources, instantiate, ScrollView, GameAllData, EventManager, MessageManager, OperaleDef, BaseUI, UIHelp, BaseTip, ToolItem, GameManager, MainGame, UIManager, UIGame, towAnimation;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Node = module.Node;
      Input = module.Input;
      resources = module.resources;
      instantiate = module.instantiate;
      ScrollView = module.ScrollView;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      OperaleDef = module.OperaleDef;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      BaseTip = module.BaseTip;
    }, function (module) {
      ToolItem = module.ToolItem;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      MainGame = module.MainGame;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      UIGame = module.UIGame;
    }, function (module) {
      towAnimation = module.towAnimation;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _class3;

      cclegacy._RF.push({}, "8784aJxXnJMqIBj9NcCmhq7", "ExceptionView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var temp_v3_1 = new Vec3();
      var ExceptionView = exports('ExceptionView', (_dec = ccclass('ExceptionView'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(towAnimation), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(ExceptionView, _BaseUI);

        function ExceptionView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "BG", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "RectNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "group1", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "group2", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tipDlg", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "towAnimation", _descriptor6, _assertThisInitialized(_this));

          _this.isLock = false;
          _this.selectItem = null;
          _this.touchStart = null;
          _this.touchItem = null;
          _this.lastTime = 0;
          _this.type = void 0;
          _this.clickItem = null;
          return _this;
        }

        var _proto = ExceptionView.prototype;

        _proto.start = function start() {
          this.group1.active = false;
          this.group2.active = false;
          this.BG.on(Input.EventType.TOUCH_START, this.onBeginTouch.bind(this));
          this.BG.on(Input.EventType.TOUCH_END, this.onEndTouch.bind(this));
          this.BG.on(Input.EventType.TOUCH_CANCEL, this.onTouchCancelled.bind(this));
          this.BG.on(Input.EventType.TOUCH_MOVE, this.onMoveTouch.bind(this));
        };

        _proto.setSelect = function setSelect(item) {
          if (this.clickItem) this.clickItem.setSelect(false);
          this.clickItem = item;
          if (this.clickItem) this.clickItem.setSelect(true);
        };

        _proto.getMode = function getMode() {
          if (this.touchItem) return this.touchItem.getComponent(ToolItem).mode;
          return OperaleDef.NONE;
        };

        _proto.initUI = function initUI(select, mode) {
          this.selectItem = select;
          this.type = select.getType();

          if (this.type == "pasture") {
            this.group2.active = true;
            this.group1.active = false; // this.loadTowAnimationTowe(select);

            this.towAnimation.node.active = false;
          } else {
            this.group1.active = true;
            this.group2.active = false;

            if (!GameAllData.visitState) {
              this.loadTowAnimation(select);
              this.towAnimation.node.active = true;
            }
          }

          if (this.type != "pasture") {
            var _select = this.group1.getComponentsInChildren(ToolItem);

            _select.forEach(function (item) {
              item.initUI();
            });
          } else if (this.group2.active) {
            var _select2 = this.group2.getComponentsInChildren(ToolItem);

            _select2.forEach(function (item) {
              item.initUI();
            });
          }
        };

        _proto.resetNodeSize = function resetNodeSize() {
          if (this.group1.active) {
            var c = this.group1.children;

            for (var index = 0; index < c.length; index++) {
              c[index].setScale(new Vec3(1.0, 1.0, 1.0));
            }
          }

          if (this.group2.active) {
            var _c = this.group2.children;

            for (var _index = 0; _index < _c.length; _index++) {
              _c[_index].setScale(new Vec3(1.0, 1.0, 1.0));
            }
          }
        };

        _proto.PickTools = function PickTools(pos) {
          if (this.group1.active) {
            var c = this.group1.children;

            for (var index = 0; index < c.length; index++) {
              if (UIHelp.TestUIPoint(pos, c[index])) return c[index];
            }
          }

          if (this.group2.active) {
            var _c2 = this.group2.children;

            for (var _index2 = 0; _index2 < _c2.length; _index2++) {
              if (UIHelp.TestUIPoint(pos, _c2[_index2])) return _c2[_index2];
            }
          }

          return null;
        };

        _proto.onBeginTouch = function onBeginTouch(event) {
          var pos = event.touch.getUILocation();
          this.resetNodeSize();
          this.touchItem = this.PickTools(pos);
          this.touchItem && this.touchItem.setScale(new Vec3(1.2, 1.2, 1.2));
          event.preventSwallow = true;
          this.lastTime = UIHelp.getTimeMask();
          this.closeTip();
        };

        _proto.getGetSeedID = function getGetSeedID() {
          return undefined; // if(!this.firstPickItem) return 0;
          // return this.firstPickItem.Config.ItemId;
        };

        _proto.onTouchCancelled = function onTouchCancelled(event) {
          var uipos = event.touch.getUILocation();

          if (UIHelp.TestUIPoint(uipos, this.node)) {
            this.onEndTouch(event);
          } else {
            var GameUi = UIManager.getInstance().getUI(UIGame);
            if (GameUi) GameUi.onStopTouch(event);
          }

          event.preventSwallow = true;
        };

        _proto.onEndTouch = function onEndTouch(event) {
          var endpos = event.touch.getUILocation();
          var s = this.PickTools(endpos);
          this.resetNodeSize();
          event.preventSwallow = true;

          if (this.touchItem === s && this.touchItem) {
            var select = this.touchItem.getComponent(ToolItem);
            this.setSelect(select);

            if (select.isLock) {
              this.touchItem.getWorldPosition(temp_v3_1);
              var arg = select.getTalkText();
              this.openTip("ToolUnlockTip", arg, temp_v3_1);
            }
          }
        };

        _proto.onMoveTouch = function onMoveTouch(event) {
          var endpos = event.touch.getUILocation(); //this.resetNodeSize();

          if (!UIHelp.TestUIPoint(endpos, this.RectNode) && this.touchItem) {
            var select = this.touchItem.getComponent(ToolItem);

            if (!select.isLock) {
              this.closeTip();
              var arg = {
                show: true,
                operaleID: select.mode,
                Pos: endpos,
                select: this.selectItem
              };
              EventManager.getInstance().trigger(MessageManager.Custom.ShowExceptionView, {
                show: false
              });
              EventManager.getInstance().trigger(MessageManager.Custom.OpenHand, arg);
            }
          }

          event.preventSwallow = true;
        };

        _proto.onBtn1 = function onBtn1() {};

        _proto.onBtn2 = function onBtn2() {};

        _proto.onBtn3 = function onBtn3() {};

        _proto.openTip = function openTip(name, data, pos) {
          var _this2 = this;

          var self = this;
          this.tipDlg.active = true;
          var game = GameManager.getInstance().getGame(MainGame);
          game.closeTipOrBtn();
          resources.load("prefabs/ui/item/" + name, function (error, prefab) {
            if (error) {
              console.log(error);
              return;
            }

            var dlg = instantiate(prefab);
            dlg.parent = self.tipDlg;

            _this2.tipDlg.setWorldPosition(pos);

            _this2.tipDlg.active = true;
            dlg.getComponent(BaseTip).initUI(data);
          });
        };

        _proto.closeTip = function closeTip() {
          this.tipDlg.active = false;
          this.tipDlg.removeAllChildren();
        };

        _proto.loadTowAnimation = function loadTowAnimation(select) {
          var target = select;
          var nodeName = "dt_3";

          switch (target._UnusualState) {
            case 1:
              nodeName = "dt_3";
              break;

            case 2:
              nodeName = "dt_0";
              break;

            case 3:
              nodeName = "dt_2";
              break;
          }

          var source = this.group1.getChildByName(nodeName);
          var args = {
            target: target.node,
            source: source,
            x: 0,
            y: 0
          };
          this.towAnimation.initUI(args, null, true);
        } // loadTowAnimationTowe(select: producer) {
        //     let target = select as pasture;
        //     let nodeName = "dt_3";
        //     switch(target._UnusualState)
        //     {
        //         case 1:
        //             nodeName = "dt_3";
        //             break;
        //         case 2:
        //             nodeName = "dt_0";
        //             break;
        //         case 3:
        //             nodeName = "dt_2";
        //             break;
        //     }
        //     let source = this.group1.getChildByName(nodeName);
        //     let args = {
        //         target: target.node,
        //         source: source,
        //         x: 0,
        //         y: 0,
        //     }
        //     this.towAnimation.initUI(args, null,true);
        // }
        ;

        _proto.getClickTarget = function getClickTarget(target) {
          var cond = target.split(",");
          if (cond.length < 2) return null;
          var producer = null;
          var game = GameManager.getInstance().getGame(MainGame);

          if (cond[0] == "farm") {
            producer = game.getFarmLandFromID(Number(cond[1]));
          } else if (cond[0] == "pasture") {
            producer = game.getPastureFromID(Number(cond[1]));
          } else if (cond[0] == "build") {
            producer = game.getBuildFromID(Number(cond[1]));
          } else if (cond[0] == "ui") {
            producer = this.findWndFromClassName(cond[1], cond[2]);
          } else if (cond[0] == "scroll") {
            producer = this.findScrollData(cond[1], cond[2], Number(cond[3]));
          }

          return producer;
        };

        _proto.findScrollData = function findScrollData(WndClass, path, index) {
          var wnd = UIManager.getInstance().getUIFromName(WndClass);
          if (!wnd) return null;
          var child = wnd.node.getChildByPath(path);
          if (!child) return null;
          var sc = child.getComponent(ScrollView);

          if (sc) {
            if (index < 0 || index >= sc.content.children.length) return null;
            return sc.content.children[index];
          }

          return null;
        };

        _proto.findWndFromClassName = function findWndFromClassName(WndClass, ctlpath) {
          var wnd = UIManager.getInstance().getUIFromName(WndClass);
          if (!wnd) return null;
          var ctlnode = wnd.node.getChildByPath(ctlpath);

          if (!ctlnode) {
            console.log("未找到路径=>", ctlpath);
          }

          return ctlnode;
        };

        return ExceptionView;
      }(BaseUI), _class3.className = "ExceptionView", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "BG", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "RectNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "group1", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "group2", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "tipDlg", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "towAnimation", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ExchangeItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './NodeHelp.ts', './ExchangeRecodItem.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, ConfigFile, NodeHelp, ExchangeRecodItem;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      ExchangeRecodItem = module.ExchangeRecodItem;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "808feE7OnNBPaankhjFNav2", "ExchangeItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ExchangeItem = exports('ExchangeItem', (_dec = ccclass('ExchangeItem'), _dec(_class = /*#__PURE__*/function (_ExchangeRecodItem) {
        _inheritsLoose(ExchangeItem, _ExchangeRecodItem);

        function ExchangeItem() {
          return _ExchangeRecodItem.apply(this, arguments) || this;
        }

        var _proto = ExchangeItem.prototype;

        _proto.init = function init(data, index) {
          var _this = this;

          _ExchangeRecodItem.prototype.init.call(this, data, index);

          if ((index + 1) % 2 == 0) {
            this.node.getChildByName("bg_2").active = true;
          }

          NodeHelp.getchildlable(this.node, "type", Label, function (comp) {
            var srcData = ConfigFile.getItemData(_this.data.src_type);
            var dstData = ConfigFile.getItemData(_this.data.dst_type);
            var srcName = ConfigFile.findLanguage(srcData.Name);
            var dstName = ConfigFile.findLanguage(dstData.Name);
            comp.string = srcName + "->" + dstName;
          });
          NodeHelp.getchildlable(this.node, "proportion", Label, function (comp) {
            comp.string = _this.data.ratio;
          });
          NodeHelp.getchildlable(this.node, "exchangeNum", Label, function (comp) {
            comp.string = _this.data.src_value;
          });
          NodeHelp.getchildlable(this.node, "getNum", Label, function (comp) {
            comp.string = _this.data.dst_value;
          });
          NodeHelp.getchildlable(this.node, "time", Label, function (comp) {
            //时间显示
            var date = new Date(_this.data.time * 1000);
            var year = date.getFullYear() + "";
            var month = date.getMonth() + 1 + "";
            var day = date.getDate() + "";
            var hours = date.getHours() < 10 ? "0" + date.getHours() : date.getHours() + "";
            var minutes = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes() + "";
            var seconds = date.getSeconds() < 10 ? "0" + date.getSeconds() : date.getSeconds() + "";
            comp.string = month + "/" + day + "/" + year + " " + hours + ":" + minutes + ":" + seconds;
          });
        };

        return ExchangeItem;
      }(ExchangeRecodItem)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ExchangeRecodItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "5d5e0SEbGtBR7IY4mNkSfCr", "ExchangeRecodItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ExchangeRecodItem = exports('ExchangeRecodItem', (_dec = ccclass('ExchangeRecodItem'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ExchangeRecodItem, _Component);

        function ExchangeRecodItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.data = null;
          _this.index = null;
          return _this;
        }

        var _proto = ExchangeRecodItem.prototype;

        _proto.init = function init(data, index) {
          this.data = data;
          this.index = index;
        };

        return ExchangeRecodItem;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ExpAnime.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventManager.ts', './MessageManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, Sprite, Label, tween, math, Component, EventManager, MessageManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Sprite = module.Sprite;
      Label = module.Label;
      tween = module.tween;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "4c485HYvd5Ja608onI8w9zX", "ExpAnime", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var temp_v3_1 = new Vec3();
      var ExpAnime = exports('ExpAnime', (_dec = ccclass('ExpAnime'), _dec2 = property(Sprite), _dec3 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ExpAnime, _Component);

        function ExpAnime() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "sp", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Num", _descriptor2, _assertThisInitialized(_this));

          _this._target = null;
          return _this;
        }

        var _proto = ExpAnime.prototype;

        _proto.start = function start() {};

        _proto.targetAni = function targetAni() {
          this._target.getWorldPosition(temp_v3_1);

          tween(this.node).to(1, {
            worldPosition: new Vec3(temp_v3_1)
          }, {
            easing: "quintOut"
          }).call(function () {
            EventManager.getInstance().trigger(MessageManager.Custom.HOUSEEXPEVENT, {});
          }).removeSelf().start();
        };

        _proto.randomDirect = function randomDirect() {
          var x = (math.randomRangeInt(1, 100) - 50) * 3;
          var y = (math.randomRangeInt(1, 100) - 50) * 3;
          var self = this;
          tween(this.node).by(0.5, {
            position: new Vec3(x, y, 0)
          }, {
            easing: "quintOut"
          }).call(function () {
            self.targetAni();
          }).start();
        };

        _proto.initUI = function initUI(BotanyCropsId, Num, target) {
          var self = this;
          this._target = target;
          this.Num.string = "" + Num;
          self.randomDirect();
        };

        return ExpAnime;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sp", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Num", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ExperienceUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstLanguage.ts', './EnumDefine.ts', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './TaskManager.ts', './UIManager.ts', './NodeHelp.ts', './TweenHelp.ts', './UIHelp.ts', './BasePanel.ts', './InvitationCodeView.ts', './UIConchExchange.ts', './UIStory.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, Size, Node, Prefab, UIOpacity, ScrollView, Label, Toggle, ProgressBar, Sprite, LabelOutline, Color, resources, SpriteFrame, UITransform, v3, Layout, instantiate, ConstLanguage, EnumDefine, Configname, ConfigFile, GameAllData, propType, EventManager, MessageManager, TaskManager, UIManager, NodeHelp, TweenHelper, ETweenType, UIHelp, BasePanel, InvitationCodeView, UIConchExchange, UIStory;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Size = module.Size;
      Node = module.Node;
      Prefab = module.Prefab;
      UIOpacity = module.UIOpacity;
      ScrollView = module.ScrollView;
      Label = module.Label;
      Toggle = module.Toggle;
      ProgressBar = module.ProgressBar;
      Sprite = module.Sprite;
      LabelOutline = module.LabelOutline;
      Color = module.Color;
      resources = module.resources;
      SpriteFrame = module.SpriteFrame;
      UITransform = module.UITransform;
      v3 = module.v3;
      Layout = module.Layout;
      instantiate = module.instantiate;
    }, function (module) {
      ConstLanguage = module.ConstLanguage;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      Configname = module.Configname;
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
      propType = module.propType;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      TaskManager = module.TaskManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      TweenHelper = module.TweenHelper;
      ETweenType = module.ETweenType;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      BasePanel = module.BasePanel;
    }, function (module) {
      InvitationCodeView = module.InvitationCodeView;
    }, function (module) {
      UIConchExchange = module.UIConchExchange;
    }, function (module) {
      UIStory = module.UIStory;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _class3;

      cclegacy._RF.push({}, "08ad8TK5OtAG6ydL5/Qo6Yg", "ExperienceUI", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      /**item的大小范围 */

      var Itemsize = new Size(168, 178); //显示的数据结构

      /**爵位icon的大小范围*/

      var Iconsize = new Size(150, 150); //显示的数据结构

      var ExperienceUI = exports('ExperienceUI', (_dec = ccclass('ExperienceUI'), _dec2 = property({
        type: [Node],
        displayName: "显示面板"
      }), _dec3 = property({
        type: Node,
        displayName: "按钮"
      }), _dec4 = property({
        type: Prefab,
        displayName: "解锁物品模板"
      }), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(ExperienceUI, _BasePanel);

        function ExperienceUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;
          _this.PropName = "vip";

          _initializerDefineProperty(_this, "Panel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ToggleGroup", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "unlockPrefab", _descriptor3, _assertThisInitialized(_this));

          _this.vipConfig = null;
          _this.dukeConfig = null;
          _this.showData = {
            vip: null,
            title: null
          };
          _this.vipIsMax = false;
          _this.titleIsMax = false;
          _this.lockTime = 0;
          return _this;
        }

        var _proto = ExperienceUI.prototype;

        _proto.start = function start() {
          _BasePanel.prototype.start.call(this);

          this.lockTime = UIHelp.getTimeMask();
          EventManager.getInstance().add(MessageManager.Custom.VipOrRankChange, this, this.onVipOrRankChange);
          this.getConfigData();
          this.initShow();
          TweenHelper["default"](this.node.getChildByName("Panel"), ETweenType.Jelly);
          TweenHelper.getTween(this.node.getChildByName("Mask").getComponent(UIOpacity), "open", function (_tween) {
            var sartOpacity = 0;
            var opacity = 150;

            _tween.to(0, {
              opacity: sartOpacity
            }).to(0.1, {
              opacity: opacity
            });
          }).start();
        };

        _proto.onVipOrRankChange = function onVipOrRankChange() {
          for (var _iterator = _createForOfIteratorHelperLoose(this.Panel), _step; !(_step = _iterator()).done;) {
            var Panel = _step.value;
            NodeHelp.getchildlable(Panel, "unlocks", ScrollView, function (comp, node) {
              comp.content.children.forEach(function (v) {
                v.destroy();
              });
            });
            NodeHelp.getchildlable(Panel, "unlocksFixed", null, function (comp, node) {
              node.children.forEach(function (v) {
                v.destroy();
              });
            });
          }

          this.getConfigData();
          this.initShow();
        } //得到所有配置文件和配置中读取到的数据
        ;

        _proto.getConfigData = function getConfigData() {
          console.log(GameAllData.FarmUserResponse);
          var VipLevel = 0;
          var RankLevel = 0;
          var VipExp = 0;
          var RankExp = 0;

          if (GameAllData.FarmUserResponse) {
            VipLevel = GameAllData.FarmUserResponse.VipLevel || 0;
            RankLevel = GameAllData.FarmUserResponse.RankLevel || 0;
            VipExp = GameAllData.FarmUserResponse.VipExp ? GameAllData.FarmUserResponse.VipExp : 0;
            RankExp = GameAllData.FarmUserResponse.RankExp || 0;
          }

          var getconfig = function getconfig(configname, leve) {
            if (configname == Configname.TVipInfo) {
              var config = ConfigFile.getInstance().config.get(configname).find(function (v) {
                if (leve == v.VipLevel || leve == 0 && !v.VipLevel) return true;
              });
              return config;
            } else {
              var _config = ConfigFile.getInstance().config.get(configname).find(function (v) {
                if (leve == v.DukeLevel || leve == 0 && !v.DukeLevel) return true;
              });

              return _config;
            }
          };

          this.vipConfig = getconfig(Configname.TVipInfo, VipLevel);
          this.dukeConfig = getconfig(Configname.TDukeInfo, RankLevel);
          console.log(this.vipConfig, this.dukeConfig); //vip得到到下一等级经验和名称

          var vipNextConfig = getconfig(Configname.TVipInfo, VipLevel + 1);
          if (!vipNextConfig) this.vipIsMax = true;
          var vipExp = Math.floor(Number(this.vipConfig.VipExp) - Number(VipExp)) + "";
          var nextLevel = Number(VipLevel) + 1 + ""; //爵位得到下一等级人数和名称

          var titleNextConfig = getconfig(Configname.TDukeInfo, RankLevel + 1);
          if (!titleNextConfig) this.titleIsMax = true;
          var titleExp = Math.floor(Number(this.dukeConfig.DukePeople) - Number(RankExp)) + ""; //得到vip经验提示

          var GlobalConfigExp = ConfigFile.getGlobalInfoByGlobalId(17);
          var expNum = GlobalConfigExp && GlobalConfigExp.IntValue ? GlobalConfigExp.IntValue : "1";
          var GlobalConfigExp2 = ConfigFile.getGlobalInfoByGlobalId(27);
          var expNum2 = GlobalConfigExp2 && GlobalConfigExp2.IntValue ? GlobalConfigExp2.IntValue : "100"; //得到u和贝壳币的比例

          var GlobalConfigUSDT = ConfigFile.getGlobalInfoByGlobalId(1);
          var USDTNum = GlobalConfigUSDT && GlobalConfigUSDT.Text ? GlobalConfigUSDT.Text : "100";
          this.showData.vip = {
            Level: VipLevel,
            TitleStr: ConfigFile.findLanguage(ConstLanguage.VIP_EXPERIENCE_NAME1),
            progressBarStr: VipExp + "/" + this.vipConfig.VipExp,
            progress: Number(VipExp) / Number(this.vipConfig.VipExp),
            levelNumOrUrl: ConfigFile.findLanguage(ConstLanguage.VIP_EXPERIENCE_LEVEL).format("" + VipLevel),
            experienceText: this.vipIsMax ? null : ConfigFile.findLanguage(ConstLanguage.VIP_EXPERIENCE_TIP1).format(vipExp, nextLevel),
            explainText: ConfigFile.findLanguage(ConstLanguage.VIP_EXPERIENCE_TIP3).format(expNum, expNum2),
            //
            unlocksIcon: this.vipIsMax ? null : ConfigFile.findLanguage(ConstLanguage.VIP_EXPERIENCE_UNLOCKSICON1).format(nextLevel),
            unlocks: this.vipIsMax ? this.vipConfig.VipPic.split(";") : vipNextConfig.VipPic.split(";"),
            showText: ConfigFile.findLanguage(Number(this.vipConfig.VipTxt)),
            buttonText: ConfigFile.findLanguage(ConstLanguage.VIP_EXPERIENCE_BUTTON1),
            levelName: null
          };
          this.showData.title = {
            Level: RankLevel,
            TitleStr: ConfigFile.findLanguage(ConstLanguage.VIP_EXPERIENCE_NAME2),
            progressBarStr: RankExp + "/" + this.dukeConfig.DukePeople,
            progress: Number(RankExp) / Number(this.dukeConfig.DukePeople),
            levelNumOrUrl: RankLevel + "",
            levelName: ConfigFile.findLanguage(this.dukeConfig.DukeName),
            experienceText: this.titleIsMax ? null : ConfigFile.findLanguage(ConstLanguage.VIP_EXPERIENCE_TIP2).format(titleExp, ConfigFile.findLanguage(titleNextConfig.DukeName)),
            explainText: null,
            unlocksIcon: this.titleIsMax ? null : ConfigFile.findLanguage(ConstLanguage.VIP_EXPERIENCE_UNLOCKSICON2).format(ConfigFile.findLanguage(titleNextConfig.DukeName)),
            unlocks: this.titleIsMax ? this.dukeConfig.DukePic.split(";") : titleNextConfig.DukePic.split(";"),
            showText: ConfigFile.findLanguage(Number(this.dukeConfig.DukeTxt)),
            buttonText: ConfigFile.findLanguage(ConstLanguage.VIP_EXPERIENCE_BUTTON2)
          };
        } //得到物品表数据
        ;

        _proto.getitemData = function getitemData(data) {
          var d = data.split(",");
          return {
            text: ConfigFile.findLanguage(Number(d[1])),
            url: "vip/unlock/%s/spriteFrame".format(d[0])
          };
        } //开始显示
        ;

        _proto.initShow = function initShow() {
          var _this2 = this;

          var name = this.PropName + "Panel";

          var _loop = function _loop() {
            var Panel = _step2.value;

            if (Panel.name == propType.VIP + "Panel") {
              //经验文字显示
              NodeHelp.getchildlable(Panel, "progressBar", Label, function (comp) {
                comp.string = _this2.showData.vip.progressBarStr;
              }); //经验条显示

              NodeHelp.getchildlable(Panel, "progressBar", ProgressBar, function (comp) {
                comp.progress = _this2.showData.vip.progress;
              }); //vip等级显示

              NodeHelp.getchildlable(Panel, "levelIcon", Label, function (comp) {
                comp.string = _this2.showData.vip.levelNumOrUrl;
                var iconNum = 0;

                if (_this2.showData.vip.Level != iconNum) {
                  if (_this2.showData.vip.Level % 2 == 1) iconNum = _this2.showData.vip.Level;else iconNum = _this2.showData.vip.Level - 1;
                }

                var img = EnumDefine.vipIconUrl.vipBig.format(iconNum);
                NodeHelp.loadImage(NodeHelp.getchildlable(Panel, "levelIcon", Sprite), img);
                comp.node.getComponent(LabelOutline).color = new Color().fromHEX(EnumDefine.vipColor["color" + iconNum]);
              }); //vip等级提示1

              NodeHelp.getchildlable(Panel, "experienceText", Label, function (comp) {
                if (!_this2.showData.vip.experienceText) {
                  comp.node.active = false;
                } else {
                  comp.node.active = true;
                  comp.string = _this2.showData.vip.experienceText;
                }
              }); //vip等级提示2

              NodeHelp.getchildlable(Panel, "explainText", Label, function (comp) {
                comp.string = _this2.showData.vip.explainText;
              }); //按钮文字

              NodeHelp.getchildlable(Panel, "addButton", Label, function (comp) {
                comp.string = _this2.showData.vip.buttonText;
              }); //解锁文字

              if (!_this2.showData.vip.unlocksIcon) {
                NodeHelp.getchildlable(Panel, "unlocksIcon", null, function (comp, node) {
                  node.active = false;
                });
              } else {
                NodeHelp.getchildlable(Panel, "unlocksIcon", null, function (comp, node) {
                  node.active = true;
                });
                NodeHelp.getchildlable(Panel, "unlocksIcon", Label, function (comp) {
                  comp.string = _this2.showData.vip.unlocksIcon;
                });
              } //解锁提示文字


              NodeHelp.getchildlable(Panel, "showText", Label, function (comp) {
                comp.string = _this2.showData.vip.showText;
              }); //解锁item显示

              if (_this2.showData.vip.unlocks.length <= 3) {
                var _loop2 = function _loop2() {
                  var unlock = _step3.value;
                  if (unlock == "") return "continue";

                  var data = _this2.getitemData(unlock);

                  NodeHelp.getchildlable(Panel, "unlocksFixed", null, function (comp, node) {
                    var _node = instantiate(_this2.unlockPrefab);

                    var image = data.url;
                    resources.load(image, SpriteFrame, function (error, res) {
                      if (res) {
                        if (!_node || !_node.isValid) return;
                        _node.getChildByName("icon").getComponent(Sprite).spriteFrame = res;
                        var scale = NodeHelp.setScopeLimitation(_node.getChildByName("icon").getComponent(UITransform), Itemsize.width, Itemsize.height);

                        _node.getChildByName("icon").setScale(v3(scale, scale, 1));
                      }

                      if (error) {
                        console.log("加载解锁图片 ==>", error);
                      }
                    });
                    NodeHelp.getchildlable(_node, "Name", Label, function (comp) {
                      comp.string = data.text;

                      if (data.text.length > 8) {
                        NodeHelp.getchildlable(_node, "content", Layout, function (comp) {
                          comp.enabled = true;
                          comp.updateLayout();
                        });
                      } else {
                        NodeHelp.getchildlable(_node, "content", Layout, function (comp) {
                          comp.enabled = false;
                        });
                      }
                    });
                    node.addChild(_node);
                  });
                };

                for (var _iterator3 = _createForOfIteratorHelperLoose(_this2.showData.vip.unlocks), _step3; !(_step3 = _iterator3()).done;) {
                  var _ret = _loop2();

                  if (_ret === "continue") continue;
                }
              } else {
                var _loop3 = function _loop3() {
                  var unlock = _step4.value;
                  if (unlock == "") return "continue";

                  var data = _this2.getitemData(unlock);

                  NodeHelp.getchildlable(Panel, "unlocks", ScrollView, function (comp, node) {
                    var _node = instantiate(_this2.unlockPrefab);

                    var image = data.url;
                    resources.load(image, SpriteFrame, function (error, res) {
                      if (res) {
                        if (!_node || !_node.isValid) return;
                        _node.getChildByName("icon").getComponent(Sprite).spriteFrame = res;
                        var scale = NodeHelp.setScopeLimitation(_node.getChildByName("icon").getComponent(UITransform), Itemsize.width, Itemsize.height);

                        _node.getChildByName("icon").setScale(v3(scale, scale, 1));
                      }

                      if (error) {
                        console.log("加载解锁图片 ==>", error);
                      }
                    });
                    NodeHelp.getchildlable(_node, "Name", Label, function (comp) {
                      comp.string = data.text;

                      if (data.text.length > 8) {
                        NodeHelp.getchildlable(_node, "content", Layout, function (comp) {
                          comp.enabled = true;
                          comp.updateLayout();
                        });
                      } else {
                        NodeHelp.getchildlable(_node, "content", Layout, function (comp) {
                          comp.enabled = false;
                        });
                      }
                    });
                    comp.content.addChild(_node);
                  });
                };

                for (var _iterator4 = _createForOfIteratorHelperLoose(_this2.showData.vip.unlocks), _step4; !(_step4 = _iterator4()).done;) {
                  var _ret2 = _loop3();

                  if (_ret2 === "continue") continue;
                }
              }
            } else if (Panel.name == propType.TITLE + "Panel") {
              //经验文字显示
              NodeHelp.getchildlable(Panel, "progressBar", Label, function (comp) {
                comp.string = _this2.showData.title.progressBarStr;
              }); //经验条显示

              NodeHelp.getchildlable(Panel, "progressBar", ProgressBar, function (comp) {
                comp.progress = _this2.showData.title.progress;
              }); //爵位等级显示

              NodeHelp.getchildlable(Panel, "levelIcon", Sprite, function (comp) {
                var compt = comp;
                var image = "vip/titleIcon/%s/spriteFrame".format(_this2.showData.title.levelNumOrUrl);
                resources.load(image, SpriteFrame, function (error, res) {
                  if (res) {
                    if (!compt || !compt.isValid) return;
                    compt.spriteFrame = res;
                    var scale = NodeHelp.setScopeLimitation(compt.node.getComponent(UITransform), Iconsize.width, Iconsize.height);
                    compt.node.setScale(v3(scale, scale, 1));
                  }

                  if (error) {
                    console.log("加载爵位等级icon图片 ==>", error);
                  }
                });
              });
              NodeHelp.getchildlable(Panel, "levelIcon", Label, function (comp) {
                comp.string = _this2.showData.title.levelName;
              });
              NodeHelp.getchildlable(Panel, "levelIcon", Layout, function (comp) {
                comp.updateLayout();
              }); //爵位等级提示1

              NodeHelp.getchildlable(Panel, "experienceText", Label, function (comp) {
                if (!_this2.showData.title.experienceText) {
                  comp.node.active = false;
                } else {
                  comp.node.active = true;
                  comp.string = _this2.showData.title.experienceText;
                }
              }); //按钮文字

              NodeHelp.getchildlable(Panel, "addButton", Label, function (comp) {
                comp.string = _this2.showData.title.buttonText;
              }); //解锁文字

              if (!_this2.showData.title.unlocksIcon) {
                NodeHelp.getchildlable(Panel, "unlocksIcon", null, function (comp, node) {
                  node.active = false;
                });
              } else {
                NodeHelp.getchildlable(Panel, "unlocksIcon", null, function (comp, node) {
                  node.active = true;
                });
                NodeHelp.getchildlable(Panel, "unlocksIcon", Label, function (comp) {
                  comp.string = _this2.showData.title.unlocksIcon;
                });
              } //解锁提示文字


              NodeHelp.getchildlable(Panel, "showText", Label, function (comp) {
                comp.string = _this2.showData.title.showText;
              }); //解锁item显示

              if (_this2.showData.title.unlocks.length <= 3) {
                var _loop4 = function _loop4() {
                  var unlock = _step5.value;
                  if (unlock == "") return "continue";

                  var data = _this2.getitemData(unlock);

                  NodeHelp.getchildlable(Panel, "unlocksFixed", null, function (comp, node) {
                    var _node = instantiate(_this2.unlockPrefab);

                    var image = data.url;
                    resources.load(image, SpriteFrame, function (error, res) {
                      if (res) {
                        if (!_node || !_node.isValid) return;
                        _node.getChildByName("icon").getComponent(Sprite).spriteFrame = res;
                        var scale = NodeHelp.setScopeLimitation(_node.getChildByName("icon").getComponent(UITransform), Itemsize.width, Itemsize.height);

                        _node.getChildByName("icon").setScale(v3(scale, scale, 1));
                      }

                      if (error) {
                        console.log("加载解锁图片 ==>", error);
                      }
                    });
                    NodeHelp.getchildlable(_node, "Name", Label, function (comp) {
                      comp.string = data.text;

                      if (data.text.length > 8) {
                        NodeHelp.getchildlable(_node, "content", Layout, function (comp) {
                          comp.enabled = true;
                          comp.updateLayout();
                        });
                      } else {
                        NodeHelp.getchildlable(_node, "content", Layout, function (comp) {
                          comp.enabled = false;
                        });
                      }
                    });
                    node.addChild(_node);
                  });
                };

                for (var _iterator5 = _createForOfIteratorHelperLoose(_this2.showData.title.unlocks), _step5; !(_step5 = _iterator5()).done;) {
                  var _ret3 = _loop4();

                  if (_ret3 === "continue") continue;
                }
              } else {
                var _loop5 = function _loop5() {
                  var unlock = _step6.value;
                  if (unlock == "") return "continue";

                  var data = _this2.getitemData(unlock);

                  NodeHelp.getchildlable(Panel, "unlocks", ScrollView, function (comp, node) {
                    var _node = instantiate(_this2.unlockPrefab);

                    var image = data.url;
                    resources.load(image, SpriteFrame, function (error, res) {
                      if (res) {
                        if (!_node || !_node.isValid) return;
                        _node.getChildByName("icon").getComponent(Sprite).spriteFrame = res;
                        var scale = NodeHelp.setScopeLimitation(_node.getChildByName("icon").getComponent(UITransform), Itemsize.width, Itemsize.height);

                        _node.getChildByName("icon").setScale(v3(scale, scale, 1));
                      }

                      if (error) {
                        console.log("加载解锁图片 ==>", error);
                      }
                    });
                    NodeHelp.getchildlable(_node, "Name", Label, function (comp) {
                      comp.string = data.text;

                      if (data.text.length > 8) {
                        NodeHelp.getchildlable(_node, "content", Layout, function (comp) {
                          comp.enabled = true;
                          comp.updateLayout();
                        });
                      } else {
                        NodeHelp.getchildlable(_node, "content", Layout, function (comp) {
                          comp.enabled = false;
                        });
                      }
                    });
                    comp.content.addChild(_node);
                  });
                };

                for (var _iterator6 = _createForOfIteratorHelperLoose(_this2.showData.title.unlocks), _step6; !(_step6 = _iterator6()).done;) {
                  var _ret4 = _loop5();

                  if (_ret4 === "continue") continue;
                }
              }
            }

            Panel.active = Panel.name == name;
          };

          for (var _iterator2 = _createForOfIteratorHelperLoose(this.Panel), _step2; !(_step2 = _iterator2()).done;) {
            _loop();
          }

          this.ToggleGroup.children.forEach(function (v) {
            var nameID = ConstLanguage.VIP_EXPERIENCE_NAME2;
            if (v.name == propType.VIP) nameID = ConstLanguage.VIP_EXPERIENCE_NAME1;
            v.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(nameID);
            NodeHelp.getchildlable(v, "Checkmark", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(nameID);
            });

            if (v.name == _this2.PropName) {
              v.getComponent(Toggle).isChecked = true;
            }
          }, this);
        };

        _proto.onClickPanel = function onClickPanel(event, name) {
          var uistory = UIManager.getInstance().getUI(UIStory);
          if (uistory) return;

          for (var _iterator7 = _createForOfIteratorHelperLoose(this.Panel), _step7; !(_step7 = _iterator7()).done;) {
            var Panel = _step7.value;
            Panel.active = Panel.name == name;
          }
        };

        _proto.onClickedClose = function onClickedClose(anction) {
          if (anction === void 0) {
            anction = true;
          }

          if (UIHelp.getTimeDiff(this.lockTime) < 500) {
            return;
          }

          _BasePanel.prototype.onClickedClose.call(this, anction);

          var opacity = this.node.getChildByName("Mask").getComponent(UIOpacity);
          if (opacity) opacity.opacity = 0;

          for (var _iterator8 = _createForOfIteratorHelperLoose(this.Panel), _step8; !(_step8 = _iterator8()).done;) {
            var Panel = _step8.value;
            NodeHelp.getchildlable(Panel, "unlocks", ScrollView, function (comp, node) {
              comp.content.children.forEach(function (v) {
                v.destroy();
              });
            });
            NodeHelp.getchildlable(Panel, "unlocksFixed", null, function (comp, node) {
              node.children.forEach(function (v) {
                v.destroy();
              });
            });
          }
        };

        _proto.onClickAddCoin = function onClickAddCoin() {
          TaskManager.getInstance().onCtlClick(this.node.getChildByPath("Panel/vipPanel/addButton"));
          UIManager.getInstance().openUI(UIConchExchange, 12, function (ui, args) {
            ui.initUI(1);
          });
        };

        _proto.onClickShare = function onClickShare() {
          TaskManager.getInstance().onCtlClick(this.node.getChildByPath("Panel/titlePanel/addButton"));
          UIManager.getInstance().openUI(InvitationCodeView, 12, function (ui, args) {});
        };

        return ExperienceUI;
      }(BasePanel), _class3.className = "ExperienceUI", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Panel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "ToggleGroup", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "unlockPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/fameland.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './producer.ts', './OperaleDef.ts', './ConfigFile.ts', './GameAllData.ts', './MessageManager.ts', './EventManager.ts', './UIHelp.ts', './MainGame.ts', './GameManager.ts', './EnumDefine.ts', './TaskManager.ts', './landInfoTip.ts', './RoleCtl.ts', './plantCtl.ts', './NodeHelp.ts', './TipManager.ts', './WebSocketMgr.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, _createClass, cclegacy, Vec3, _decorator, SpriteFrame, Sprite, Node, Material, tween, resources, Label, UITransform, instantiate, UIOpacity, producer, OperaleDef, ConfigFile, GameAllData, MessageManager, EventManager, UIHelp, MainGame, GameManager, EnumDefine, TaskManager, ERRORTYPE, landInfoTip, RoleCtl, plantCtl, NodeHelp, TipManager, WebSocketMgr;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      Node = module.Node;
      Material = module.Material;
      tween = module.tween;
      resources = module.resources;
      Label = module.Label;
      UITransform = module.UITransform;
      instantiate = module.instantiate;
      UIOpacity = module.UIOpacity;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      OperaleDef = module.OperaleDef;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      MainGame = module.MainGame;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      TaskManager = module.TaskManager;
      ERRORTYPE = module.ERRORTYPE;
    }, function (module) {
      landInfoTip = module.landInfoTip;
    }, function (module) {
      RoleCtl = module.RoleCtl;
    }, function (module) {
      plantCtl = module.plantCtl;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15;

      cclegacy._RF.push({}, "2fe55IH1ZVM0rtWR5LxaCTD", "fameland", undefined);

      var _temp_V3 = new Vec3();

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var plantState = [0, 2161, 2161, 2161, 2162, 2163];
      var effectState1 = [0, 2, 1, 1];
      var effectState2 = [1, 3, 3, 3];
      var effectState3 = [OperaleDef.HARVEST, OperaleDef.DIG, OperaleDef.WATERING, OperaleDef.ERADICATE];
      var fameland = exports('fameland', (_dec = ccclass('fameland'), _dec2 = property([SpriteFrame]), _dec3 = property(Sprite), _dec4 = property(Node), _dec5 = property(Sprite), _dec6 = property(Sprite), _dec7 = property(Sprite), _dec8 = property(Node), _dec9 = property(Node), _dec10 = property(Node), _dec11 = property(Node), _dec12 = property([Sprite]), _dec13 = property(Node), _dec14 = property([SpriteFrame]), _dec15 = property([Material]), _dec16 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_producer) {
        _inheritsLoose(fameland, _producer);

        function fameland() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _producer.call.apply(_producer, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "landIcon", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "damage", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "damageNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "land", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Select", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lock", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "effect", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Headeffect", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tipsEffect", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fruitNode", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "plant", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "plantEffNode", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "exception", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "matEff", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "chuizi", _descriptor15, _assertThisInitialized(_this));

          _this.plantSourcePos = [];
          _this._mainGame = null;
          _this._plantID = void 0;
          _this._fruitCount = 0;
          _this._plantState = void 0;
          _this._Idletime = 0;
          _this._Idletime2 = 0;
          _this._UnusualState = void 0;
          _this._NextStateTime = 5;
          _this._Get = 6;
          _this._Total = 7;
          _this._StealMap = null;
          _this._CanGetTime = 0;
          return _this;
        }

        var _proto = fameland.prototype;

        _proto.layerAnalysis = function layerAnalysis() {
          this._mainGame = GameManager.getInstance().getGame(MainGame); //this._mainGame.scensTree.insertNode(this.node.parent);

          var layer1Node = this._mainGame.layer1.getChildByName("l1-4");

          var layer2Node = this._mainGame.layer1.getChildByName("l1-2");

          var l1 = layer1Node.getChildByName(this.ID.toString());
          var l2 = layer2Node.getChildByName(this.ID.toString());
          var plantNode = this.plant[0].node.parent; //this._mainGame.scensTree.insertNode1(this.plantEffNode);
          //this._mainGame.scensTree.insertNode1(plantNode);

          plantNode.parent = l1;
          this.fruitNode.parent = l2;
          this.chuizi.parent = l2; //this.Select.node.parent = l2;

          this.Headeffect.parent = l2;
          this.effect.parent = l2;
          this.damageNode.parent = l2;
          this.plantEffNode.parent = l1; // this.lock.node.parent = l2;
        };

        _proto.getAnimationLayer = function getAnimationLayer() {
          var mainGame = GameManager.getInstance().getGame(MainGame);
          var layer2Node = mainGame.layer1.getChildByName("l1-2");
          var l2 = layer2Node.getChildByName(this.ID.toString());
          return l2;
        };

        _proto.onLoad = function onLoad() {
          this.Select.node.active = false;
          this.lock.node.active = true;
          EventManager.getInstance().add(MessageManager.Custom.ScaleChange, this, this.syncScale);
          this.mtlEffect(1);
        };

        _proto.onDestroy = function onDestroy() {
          EventManager.getInstance().removeAll(this);
        };

        _proto.start = function start() {
          this.layerAnalysis();
        };

        _proto.getType = function getType() {
          return "fameland";
        };

        _proto.getMaxLevel = function getMaxLevel() {
          var data = ConfigFile.getFarmAllInfo(this.ID); //let LandConfig = ConfigFile.getInstance().config.get(Configname.TLandInfo);

          return data.length;
        };

        _proto.isMaxLevel = function isMaxLevel() {
          var game = GameManager.getInstance().getGame(MainGame);
          var cnt = game.getFamelandCnt(this.level + 1) + 1;
          var configdata = ConfigFile.getFarmInfoNew(cnt, this.level + 1);
          var lanConfigData = ConfigFile.getLandInfoNew(this.level + 1);

          if (!configdata || !lanConfigData) {
            // if(!configdata.NeedItem|| configdata.NeedItem=="" || configdata.show) return true;
            return true;
          }

          return false; //return this.level >= this.getMaxLevel();
        };

        _proto.setSelectState = function setSelectState(show) {
          _producer.prototype.setSelectState.call(this, show);

          this.Select.node.active = show;
        };

        _proto.pickEnable = function pickEnable(show) {
          if (show) {
            if (this.state == OperaleDef.SOWING) this.land.grayscale = true;
          } else {
            this.land.grayscale = false;
          }
        };

        _proto.mtlEffect = function mtlEffect(index) {
          var mat = this.matEff[index];

          if (mat) {
            this.plant[0].material = mat;
            this.plant[1].material = mat;
            this.plant[2].material = mat;
            this.plant[3].material = mat;
          }
        };

        _proto.popPlant = function popPlant() {
          tween(this.plant[0].node).by(0.5, {
            position: new Vec3(-50, 50, 0)
          }).start();
          tween(this.plant[1].node).by(0.5, {
            position: new Vec3(50, 50, 0)
          }).start();
          tween(this.plant[2].node).by(0.5, {
            position: new Vec3(-50, 50, 0)
          }).start();
          tween(this.plant[3].node).by(0.5, {
            position: new Vec3(50, 50, 0)
          }).start();
        };

        _proto.setPlantFade = function setPlantFade(target, value) {
          target.getComponent(plantCtl).fade = value;
        };

        _proto.loadPlant = function loadPlant(image) {
          var _this2 = this;

          if (image === "") {
            this.plant[0].spriteFrame = null;
            this.plant[1].spriteFrame = null;
            this.plant[2].spriteFrame = null;
            this.plant[3].spriteFrame = null;
            this.setFruitInfo(false);
            return;
          }

          resources.load(image, SpriteFrame, function (error, res) {
            if (res) {
              _this2.plant[0].node.setScale(1, 1, 1);

              _this2.plant[1].node.setScale(1, 1, 1);

              _this2.plant[2].node.setScale(1, 1, 1);

              _this2.plant[3].node.setScale(1, 1, 1); // this.setPlantFade(this.plant[0].node,1.0);
              // this.setPlantFade(this.plant[1].node,1.0);
              // this.setPlantFade(this.plant[2].node,1.0);
              // this.setPlantFade(this.plant[3].node,1.0);


              _this2.plant[0].spriteFrame = res;
              _this2.plant[1].spriteFrame = res;
              _this2.plant[2].spriteFrame = res;
              _this2.plant[3].spriteFrame = res;
            }

            if (error) {
              console.log("加载植物状态图 ==>", error);
            }
          });
        };

        _proto.getItemName = function getItemName(modeID) {
          var configItem = ConfigFile.getItemData(modeID);
          if (!configItem) return "没有ID";
          return producer.getMessageText(configItem.Name);
        };

        _proto.showChuizi = function showChuizi() {
          if (this.state == OperaleDef.UNLOCK && this.checkCanUnlock(1)) {
            if (!GameAllData.visitState) this.chuizi.active = true;
          } else {
            this.chuizi.active = false;
          }
        };

        _proto.setFruitInfo = function setFruitInfo(show) {
          var sp = this.fruitNode.children[1].getComponent(Sprite);
          var text = this.fruitNode.children[2].getComponent(Label);

          if (show) {
            this.playEffect(this.plantEffNode.children[0], "matureEffect"); //this.playEffectNode(this.plantEffNode.children[1], "matureEffect",null);
            //this.playEffectNode(this.plantEffNode.children[2], "matureEffect",null);
            //this.playEffectNode(this.plantEffNode.children[3], "matureEffect",null);

            var botany = ConfigFile.getBotanyFromId(this._plantID);
            this.fruitNode.active = true;
            text.string = "X" + this._fruitCount;
            NodeHelp.loadIcon("propIcon/itemicon", botany.BotanyCropsId.toString(), function (res) {
              sp.spriteFrame = res;
              var scale = NodeHelp.setScopeLimitation(sp.node.getComponent(UITransform), 90, 90);
              sp.node.setScale(new Vec3(scale, scale, 1));
            }); // let name = "propIcon/" + botany.BotanyCropsId + "/dt1" + "/spriteFrame"
            // resources.load(name, SpriteFrame, (error, res) => {
            //     if (res) {
            //         let scale = NodeHelp.setScopeLimitation(sp.node.getComponent(UITransform), 90, 90)
            //         sp.node.setScale(new Vec3(scale, scale, 1))
            //         sp.spriteFrame = res;
            //     }
            //     if (error) {
            //         console.log("加载植物状态图 ==>", error);
            //     }
            // })

            this.syncScale();
          } else {
            this.fruitNode.active = false;
            this.plantEffNode.children[0].removeAllChildren(); //this.plantEffNode.children[1].removeAllChildren();
            //this.plantEffNode.children[2].removeAllChildren();
            //this.plantEffNode.children[3].removeAllChildren();

            sp.spriteFrame = null;
            text.string = "";
          }
        };

        _proto.onbackProcess = function onbackProcess(id) {
          if (this.ID == id) {
            if (this.state == OperaleDef.UNABLELOCK || this.state == OperaleDef.UNLOCK) {
              this.state = OperaleDef.UNLOCK;
              this.lock.node.active = true;
              this.showChuizi();
            }
          }
        };

        _proto.elasticEffect = function elasticEffect() {
          _producer.prototype.elasticEffect.call(this);

          var plantNode = this.plant[0].node.parent;
          plantNode.setScale(1.0, 1.0, 1.0);
          tween(plantNode).to(0.1, {
            scale: new Vec3(1.2, 1.2, 1.2)
          }).to(0.1, {
            scale: new Vec3(1.0, 1.0, 1.0)
          }).start();
          this.lock.node.setScale(1.0, 1.0, 1.0);

          if (this.lock.node.active) {
            tween(this.lock.node).to(0.1, {
              scale: new Vec3(1.2, 1.2, 1.2)
            }).to(0.1, {
              scale: new Vec3(1.0, 1.0, 1.0)
            }).start();
          }
        };

        _proto.removeEffectNode = function removeEffectNode() {
          this.effect.removeAllChildren();
        };

        _proto.getEffectCount = function getEffectCount() {
          return this.effect.children.length;
        };

        _proto.playHeadEffect = function playHeadEffect(name, data, cb) {
          if (this.isAnimationLock()) return;
          var mg = GameManager.getInstance().getGame(MainGame);
          mg.playEffect(this.Headeffect, name, cb);
          this.setAnimationLock(true);
        };

        _proto.onLandResponse = function onLandResponse(data) {
          this.ID = data.LandModeId;
          this.chuizi.active = false;
          var old = this.level;
          this.level = data.Grade;
          var index = data.Grade;
          if (index >= this.landIcon.length) index = this.landIcon.length - 1;else if (index < 0) index = 0;
          this.land.spriteFrame = this.landIcon[index];
          var recvState = 0;
          var oldFruitCount = this._fruitCount;
          var oldState = this.state;
          var oldUnusualState = this._UnusualState; //转换土地状态

          if (Object.keys(data.Plant).length <= 0) {
            this.loadPlant("");
            this.state = OperaleDef.SOWING;

            if (oldState != this.state) {
              this._Idletime = UIHelp.getTimeMask();
              this._Idletime2 = UIHelp.getTimeMask();
            }

            this._plantState = 0;
            this._fruitCount = 0;
            this._UnusualState = 0;
          } else {
            for (var pp in data.Plant) {
              var plant = data.Plant[pp];
              this._plantID = plant.PlantModeId;
              this._fruitCount = plant.Count;
              this._UnusualState = plant.UnusualState;
              this._plantState = plant.State;
              this._NextStateTime = plant.NextStateTime; //下一个时间状态

              this._Get = plant.Get; //已收获果实

              this._Total = plant.Total; //总共可收获果实

              this._StealMap = plant.StealMap;
              this._CanGetTime = plant.CanGetTime;
              recvState = plant.State;
              break;
            }

            if (recvState <= 5) {
              var botany = ConfigFile.getBotanyFromId(this._plantID);
              if (botany) this.loadPlant("plants/" + botany.BotanyCropsId + "/" + recvState + "/spriteFrame");
            }
          } //this._UnusualState = 2;


          if (data.Grade <= 0) {
            this.state = OperaleDef.UNABLELOCK; //还不能解锁
          } else if (recvState < 4 && recvState > 0) {
            this.state = OperaleDef.GROWER;
            this.mtlEffect(effectState1[recvState]);
          } else if (recvState == 4) {
            this.state = effectState3[0];
            this.mtlEffect(effectState2[this._UnusualState]);
          } else if (recvState == 5) {
            this._fruitCount = 0;
            this._UnusualState = 0;
            this.state = OperaleDef.WEEDING;
            this.mtlEffect(0);
          }

          if (this._UnusualState != 0) {
            this.damageNode.active = true;
            this.damage.spriteFrame = this.exception[this._UnusualState - 1];
            this.replaceEx();
          } else {
            this.damageNode.active = false;
            this.damage.spriteFrame = null;
          }

          if (this.state == OperaleDef.UNLOCK) {
            this.lock.node.active = true;
            this.showChuizi();
          } else {
            this.lock.node.active = false;
          }

          if (this._fruitCount > 0) {
            this.setFruitInfo(true);
          } else {
            this.setFruitInfo(false);
          }

          if (recvState > 1 && oldState != this.state) {
            if (this.state != OperaleDef.UNABLELOCK) {
              this.elasticEffect();
            }
          }

          if (this.state != OperaleDef.SOWING) {
            this.removeEffectNode();
          }

          var ni = GameManager.getInstance().getGame(MainGame);

          if (ni) {
            if (old != this.level) {
              EventManager.getInstance().trigger(MessageManager.Custom.UserDataChange, {});
            }

            var obtn = ni.getOperaBtnData();

            if (obtn && obtn.select == this) {
              if (this.state != obtn.mode) {
                ni.closeOperaleBtn();
              }
            }

            var script = ni.tipDlg.getComponentInChildren(landInfoTip);

            if (script && script._cbData && script._cbData.select) {
              if (ni.tipDlg.active && oldFruitCount != this._fruitCount) {
                if (script._cbData.select == this) {
                  this.closeGameTip();
                }
              } else if (ni.tipDlg.active && this.state == OperaleDef.WEEDING) {
                if (script._cbData.select == this) {
                  this.closeGameTip();
                }
              } else if (ni.tipDlg.active && oldUnusualState != this._UnusualState) {
                if (script._cbData.select == this) {
                  this.closeGameTip();
                }
              }
            }
          }
        } //播种表现
        ;

        _proto.showSeed = function showSeed(recvState, plantID) {
          var botany = ConfigFile.getBotanyFromId(plantID);
          if (botany) this.loadPlant("plants/" + botany.BotanyCropsId + "/" + recvState + "/spriteFrame");
        } //缩放表现
        ;

        _proto.showElasticEff = function showElasticEff() {
          if (this.state != OperaleDef.UNABLELOCK) {
            this.elasticEffect();
            this.removeEffectNode();
          }
        };

        _proto.initData = function initData(data) {
          this.onLandResponse(data);
        };

        _proto.resetData = function resetData(data) {
          this.land.spriteFrame = this.landIcon[0];
          this.level = 0;
          this._plantID = 0;
          this._fruitCount = 0;
          this._UnusualState = 0;
          this._plantState = 0;
          this._NextStateTime = 0; //下一个时间状态

          this._Get = 0; //已收获果实

          this._Total = 0; //总共可收获果实

          this._StealMap = {};
          this.loadPlant("");
          this.state = OperaleDef.UNABLELOCK;
          this.mtlEffect(0);
          this.damageNode.active = false;
          this.damage.spriteFrame = null;
          this.lock.node.active = false;
          this.chuizi.active = false;
          this.setFruitInfo(false);
          this.removeEffectNode();
        };

        _proto.checkCanUnlock = function checkCanUnlock(level) {
          var configdata = this.getFarmInfo(level); //FarmUnlock

          if (!configdata) return false;
          return GameAllData.checkConditionArray(configdata.FarmUnlock);
        };

        _proto.getVipCanUpgrade = function getVipCanUpgrade() {
          var landinfo = ConfigFile.getLandInfo(this.level);
          if (!landinfo) return false;
          return GameAllData.checkConditionArray(landinfo.LandUnlock);
        };

        _proto.canOperale = function canOperale(mode, data, show) {
          //不被监听的动作
          if (mode == OperaleDef.SHOWINFO) return false;
          if (mode == OperaleDef.UNABLELOCK) return false;
          if (mode == OperaleDef.GROWER) return false;
          var retValue = undefined;
          TaskManager.getInstance().asErrorType = ERRORTYPE.ET_NONE;
          TaskManager.getInstance().asOperaArgs = {};
          TaskManager.getInstance().asOperaArgs["mode"] = mode;
          TaskManager.getInstance().asOperaArgs["select"] = this; //监听的动作

          if (mode == OperaleDef.UPGRADE) {
            var aa = this.getUpgradeNeedItem();
            var bb = this.getNeedItemType();
            var cur = GameAllData.getCurrencyNumByType(bb); // GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.Conch);

            if (cur >= aa) {
              retValue = true;
            } else {
              retValue = false;
              TaskManager.getInstance().asErrorType = ERRORTYPE.ET_MONERY;
            }

            if (!retValue) {
              TipManager.ChickBoxNew(111033, bb); // producer.MessageBox(111033, bb, null);
            }
          }

          if (mode == OperaleDef.STEALPLANT) {
            retValue = this.checkSteal(mode, data, show);
          }

          if (mode == OperaleDef.SOWING) {
            TaskManager.getInstance().asOperaArgs["seedId"] = data.seedid;

            if (_producer.prototype.canOperale.call(this, mode, data, show)) {
              retValue = this.checkMoney(mode, data, show);
            } else {
              retValue = false;
            }
          }

          if (mode == OperaleDef.ERADICATE) {
            if (this._UnusualState == 3) retValue = true;else retValue = false;
          }

          if (mode == OperaleDef.DIG) {
            if (this._UnusualState == 1) retValue = true;else retValue = false;
          }

          if (mode == OperaleDef.WATERING) {
            if (this._UnusualState == 2) retValue = true;else retValue = false;
          } //有果实可以收才可以操作


          if (mode == OperaleDef.HARVEST && this.state == OperaleDef.HARVEST) {
            if (this._fruitCount > 0) retValue = true;else retValue = false;
          }

          if (mode == OperaleDef.STEALPLANT && this.state == OperaleDef.HARVEST) {
            if (this._fruitCount > 0) retValue = true;else retValue = false;
          }

          if (mode == OperaleDef.UNLOCK) {
            if (this.checkCanUnlock(1)) retValue = true;else retValue = false;
          }

          if (retValue == undefined && _producer.prototype.canOperale.call(this, mode, data, show)) {
            retValue = true;
          }

          TaskManager.getInstance().asOperaArgs["asErrorType"] = TaskManager.getInstance().asErrorType;
          TaskManager.getInstance().onActionState(mode, data, retValue, TaskManager.getInstance().asOperaArgs);
          return retValue;
        };

        _proto.getNeedItem = function getNeedItem(level) {
          var game = GameManager.getInstance().getGame(MainGame);
          var cnt = game.getFamelandCnt(level + 1) + 1; //if(cnt<1) cnt=1;

          var configdata = ConfigFile.getFarmInfo(cnt, level); //let configdata = this.getFarmInfo(level);//NeedItem

          if (!configdata) return undefined;
          var m1 = ConfigFile.getLimitInfo(configdata.NeedItem);
          return m1.val;
        };

        _proto.getNeedItemType = function getNeedItemType() {
          var level = this.level;
          var game = GameManager.getInstance().getGame(MainGame);
          var cnt = game.getFamelandCnt(level + 1) + 1; //if(cnt<1) cnt=1;

          var configdata = ConfigFile.getFarmInfo(cnt, level); //let configdata = this.getFarmInfo(level);//NeedItem

          if (!configdata) return undefined;
          var m1 = ConfigFile.getLimitInfo(configdata.NeedItem);
          return m1.id;
        };

        _proto.getUpgradeNeedItem = function getUpgradeNeedItem() {
          return this.getNeedItem(this.level);
        };

        _proto.getUnLockText = function getUnLockText(level) {
          var configdata = this.getFarmInfo(level); //FarmUnlock

          var mesage = producer.getMessageText(configdata.FarmUnlockTxt);
          var cond = GameAllData.getConditionArray(configdata.FarmUnlock);
          if (cond.length < 2) mesage = mesage.format(cond[0].val, cond[0].val);else {
            mesage = mesage.format(cond[0].val, cond[1].val); // let duketable = ConfigFile.getInstance().config.get(Configname.TDukeInfo);
            // let curDuke = duketable.find(item => {
            //     return item.DukeLevel == cond[1].val;
            // })
            // if(curDuke){
            //     let dukename = producer.getMessageText(curDuke.DukeName);
            //     mesage = mesage.format(cond[0].val, dukename);
            // }else{
            //    mesage = mesage.format(cond[0].val, "");
            // }
          }
          return mesage;
        };

        _proto.getTimeText = function getTimeText(BotanyTime) {
          var timearray = BotanyTime.split(",");
          var totalTime = parseInt(timearray[0]) + parseInt(timearray[1]);
          return producer.getTimeFormat(totalTime);
        };

        _proto.getStateName = function getStateName(id) {
          return producer.getMessageText(plantState[id]);
        };

        _proto.getHarvest = function getHarvest() {
          var botany = ConfigFile.getBotanyFromId(this._plantID);
          var showInfo = {};
          showInfo["tip"] = "LandInfoTip";
          showInfo["state"] = this.getStateName(this._plantState);
          showInfo["StateIndex"] = this._plantState;
          showInfo["select"] = this;
          showInfo["mode"] = this.state;
          showInfo["color"] = producer.getMessageText(this.level + 2200);
          var temple1 = producer.getMessageText(2171);
          showInfo["v1"] = temple1.format(this._Get.toString(), (this._Total - this._Get).toString());
          var cropsname = this.getItemName(botany.BotanyCropsId);
          showInfo["name"] = cropsname;
          var temple = producer.getMessageText(2182); //"<color=#000000>预计%s后，进入成熟期</color>";

          var localTime = UIHelp.getTimeMask() / 1000;
          var offsettime = this._NextStateTime - producer.getServerTimeDiff(localTime);
          var fruitCnt = ConfigFile.getGlobalInfoByGlobalId(2).IntValue;
          var ot1 = this._CanGetTime - producer.getServerTimeDiff(localTime);
          if (ot1 <= 0) ot1 = 0;
          if (offsettime <= 0) offsettime = 0;
          var t = offsettime; //let t1 = timearray[1];

          showInfo["text"] = temple.format(producer.getTimeFormat(t), producer.getTimeFormat(ot1), cropsname, fruitCnt);
          return showInfo;
        };

        _proto.showHarvest = function showHarvest() {
          this.showTip(this.getHarvest(), this.state);
        };

        _proto.playRoleAni = function playRoleAni(cb) {
          var _this3 = this;

          if (this.isAnimationLock()) return;
          this.setAnimationLock(true);
          var pos = this.plant[2].node.getWorldPosition(new Vec3());
          var pos2 = this.node.getWorldPosition(new Vec3());
          var pnode = this.getAnimationLayer();
          this.closeGameTip();
          EventManager.getInstance().trigger(MessageManager.Custom.ShowToolsView, {
            show: false
          });
          var roleSex = GameAllData.FarmUserResponse.Sex;
          var name = "animal/man";
          if (roleSex == 1) name = "animal/woman";
          resources.load(name, function (error, res) {
            if (res) {
              var man = instantiate(res);
              man.parent = pnode;
              man.setWorldPosition(pos);
              man.getComponent(RoleCtl).init(3, 3, {
                select: _this3
              }, function (data) {
                console.log("动作完成");
                cb && cb(data);
              });
            }
          });
        };

        _proto.replaceEx = function replaceEx() {
          var opacity = this.damageNode.getComponentsInChildren(UIOpacity);

          for (var _iterator = _createForOfIteratorHelperLoose(opacity), _step; !(_step = _iterator()).done;) {
            var value = _step.value;
            value.opacity = 255;
          }

          this.damageNode.setScale(1, 1, 1);
          this.syncScale();
        } //异常消失
        ;

        _proto.plantHideEx = function plantHideEx(cb) {
          var opacity = this.damageNode.getComponentsInChildren(UIOpacity);

          for (var _iterator2 = _createForOfIteratorHelperLoose(opacity), _step2; !(_step2 = _iterator2()).done;) {
            var value = _step2.value;
            tween(value).to(0.5, {
              opacity: 0
            }).start();
          }

          tween(this.damageNode).to(0.5, {
            scale: new Vec3(0, 0, 0)
          }).call(function () {
            cb && cb();
          }).start();
        };

        _proto.plantHideTarget = function plantHideTarget(target, cb) {
          var opacity = target.getComponent(plantCtl);
          tween(opacity).to(0.5, {
            fade: 0
          }).start();
          tween(target).to(0.5, {
            scale: new Vec3(0, 0, 0)
          }).call(function () {
            cb && cb();
          }).start();
        };

        _proto.plantHide = function plantHide(cb) {
          this.plantHideTarget(this.plant[0].node, null);
          this.plantHideTarget(this.plant[1].node, null);
          this.plantHideTarget(this.plant[2].node, null);
          this.plantHideTarget(this.plant[3].node, cb);
        };

        _proto.isUnLock = function isUnLock() {
          if (this.state == OperaleDef.UNABLELOCK) return false;
          if (this.state == OperaleDef.UNLOCK) return false;
          return true;
        };

        _proto.showUnLock = function showUnLock() {
          var showInfo = {};
          var game = GameManager.getInstance().getGame(MainGame);
          var target = game.getTipTarget();

          if (target != this) {
            showInfo["select"] = this;
            showInfo["mode"] = this.state;
            showInfo["text"] = this.getUnLockText(1);
            showInfo["tip"] = "UnlockTip";
            showInfo["money"] = this.getNeedItem(1);
            showInfo["name"] = producer.getMessageText(3040); //producer.getMessageText(landinfo.LandName);

            this.showTip(showInfo, this.state);
          }
        };

        _proto.showVisitUnLock = function showVisitUnLock() {
          var showInfo = {};
          var game = GameManager.getInstance().getGame(MainGame);
          var target = game.getTipTarget();

          if (target != this) {
            showInfo["mode"] = this.state;
            showInfo["text"] = producer.getMessageText(2164);
            showInfo["tip"] = "ProducerTip";
            showInfo["name"] = producer.getMessageText(3040); //producer.getMessageText(landinfo.LandName);

            this.showTip(showInfo, this.state);
          }
        };

        _proto.showUnableLock = function showUnableLock() {
          var showInfo = {};
          var game = GameManager.getInstance().getGame(MainGame);
          var target = game.getTipTarget();

          if (target != this) {
            showInfo["select"] = this;
            showInfo["mode"] = this.state;
            showInfo["tip"] = "ProducerTip";
            showInfo["name"] = producer.getMessageText(3040); // "荒地";

            showInfo["text"] = this.getUnLockText(1);
            this.showTip(showInfo, this.state);
          }
        };

        _proto.checkSteal = function checkSteal(mode, data, show) {
          if (mode == OperaleDef.STEALPLANT) {
            var UserData = GameAllData.FarmUserResponse;
            var maxnum = ConfigFile.getGlobalInfoByGlobalId(22).IntValue;
            var minnum = ConfigFile.getGlobalInfoByGlobalId(20).IntValue;
            var lt = "2,4";
            var lt1 = ConfigFile.getGlobalInfoByGlobalId(100);
            if (lt1 && lt1.Text) lt = lt1.Text;
            var lv = ConfigFile.getLimitInfo(lt);
            var rec = this._StealMap[UserData.Id];
            if (!rec) rec = 0;

            if (rec >= maxnum) {
              TaskManager.getInstance().asErrorType = ERRORTYPE.ET_STEAL;
              show && producer.MessageBox(7007, null, null);
              return false;
            }

            if (UserData.VipLevel < lv.id) {
              show && producer.MessageBoxArg1(7004, lv.id, null, null);
              TaskManager.getInstance().asErrorType = ERRORTYPE.ET_VIP;
              return false;
            }

            if (this._fruitCount <= minnum && this._fruitCount > 0) {
              show && producer.MessageBox(7006, null, null);
              TaskManager.getInstance().asErrorType = ERRORTYPE.ET_STEALCOUNT;
              return false;
            }
          }

          return true;
        };

        _proto.checkAction = function checkAction(mode, data) {
          if (this.state == OperaleDef.UNLOCK) {
            this.showUnLock();
          } else if (this.state == OperaleDef.UNABLELOCK) {
            this.showUnableLock();
          } else if (mode == OperaleDef.SOWING) {
            if (this.state == OperaleDef.UNLOCK || this.state == OperaleDef.UNABLELOCK) {
              producer.MessageBox(3034, null, null);
            } else {
              this.checkMoney(mode, data, true);
            }
          }
        };

        _proto.checkMoney = function checkMoney(mode, data, show) {
          var seedid = data.seedid;
          var botany = ConfigFile.getBotanyFromSeedId(seedid);
          if (!botany) return;
          var config = ConfigFile.getItemData(botany.BotanySeedId);
          var m1 = ConfigFile.getLimitInfo(config.ItemPrice);
          var haveItem = GameAllData.getStoreItemByModeId(botany.BotanySeedId);

          if (!haveItem || haveItem.ItemCount < 1) {
            if (m1.val > GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.PEARL)) {
              if (show) {
                producer.MessageBox(mode == OperaleDef.SOWING ? 10004 : 10000, -7, function (data) {
                  EventManager.getInstance().trigger(MessageManager.Custom.SelectSeedHide, "");
                });
              }

              TaskManager.getInstance().asErrorType = ERRORTYPE.ET_MONERY;
              return false;
            }
          } //不满足要求


          var isLock = !GameAllData.checkConditionArray(botany.BotanyUnlock);

          if (this.level < botany.NeedLevel || isLock) {
            if (show) {
              var textTemple = producer.getMessageText(105004);
              var showInfo = {};
              showInfo["tip"] = "ProducerTip";
              showInfo["name"] = producer.getMessageText(config.Name);
              showInfo["text"] = textTemple.format(botany.NeedLevel.toString());
              this.showTip(showInfo, this.state);
              EventManager.getInstance().trigger(MessageManager.Custom.SelectSeedHide, "");
            }

            TaskManager.getInstance().asErrorType = ERRORTYPE.ET_LEVEL;
            return false;
          }

          return true;
        };

        _proto.getUpgradeTip = function getUpgradeTip() {
          var showInfo = {};
          showInfo["tip"] = "LandIUpgradeTip";
          var landinfo = ConfigFile.getLandInfo(this.level);
          var n = producer.getMessageText(landinfo.LandName);
          showInfo["text"] = producer.getMessageText(landinfo.LandTxt);
          showInfo["money"] = this.getNeedItem(this.level);
          showInfo["select"] = this;
          showInfo["mode"] = this.state;
          showInfo["name"] = n + "<color=#58FA00>" + "(LV." + this.level + ")" + "</color>";
          showInfo["follow"] = this.node;
          return showInfo;
        };

        _proto.showUpgradeTip = function showUpgradeTip() {
          this.showTip(this.getUpgradeTip(), this.state);
        };

        _proto.getInfoTip = function getInfoTip() {
          var botany = ConfigFile.getBotanyFromId(this._plantID);
          var showInfo = {};
          showInfo["tip"] = "LandInfoTip";
          showInfo["select"] = this;
          showInfo["mode"] = this.state;
          showInfo["state"] = this.getStateName(this._plantState);
          showInfo["StateIndex"] = this._plantState;
          showInfo["name"] = this.getItemName(botany.BotanyCropsId);
          var timearray = botany.BotanyTime.split(",");
          var localTime = UIHelp.getTimeMask() / 1000;

          if (this._plantState > 1) {
            //生长中
            var offsettime = this._NextStateTime - producer.getServerTimeDiff(localTime);
            if (offsettime < 0) offsettime = 0;
            var temple1 = producer.getMessageText(2170);
            showInfo["v1"] = temple1.format(this._Total);
            var t = offsettime;
            showInfo["color"] = producer.getMessageText(this.level + 2200);
            var temple = producer.getMessageText(2181);
            showInfo["text"] = temple.format(producer.getTimeFormat(t));
          } else {
            var _offsettime = this._NextStateTime - producer.getServerTimeDiff(localTime);

            if (_offsettime < 0) _offsettime = 0;
            var _t = _offsettime;
            var t1 = timearray[1];

            var _temple = producer.getMessageText(2180);

            showInfo["text"] = _temple.format(producer.getTimeFormat(_t), producer.getTimeFormat(t1));
          }

          return showInfo;
        };

        _proto.onClick = function onClick(uipos) {
          if (this.isAnimationLock()) return;

          if (UIHelp.getTimeDiff(TaskManager.getInstance().clickLastTime) < 500) {
            return;
          }

          TaskManager.getInstance().clickLastTime = UIHelp.getTimeMask();

          if (this.state != OperaleDef.UNLOCK) {
            _producer.prototype.onClick.call(this, uipos);
          }

          if (this.state == OperaleDef.SOWING) {
            if (!GameAllData.visitState) {
              this.showUpgradeTip();
              EventManager.getInstance().trigger(MessageManager.Custom.ShowToolsView, {
                unit: this,
                mode: this.state,
                show: true
              });
            } else {
              this.showVisitUnLock();
            }
          } else if (this.state == OperaleDef.GROWER) {
            this.showTip(this.getInfoTip(), this.state);
          } else if (this.state == OperaleDef.UNLOCK) {
            if (!this.checkCanUnlock(1)) {
              if (!GameAllData.visitState) this.showUnLock();else this.showVisitUnLock();
            } else {
              if (!GameAllData.visitState) {
                // let showinfo = { select: this };
                // this.showBtn(showinfo, this.state, true);
                this.chuZiClick();
              } else this.showVisitUnLock();
            }
          } else if (this.state == OperaleDef.UPGRADE) {
            var showInfo = {};
            showInfo["tip"] = "LandIUpgradeTip";
            showInfo["select"] = this;
            showInfo["mode"] = this.state;
            var landinfo = ConfigFile.getLandInfo(this.level);
            var n = producer.getMessageText(landinfo.LandName);
            showInfo["text"] = producer.getMessageText(landinfo.LandTxt);
            showInfo["money"] = this.getNeedItem(this.level);
            showInfo["name"] = n + "(LV." + this.level + ")";
            this.showTip(showInfo, this.state);
          } else if (this.state == OperaleDef.HARVEST) {
            //显示收获期信息
            if (this._fruitCount > 0) {
              if (!GameAllData.visitState) {
                var showinfo = {
                  select: this
                };
                this.showBtn(showinfo, this.state, true);
              } else {
                if (this.checkSteal(OperaleDef.STEALPLANT, null, false)) {
                  var _showinfo = {
                    select: this
                  };
                  this.showBtn(_showinfo, OperaleDef.STEALPLANT, true);
                } else if (this._UnusualState != 0) {
                  EventManager.getInstance().trigger(MessageManager.Custom.ShowExceptionView, {
                    unit: this,
                    mode: OperaleDef.WEEDING,
                    show: true
                  });
                } else {
                  this.checkSteal(OperaleDef.STEALPLANT, null, true);
                }
              }
            } else {
              if (this._UnusualState != 0) {
                EventManager.getInstance().trigger(MessageManager.Custom.ShowExceptionView, {
                  unit: this,
                  mode: OperaleDef.WEEDING,
                  show: true
                });
              } else {
                this.showHarvest();
              }
            }
          } else if (this.state == OperaleDef.WEEDING) {
            if (!GameAllData.visitState) {
              var _showinfo2 = {
                select: this
              };
              this.showBtn(_showinfo2, this.state, true);
            }
          } else if (this.state == OperaleDef.UNABLELOCK) {
            var mg = GameManager.getInstance().getGame(MainGame);
            var canunlock = mg.getCanUnlockFameland();

            if (!GameAllData.visitState) {
              if (!canunlock) this.showUnableLock();else {
                var _showInfo = {};
                _showInfo["tip"] = "ProducerTip";
                _showInfo["select"] = this;
                _showInfo["mode"] = this.state;
                _showInfo["text"] = producer.getMessageText(2121); // "荒地";

                _showInfo["name"] = producer.getMessageText(3040); // "荒地";

                this.showTip(_showInfo, this.state);
              }
            } else {
              this.showVisitUnLock();
            }
          } else {
            var _showInfo2 = {};
            _showInfo2["tip"] = "ProducerTip";
            _showInfo2["select"] = this;
            _showInfo2["mode"] = this.state;

            var _landinfo = ConfigFile.getLandInfo(this.level);

            var _n = producer.getMessageText(_landinfo.LandName);

            _showInfo2["text"] = producer.getMessageText(_landinfo.LandTxt);
            _showInfo2["money"] = this.getNeedItem(this.level);
            _showInfo2["name"] = _n + "(LV." + this.level + ")";
            this.showTip(_showInfo2, this.state);
          }
        };

        _proto.syncScale = function syncScale() {
          try {
            var game = GameManager.getInstance().getGame(MainGame);
            var scale = game.node.scale;
            var sx = 2.0 - scale.x;
            this.fruitNode.setScale(sx, sx, sx);
            this.damageNode.setScale(sx, sx, sx);
            this.chuizi.setScale(sx, sx, sx);
          } catch (error) {
            console.log("aaaaaaaaaa");
          }
        };

        _proto.update = function update(deltaTime) {
          if (this.state == OperaleDef.SOWING && UIHelp.getTimeDiff(this._Idletime) > 3000) {
            this._Idletime = UIHelp.getTimeMask();

            if (this.getEffectCount() <= 0) {
              this.playEffect(this.effect, "zEffect");
              this.loadPlant("");
            }
          }

          this.resetRequest();
        };

        _proto.chuZiClick = function chuZiClick() {
          var _this4 = this;

          var fi = ConfigFile.getFarmInfo(this.ID, 1);
          var unlockConsume = fi.FarmUnlockConsume.split(",");
          var currencyType = unlockConsume[0];
          var currencyNum = unlockConsume[1];
          TipManager.ChoiceBox(ConfigFile.findLanguage(2366, currencyType).format(currencyNum), null, function () {
            var curCurrencyNum = GameAllData.getCurrencyNumByType(currencyType);

            if (curCurrencyNum < currencyNum) {
              // TipManager.ChickBox(ConfigFile.findLanguage(111033, currencyType))
              TipManager.ChickBoxNew(111033, currencyType);
            } else {
              WebSocketMgr.send(MessageManager.Net.FarmLandUnlockRequest, {
                LandModeId: _this4.ID
              });
            }
          });
        };

        _proto.resetRequest = function resetRequest() {
          if (UIHelp.getTimeDiff(this._Idletime2) > 3000) {
            this._Idletime2 = UIHelp.getTimeMask();
            var game = GameManager.getInstance().getGame(MainGame);

            if (!game) {
              return;
            }

            if (this.state == OperaleDef.SOWING) //可以播种
              {
                game.FarmLandPlantMap.set(this.getID(), false);
              } else if (this.state == OperaleDef.WEEDING) //可以铲除
              {
                game.FarmLandEradicateMap.set(this.getID(), false);
              } else if (this.state == OperaleDef.HARVEST) //可以收获
              {
                game.FarmHarvestPlantMap.set(this.getID(), false);
              }
          }
        };

        _createClass(fameland, [{
          key: "state",
          get: function get() {
            return this.getState();
          },
          set: function set(val) {
            this.setState(val);
          }
        }, {
          key: "ID",
          get: function get() {
            return this.getID();
          },
          set: function set(val) {
            this.setID(val);
          }
        }, {
          key: "level",
          get: function get() {
            return this.getLevel();
          },
          set: function set(val) {
            this.setLevel(val);
          }
        }, {
          key: "plantID",
          get: function get() {
            return this._plantID;
          }
        }]);

        return fameland;
      }(producer), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "landIcon", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "damage", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "damageNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "land", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "Select", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "lock", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "effect", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "Headeffect", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "tipsEffect", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "fruitNode", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "plant", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "plantEffNode", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "exception", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "matEff", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "chuizi", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FamilyPlayerItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './MessageManager.ts', './UIManager.ts', './WebSocketMgr.ts', './CutscenesView.ts', './FamilyView.ts', './iconAnimeBtnTransfer.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, Sprite, Label, Component, MessageManager, UIManager, WebSocketMgr, CutscenesView, FamilyView, iconAnimbtnTransfer;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      CutscenesView = module.CutscenesView;
    }, function (module) {
      FamilyView = module.FamilyView;
    }, function (module) {
      iconAnimbtnTransfer = module.iconAnimbtnTransfer;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;

      cclegacy._RF.push({}, "5b335uKypBFxakxYf1kxXIS", "FamilyPlayerItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FamilyPlayerItem = exports('FamilyPlayerItem', (_dec = ccclass('FamilyPlayerItem'), _dec2 = property(Sprite), _dec3 = property(Sprite), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Label), _dec8 = property(Sprite), _dec9 = property(Sprite), _dec10 = property(Sprite), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FamilyPlayerItem, _Component);

        function FamilyPlayerItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.state = 0;

          _initializerDefineProperty(_this, "sprSelected", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sprVipBg", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labSn", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labId", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labVip", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labPerformance", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sprVisit", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sprDisaster", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sprSteal", _descriptor9, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = FamilyPlayerItem.prototype;

        _proto.onLoad = function onLoad() {
          this.sprSelected.node.active = false;
        };

        _proto.start = function start() {
          this.sprVisit.node.active = false;
          this.sprDisaster.node.active = false;
          this.sprSteal.node.active = false;
          this.showEventIcon();
        };

        _proto.setSelect = function setSelect() {
          FamilyView.getInstance().choosedFamilyPlayerItem = this;
          this.showAnim();

          for (var _iterator = _createForOfIteratorHelperLoose(this.node.parent.children), _step; !(_step = _iterator()).done;) {
            var itr = _step.value;
            var srtFamilyPlayerItem = itr.getComponent(FamilyPlayerItem);
            srtFamilyPlayerItem.sprSelected.node.active = false;
            srtFamilyPlayerItem.sprVisit.node.active = false;
            srtFamilyPlayerItem.showEventIcon();
          }

          this.sprSelected.node.active = true;
          this.sprVisit.node.active = true;
          this.sprSteal.node.active = false;
          this.sprDisaster.node.active = false;
        };

        _proto.onClicked = function onClicked() {
          var _this2 = this;

          if (this.sprSelected.node.active) {
            if (this.sprVisit.node.active) {
              this.sprVisit.node.active = false; //请求进入选中玩家的农场

              var func = function func() {
                if (!_this2 || !_this2.labId) {
                  return;
                }

                var data = {
                  UserId: Number(_this2.labId.string)
                };

                data.UserId = 34; //id fazenda

                console.log(data.UserId);
                WebSocketMgr.send(MessageManager.Net.FarmVisitRequest, data);
              };

              UIManager.getInstance().openUI(CutscenesView, 20, function (ui, args) {
                ui.callEntry = func; //ui.callback = func;
              });
            }
          } else {
            this.setSelect();
          }
        };

        _proto.showEventIcon = function showEventIcon() {
          if (1 == this.state) {
            this.sprSteal.node.active = true;
          } else if (2 == this.state) {
            this.sprDisaster.node.active = true;
          }
        };

        _proto.showAnim = function showAnim() {
          var c = FamilyView.getInstance();
          var btnTransfer = c.tansferIcon;
          var animComm = null;

          if (!btnTransfer.getComponent(iconAnimbtnTransfer)) {
            animComm = btnTransfer.addComponent(iconAnimbtnTransfer);
            animComm.playAnim();
          }
        };

        return FamilyPlayerItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sprSelected", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sprVipBg", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labSn", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "labId", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "labVip", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "labPerformance", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "sprVisit", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "sprDisaster", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "sprSteal", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FamilyView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumDefine.ts', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './TipManager.ts', './UIManager.ts', './WebSocketMgr.ts', './NodeHelp.ts', './NumberUtil.ts', './TweenHelp.ts', './BasePanel.ts', './FamilyPlayerItem.ts', './InvitationCodeView.ts', './PerformanceView.ts', './UIConchExchange.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Toggle, Button, EditBox, ScrollView, Prefab, Node, Widget, instantiate, LabelOutline, Color, EnumDefine, ConfigFile, GameAllData, EventManager, MessageManager, TipManager, UIManager, WebSocketMgr, NodeHelp, NumberUtil, TweenHelper, ETweenType, BasePanel, FamilyPlayerItem, InvitationCodeView, PerformanceView, UIConchExchange;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Toggle = module.Toggle;
      Button = module.Button;
      EditBox = module.EditBox;
      ScrollView = module.ScrollView;
      Prefab = module.Prefab;
      Node = module.Node;
      Widget = module.Widget;
      instantiate = module.instantiate;
      LabelOutline = module.LabelOutline;
      Color = module.Color;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
      console.log(GameAllData);
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }, function (module) {
      TweenHelper = module.TweenHelper;
      ETweenType = module.ETweenType;
    }, function (module) {
      BasePanel = module.BasePanel;
    }, function (module) {
      FamilyPlayerItem = module.FamilyPlayerItem;
    }, function (module) {
      InvitationCodeView = module.InvitationCodeView;
    }, function (module) {
      PerformanceView = module.PerformanceView;
    }, function (module) {
      UIConchExchange = module.UIConchExchange;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _class3;

      cclegacy._RF.push({}, "9f0e6ObSB5CG7jBlHq3TMmF", "FamilyView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FamilyView = exports('FamilyView', (_dec = ccclass('FamilyView'), _dec2 = property(Label), _dec3 = property(Toggle), _dec4 = property(Button), _dec5 = property(Button), _dec6 = property(Button), _dec7 = property(EditBox), _dec8 = property(ScrollView), _dec9 = property(Prefab), _dec10 = property(Node), _dec11 = property(Button), _dec12 = property(Node), _dec13 = property(Node), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(FamilyView, _BasePanel);

        function FamilyView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;
          _this.choosedFamilyPlayerItem = null;
          _this.chlik = false;
          _this.sheet = 0;
          _this.lastSheet = 0;
          _this.curpackage = 1;
          _this.ItemH = 82;
          _this.onePackageItemNum = 20;
          _this.totalCount = void 0;
          _this.sublabSnNum = 0;

          _initializerDefineProperty(_this, "labTitle", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnActionable", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnRefresh", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnPerformance", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnInvite", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "edtSearch", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrPlayerList", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pfbFamilyPlayerItem", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodSheet", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnTransfer", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tansfer", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tansferIcon", _descriptor12, _assertThisInitialized(_this));

          return _this;
        }

        FamilyView.getInstance = function getInstance() {
          return this._instance;
        };

        var _proto = FamilyView.prototype;

        _proto.onLoad = function onLoad() {
          FamilyView._instance = this;
          this.setTextShow();
        };

        _proto.onEnable = function onEnable() {
          EventManager.getInstance().add(MessageManager.Net.FarmFamilyTeamListResponse, this, this.onFarmFamilyTeamListResponse);
          this.scrPlayerList.node.on(ScrollView.EventType.SCROLL_TO_BOTTOM, this.scrollViewShow, this);
        };

        _proto.onDisable = function onDisable() {
          EventManager.getInstance().remove(MessageManager.Net.FarmFamilyTeamListResponse, this, this.onFarmFamilyTeamListResponse);
          this.scrPlayerList.node.off(ScrollView.EventType.SCROLL_TO_BOTTOM, this.scrollViewShow, this);
          this.scrPlayerList.content.removeAllChildren();
        };

        _proto.onDestroy = function onDestroy() {
          _BasePanel.prototype.onDestroy.call(this);
        };

        _proto.start = function start() {
          this.chlik = false;

          if (GameAllData.FarmUserResponse.VipLevel < (ConfigFile.getGlobalInfoByGlobalId(150).IntValue - 100)) {
            this.btnActionable.node.getChildByName("cantCheck").active = true;
            this.btnActionable.interactable = false;
          } else {
            this.btnActionable.node.getChildByName("cantCheck").active = false;
            this.btnActionable.interactable = true;
          }

          this.sheet = 1;
          this.onClickedVip();
          this.node.getComponent("PlayButtonSound").play();
          this.node.getComponent(Widget).updateAlignment();
          this.node.getChildByName("Panel").getComponent(Widget).updateAlignment();
          TweenHelper["default"](this.node.getChildByName("Panel"), ETweenType.Jelly);
          this.checkBtnTransfer();
        };

        _proto.setTextShow = function setTextShow() {
          //this.labTitle.string = ConfigFile.findLanguage(7012)
          this.edtSearch.placeholder = ConfigFile.findLanguage(7013);
          NodeHelp.getchildlable(this.nodSheet.getChildByName("btnVip"), "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(7014);
          });
          NodeHelp.getchildlable(this.nodSheet.getChildByName("btnVip"), "check", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(7014);
          });
          NodeHelp.getchildlable(this.nodSheet.getChildByName("btnDirectly"), "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(7015);
          });
          NodeHelp.getchildlable(this.nodSheet.getChildByName("btnDirectly"), "check", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(7015);
          });
          NodeHelp.getchildlable(this.nodSheet.getChildByName("btnActionable"), "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(7016);
          });
          NodeHelp.getchildlable(this.nodSheet.getChildByName("btnActionable"), "check", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(7016);
          });
          NodeHelp.getchildlable(this.btnPerformance.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(7017);
          });
          NodeHelp.getchildlable(this.btnInvite.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(7027);
          });
        };

        _proto.onClickedVip = function onClickedVip() {
          this.lastSheet = this.sheet;
          this.sheet = 1;
          WebSocketMgr.send(MessageManager.Net.FarmFamilyTeamListRequest, {
            Type: this.sheet,
            Page: 1
          });

          console.log(lastSheet);
        };

        _proto.onClickedDirectly = function onClickedDirectly() {
          this.lastSheet = this.sheet;
          this.sheet = 2;
          WebSocketMgr.send(MessageManager.Net.FarmFamilyTeamListRequest, {
            Type: this.sheet,
            Page: 1
          });
        };

        _proto.onClickedActionable = function onClickedActionable() {
          //先判断（可操作）是否解锁
          if (this.btnActionable.node.getChildByName("cantCheck").active) {
            //弹框提示没解锁
            TipManager.TipFromText(7001, ConfigFile.findLanguage(7001)["format"](ConfigFile.getGlobalInfoByGlobalId(150).IntValue -100));
            return;
          }

          this.lastSheet = this.sheet;
          this.sheet = 3;
          WebSocketMgr.send(MessageManager.Net.FarmFamilyTeamListRequest, {
            Type: this.sheet,
            Page: 1
          });
        };

        _proto.farmFamilyTeamListRequest = function farmFamilyTeamListRequest(page) {
          WebSocketMgr.send(MessageManager.Net.FarmFamilyTeamListRequest, {
            Type: this.sheet,
            Page: page
          });
        };

        _proto.onClickedRefresh = function onClickedRefresh() {
          switch (this.sheet) {
            case 1:
              this.onClickedVip();
              break;

            case 2:
              this.onClickedDirectly();
              break;

            case 3:
              this.onClickedActionable();
              break;
          }

          this.edtSearch.string = "";
        } // public scrollViewShow() {
        //     let Offset = this.scrPlayerList.getScrollOffset()
        //     //console.log("滚动偏移----------》" + Offset)
        //     let i = 0
        //     if (Offset.y > 0)
        //         i = Math.floor(Offset.y / (this.ItemH + Space)) - 1
        //     let section = 0
        //     if (i != 0)
        //         section = Math.floor(i / 5) - 1
        //     if (section < 0 || this.nextShow == section)
        //         return
        //     this.nextShow = section
        // }
        ;

        _proto.scrollViewShow = function scrollViewShow() {
          var maxPage = Math.ceil(this.totalCount / this.onePackageItemNum);

          this.curpackage++;
          this.farmFamilyTeamListRequest(this.curpackage);
        };

        _proto.onClickedPerformance = function onClickedPerformance() {
          UIManager.getInstance().openUI(PerformanceView, 12, function (ui, args) {});
        };

        _proto.onClickedInvite = function onClickedInvite() {
          if (GameAllData.IsAccountTypeIsTest) {
            TipManager.SafeCodeInputBox(function () {});
            return;
          }

          UIManager.getInstance().openUI(InvitationCodeView, 12, function (ui, args) {});
        };

        _proto.onClickedSearch = function onClickedSearch() {
          if (!NumberUtil.checkInt(this.edtSearch.string) || Number(this.edtSearch.string) <= 0) {
            return;
          }

          this.chlik = true;
          WebSocketMgr.send(MessageManager.Net.FarmFamilyTeamListRequest, {
            Type: this.sheet,
            UserId: Number(this.edtSearch.string)
          });
        };

        _proto.onEditEndedSearch = function onEditEndedSearch() {
          if (!NumberUtil.checkInt(this.edtSearch.string) || Number(this.edtSearch.string) <= 0) {
            this.edtSearch.string = "";
            return;
          }
        } //转账
        ;

        _proto.onClickTransfer = function onClickTransfer() {
          var _this2 = this;

          var UserData = GameAllData.FarmUserResponse;

          console.log(GameAllData.FarmUserResponse);

          UIManager.getInstance().openUI(UIConchExchange, 12, function (ui, args) {
            ui.initUI(3);

            if (_this2.choosedFamilyPlayerItem) {
              _this2.scheduleOnce(function () {
                ui.body2Edit1.string = "" + _this2.choosedFamilyPlayerItem.labId.string;
              });
            }
          });
        };

        _proto.SelectPlayer = function SelectPlayer() {
          if (GameAllData.visitState) {
            console.log(GameAllData.visitState);

            var visitUser = GameAllData.FarmVisitUserResponse;
            console.log(visitUser);

            var playeritem = this.scrPlayerList.content.getComponentsInChildren(FamilyPlayerItem);
            console.log(playeritem);
           
            var select = playeritem.find(function (item) {
              var userid = Number(item.labId.string);
              return visitUser.Id == userid;
            });
            if (select) select.setSelect();
          }
        };

        _proto.onFarmFamilyTeamListResponse = function onFarmFamilyTeamListResponse(data) {
          var _this3 = this;

          this.totalCount = data.TotalCount;
          this.curpackage = data.NowPage;
          var NowPage = data.NowPage;

          if (data.NowPage == 1) {
            this.sublabSnNum = 0;
            this.scrPlayerList.stopAutoScroll();
            this.scrPlayerList.scrollToTop();
            this.scrPlayerList.content.removeAllChildren();
            NodeHelp.getchildlable(this.node.getChildByName("Panel"), "LabelNotHave", null, function (comp, node) {
              node.active = false;
            });
          } else if (data.NowPage == 0) {
            this.sublabSnNum = 0;
            this.scrPlayerList.stopAutoScroll();
            this.scrPlayerList.scrollToTop();
            this.scrPlayerList.content.removeAllChildren();

            if (!data.Data || data.Data.length < 1) {
              this.chlik = false;
              NodeHelp.getchildlable(this.node.getChildByName("Panel"), "LabelNotHave", Label, function (comp) {
                comp.string = ConfigFile.findLanguage(7037);
              });
              NodeHelp.getchildlable(this.node.getChildByName("Panel"), "LabelNotHave", null, function (comp, node) {
                node.active = true;
              });
            } else {
              NodeHelp.getchildlable(this.node.getChildByName("Panel"), "LabelNotHave", null, function (comp, node) {
                node.active = false;
              });
            }

            NowPage = 1;
          }

          data.Data.forEach(function (v, i) {
            var nodFamilyPlayerItem = instantiate(_this3.pfbFamilyPlayerItem);
            nodFamilyPlayerItem.parent = _this3.scrPlayerList.content;
            var srtFamilyPlayerItem = nodFamilyPlayerItem.getComponent(FamilyPlayerItem);
            srtFamilyPlayerItem.labSn.string = i + 1 + (NowPage - 1) * 20 - _this3.sublabSnNum + "";
            srtFamilyPlayerItem.labId.string = v.UserId;
            srtFamilyPlayerItem.state = v.State;

            if (2 == _this3.sheet) {
              srtFamilyPlayerItem.labPerformance.node.active = true;
              srtFamilyPlayerItem.sprVipBg.node.active = false;
              srtFamilyPlayerItem.labVip.node.active = false;
              srtFamilyPlayerItem.labPerformance.string = ConfigFile.findLanguage(7019)["format"](v.AchievementToday);
            } else {
              srtFamilyPlayerItem.labPerformance.node.active = false;
              srtFamilyPlayerItem.sprVipBg.node.active = true;
              var iconNum = 0;

              if (v.VipLevel != iconNum) {
                if (v.VipLevel % 2 == 1) iconNum = v.VipLevel;else iconNum = v.VipLevel - 1;
              }

              var img = EnumDefine.vipIconUrl.vipSmall["format"](iconNum);
              NodeHelp.loadImage(srtFamilyPlayerItem.sprVipBg, img);
              srtFamilyPlayerItem.labVip.node.active = true;
              srtFamilyPlayerItem.labVip.node.getComponent(LabelOutline).color = new Color().fromHEX(EnumDefine.vipColor["color" + iconNum]);
              srtFamilyPlayerItem.labVip.string = "VIP" + v.VipLevel;
            }
          });

          if (data.Data || data.Data.length > 0) {
            this.sublabSnNum += 20 - data.Data.length;
          }

          this.SelectPlayer();
        };

        _proto.checkBtnTransfer = function checkBtnTransfer() {
          if (GameAllData.visitState) {
            this.tansfer.active = false;
          } else {
            var value = (ConfigFile.getGlobalInfoByGlobalId(260).IntValue - 100);

            if (value > 0) {
              this.tansfer.active = true;
            } else {
              this.tansfer.active = false;
            }
          }
        };

        return FamilyView;
      }(BasePanel), _class3._instance = null, _class3.className = "FamilyView", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "labTitle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnActionable", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btnRefresh", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "btnPerformance", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btnInvite", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "edtSearch", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "scrPlayerList", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "pfbFamilyPlayerItem", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "nodSheet", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "btnTransfer", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "tansfer", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "tansferIcon", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/fortmatic.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, cclegacy;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4fb9dZBqnRLBpWNBp4pamFa", "fortmatic", undefined);

      var ConnectToFortmatic = exports('default', /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(Fortmatic, opts) {
          var key, fm, provider, isLoggedIn;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!(opts && opts.key)) {
                    _context.next = 25;
                    break;
                  }

                  _context.prev = 1;
                  key = opts.key;
                  fm = new Fortmatic(key, opts.network);
                  _context.next = 6;
                  return fm.getProvider();

                case 6:
                  provider = _context.sent;
                  provider.fm = fm;
                  _context.next = 10;
                  console.log("entrei");
                  return fm.user.login();

                case 10:
                  _context.next = 12;
                  console.log("tururu");
                  return fm.user.isLoggedIn();

                case 12:
                  isLoggedIn = _context.sent;

                  if (!isLoggedIn) {
                    _context.next = 17;
                    break;
                  }

                  return _context.abrupt("return", provider);

                case 17:
                  throw new Error("Failed to login to Fortmatic");

                case 18:
                  _context.next = 23;
                  break;

                case 20:
                  _context.prev = 20;
                  _context.t0 = _context["catch"](1);
                  throw _context.t0;

                case 23:
                  _context.next = 26;
                  break;

                case 25:
                  throw new Error("Missing Fortmatic key");

                case 26:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[1, 20]]);
        }));

        return function ConnectToFortmatic(_x, _x2) {
          return _ref.apply(this, arguments);
        };
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/frame.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, cclegacy;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f2e03VJxDdNs5UVe9Ri3Dc7", "frame", undefined);

      var ConnectToFrame = exports('default', /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(ethProvider) {
          var provider;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.prev = 0;
                  provider = ethProvider('frame');
                  provider.isFrameNative = true;
                  return _context.abrupt("return", provider);

                case 6:
                  _context.prev = 6;
                  _context.t0 = _context["catch"](0);
                  throw _context.t0;

                case 9:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[0, 6]]);
        }));

        return function ConnectToFrame(_x) {
          return _ref.apply(this, arguments);
        };
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameAllData.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventManager.ts', './MessageManager.ts', './redDotManager.ts', './EnumDefine.ts', './ConfigFile.ts'], function (exports) {
  'use strict';

  var _createClass, _createForOfIteratorHelperLoose, cclegacy, EventManager, MessageManager, redDotManager, EnumDefine, ConfigFile;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      redDotManager = module.redDotManager;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }],
    execute: function () {
      exports('propType', void 0);

      cclegacy._RF.push({}, "66f4fsxkz9CJa5SWWFVVWCZ", "GameAllData", undefined);

      var propType; // message OrderInfo{
      //     int64   Id        = 1;  //ID
      //     string  Code      = 2;  //订单号
      //     int64   GoodsId   = 3;  //商品ID
      //     int64   UserId    = 4;  //用户ID
      //     int64   Num       = 5;  //数量
      //     double  Price     = 7;  //价格
      //     string  Status    = 8;  //sell=卖  buy=买
      //     string  CreatedAt = 9;  //创建时间
      //     string  UpdatedAt = 10; //更新时间
      // }

      (function (propType) {
        propType["TITLE"] = "title";
        propType["VIP"] = "vip";
        propType["USDT"] = "usdt";
        propType["PEARL"] = "pearl";
        propType["SHELL"] = "shell";
      })(propType || (propType = exports('propType', {})));

      var GameAllData = exports('GameAllData', /*#__PURE__*/function () {
        function GameAllData() {}
        /**配置表数据*/

        /**用户信息 */

        /**农场信息 */

        /**牧场信息 */

        /**仓库信息 */
        //渠道id
        //运营商id
        //上级id
        //语言
        //别人的邀请码(默认null)(我的邀请码在user里面)
        //http服务器地址
        //websocket服务器地址

        /**是否正在拜访**/

        /**邮箱信息 */

        /**任务信息 */

        /**任务变化信息*/

        /**日常任务变化信息*/

        /**活动同步信息 */
        //验证

        /**市场价格*/

        /**绑定的手机 带区号**/

        /**绑定的手机区号**/

        /**绑定的邮箱**/

        /**安全码**/

        /**重置安全码锁定交易计时**/

        /**安全码是否需要提示**/

        /**安全码绑定-手机验证码倒计时**/

        /**安全码绑定-邮箱验证码倒计时**/

        /**改绑手机验证码倒计时old**/

        /**改绑手机验证码倒计时**/

        /**改绑邮箱验证码倒计时old**/

        /**改绑邮箱验证码倒计时**/

        /**绑定手机--》邮箱验证码倒计时old**/

        /**绑定手机证码倒计时**/

        /**绑定邮箱--》手机验证码倒计时old**/

        /**绑定邮箱验证码倒计时**/

        /**服务器时区名**/

        /**服务器时区与UTC的差值(秒)**/
        //登录地址
        //检查是否满足限制条件


        GameAllData.checkCondition = function checkCondition(info) {
          var UserData = GameAllData.FarmUserResponse;

        console.log("RARA"+JSON.stringify(GameAllData.FarmUserResponse));
        console.log("RARA"+JSON.stringify(GameAllData.FarmVisitUserResponse));
        console.log("RARA"+JSON.stringify(GameAllData.FarmLandResponse));
        console.log("RARA"+JSON.stringify(GameAllData.FarmPastureResponse));
        console.log("RARA"+JSON.stringify(GameAllData.FarmStoreResponse));
        console.log("RARA"+JSON.stringify(GameAllData.FarmStatueResponse));
        console.log("RARA"+JSON.stringify(GameAllData.FarmHouseResponse));
        console.log("RARA"+JSON.stringify(GameAllData.FarmVisitResponse));
        console.log("RARA"+JSON.stringify(GameAllData.FarmVisitBackResponse));

          UserData["VipLevel"] = 10;
          UserData["RankLevel"] = 10;
          UserData["RoleModeId"] = 110;

          GameAllData.FarmStoreResponse = {"currency":[{"CurrencyModeId":"-7","CurrencyCount":947200000000}],"items":[{"Id":"239799","ItemModeId":"102","ItemCount":"6000"},{"Id":"238953","ItemModeId":"101","ItemCount":"155000"},{"Id":"220","ItemModeId":"1","ItemCount":"2000"},{"Id":"238956","ItemModeId":"2","ItemCount":"4000"}]};
          //GameAllData.FarmLandResponse = {"Land":{"1":{"LandModeId":"1","Grade":"1","Plant":{"1":{"PlantModeId":"1","State":"4","Count":"12","NextStateTime":"1673677768","Get":"58","Total":"60","CanGetTime":"1673677708"}}}}};

          if (!UserData) {
            console.log("没有数据 FarmUserResponse");
            return;
          }

          if (!UserData.VipLevel) UserData["VipLevel"] = 0;
          if (!UserData.RankLevel) UserData["RankLevel"] = 0;

          var m1 = ConfigFile.getLimitInfo(info);

          if (m1.id == 1) {
            if (m1.val > UserData.VipLevel) return false;
          }

          if (m1.id == 2) {
            if (m1.val > UserData.RankLevel) return false;
          }

          return true;
        } //检查是否满足限制条件
        ;

        GameAllData.checkConditionVisit = function checkConditionVisit(info) {
          var UserData = GameAllData.FarmVisitUserResponse;

          UserData["VipLevel"] = 10;
          UserData["RankLevel"] = 10;
          UserData["RoleModeId"] = 110;



          if (!UserData) {
            console.log("没有数据 FarmUserResponse");
            return;
          }

          if (!UserData.VipLevel) UserData["VipLevel"] = 0;
          if (!UserData.RankLevel) UserData["RankLevel"] = 0;
          var m1 = ConfigFile.getLimitInfo(info);

          if (m1.id == 1) {
            if (m1.val > UserData.VipLevel) return false;
          }

          if (m1.id == 2) {
            if (m1.val > UserData.RankLevel) return false;
          }

          return true;
        };

        GameAllData.checkConditionArray = function checkConditionArray(info) {
          var condition = info.split(";");

          for (var index = 0; index < condition.length; index++) {
            if (condition[index] == "") continue;
            if (!GameAllData.checkCondition(condition[index])) return false;
          }

          return true;
        };

        GameAllData.checkConditionArrayVisit = function checkConditionArrayVisit(info) {
          var condition = info.split(";");

          for (var index = 0; index < condition.length; index++) {
            if (condition[index] == "") continue;
            if (!GameAllData.checkConditionVisit(condition[index])) return false;
          }

          return true;
        };

        GameAllData.getConditionArray = function getConditionArray(info) {
          var condition = info.split(";");
          var ret = [];

          for (var index = 0; index < condition.length; index++) {
            if (condition[index] == "") continue;
            var m1 = ConfigFile.getLimitInfo(condition[index]);
            ret.push(m1);
          }

          ret.sort(function (a, b) {
            return a.id - b.id;
          });
          return ret;
        };

        GameAllData.getTotalConch = function getTotalConch(type) {
          return GameAllData.getCurrencyNumByType(type);
        } //通过货币类型来获取货币数
        ;

        GameAllData.getCurrencyNumByType = function getCurrencyNumByType(type) {
          if (!GameAllData.FarmStoreResponse || !GameAllData.FarmStoreResponse.currency) {
            return 0;
          }

          var info = GameAllData.FarmStoreResponse.currency.find(function (v) {
            return type == v.CurrencyModeId;
          });

          if (type == EnumDefine.CurrencyType.Conch) {
            var info_2 = GameAllData.FarmStoreResponse.currency.find(function (v) {
              return EnumDefine.CurrencyType.ColoredGold == v.CurrencyModeId;
            });
            var num = info && info.CurrencyCount || 0;
            var num2 = info_2 && info_2.CurrencyCount || 0;
            return Number((num + num2).toFixed(4));
          }

          if (type == EnumDefine.CurrencyType.USDT) {
            if (info && info.CurrencyCount) {
              return Number(info.CurrencyCount.toFixed(4));
            }
          }

          return info && info.CurrencyCount || 0;
        } //通过道具的ModeId来获取背包中的道具(info)对象
        ;

        GameAllData.getStoreItemByModeId = function getStoreItemByModeId(modeId) {
          if (!GameAllData.FarmStoreResponse || !GameAllData.FarmStoreResponse.items) {
            return null;
          }

          return GameAllData.FarmStoreResponse.items.find(function (v) {
            return modeId == v.ItemModeId;
          });
        } //   //邮件对象
        // message MailInfo{
        //   int64 ID = 1;//邮件id
        //   string MailTitle = 2;//邮件名
        //   repeated string MailTitleParam = 3;//邮件名参数:格式：["Type","param","Type","param"...] type: string直接替换  i18n 对应多语言表t_message
        //   string MailContent = 4;//邮件类容
        //   repeated string MailContentParam = 5;//邮件类容参数：["Type","param","Type","param"...] type: string直接替换  i18n 对应多语言表t_message
        //   repeated FarmItemInfo Items = 6;//邮件包含道具
        //   int64 MailType = 7;//邮件类型 1：公告 2：邮件
        //   int64 MailState = 8;//邮件状态：0:未读取，1：已读
        //   int64 MailReceiveState = 9;//邮件接收状态:0:未收取 1：已收取
        //   int64 SendTime = 10;//邮件发送时间
        //   string MailTitleType = 11;//邮件title 类型 "string"/"i18n"
        //   string MailContentType = 12;//邮件title 类型 "string"/"i18n"
        //   string Pic = 13;
        //   string JumpURL = 14;
        // }

        /**设置邮箱的红点信息 */
        ;

        GameAllData.setRedDotOnMailList = function setRedDotOnMailList() {
          if (!GameAllData.FarmMailListResponse || !GameAllData.FarmMailListResponse.Mails) {
            return null;
          }

          var Mails = GameAllData.FarmMailListResponse.Mails;
          var Notice = false;
          var Mail = false;
          var UIGame = false;
          Mails.forEach(function (v) {
            if (v.MailState == 0) {
              redDotManager.setRead("UINotice", v.ID, true);

              if ((v.MailType & EnumDefine.NoticeEailType.Notice) != 0) {
                Notice = true;
              }

              if ((v.MailType & EnumDefine.NoticeEailType.Eail) != 0) {
                Mail = true;
              }

              UIGame = true;
            } else {
              redDotManager.setRead("UINotice", v.ID, false);
            }
          });
          redDotManager.setRead("UINotice", "Notice", Notice);
          redDotManager.setRead("UINotice", "Mail", Mail);
          redDotManager.setRead("UINotice", "UIGame", UIGame);
          EventManager.getInstance().trigger(MessageManager.Custom.RedDotChange);
        }
        /**设置任务的红点信息 */
        ;

        GameAllData.setRedDotOnTaskList = function setRedDotOnTaskList() {
          var task = [];
          var Daychangetask = [];
          var changetask = [];
          var mainlineOverId = [];
          var shareOverId = [];
          var everydayOverId = [];
          var maxShareNum = 4; //ConfigFile.getGlobalInfoByGlobalId(280).IntValue;

          var finishShareNum = [];

          if (GameAllData.FarmTaskListResponse && GameAllData.FarmTaskListResponse.taskList) {
            task = GameAllData.FarmTaskListResponse.taskList;
          }

          if (GameAllData.FarmTaskUpdateResponse && GameAllData.FarmTaskUpdateResponse.length >= 1) {
            changetask = GameAllData.FarmTaskUpdateResponse;
          }

          if (GameAllData.DayFarmTaskUpdateResponse && GameAllData.DayFarmTaskUpdateResponse.length >= 1) {
            Daychangetask = GameAllData.DayFarmTaskUpdateResponse;
          }

          task.forEach(function (v) {
            var config = ConfigFile.getTTaskInfoByTaskId(v.TaskModeId); //得到条件内容

            var showFinish = true;

            for (var _iterator = _createForOfIteratorHelperLoose(v.conditions), _step; !(_step = _iterator()).done;) {
              var condition = _step.value;

              if (showFinish && config && config.TaskFinishType == 2) {
                if (condition.nowCondition < condition.MaxCondition) showFinish = true;
              } else {
                showFinish = true;
              }

              if (condition.nowCondition >= condition.MaxCondition && v.TaskType == 3 && v.TaskModeId != 200007) {
                finishShareNum.push(v.TaskModeId);
              }
            }

            if (showFinish && v.TaskState == 2) {
              showFinish = true;
            }

            if ((v.TaskType == 1 || v.TaskType == 2) && showFinish) {
              mainlineOverId.push(v.TaskModeId);
            }

            if (v.TaskType == 3 && showFinish && v.TaskModeId != 200007) {
              shareOverId.push(v.TaskModeId);
            }

            if ((v.TaskType == 4 || v.TaskType == 5) && showFinish) {
              everydayOverId.push(v.TaskModeId);
            }
          });
          changetask.forEach(function (v) {
            var config = ConfigFile.getTTaskInfoByTaskId(v.TaskModeId); //得到条件内容

            var showFinish = true;

            for (var _iterator2 = _createForOfIteratorHelperLoose(v.conditions), _step2; !(_step2 = _iterator2()).done;) {
              var condition = _step2.value;

              if (showFinish && config && config.TaskFinishType == 2) {
                if (condition.nowCondition < condition.MaxCondition) showFinish = true;
              } else {
                showFinish = true;
              }

              if (condition.nowCondition >= condition.MaxCondition && v.TaskType == 3 && v.TaskModeId != 200007) {
                var finish = finishShareNum.find(function (v_1) {
                  return v_1 == v.TaskModeId;
                });
                if (finish) finishShareNum.push(v.TaskModeId);
              }
            }

            if (showFinish && v.TaskState == 2) {
              showFinish = true;
            }

            var index = -1;
            var data = mainlineOverId.find(function (v_1, i) {
              index = i;
              return v_1 == v.TaskModeId;
            });

            if ((v.TaskType == 1 || v.TaskType == 2) && showFinish) {
              if (!data) mainlineOverId.push(v.TaskModeId);
            } else {
              if (data) mainlineOverId.splice(index, 1);
            }

            index = -1;
            data = shareOverId.find(function (v_1, i) {
              index = i;
              return v_1 == v.TaskModeId;
            });

            if (v.TaskType == 3 && showFinish && v.TaskModeId != 200007) {
              if (!data) shareOverId.push(v.TaskModeId);
            } else if (v.TaskModeId != 200007) {
              if (data) shareOverId.splice(index, 1);
            }
          });
          Daychangetask.forEach(function (v) {
            var config = ConfigFile.getTTaskInfoByTaskId(v.TaskModeId); //得到条件内容

            var showFinish = true;

            for (var _iterator3 = _createForOfIteratorHelperLoose(v.conditions), _step3; !(_step3 = _iterator3()).done;) {
              var condition = _step3.value;

              if (showFinish && config && config.TaskFinishType == 2) {
                if (condition.nowCondition < condition.MaxCondition) showFinish = true;
              } else {
                showFinish = true;
              }
            }

            if (showFinish && v.TaskState == 2) {
              showFinish = true;
            }

            var index = -1;
            var data = everydayOverId.find(function (v_1, i) {
              index = i;
              return v_1 == v.TaskModeId;
            });

            if ((v.TaskType == 4 || v.TaskType == 5) && showFinish) {
              if (!data) everydayOverId.push(v.TaskModeId);
            } else {
              if (data) everydayOverId.splice(index, 1);
            }
          });

          if (finishShareNum.length >= maxShareNum) {
            shareOverId.push(200007);
          }

          var shareOreveryday = false;

          if (mainlineOverId.length >= 1) {
            shareOreveryday = true;
            redDotManager.setRead("task", "mainline", true);
            mainlineOverId.forEach(function (v) {
              redDotManager.setRead("gameUITask", v, true);
            });
          } else {
            redDotManager.setRead("task", "mainline", false);
          }

          if (shareOverId.length >= 1) {
            shareOreveryday = true;
            redDotManager.setRead("task", "share", true);
          } else {
            redDotManager.setRead("task", "share", false);
          }

          if (everydayOverId.length >= 1) {
            shareOreveryday = true;
            redDotManager.setRead("task", "everyday", true);
          } else {
            redDotManager.setRead("task", "everyday", false);
          }

          redDotManager.setRead("gameUITask", "shareOreveryday", shareOreveryday);
          EventManager.getInstance().trigger(MessageManager.Custom.RedDotChange);
        }
        /**设置活动的红点信息 */
        ;

        GameAllData.setRedDotOnActivityList = function setRedDotOnActivityList() {
          if (!GameAllData.FarmActivityListResponse) {
            return null;
          }

          var Activitys = this.getActivityInfo(false);
          var ActivityOthers = this.getActivityInfo(true);
          var signs = GameAllData.FarmActivityListResponse.Signs;
          var todaySign = GameAllData.FarmActivityListResponse.IsTodaySign;
          var UIGame = false;
          var UIGameOther = false;
          var types = [];
          var typesdata = [EnumDefine.ActivityType.EveryDay, EnumDefine.ActivityType.BeeHome, EnumDefine.ActivityType.FirstCharge, EnumDefine.ActivityType.GrowthFund, EnumDefine.ActivityType.LimitedDay, EnumDefine.ActivityType.UpgradePackage, EnumDefine.ActivityType.loopTurntable, EnumDefine.ActivityType.notLoopTurntable, EnumDefine.ActivityType.Extension, EnumDefine.ActivityType.Generalrepresentative, EnumDefine.ActivityType.Directlyunder];
          Activitys.forEach(function (v) {
            var isCanReceive = true;

            for (var _iterator4 = _createForOfIteratorHelperLoose(v.Conditions), _step4; !(_step4 = _iterator4()).done;) {
              var condition = _step4.value;

              if (v.ActivityType == EnumDefine.ActivityType.notLoopTurntable || v.ActivityType == EnumDefine.ActivityType.loopTurntable) {
                isCanReceive = true;
              } else {
                var tConditionInfo = ConfigFile.getTConditionInfoByConditionId(condition.ConditionModeId);
                if (!tConditionInfo) continue;

                if (0 == tConditionInfo.Compare) {
                  if (condition.nowCondition < condition.MaxCondition) {
                    isCanReceive = true;
                    break;
                  } else {
                    isCanReceive = true;
                  }
                } else {
                  if (condition.nowCondition > condition.MaxCondition) {
                    isCanReceive = true;
                    break;
                  } else isCanReceive = true;
                }
              }
            }

            if (isCanReceive && v.TotalGet < v.TotalGetTime) {
              UIGame = true;
              if (!types.find(function (type) {
                return v == v.ActivityType;
              })) types.push(v.ActivityType);
            } else {
              redDotManager.setRead("UIActivity", v.ActivityModeId, true);
            }
          });
          ActivityOthers.forEach(function (v) {
            var isCanReceive = true;

            if (v.ActivityType == EnumDefine.ActivityType.Arena) {
              return;
            }

            for (var _iterator5 = _createForOfIteratorHelperLoose(v.Conditions), _step5; !(_step5 = _iterator5()).done;) {
              var condition = _step5.value;
              var tConditionInfo = ConfigFile.getTConditionInfoByConditionId(condition.ConditionModeId);
              if (!tConditionInfo) continue;

              if (0 == tConditionInfo.Compare) {
                if (condition.nowCondition < condition.MaxCondition) {
                  isCanReceive = true;
                  break;
                } else {
                  isCanReceive = true;
                }
              } else {
                if (condition.nowCondition > condition.MaxCondition) {
                  isCanReceive = true;
                  break;
                } else isCanReceive = true;
              }
            }

            if (isCanReceive && v.TotalGet < v.TotalGetTime) {
              UIGameOther = true;
              if (!types.find(function (type) {
                return v == v.ActivityType;
              })) types.push(v.ActivityType);
            } else {
              redDotManager.setRead("UIActivity", v.ActivityModeId, false);
            }
          });
          signs.forEach(function (v) {
            if (v.ModeId == todaySign && !v.IsGet) {
              types.push(0);
              UIGame = true;
              redDotManager.setRead("UIActivitySigns", v.ModeId, true);
            } else {
              redDotManager.setRead("UIActivitySigns", v.ModeId, false);
            }
          });
          redDotManager.setRead("UIActivityOther", "UIGame", UIGameOther);
          redDotManager.setRead("UIActivity", "UIGame", UIGame);
          typesdata.forEach(function (v) {
            redDotManager.setRead("UIActivity", v, false);
          });
          types.forEach(function (v) {
            redDotManager.setRead("UIActivity", v, true);
          });
          EventManager.getInstance().trigger(MessageManager.Custom.RedDotChange);
        }
        /**是否绑定手机**/
        ;
        /***获取农场土地满足等级快数*/


        GameAllData.famelandLevelNum = function famelandLevelNum(lv) {
          var num = 0;

          if (GameAllData.FarmLandResponse && GameAllData.FarmLandResponse.Land) {
            var landArray = GameAllData.FarmLandResponse.Land;

            for (var prop in landArray) {
              var item = landArray[prop];

              if (lv <= item.Grade) {
                num++;
              }
            }
          }

          num = 12;
          return num;
        }
        /***获取牧场满足等级个数*/
        ;

        GameAllData.pastureLevelNum = function pastureLevelNum(lv) {
          var num = 0;

          if (GameAllData.FarmPastureResponse && GameAllData.FarmPastureResponse.Pasture) {
            var landArray = GameAllData.FarmPastureResponse.Pasture;

            for (var prop in landArray) {
              var item = landArray[prop];

              if (lv <= item.Grade) {
                num++;
              }
            }
          }

          num = 12;
          return num;
        }
        /**提现要求是否满足根据全局表290**/
        ;
        /**操作是否满足条件（带提示）（全局：提现290，转账291，市场292）**/


        GameAllData.isMeetTheConditionsByGlobalId = function isMeetTheConditionsByGlobalId(id) {
          var str = ""; //提现要求土地等级、土地块数、牧场等级、牧场块数

          var globalInfo = ConfigFile.getGlobalInfoByGlobalId(id);

          if (!globalInfo || !globalInfo.Text) {
            return str;
          }

          var globalValue = globalInfo.Text.split(",");
          var famelandNeedLv = Number(globalValue[0]);
          var famelanNeedNum = Number(globalValue[1]);
          var pastureNeedLv = Number(globalValue[2]);
          var pastureNeedNum = Number(globalValue[3]);
          var famelandNum = GameAllData.famelandLevelNum(famelandNeedLv);
          var pastureNum = GameAllData.pastureLevelNum(pastureNeedLv);
          if (famelandNum >= 0 && pastureNum >= 0) ;else {
            if (pastureNeedNum >= 0) {
              str = ConfigFile.findLanguage(10014).format(famelandNeedLv, famelanNeedNum);
            } else if (famelanNeedNum >= 0) {
              str = ConfigFile.findLanguage(10015).format(pastureNeedLv, pastureNeedNum);
            } else {
              str = ConfigFile.findLanguage(10016).format(famelandNeedLv, famelanNeedNum, pastureNeedLv, pastureNeedNum);
            } // TipManager.ChickBox(str); 

          }
          return str;
        }
        /**清除所有信息(切换账号)**/
        ;

        GameAllData.clearnAllData = function clearnAllData() {
          GameAllData.FarmUserResponse = null;
          GameAllData.FarmVisitUserResponse = null;
          GameAllData.FarmLandResponse = null;
          GameAllData.FarmPastureResponse = null;
          GameAllData.FarmStoreResponse = null;
          GameAllData.FarmStatueResponse = null;
          GameAllData.FarmHouseResponse = null;
          GameAllData.FarmVisitResponse = null;
          GameAllData.FarmVisitBackResponse = null;
        }
        /**获取活动信息**/
        ;

        GameAllData.getActivityInfoByType = function getActivityInfoByType(type) {
          var activitysMap = [];

          if (GameAllData.FarmActivityListResponse.Activities && GameAllData.FarmActivityListResponse.Activities.length > 0) {
            for (var _iterator6 = _createForOfIteratorHelperLoose(GameAllData.FarmActivityListResponse.Activities), _step6; !(_step6 = _iterator6()).done;) {
              var data = _step6.value;

              if (data.ActivityType == type) {
                activitysMap.push(data);
              }
            }
          }

          activitysMap.sort(function (a, b) {
            return a.ActivityModeId - b.ActivityModeId;
          });
          return activitysMap;
        }
        /**获取活动信息表 */
        ;

        GameAllData.getActivityInfo = function getActivityInfo(othor) {
          var activitysMap = [];

          if (GameAllData.FarmActivityListResponse.Activities && GameAllData.FarmActivityListResponse.Activities.length > 0) {
            for (var _iterator7 = _createForOfIteratorHelperLoose(GameAllData.FarmActivityListResponse.Activities), _step7; !(_step7 = _iterator7()).done;) {
              var data = _step7.value;

              if (othor && data.ActivityType >= EnumDefine.ActivityType.Extension) {
                activitysMap.push(data);
              } else if (!othor && data.ActivityType < EnumDefine.ActivityType.Extension) {
                activitysMap.push(data);
              }
            }
          }

          return activitysMap;
        }
        /**获取是否有活动信息 */
        ;

        GameAllData.haveActivityInfo = function haveActivityInfo(othor) {
          if (GameAllData.FarmActivityListResponse.Activities && GameAllData.FarmActivityListResponse.Activities.length > 0) {
            for (var _iterator8 = _createForOfIteratorHelperLoose(GameAllData.FarmActivityListResponse.Activities), _step8; !(_step8 = _iterator8()).done;) {
              var data = _step8.value;

              if (othor && data.ActivityType >= EnumDefine.ActivityType.Extension) {
                return true;
              } else if (!othor && data.ActivityType < EnumDefine.ActivityType.Extension) {
                return true;
              }
            }
          }

          return false;
        };

        _createClass(GameAllData, null, [{
          key: "isBandingPhone",
          get: function get() {
            if (this.bandPhone && this.bandPhone != "") {
              return true;
            }

            return false;
          }
          /**是否绑定邮件**/

        }, {
          key: "isBandingEmail",
          get: function get() {
            if (this.isBandingPhone) {
              // 如果绑定了手机，无视邮箱，此为需求
              return false;
            }

            if (this.bandEmail && this.bandEmail != "") {
              return true;
            }

            return false;
          }
          /**是否绑定安全码**/

        }, {
          key: "isBandingSafeCode",
          get: function get() {
            if (this.bandSafeCode && this.bandSafeCode != "") {
              return true;
            }

            return false;
          }
          /**是否需要弹出安全码验证提示**/

        }, {
          key: "isSafeCodeTips",
          get: function get() {
            return this.safeCodeTips;
          },
          set: function set(boo) {
            this.safeCodeTips = boo;
          }
          /**是否是开发者账号**/

        }, {
          key: "IsAccountTypeIsTest",
          get: function get() {
            //
            if (!GameAllData.FarmUserResponse) {
              return false;
            }

            if ((GameAllData.FarmUserResponse.AccountType & 8) > 0) {
              return true;
            }

            return false;
          }
          /***获取农场土地最大等级*/

        }, {
          key: "famelandMaxLevel",
          get: function get() {
            var level = 0;

            if (GameAllData.FarmLandResponse && GameAllData.FarmLandResponse.Land) {
              var landArray = GameAllData.FarmLandResponse.Land;

              for (var prop in landArray) {
                var item = landArray[prop];

                if (level < item.Grade) {
                  level = item.Grade;
                }
              }
            }

            return level;
          }
          /***获取牧场最大等级*/

        }, {
          key: "pastureMaxLevel",
          get: function get() {
            var level = 0;

            if (GameAllData.FarmPastureResponse && GameAllData.FarmPastureResponse.Pasture) {
              var landArray = GameAllData.FarmPastureResponse.Pasture;

              for (var prop in landArray) {
                var item = landArray[prop];

                if (level < item.Grade) {
                  level = item.Grade;
                }
              }
            }

            return level;
          }
        }, {
          key: "isWithdrawal",
          get: function get() {
            var boo = false; //提现要求土地等级、土地块数、牧场等级、牧场块数

            var globalValue = ConfigFile.getGlobalInfoByGlobalId(290).text.split(",");

            if (!globalValue) {
              return boo;
            }

            var famelandNeedLv = globalValue[0];
            var famelanNeedNum = globalValue[1];
            var pastureNeedLv = globalValue[2];
            var pastureNeedNum = globalValue[3];
            var famelandNum = GameAllData.famelandLevelNum(famelandNeedLv);
            var pastureNum = GameAllData.pastureLevelNum(pastureNeedLv);

            if (famelandNum >= famelanNeedNum && pastureNeedNum >= pastureNum) {
              boo = true;
            } else {
              if (pastureNeedNum <= 0) {
                ConfigFile.findLanguage(10014).format(famelandNeedLv, famelanNeedNum);
              } else if (famelanNeedNum <= 0) {
                ConfigFile.findLanguage(10015).format(pastureNeedLv, pastureNeedNum);
              } else {
                ConfigFile.findLanguage(10016).format(famelandNeedLv, famelanNeedNum, pastureNeedLv, pastureNeedNum);
              } // TipManager.ChickBox(str); 

            }

            return boo;
          }
          /**转账要求是否满足根据全局表291**/

        }, {
          key: "isTransferAccounts",
          get: function get() {
            var boo = false;
            var famelandLevel = GameAllData.famelandMaxLevel;
            var globalValue = ConfigFile.getGlobalInfoByGlobalId(291).int_value;

            if (famelandLevel >= globalValue) {
              boo = true;
            }

            return boo;
          }
          /**市场交易要求是否满足根据全局表292**/

        }, {
          key: "isMarketTransaction",
          get: function get() {
            var boo = false;
            var pastureLevel = GameAllData.pastureMaxLevel;
            var globalValue = ConfigFile.getGlobalInfoByGlobalId(292).int_value;

            if (pastureLevel >= globalValue) {
              boo = true;
            }

            return boo;
          }
        }]);

        return GameAllData;
      }());
      GameAllData.GamePlanConfigureResponse = null;
      GameAllData.FarmUserResponse = null;
      GameAllData.FarmVisitUserResponse = null;
      GameAllData.FarmLandResponse = null;
      GameAllData.FarmPastureResponse = null;
      GameAllData.FarmStoreResponse = null;
      GameAllData.FarmStatueResponse = null;
      GameAllData.FarmHouseResponse = null;
      GameAllData.FarmVisitResponse = null;
      GameAllData.FarmVisitBackResponse = null;
      GameAllData.FarmSendHeartResponse = null;
      GameAllData.GameHeartResponse = null;
      GameAllData.channelId = "14";
      GameAllData.operatorId = "3";
      GameAllData.inviterId = null;
      GameAllData.languageId = "en_us";
      GameAllData.invitationCode = null;
      GameAllData.httpServerUrl = "";
      GameAllData.wsServerUrl = "";
      GameAllData.visitState = false;
      GameAllData.addressData = null;
      GameAllData.selectAddress = null;
      GameAllData.canVerification = false;
      GameAllData.NetReplace = false;
      GameAllData.jsonData = false;
      GameAllData.FarmMailListResponse = null;
      GameAllData.FarmTaskListResponse = null;
      GameAllData.FarmTaskUpdateResponse = null;
      GameAllData.DayFarmTaskUpdateResponse = null;
      GameAllData.FarmActivityListResponse = null;
      GameAllData.FarmAuthingResponse = null;
      GameAllData.FarmMarketItemPriceResponse = null;
      GameAllData.bandPhone = void 0;
      GameAllData.bandPhoneAreaCode = void 0;
      GameAllData.bandEmail = void 0;
      GameAllData.bandSafeCode = void 0;
      GameAllData.bandSafeCodeTime = 0;
      GameAllData.safeCodeTips = true;
      GameAllData.veriftPhoneTime = 0;
      GameAllData.veriftEmailTime = 0;
      GameAllData.changePhoneTimeOld = 0;
      GameAllData.changePhoneTime = 0;
      GameAllData.changeEmailTimeOld = 0;
      GameAllData.changeEmailTime = 0;
      GameAllData.bandPhoneEmailTimeOld = 0;
      GameAllData.bandPhoneTime = 0;
      GameAllData.bandEmailPhoneTimeOld = 0;
      GameAllData.bandEmailTime = 0;
      GameAllData.severTimeZoneName = null;
      GameAllData.severTimeZoneDiff = 0;
      GameAllData.paramsUrl = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameData.ts", ['cc', './StorageUtil.ts', './SettingInfo.ts', './RoleInfo.ts'], function (exports) {
  'use strict';

  var cclegacy, StorageUtil, SettingInfo, RoleInfo;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      StorageUtil = module.StorageUtil;
    }, function (module) {
      SettingInfo = module.SettingInfo;
    }, function (module) {
      RoleInfo = module.RoleInfo;
    }],
    execute: function () {
      cclegacy._RF.push({}, "97a503NSstKkJsekmuUgcp1", "GameData", undefined); // import {RuntimeData} from "./Modules/RuntimeData";


      var GameData = exports('GameData', /*#__PURE__*/function () {
        function GameData() {
          //EventManager.getInstance().add("LoopUpdate", this, this.onUpdate);
          this.settingInfo = new SettingInfo("R3");
          this.roleInfo = new RoleInfo("R3");
        }

        var _proto = GameData.prototype;

        _proto.onUpdate = function onUpdate(dt) {};

        _proto.initSettingInfo = function initSettingInfo(settingInfo) {
          if (settingInfo && Object.getOwnPropertyNames(settingInfo).length > 0) {
            this.settingInfo = settingInfo;
            this.settingInfo["__proto__"] = SettingInfo.prototype;
          } else {
            this.updateSettingInfo();
          }
        };

        _proto.initRoleInfo = function initRoleInfo(roleInfo) {
          if (roleInfo && Object.getOwnPropertyNames(roleInfo).length > 0) {
            this.roleInfo = roleInfo;
            this.roleInfo["__proto__"] = RoleInfo.prototype;
          } else {
            this.updateRoleInfo();
          }
        };

        _proto.updateSettingInfo = function updateSettingInfo() {
          StorageUtil.setLocalItemDefer(this.settingInfo.StorageKey, this.settingInfo);
        };

        _proto.updateRoleInfo = function updateRoleInfo() {
          StorageUtil.setLocalItemDefer(this.roleInfo.StorageKey, this.roleInfo);
        };

        _proto.getDataKeys = function getDataKeys() {
          var keys = {};
          keys[this.settingInfo.StorageKey] = this.settingInfo;
          keys[this.roleInfo.StorageKey] = this.roleInfo;
          return keys;
        };

        _proto.unserializeData = function unserializeData(data) {
          var _this = this;

          StorageUtil.register();
          StorageUtil.getAllLocalData(this.getDataKeys(), function (first) {
            if (first) {
              _this.initSettingInfo(null);

              _this.initRoleInfo(null);
            } else {
              _this.initSettingInfo(StorageUtil.getGameDataItem(_this.settingInfo.StorageKey));

              _this.initRoleInfo(StorageUtil.getGameDataItem(_this.roleInfo.StorageKey));
            }
          });
        };

        return GameData;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameDataManager.ts", ['cc', './GameData.ts', './ListenerType.ts', './EventManager.ts'], function (exports) {
  'use strict';

  var cclegacy, GameData, ListenerType, EventManager;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      GameData = module.GameData;
    }, function (module) {
      ListenerType = module.ListenerType;
    }, function (module) {
      EventManager = module.EventManager;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3e8d8Ly9whHM7ax7xhk7rjJ", "GameDataManager", undefined);

      var GameDataManager = exports('GameDataManager', /*#__PURE__*/function () {
        GameDataManager.getInstance = function getInstance() {
          if (this.instance == null) {
            this.instance = new GameDataManager();
          }

          return this.instance;
        };

        function GameDataManager() {
          this.gameData = new GameData();
          EventManager.getInstance().add(ListenerType.UPDATEINFO, this, this.onUpdateInfo);
        }

        var _proto = GameDataManager.prototype;

        _proto.onUpdateInfo = function onUpdateInfo(arg) {
          if (arg.mode == 2) this.getGameData().updateRoleInfo();else if (arg.mode == 3) this.getGameData().updateSettingInfo();
        };

        _proto.getGameData = function getGameData() {
          return this.gameData;
        };

        _proto.unserializeData = function unserializeData(data) {
          this.gameData.unserializeData(data);
        };

        return GameDataManager;
      }());
      GameDataManager.instance = void 0;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameMain.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UIManager.ts', './EventManager.ts', './GameDataManager.ts', './MessageManager.ts', './WebSocketMgr.ts', './UILogin.ts', './text.ts', './ConstValue.ts', './HttpMgr.ts', './GameAllData.ts', './HotUpdateView.ts', './PlatformUtil.ts', './LoadingView.ts', './PlatformCbUtil.ts', './UIHelp.ts', './GameManager.ts', './MainGame.ts', './TipManager.ts', './ConfigFile.ts', './WaitNet.ts', './TaskManager.ts', './CommonUtil.ts', './TimerMgr.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, _createForOfIteratorHelperLoose, cclegacy, _decorator, Node, resources, sys, view, game, Game, Component, UIManager, EventManager, GameDataManager, MessageManager, WebSocketMgr, UILogin, text, ConstValue, HttpMgr, GameAllData, HotUpdateView, PlatformUtil, LoadingView, PlatformCbUtil, UIHelp, GameManager, MainGame, TipManager, ConfigFile, Configname, WaitNet, TaskManager, CommonUtil, TimerMgr;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      resources = module.resources;
      sys = module.sys;
      view = module.view;
      game = module.game;
      Game = module.Game;
      Component = module.Component;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      GameDataManager = module.GameDataManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      UILogin = module.UILogin;
    }, function (module) {
      text = module.text;
    }, function (module) {
      ConstValue = module.ConstValue;
    }, function (module) {
      HttpMgr = module.HttpMgr;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      HotUpdateView = module.HotUpdateView;
    }, function (module) {
      PlatformUtil = module.PlatformUtil;
    }, function (module) {
      LoadingView = module.LoadingView;
    }, function (module) {
      PlatformCbUtil = module.PlatformCbUtil;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      MainGame = module.MainGame;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      WaitNet = module.WaitNet;
    }, function (module) {
      TaskManager = module.TaskManager;
    }, function (module) {
      CommonUtil = module.CommonUtil;
    }, function (module) {
      TimerMgr = module.TimerMgr;
    }],
    execute: function () {
      exports('NETSTATE', void 0);

      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "df13ad6CdtFhp9uucAXsIC/", "GameMain", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NETSTATE;

      (function (NETSTATE) {
        NETSTATE[NETSTATE["NS_NONE"] = 0] = "NS_NONE";
        NETSTATE[NETSTATE["NS_CONNECTING"] = 1] = "NS_CONNECTING";
        NETSTATE[NETSTATE["NS_CONNECTED"] = 2] = "NS_CONNECTED";
        NETSTATE[NETSTATE["NS_ERROR"] = 3] = "NS_ERROR";
        NETSTATE[NETSTATE["NS_WAIT"] = 4] = "NS_WAIT";
      })(NETSTATE || (NETSTATE = exports('NETSTATE', {})));

      var GameMain = exports('GameMain', (_dec = property(Node), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameMain, _Component);

        function GameMain() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "textNode", _descriptor, _assertThisInitialized(_this));

          _this.curNetState = NETSTATE.NS_NONE;
          _this.curStateTime = 0;
          _this.lastHeartTime = 0;
          _this.waitWnd = false;
          _this.isShowDlg = true;
          _this.isResume = false;
          _this.reConnectCount = 0;
          _this.gmBtnClickNum = 0;
          _this._NetLockTime = 0;
          _this.gmClickBoo = false;
          _this.hotUpdata = 0;
          _this.openLogin = 0;
          _this.postMsgNum = 0;
          _this.msgBoo = true;
          return _this;
        }

        var _proto = GameMain.prototype;

        _proto.setNetState = function setNetState(value) {
          var old = this.curNetState;
          this.curNetState = value;
          this.curStateTime = UIHelp.getTimeMask();

          if (this.curNetState == NETSTATE.NS_CONNECTED) {
            this.lastHeartTime = UIHelp.getTimeMask();
          }
        };

        _proto.preLoadPrefabs = function preLoadPrefabs() {
          resources.load("prefabs/ui/view/LoadingTAView", function (error, res) {
            if (error) console.log("preload LoadingTAView=>", error);else console.log("preload LoadingTAView");
          });
          resources.load("prefabs/ui/view/ChickBox", function (error, res) {
            if (error) console.log("preload chickbox=>", error);else console.log("preload chickbox");
          });
          resources.load("prefabs/ui/view/ChoiceBox", function (error, res) {
            if (error) console.log("preload ChoiceBox=>", error);else console.log("preload choicebox");
          });
          resources.load("prefabs/ui/view/WaitNet", function (error, res) {
            if (error) console.log("preload WaitNet=>", error);else console.log("preload waitnet");
          });
          resources.load("prefabs/ui/view/TipsUI", function (error, res) {
            if (error) console.log("preload TipsUI=>", error);else console.log("preload tipsui");
          });
        };

        _proto.onLoad = function onLoad() {
          if (sys.Platform.IOS === sys.platform) {
            TimerMgr.fps = 30;
          }

          window["PlatformCbUtil"] = PlatformCbUtil;
          GameAllData.httpServerUrl = ConstValue.HTTP_SERVER_URL;
          this.node.getChildByName("Node").active = CommonUtil.isTestNet();
          view.resizeWithBrowserSize(true);
          GameDataManager.getInstance().unserializeData(null); 
          // WebSocketMgr.connect("ws://192.168.0.228:9001");//克洛巴
          // WebSocketMgr.connect("ws://192.168.0.120:9000");//裘斯
          // WebSocketMgr.connect("ws://47.57.186.158:9001");//外网

          this.preLoadPrefabs();
          EventManager.getInstance().add(MessageManager.Custom.RequestLogin, this, this.RequestLogin);
          EventManager.getInstance().add(MessageManager.Custom.ConnectWebSocket, this, this.ConnectWebSocket);
          EventManager.getInstance().add(MessageManager.Custom.ReConnectWebSocket, this, this.ReConnectWebSocket);
          EventManager.getInstance().add(MessageManager.Custom.WebSocketOnOpen, this, this.WebSocketOnOpen);
          EventManager.getInstance().add(MessageManager.Custom.WebSocketOnClose, this, this.WebSocketOnClose);
          EventManager.getInstance().add(MessageManager.Custom.WebSocketOnError, this, this.WebSocketOnError);
          EventManager.getInstance().add(MessageManager.Net.GameMessageResponse, this, this.GameMessageResponse);
          EventManager.getInstance().add(MessageManager.Net.GameLoginResponse, this, this.GameLoginResponse);
          EventManager.getInstance().add(MessageManager.Net.GameHeartResponse, this, this.onGameHeartResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmNewGuideResponse, this, this.NewGuideResponse);
          EventManager.getInstance().add(MessageManager.Custom.NETERROR, this, this.onNetError);
          EventManager.getInstance().add(MessageManager.Custom.NETERROR1, this, this.onNetError1);
          EventManager.getInstance().add(MessageManager.Custom.UPDATATASKDATA, this, this.onTaskData);
          EventManager.getInstance().add(MessageManager.Custom.StartLaunchLogic, this, this.startLaunchLogic);
          EventManager.getInstance().add(MessageManager.Custom.UpdateTMessageInfo, this, this.updateTMessageInfo);
          game.on(Game.EVENT_HIDE, this.onHide, this);
          game.on(Game.EVENT_SHOW, this.onShow, this);
        };

        _proto.onDestroy = function onDestroy() {
          EventManager.getInstance().remove(MessageManager.Custom.RequestLogin, this, this.RequestLogin);
          EventManager.getInstance().remove(MessageManager.Custom.ConnectWebSocket, this, this.ConnectWebSocket);
          EventManager.getInstance().remove(MessageManager.Custom.ReConnectWebSocket, this, this.ReConnectWebSocket);
          EventManager.getInstance().remove(MessageManager.Custom.WebSocketOnOpen, this, this.WebSocketOnOpen);
          EventManager.getInstance().remove(MessageManager.Custom.WebSocketOnClose, this, this.WebSocketOnClose);
          EventManager.getInstance().remove(MessageManager.Custom.WebSocketOnError, this, this.WebSocketOnError);
          EventManager.getInstance().remove(MessageManager.Net.GameMessageResponse, this, this.GameMessageResponse);
          EventManager.getInstance().remove(MessageManager.Net.GameLoginResponse, this, this.GameLoginResponse);
          EventManager.getInstance().remove(MessageManager.Net.GameHeartResponse, this, this.onGameHeartResponse);
          EventManager.getInstance().remove(MessageManager.Custom.NETERROR, this, this.onNetError);
          EventManager.getInstance().remove(MessageManager.Custom.UPDATATASKDATA, this, this.onTaskData);
          EventManager.getInstance().remove(MessageManager.Custom.StartLaunchLogic, this, this.startLaunchLogic);
          EventManager.getInstance().remove(MessageManager.Custom.UpdateTMessageInfo, this, this.updateTMessageInfo);
          game.off(Game.EVENT_HIDE, this.onHide, this);
          game.off(Game.EVENT_SHOW, this.onShow, this);
        };

        _proto.onHide = function onHide() {};

        _proto.onShow = function onShow() {
          //this.curStateTime = UIHelp.getTimeMask();
          this.isResume = true;
        };

        _proto.onNetError1 = function onNetError1(args) {
          var _this2 = this; //this.onNetError(args);
          //return;


          sys.localStorage.removeItem("token");
          this.setNetState(NETSTATE.NS_NONE);
          UIManager.getInstance().closeUI(WaitNet);
          this.waitWnd = true;
          TipManager.autoTip(3, args.Code, ConfigFile.findLanguage(args.Code), function () {
            _this2.setNetState(NETSTATE.NS_NONE);

            GameManager.getInstance().closeGame(MainGame);
            UIManager.getInstance().closeAllUI();

            _this2.openUILogin();
          }, function () {
            _this2.setNetState(NETSTATE.NS_NONE);

            GameManager.getInstance().closeGame(MainGame);
            UIManager.getInstance().closeAllUI();

            _this2.openUILogin();
          });
        };

        _proto.onNetError = function onNetError(args) {
          console.log("GameMain onNetError--->");
          this.setNetState(NETSTATE.NS_NONE);
          UIManager.getInstance().closeUI(WaitNet);
          this.waitWnd = true;

          if (this.reConnectCount >= 100) {
            this.reConnectCount = 0;
            game.restart();
            GameManager.getInstance().closeGame(MainGame);
            UIManager.getInstance().closeAllUI();
            this.openUILogin();
          } else {
            EventManager.getInstance().trigger(MessageManager.Custom.ReConnectWebSocket);
          } // if (this.isShowDlg) {
          //     TipManager.autoTip(4, args.Code, ConfigFile.findLanguage(args.Code), () => {
          //         this.setNetState(NETSTATE.NS_NONE);
          //         GameManager.getInstance().closeGame(MainGame);
          //         UIManager.getInstance().openUI(UILogin, 10, undefined, undefined, undefined, true);
          //     }, () => {
          //         EventManager.getInstance().trigger(MessageManager.Custom.ConnectWebSocket);
          //     });
          // } else {
          //     this.isShowDlg = true;
          //     EventManager.getInstance().trigger(MessageManager.Custom.ConnectWebSocket);
          // }

        } //登录返回
        ;

        _proto.GameLoginResponse = /*#__PURE__*/function () {
          var _GameLoginResponse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(msg) {
            var _this3 = this;

            var game;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (!(msg.Code == 120018)) {
                      _context.next = 3;
                      break;
                    }

                    TipManager.autoTip(3, msg.Code, ConfigFile.findLanguage(msg.Code), function () {
                      sys.localStorage.removeItem("token");

                      _this3.setNetState(NETSTATE.NS_NONE);

                      UIManager.getInstance().closeUI(WaitNet);
                      UIHelp.closeLoadingTANew();
                      _this3.waitWnd = true;
                      GameManager.getInstance().closeGame(MainGame);

                      _this3.openUILogin(); // WebSocketMgr.close();                

                    }, function () {
                      UIManager.getInstance().closeUI(WaitNet);
                      WebSocketMgr.send(MessageManager.Net.GameLoginRequest, {
                        IsForce: 1,
                        Token: sys.localStorage.getItem("token")
                      });
                    });
                    return _context.abrupt("return");

                  case 3:
                    game = GameAllData.FarmUserResponse;

                    if (!(msg.Code == 113028)) {
                      _context.next = 8;
                      break;
                    }

                    console.warn("fuckfuckcaorinimade===============??????>", msg.Code);
                    TipManager.autoTip(3, msg.Code, ConfigFile.findLanguage(msg.Code), function () {
                      // GameManager.getInstance().closeGame(MainGame)
                      // // WebSocketMgr.close();
                      // UIHelp.closeLoadingTA();
                      // UIManager.getInstance().openUI(UILogin, 10, undefined, undefined, undefined, true);
                      GameManager.getInstance().closeGame(MainGame);
                      UIManager.getInstance().closeAllUI();

                      _this3.openUILogin();
                    }); // GameManager.getInstance().closeGame(MainGame)
                    //     // WebSocketMgr.close();
                    // UIHelp.closeLoadingTA();
                    // UIManager.getInstance().openUI(UILogin, 10, undefined, undefined, undefined, true);
                    // GameManager.getInstance().closeGame(MainGame);
                    // UIManager.getInstance().closeAllUI();
                    // this.openUILogin();

                    return _context.abrupt("return");

                  case 8:
                    if (game) {
                      _context.next = 18;
                      break;
                    }

                    if (!(0 != msg.Code)) {
                      _context.next = 12;
                      break;
                    }

                    UIManager.getInstance().openUI(UILogin, 10, undefined, undefined, undefined, true);
                    return _context.abrupt("return");

                  case 12:
                    this.GameHeartRequest();
                    this.NewGuideRequest(null);
                    UIManager.getInstance().closeUI(UILogin);
                    UIManager.getInstance().openUI(LoadingView, 10, null, null, null, true);
                    _context.next = 20;
                    break;

                  case 18:
                    this.GameHeartRequest();
                    EventManager.getInstance().trigger(MessageManager.Custom.NETRECONNECT, {});

                  case 20:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function GameLoginResponse(_x) {
            return _GameLoginResponse.apply(this, arguments);
          }

          return GameLoginResponse;
        }();

        _proto.start = /*#__PURE__*/function () {
          var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return PlatformUtil.initOperationInfo();

                  case 2:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));

          function start() {
            return _start.apply(this, arguments);
          }

          return start;
        }();

        _proto.update = function update(dt) {
          EventManager.getInstance().trigger("LoopUpdate", dt);

          if (this.curNetState == NETSTATE.NS_CONNECTING && UIHelp.getTimeDiff(this.curStateTime) > 15000) {
            this.curStateTime = UIHelp.getTimeMask();
            console.log("15秒没有连接成功,重新开始连接");
            this.setNetState(NETSTATE.NS_ERROR);
          } else if (this.curNetState == NETSTATE.NS_CONNECTED && UIHelp.getTimeDiff(this.curStateTime) > 10000) {
            this.curStateTime = UIHelp.getTimeMask();

            if (UIHelp.getTimeDiff(this.lastHeartTime) > 30000) {
              console.log("心跳中断太长时间");

              if (this.isResume) {
                this.isResume = false;
                this.isShowDlg = false;
              }

              WebSocketMgr.close();
              UIHelp.openLoadingTA();
            } else {
              this.GameHeartRequest();
            }
          } else if (this.curNetState == NETSTATE.NS_ERROR && UIHelp.getTimeDiff(this.curStateTime) > 5000) {
            this.curStateTime = UIHelp.getTimeMask();
            GameAllData.NetReplace = true;
            console.log("NS_ERROR 清除连接");
            WebSocketMgr.close();
            var token = sys.localStorage.getItem("token");

            if (token) {
              EventManager.getInstance().trigger(MessageManager.Custom.NETERROR, {
                Code: 112071
              }); //EventManager.getInstance().trigger(MessageManager.Custom.ConnectWebSocket);
            } else {
              this.setNetState(NETSTATE.NS_NONE);
              GameManager.getInstance().closeGame(MainGame);
              UIManager.getInstance().openUI(UILogin, 10, undefined, undefined, undefined, true);
            }
          }
        };

        _proto.lateUpdate = function lateUpdate() {// let context = cc.sys.__audioSupport.context;
          // if (context.state === 'suspended') {
          //     context.resume();
          //     console.log(context.state);
          // }
        };

        _proto.openUILogin = function openUILogin() {
          this.scheduleOnce(function () {
            UIManager.getInstance().openUI(UILogin, 10, undefined, undefined, undefined, true);
            sys.localStorage.removeItem("token");
          });
        } // //初始化运营信息
        // private async initOperationInfo() {
        //     const text = await PlatformUtil.readClipboardText();
        //     if (!text || "" === text) {
        //         GameAllData.operatorId = ConstValue.OPERATOR_ID + "";
        //         GameAllData.channelId = ConstValue.CHANNEL_ID + "";
        //         return;
        //     }
        //     const info = text.split("&");
        //     const operatorInfo = info[0] && info[0].split("=");
        //     const invitationCodeInfo = info[1] && info[1].split("=");
        //     const channelInfo = info[2] && info[2].split("=");
        //     if (operatorInfo && operatorInfo[1]) {
        //         GameAllData.operatorId = (parseInt(operatorInfo[1]) || ConstValue.OPERATOR_ID) + "";
        //     } else {
        //         GameAllData.operatorId = ConstValue.OPERATOR_ID + "";
        //     }
        //     if (invitationCodeInfo && invitationCodeInfo[1] && "" !== invitationCodeInfo[1]) {
        //         GameAllData.invitationCode = invitationCodeInfo[1];
        //     }
        //     if (channelInfo && channelInfo[1]) {
        //         GameAllData.channelId = parseInt(channelInfo[1]) + "";
        //     } else {
        //         GameAllData.channelId = ConstValue.CHANNEL_ID + "";
        //     }
        // }
        // 请求登录(手机和第三方登录都会调用)
        ;

        _proto.RequestLogin = function RequestLogin(url, params) {
          HttpMgr.post(url, params, function (data) {
            console.log("onClickLogin--->", data);

            if (0 != data.code) {
              UIHelp.closeLoadingTA();
              TipManager.ChickBox(ConfigFile.findLanguage(data.code));
              return;
            }

            sys.localStorage.setItem("token", data.data.token);
            EventManager.getInstance().trigger(MessageManager.Custom.ConnectWebSocket);
          });
        };

        _proto.ConnectWebSocket = function ConnectWebSocket() {
          this.setNetState(NETSTATE.NS_CONNECTING);

          if (this.waitWnd) {
            UIManager.getInstance().openUI(WaitNet, 99, function (ui, args) {
              var url = GameAllData.httpServerUrl + "user/get_websocket";
              HttpMgr.post(url, null, function (data) {
                // console.log("get_websocket--->", data);
                if (0 != data.code) {
                  return;
                }

                GameAllData.wsServerUrl = data.data.webscoket;
                WebSocketMgr.connect(GameAllData.wsServerUrl);
              });
            });
          } else {
            var url = GameAllData.httpServerUrl + "user/get_websocket";
            HttpMgr.post(url, null, function (data) {
              // console.log("get_websocket--->", data);
              if (0 != data.code) {
                return;
              }

              GameAllData.wsServerUrl = data.data.webscoket;
              WebSocketMgr.connect(GameAllData.wsServerUrl);
            });
          }
        };

        _proto.ReConnectWebSocket = function ReConnectWebSocket() {
          console.log("GameMain ReConnectWebSocket--->");
          this.setNetState(NETSTATE.NS_CONNECTING);
          WebSocketMgr.connect(GameAllData.wsServerUrl);
          UIHelp.openLoadingTA(); // UIHelp.openLoadingTANew();

          this.reConnectCount++;
        };

        _proto.WebSocketOnOpen = function WebSocketOnOpen() {
          this.setNetState(NETSTATE.NS_CONNECTED);
          WebSocketMgr.send(MessageManager.Net.GameMessageRequest, null);
          UIManager.getInstance().closeUI(WaitNet);
          this.waitWnd = false; // UIHelp.closeLoadingTA();

          var game = GameManager.getInstance().getGame(MainGame);

          if (game) {
            if (GameAllData.FarmLandResponse) {
              game.onLandResponse(GameAllData.FarmLandResponse);
            }

            if (GameAllData.FarmPastureResponse) {
              game.onPastureResponse(GameAllData.FarmPastureResponse);
            }
          }
        };

        _proto.WebSocketOnClose = function WebSocketOnClose() {
          console.log("net close");
          this.setNetState(NETSTATE.NS_ERROR);
          UIManager.getInstance().closeUI(WaitNet);
        };

        _proto.WebSocketOnError = function WebSocketOnError(evt) {
          console.log("net error");
          this.setNetState(NETSTATE.NS_ERROR);
          UIManager.getInstance().closeUI(WaitNet);
        };

        _proto.GameMessageResponse = function GameMessageResponse() {
          UIManager.getInstance().closeUI(WaitNet);
          WebSocketMgr.send(MessageManager.Net.GameLoginRequest, {
            IsForce: 0,
            Token: sys.localStorage.getItem("token")
          });
        };

        _proto.GameHeartRequest = function GameHeartRequest() {
          WebSocketMgr.send(MessageManager.Net.GameHeartRequest, {});
        };

        _proto.onTaskData = function onTaskData(args) {
          this.NewGuideRequest(args.text);
        };

        _proto.NewGuideResponse = function NewGuideResponse(Data) {
          if (Data && Data.NewGuide) {
            var tskState = TaskManager.getInstance().tskState;
            var k = Object.keys(tskState);
            if (k.length < 1) TaskManager.getInstance().tskState = JSON.parse(Data.NewGuide);
          } else {
            TaskManager.getInstance().tskState = {};
          }
        };

        _proto.NewGuideRequest = function NewGuideRequest(guideState) {
          if (guideState) {
            WebSocketMgr.send(MessageManager.Net.FarmNewGuideRequest, {
              NewGuide: guideState
            });
          } else {
            WebSocketMgr.send(MessageManager.Net.FarmNewGuideRequest, {});
          }
        };

        _proto.onGameHeartResponse = function onGameHeartResponse(data) {
          GameAllData.GameHeartResponse = data;
          this.lastHeartTime = UIHelp.getTimeMask();
          this.isResume = false;
          GameAllData.GameHeartResponse.time = data.time - this.lastHeartTime / 1000;
          console.log("onGameHeartResponse==>", this.lastHeartTime, " server=>", data.time);
        };

        _proto.onchicktext = function onchicktext() {
          if (this.gmClickBoo == false) {
            this.gmClickBoo = true;
            this.gmBtnClickNum = 1;
            this._NetLockTime = UIHelp.getTimeMask();
          } else {
            if (UIHelp.getTimeDiff(this._NetLockTime) < 1000) {
              this.gmBtnClickNum += 1;
            } else {
              this.gmClickBoo = false;
              this.gmBtnClickNum = 0;
            }
          }

          if (this.gmBtnClickNum >= 5) {
            // if (CommonUtil.isTestNet())
            UIManager.getInstance().openUI(text, 12, undefined, undefined, undefined);
          }
        };

        _proto.startLaunchLogic = /*#__PURE__*/function () {
          var _startLaunchLogic = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            var serverUrl, url, paramsData, indexUrl, otherParams, paramsList, _iterator, _step, param, i, name, str, _url, params, token;

            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    serverUrl = "";
                    _context3.t0 = Number(GameAllData.operatorId);
                    _context3.next = _context3.t0 === 999 ? 4 : _context3.t0 === 998 ? 6 : _context3.t0 === 997 ? 8 : _context3.t0 === 996 ? 10 : _context3.t0 === 995 ? 12 : 14;
                    break;

                  case 4:
                    //外网测试
                    serverUrl = "https://farm-sms.c92.xyz/api/api/v1/"; // serverUrl = "http://192.168.100.82:9100/api/v1/";

                    return _context3.abrupt("break", 14);

                  case 6:
                    //内网测试
                    serverUrl = "http://192.168.100.42:9100/api/v1/";
                    return _context3.abrupt("break", 14);

                  case 8:
                    //裘斯
                    serverUrl = "http://192.168.100.81:9101/api/v1/";
                    return _context3.abrupt("break", 14);

                  case 10:
                    //秀左
                    serverUrl = "http://192.168.100.82:9100/api/v1/";
                    return _context3.abrupt("break", 14);

                  case 12:
                    //巴姆
                    serverUrl = "http://192.168.100.83:9100/api/v1/";
                    return _context3.abrupt("break", 14);

                  case 14:
                    if (serverUrl && serverUrl != "") {
                      GameAllData.httpServerUrl = serverUrl;
                    } // UIHelp.openLoadingTA();


                    UIHelp.openLoadingTANew();
                    this.msgBoo = true;
                    console.log("this.msgBoomsgBoomsgBoomsgBoo------->");

                  case 18:
                    if (!this.msgBoo) {
                      _context3.next = 26;
                      break;
                    }

                    _context3.next = 21;
                    return this.updateTMessageInfo();

                  case 21:
                    this.postMsgNum++;
                    console.log("this.postMsgNum2222222222llllllllllll------->" + this.postMsgNum + this.msgBoo);

                    if (this.postMsgNum > 10) {
                      game.restart();
                      GameManager.getInstance().closeGame(MainGame);
                      UIManager.getInstance().closeAllUI();
                    }

                    _context3.next = 18;
                    break;

                  case 26:
                    console.log("this.postMsgNum333333333"); // UIHelp.closeLoadingTA();

                    UIHelp.closeLoadingTANew();
                    url = GameAllData.httpServerUrl + "server/config";
                    HttpMgr.post(url, {
                      operater_id: GameAllData.operatorId
                    }, function (data) {
                      if (data.data) {
                        ConstValue.OPERATOR_URL = data.data.domain_name;
                        ConstValue.RRCHANGE_URL = data.data.domain_backend;
                      }
                    });
                    paramsData = {
                      s: null,
                      i: null,
                      time: null,
                      t: null,
                      token: null,
                      webscoket: null,
                      tcpscoket: null,
                      url: null
                    };

                    if (sys.isNative) {
                      this.hotUpdata++;
                      console.log("热更打开面板次数打印：", this.hotUpdata);

                      if (!UIManager.getInstance().getUI(HotUpdateView)) {
                        UIManager.getInstance().openUI(HotUpdateView, 10);
                      }
                    } else {
                      indexUrl = window.location.href; // console.log("accesstoken start------>", window.location.href);

                      if (indexUrl.includes("?") && !indexUrl.includes("undefined")) {
                        // const params = indexUrl.split("?")[1];
                        otherParams = indexUrl.split("?")[1];
                        paramsList = otherParams && otherParams.split("&");

                        for (_iterator = _createForOfIteratorHelperLoose(paramsList); !(_step = _iterator()).done;) {
                          param = _step.value;
                          i = param.indexOf("=");

                          if (i != -1) {
                            name = param.slice(0, i);
                            str = param.slice(i + 1);
                            paramsData[name] = str;
                          }
                        }

                        if (paramsData.t && paramsData.token && paramsData.webscoket && paramsData.t == "bakend") {
                          sys.localStorage.setItem("token", paramsData.token);
                          GameAllData.wsServerUrl = paramsData.webscoket;
                          WebSocketMgr.connect(GameAllData.wsServerUrl);
                        } else if (paramsData.s && paramsData.time && paramsData.t && paramsData.i) {
                          //官网发起的登录，暂时写这儿，登录其他登录做完了，再来做封装
                          _url = GameAllData.httpServerUrl + "agent/login_web";
                          params = {
                            //token: paramsData.access_token,
                            s: paramsData.s,
                            i: paramsData.i,
                            time: paramsData.time,
                            t: paramsData.t,
                            agent_id: GameAllData.channelId,
                            operater_id: GameAllData.operatorId,
                            invite_code: GameAllData.invitationCode,
                            language_id: GameAllData.languageId
                          };
                          EventManager.getInstance().trigger(MessageManager.Custom.RequestLogin, _url, params);
                        } else {
                          TipManager.TipFromText(null, "loginFiled..."); //UIManager.getInstance().openUI(UILogin, 10, undefined, undefined, undefined, true);
                        }
                      } else {
                        token = sys.localStorage.getItem("token");

                        if (token) {
                          EventManager.getInstance().trigger(MessageManager.Custom.ConnectWebSocket);
                        } else {
                          UIManager.getInstance().openUI(UILogin, 10, undefined, undefined, undefined, true);
                        }
                      }
                    }

                  case 32:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));

          function startLaunchLogic() {
            return _startLaunchLogic.apply(this, arguments);
          }

          return startLaunchLogic;
        }();

        _proto.updateTMessageInfo = /*#__PURE__*/function () {
          var _updateTMessageInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
            var _this4 = this;

            var tMsgVer, tMsgInfo, url;
            return _regeneratorRuntime().wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    tMsgVer = Number(sys.localStorage.getItem("tMsgVer") || 0);
                    tMsgInfo = JSON.parse(sys.localStorage.getItem("tMsgInfo")); // ConfigFile.getInstance().config.set(Configname.TMessageInfo, tMsgInfo);
                    // console.log("tMsgInfo----->%o" + tMsgInfo,tMsgInfo);

                    if (!tMsgInfo) {
                      tMsgVer = 0;
                    } else {
                      ConfigFile.getInstance().config.set(Configname.TMessageInfo, tMsgInfo);
                    } // this.postMsgNum = 0;


                    url = GameAllData.httpServerUrl + "game/manager/message";
                    _context5.next = 6;
                    return HttpMgr.post(url, {
                      operater_id: GameAllData.operatorId,
                      version: tMsgVer
                    }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(data) {
                      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                        while (1) {
                          switch (_context4.prev = _context4.next) {
                            case 0:
                              if (!(0 != data.code)) {
                                _context4.next = 7;
                                break;
                              }

                              if (!(data.code != 304)) {
                                _context4.next = 4;
                                break;
                              } // this.msgBoo = true;


                              console.log("game/manager/message--msgBoomsgBoo--->data.code" + data.code);
                              return _context4.abrupt("return");

                            case 4:
                              _this4.msgBoo = false;
                              console.log("game/manager/message----->data.code" + data.code);
                              return _context4.abrupt("return");

                            case 7:
                              sys.localStorage.setItem("tMsgVer", data.data.version);
                              sys.localStorage.setItem("tMsgInfo", JSON.stringify(data.data.items));
                              ConfigFile.getInstance().config.set(Configname.TMessageInfo, data.data.items);
                              _this4.msgBoo = false;
                            // console.log("last----->",4444444444444 + "" + data.data.items);

                            case 11:
                            case "end":
                              return _context4.stop();
                          }
                        }
                      }, _callee4);
                    })));

                  case 6:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5);
          }));

          function updateTMessageInfo() {
            return _updateTMessageInfo.apply(this, arguments);
          }

          return updateTMessageInfo;
        }();

        return GameMain;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "textNode", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameManager.ts", ['cc', './LogWrap.ts'], function (exports) {
  'use strict';

  var cclegacy, Node, resources, instantiate, find, LogWrap;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      resources = module.resources;
      instantiate = module.instantiate;
      find = module.find;
    }, function (module) {
      LogWrap = module.LogWrap;
    }],
    execute: function () {
      cclegacy._RF.push({}, "94bddhRX7xNYKGnkEVn37RO", "GameManager", undefined);

      var GameManager = exports('GameManager', /*#__PURE__*/function () {
        GameManager.getInstance = function getInstance() {
          if (this.instance == null) {
            this.instance = new GameManager();
          }

          return this.instance;
        };

        function GameManager() {
          this.gameList = [];
          this.gameRoot = null;
          this.gameRoot = find("Canvas/Game");
        }

        var _proto = GameManager.prototype;

        _proto.NewNode = function NewNode() {
          var anode = new Node();
          anode.parent = this.gameRoot;
          return anode;
        };

        _proto.openGame = function openGame(gameClass, callback, onProgress, args) {
          var _this = this;

          if (this.getGame(gameClass)) {
            return;
          }

          resources.load(gameClass.getUrl(), function (completedCount, totalCount, item) {
            if (onProgress) {
              onProgress(completedCount, totalCount, item);
            }
          }, function (error, prefab) {
            if (error) {
              LogWrap.log(error);
              return;
            }

            if (_this.getGame(gameClass)) {
              return;
            }

            var gameNode = instantiate(prefab);
            gameNode.parent = _this.gameRoot;
            var game = gameNode.getComponent(gameClass);
            game.tag = gameClass;
            game.initData(args);

            _this.gameList.push(game);

            if (callback) {
              callback(game, args);
            }
          });
        };

        _proto.closeGame = function closeGame(gameClass) {
          for (var i = 0; i < this.gameList.length; ++i) {
            if (this.gameList[i].tag === gameClass) {
              this.gameList[i].closeGame();
              this.gameList[i].node.destroy();
              this.gameList.splice(i, 1);
              return;
            }
          }
        };

        _proto.getGame = function getGame(gameClass) {
          for (var i = 0; i < this.gameList.length; ++i) {
            if (this.gameList[i].tag === gameClass) {
              return this.gameList[i];
            }
          }

          return null;
        };

        return GameManager;
      }());
      GameManager.instance = void 0;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GetItemEff.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PlayButtonSound.ts', './GameManager.ts', './UIManager.ts', './MainGame.ts', './NodeHelp.ts', './NumberUtil.ts', './Pool.ts', './UIGame.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _regeneratorRuntime, _asyncToGenerator, cclegacy, _decorator, Prefab, Node, instantiate, find, Component, Sprite, UITransform, v3, tween, PlayButtonSound, GameManager, UIManager, MainGame, NodeHelp, NumberUtil, PoolOnce, UIGame;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _regeneratorRuntime = module.regeneratorRuntime;
      _asyncToGenerator = module.asyncToGenerator;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      instantiate = module.instantiate;
      find = module.find;
      Component = module.Component;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      v3 = module.v3;
      tween = module.tween;
    }, function (module) {
      PlayButtonSound = module.PlayButtonSound;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      MainGame = module.MainGame;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      UIGame = module.UIGame;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "dbdae70NpxAOb2QXLeYyFTV", "GetItemEff", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GetItemEff = exports('GetItemEff', (_dec = ccclass('GetItemEff'), _dec2 = property({
        type: Prefab,
        displayName: "item模板"
      }), _dec3 = property({
        type: Node,
        displayName: "items"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GetItemEff, _Component);

        function GetItemEff() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "item", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "items", _descriptor2, _assertThisInitialized(_this));

          _this.uiRoot = null;
          _this.statePosition = null;
          _this.icons = null;
          _this.Pool = new PoolOnce(30, function () {
            return instantiate(_this.item);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          return _this;
        }

        var _proto = GetItemEff.prototype;

        _proto.onLoad = function onLoad() {
          this.uiRoot = find("Canvas");
        };

        _proto.onDisable = function onDisable() {
          var _this2 = this;

          if (this.items.children && this.items.children.length > 1) {
            this.items.children.forEach(function (v) {
              _this2.Pool.put(v);
            });
          }

          this.Pool.clear();
        };

        _proto.getFly = function getFly(statePosition, icons) {
          this.statePosition = statePosition;
          this.icons = icons;
          this.node.setWorldPosition(this.statePosition);
          this.framingLoad(icons.Items.length);
          this.framingLoadGoods(icons.Currency.length);
        }
        /**
        * （新增代码）获取生成子节点的Generator
        */
        ;

        _proto._getItemGenerator = /*#__PURE__*/_regeneratorRuntime().mark(function _getItemGenerator(length, type) {
          var i;
          return _regeneratorRuntime().wrap(function _getItemGenerator$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  i = 0;

                case 1:
                  if (!(i < length)) {
                    _context.next = 7;
                    break;
                  }

                  _context.next = 4;
                  return this._initItem(i, type);

                case 4:
                  i++;
                  _context.next = 1;
                  break;

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _getItemGenerator, this);
        })
        /**
         * （和拆分前的代码一致）
         */
        ;

        _proto._initItem = /*#__PURE__*/function () {
          var _initItem2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(itemIndex, type) {
            var _this3 = this;

            var index, image, goNode, num, gameUi, _gameUi, name, game, _loop, i;

            return _regeneratorRuntime().wrap(function _callee$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    index = itemIndex;
                    image = 0;
                    goNode = null;
                    num = 1;

                    if (!(type == 1)) {
                      _context2.next = 11;
                      break;
                    }

                    image = this.icons.Items[index].ItemModeId;
                    gameUi = UIManager.getInstance().getUI(UIGame);

                    if (gameUi) {
                      NodeHelp.getchildlable(gameUi.node, "Bag", null, function (comp, node) {
                        goNode = node;
                      });
                    }

                    num = this.icons.Items[index].ChangeCount > 10 ? 10 : this.icons.Items[index].ChangeCount;
                    _context2.next = 36;
                    break;

                  case 11:
                    image = this.icons.Currency[index].CurrencyModeId;
                    num = this.icons.Currency[index].ChangeCount > 10 ? 10 : this.icons.Currency[index].ChangeCount;
                    _gameUi = UIManager.getInstance().getUI(UIGame);

                    if (!_gameUi) {
                      _context2.next = 36;
                      break;
                    }

                    name = "";
                    _context2.t0 = image;
                    _context2.next = _context2.t0 === -1 ? 19 : _context2.t0 === -2 ? 21 : _context2.t0 === -3 ? 23 : _context2.t0 === -4 ? 25 : _context2.t0 === -5 ? 27 : _context2.t0 === -6 ? 29 : _context2.t0 === -7 ? 31 : 33;
                    break;

                  case 19:
                    name = "UIGameItemGold";
                    return _context2.abrupt("break", 35);

                  case 21:
                    name = "UIGameItemCoin";
                    return _context2.abrupt("break", 35);

                  case 23:
                    name = "hose";
                    return _context2.abrupt("break", 35);

                  case 25:
                    name = "UIVipLevel";
                    return _context2.abrupt("break", 35);

                  case 27:
                    name = "UIRankLevel";
                    return _context2.abrupt("break", 35);

                  case 29:
                    name = "UIGameItemGold";
                    return _context2.abrupt("break", 35);

                  case 31:
                    name = "UIGameItemPearl";
                    return _context2.abrupt("break", 35);

                  case 33:
                    name = "Bag";
                    return _context2.abrupt("break", 35);

                  case 35:
                    if (name == "hose") {
                      game = GameManager.getInstance().getGame(MainGame);
                      goNode = game.HouseNode;
                    } else NodeHelp.getchildlable(_gameUi.node, name, null, function (comp, node) {
                      goNode = node;
                    });

                  case 36:
                    _loop = function _loop(i) {
                      var itemNode = _this3.Pool.get();

                      _this3.items.addChild(itemNode);

                      NodeHelp.loadIcon("propIcon/itemicon", image.toString(), function (res) {
                        itemNode.getComponent(Sprite).spriteFrame = res;
                        var scale = NodeHelp.setScopeLimitation(itemNode.getComponent(UITransform), 116, 116);
                        itemNode.setScale(scale, scale);
                        var position = goNode ? goNode.worldPosition : v3(0, 0, 0);
                        var startY = NumberUtil.minToMax(50, 100);
                        var startX = (125 - startY) * (NumberUtil.minToMax(0, 1) == 0 ? -1 : 1);
                        var time = 0.1 + 0.01 * (startY - 25);
                        tween(itemNode).to(time, {
                          position: v3(startX, startY)
                        }, {
                          easing: 'quartOut'
                        }).to(time, {
                          position: v3(startX + startX * 0.2, 0)
                        }, {
                          easing: 'quartIn'
                        }).to(time * 0.5, {
                          position: v3(startX + startX * 0.4, NumberUtil.minToMax(25, 50))
                        }, {
                          easing: 'quartOut'
                        }).to(time * 0.4, {
                          position: v3(startX + startX * 0.6, 0)
                        }, {
                          easing: 'quartIn'
                        }).to(time * 0.3, {
                          position: v3(startX + startX * 0.8, NumberUtil.minToMax(15, 40))
                        }, {
                          easing: 'quartOut'
                        }).to(time * 0.2, {
                          position: v3(startX * 2, 0)
                        }, {
                          easing: 'quartIn'
                        }).delay(0.1).to(1, {
                          worldPosition: position
                        }, {
                          easing: 'quartOut'
                        }).call(function () {
                          _this3.Pool.put(itemNode);

                          if (goNode && goNode.isValid) {
                            var comp = goNode.getComponent(PlayButtonSound);
                            if (comp) comp.onPlayEffect();
                          }

                          var len = _this3.icons.Items.length - 1;

                          if (type == 1) {
                            len = _this3.icons.Currency.length - 1;
                          }

                          if (index >= len && i == num - 1) {
                            tween(itemNode).delay(2).call(function () {
                              if (_this3 && _this3.node && _this3.node.isValid) _this3.node.destroy();
                            }).start();
                            console.log("播放完毕");
                          }
                        }).start();
                      });
                    };

                    for (i = 0; i < num; i++) {
                      _loop(i);
                    }

                  case 38:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee, this);
          }));

          function _initItem(_x, _x2) {
            return _initItem2.apply(this, arguments);
          }

          return _initItem;
        }()
        /**
        * 实现分帧加载
        */
        ;

        _proto.framingLoad = /*#__PURE__*/function () {
          var _framingLoad = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(length) {
            return _regeneratorRuntime().wrap(function _callee2$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _context3.next = 2;
                    return this.executePreFrame(this._getItemGenerator(length, 1), 0.1).then(function (data) {
                      console.log("飞行道具加载完成");
                    });

                  case 2:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee2, this);
          }));

          function framingLoad(_x3) {
            return _framingLoad.apply(this, arguments);
          }

          return framingLoad;
        }();

        _proto.framingLoadGoods = /*#__PURE__*/function () {
          var _framingLoadGoods = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(length) {
            return _regeneratorRuntime().wrap(function _callee3$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    _context4.next = 2;
                    return this.executePreFrame(this._getItemGenerator(length, 2), 0.1).then(function (data) {
                      console.log("飞行金币加载完成");
                    });

                  case 2:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee3, this);
          }));

          function framingLoadGoods(_x4) {
            return _framingLoadGoods.apply(this, arguments);
          }

          return framingLoadGoods;
        }()
        /**
         * 分帧执行 Generator 逻辑
         *
         * @param generator 生成器
         * @param duration 持续时间（ms）
         *          每次执行 Generator 的操作时，最长可持续执行时长。
         *          假设值为8ms，那么表示1帧（总共16ms）下，分出8ms时间给此逻辑执行
         */
        ;

        _proto.executePreFrame = function executePreFrame(generator, duration) {
          var _this4 = this;

          return new Promise(function (resolve, reject) {
            var gen = generator; // 创建执行函数

            var execute = function execute() {
              // 执行之前，先记录开始时间戳
              var startTime = new Date().getTime(); // 然后一直从 Generator 中获取已经拆分好的代码段出来执行

              for (var iter = gen.next();; iter = gen.next()) {
                // 判断是否已经执行完所有 Generator 的小代码段
                // 如果是的话，那么就表示任务完成
                if (iter == null || iter.done) {
                  resolve(true);
                  return;
                } // 每执行完一段小代码段，都检查一下是否
                // 已经超过我们分配给本帧，这些小代码端的最大可执行时间


                if (new Date().getTime() - startTime > duration) {
                  // 如果超过了，那么本帧就不在执行，开定时器，让下一帧再执行
                  _this4.scheduleOnce(function () {
                    execute();
                  });

                  return;
                }
              }
            }; // 运行执行函数


            execute();
          });
        };

        return GetItemEff;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "item", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "items", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GiftCode.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstLanguage.ts', './ConfigFile.ts', './NodeHelp.ts', './SetSecondaryUIEntity.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, ConstLanguage, ConfigFile, NodeHelp, SetSecondaryUIEntity;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      ConstLanguage = module.ConstLanguage;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      SetSecondaryUIEntity = module.SetSecondaryUIEntity;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "a5e96JgG59BuLUaHvWkJlcu", "GiftCode", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GiftCode = exports('GiftCode', (_dec = ccclass('GiftCode'), _dec(_class = /*#__PURE__*/function (_SetSecondaryUIEntity) {
        _inheritsLoose(GiftCode, _SetSecondaryUIEntity);

        function GiftCode() {
          return _SetSecondaryUIEntity.apply(this, arguments) || this;
        }

        var _proto = GiftCode.prototype;

        _proto.init = function init() {
          _SetSecondaryUIEntity.prototype.init.call(this);

          this.setShow();
        };

        _proto.setShow = function setShow() {
          NodeHelp.getchildlable(this.node, "LabelTitle", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.Set_PANEL_BUTTON5);
          });
        };

        return GiftCode;
      }(SetSecondaryUIEntity)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GList.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, instantiate, v3, UITransform, size, ScrollView;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      instantiate = module.instantiate;
      v3 = module.v3;
      UITransform = module.UITransform;
      size = module.size;
      ScrollView = module.ScrollView;
    }],
    execute: function () {
      cclegacy._RF.push({}, "59101v4/PBJ2LAIln0YFBIF", "GList", undefined);
      /**虚拟列表结构
       * @author JiaKa 2022年10月25日
       * @desc 1、new GList(见参数)
       *       2、如果需要操作数据刷新，设置：list.itemRenderer = customFun(index:number, item:Node)
       *       3、设置渲染数量：list.SetItemNum(10)
       * 
       */


      var GList = exports('GList', /*#__PURE__*/function () {
        /**上下额外需要显示的数量 */

        /**列表对象 */

        /**item的预制体 */

        /**渲染item用的
         * @param index:number 索引
         * @param item:T 索引
         */

        /**是否是水平滚动列表,如果不是，就是垂直滚动的 */

        /**item尺寸，水平滚动的就是宽度，垂直滚动的就是高度 */

        /**item之间的间隔 */

        /**上一次刷新位置索引：index，主要用于标记是否滚动到相同标准，如果是，不需要刷新逻辑 */

        /**item数量 */

        /**列表的大小，水平滚动的就是宽度，垂直滚动的就是高度 */

        /**最大显示的item数量 */

        /**上一次渲染的索引 */

        /**显示的列表，key:index，v:childIndex， key表示数据数组中的索引，childIndex表示当前渲染的索引，-1或者不存在表示没渲染*/

        /**对象池 */

        /**
         * 
         * @param list ScrollView对象
         * @param itemPrefab item的预制体
         * @param itemSize item的尺寸：水平滚动就是宽度，垂直滚动就是高度
         * @param isVorizontal 是否是水平滚动
         * @param space item之间的间隔
         */
        function GList(list, itemPrefab, itemSize, isVorizontal, space) {
          this.list = void 0;
          this.itemPrefab = void 0;
          this.itemRenderer = void 0;
          this.isVorizontal = void 0;
          this.itemSize = void 0;
          this.space = void 0;
          this.lastPos = void 0;
          this.itemNum = void 0;
          this.listSize = void 0;
          this.maxShowItemNum = void 0;
          this.lastRenderStartIndex = void 0;
          this.lastRenderEndIndex = void 0;
          this.showItemMap = new Map();
          this.pool = [];
          this.lastPos = -1;
          space = space || 0;
          this.listSize = isVorizontal ? list.view.width : list.view.height;
          this.maxShowItemNum = Math.ceil(this.listSize / (itemSize + space) + GList.ADD_SHOW_NUM * 2);
          this.itemNum = 0;
          this.list = list;
          this.itemPrefab = itemPrefab;
          this.itemSize = itemSize;
          this.isVorizontal = isVorizontal;
          this.space = space || 0;
          list.node.on(ScrollView.EventType.SCROLLING, this.OnScrollHandler, this);
        }
        /**渲染这个列表
         * @param isMust boolean 是否强行刷新
         */


        var _proto = GList.prototype;

        _proto.Refresh = function Refresh(isMust) {
          if (isMust) {
            this.lastPos = -1;
          }

          this.OnScrollHandler();
        }
        /**重置列表 */
        ;

        _proto.SetItemNum = function SetItemNum(itenNum) {
          this.itemNum = itenNum;
          this.RefreshMaxSizeValue();
          this.Refresh(true);
        };

        _proto.GetItemByItemIndex = function GetItemByItemIndex(itemIndex) {
          if (this.showItemMap.has(itemIndex)) {
            return this.showItemMap.get(itemIndex);
          }

          return null;
        };

        _proto.IsRenderItem = function IsRenderItem(itemIndex) {
          return itemIndex >= this.lastRenderStartIndex && itemIndex <= this.lastRenderEndIndex;
        };

        _proto.OnScrollHandler = function OnScrollHandler() {
          var list = this.list;

          if (!list) {
            return;
          }

          var offsetPos = list.getScrollOffset();
          var startRenderIndex = 0;
          var offsetValue = this.isVorizontal ? offsetPos.x : offsetPos.y;
          if (offsetValue > 0) startRenderIndex = Math.floor(offsetValue / (this.itemSize + this.space)) - GList.ADD_SHOW_NUM;

          if (startRenderIndex < 0) {
            startRenderIndex = 0;
          } //第一个元素没变化，就不需要遍历刷新


          if (this.lastPos == startRenderIndex) {
            return;
          }

          if (offsetValue < offsetValue) {
            offsetValue = 0;
          }

          this.lastPos = startRenderIndex;
          var endShowIndex = this.maxShowItemNum + startRenderIndex;

          if (endShowIndex >= this.itemNum) {
            endShowIndex = this.itemNum - 1;
          }

          var lastStart = this.lastRenderStartIndex;
          var lastEnd = this.lastRenderEndIndex;
          this.lastRenderStartIndex = startRenderIndex;
          this.lastRenderEndIndex = endShowIndex;

          if (lastStart != -1 && lastEnd - lastStart >= 0) {
            for (var i = lastStart; i < startRenderIndex; i++) {
              this.BackToPool(i);
            }

            for (var _i = endShowIndex + 1; _i <= lastEnd; _i++) {
              this.BackToPool(_i);
            }
          }

          for (var _i2 = startRenderIndex; _i2 <= endShowIndex; _i2++) {
            this.CreateFromPool(_i2);
            this.RenderItem(_i2);
          }
        };

        _proto.BackToPool = function BackToPool(itemIndex) {
          var child = this.GetItemByItemIndex(itemIndex);

          if (child != null) {
            child.removeFromParent();
            this.pool.push(child);
          }

          if (this.showItemMap.has(itemIndex)) {
            this.showItemMap["delete"](itemIndex);
          }
        };

        _proto.CreateFromPool = function CreateFromPool(itemIndex) {
          if (this.itemPrefab == null) {
            console.log("jiaka err: 虚拟列表没有指定item的预制体");
            return null;
          }

          var ele = this.GetItemByItemIndex(itemIndex);

          if (ele) {
            //如果已经实例化了，就不创建了
            return ele;
          }

          ele = this.pool.length > 0 ? this.pool.pop() : this.CreateItem();
          this.list.content.addChild(ele);
          ele.setPosition(this.GetPos(itemIndex));
          this.showItemMap.set(itemIndex, ele);
          return ele;
        };

        _proto.CreateItem = function CreateItem() {
          return instantiate(this.itemPrefab);
        };

        _proto.RenderItem = function RenderItem(index) {
          if (this.itemRenderer != null) {
            var item = this.GetItemByItemIndex(index);

            if (item) {
              this.itemRenderer(index, item);
            }
          }
        };

        _proto.GetPos = function GetPos(index) {
          var off = index * (this.itemSize + this.space);

          if (this.isVorizontal) {
            return v3(off, 0, 1);
          }

          return v3(0, -off - this.itemSize / 2, 1);
        };

        _proto.RefreshMaxSizeValue = function RefreshMaxSizeValue() {
          var sizeValue = 0;

          if (this.itemNum > 0) {
            sizeValue = (this.itemSize + this.space) * this.itemNum - this.space;
          }

          var list = this.list;

          if (this.isVorizontal) {
            list.content.getComponent(UITransform).setContentSize(size(sizeValue, list.view.height));
          } else {
            list.content.getComponent(UITransform).setContentSize(size(list.view.width, sizeValue));
          }
        }
        /**清理显示内容 */
        ;

        _proto.Clear = function Clear(isClearPool) {
          this.lastPos = -1;
          this.itemNum = 0;
          this.lastRenderStartIndex = -1;
          this.lastRenderEndIndex = -1;
          this.Refresh();
          isClearPool && (this.pool = []);
        }
        /**回收 */
        ;

        _proto.Dispose = function Dispose() {
          this.Clear(true);
          this.list.node.off(ScrollView.EventType.SCROLLING, this.OnScrollHandler, this);
          this.list = null;
          this.itemPrefab = null;
          this.itemRenderer = null;
          this.showItemMap = null; //如果需要，可以把所有item返回回去，通过pool
        };

        return GList;
      }());
      GList.ADD_SHOW_NUM = 1;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GoogleVerifySetUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './TipManager.ts', './UIManager.ts', './HttpMgr.ts', './NodeHelp.ts', './NumberUtil.ts', './BaseUI.ts', './SetSecondaryUI.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, EditBox, Label, Button, ConfigFile, GameAllData, EventManager, MessageManager, TipManager, UIManager, HttpMgr, NodeHelp, NumberUtil, BaseUI, SetSecondaryUI;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      EditBox = module.EditBox;
      Label = module.Label;
      Button = module.Button;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      HttpMgr = module.HttpMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      SetSecondaryUI = module.SetSecondaryUI;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _class3;

      cclegacy._RF.push({}, "1bccfxl6DtHI4Q87vd0pVJt", "GoogleVerifySetUI", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GoogleVerifySetUI = exports('GoogleVerifySetUI', (_dec = ccclass('GoogleVerifySetUI'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(EditBox), _dec10 = property(EditBox), _dec11 = property(EditBox), _dec12 = property(EditBox), _dec13 = property(Label), _dec14 = property(Button), _dec15 = property(Button), _dec16 = property(Button), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(GoogleVerifySetUI, _BaseUI);

        function GoogleVerifySetUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "Panel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "phone", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "email", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "key", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "keyAgain", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "phoneNode", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "emailNode", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "EditBoxPhoneNum", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "EditBoxEmailNum", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "EditBox", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "EditBoxAgain", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "timeLab", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnGet", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnGetEmail", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnReset", _descriptor15, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GoogleVerifySetUI.prototype;

        _proto.start = function start() {
          this.initPanelData();
          this.checkPhoneAndEmailNode();
          EventManager.getInstance().add(MessageManager.Net.FarmUserResponse, this, this.onUserResponse);
        };

        _proto.onUserResponse = function onUserResponse(data) {
          GameAllData.FarmUserResponse = data;
          GameAllData.bandPhone = data.Phone;
          GameAllData.bandPhoneAreaCode = data.PhonePrefix;
          GameAllData.bandEmail = data.Email;
          GameAllData.bandSafeCode = data.GoogleSecret;
          GameAllData.bandSafeCodeTime = data.SecretBegin;
          GameAllData.isSafeCodeTips = true;
          GameAllData.severTimeZoneName = data.TimeZoneName;
          GameAllData.severTimeZoneDiff = data.TimeZoneDiff;
          this.checkPhoneAndEmailNode();
        };

        _proto.initPanelData = function initPanelData() {
          var _this2 = this;

          NodeHelp.getchildlable(this.Panel, "labTitle", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8044);
          });
          NodeHelp.getchildlable(this.btnGet.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8014);

            if (GameAllData.veriftPhoneTime > 0) {
              _this2.btnGet.interactable = false;
              var phoneTime = Math.ceil(GameAllData.veriftPhoneTime);
              var cdTime = phoneTime;
              _this2.btnGet.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120014).format(cdTime);

              var func = function func() {
                cdTime--;

                if (cdTime < 1) {
                  _this2.btnGet.interactable = true;
                  GameAllData.veriftPhoneTime = 0;
                  _this2.btnGet.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120006);

                  _this2.unschedule(func);

                  return;
                }

                _this2.btnGet.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120014).format(cdTime);
              };

              _this2.schedule(func, 1);
            } else {
              _this2.btnGet.interactable = true;
            }
          });
          NodeHelp.getchildlable(this.btnGetEmail.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8014);

            if (GameAllData.veriftEmailTime > 0) {
              _this2.btnGetEmail.interactable = false;
              var phoneTime = Math.ceil(GameAllData.veriftEmailTime);
              var cdTime = phoneTime;
              _this2.btnGetEmail.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120014).format(cdTime);

              var func = function func() {
                cdTime--;

                if (cdTime < 1) {
                  _this2.btnGetEmail.interactable = true;
                  GameAllData.veriftEmailTime = 0;
                  _this2.btnGetEmail.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120006);

                  _this2.unschedule(func);

                  return;
                }

                _this2.btnGetEmail.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120014).format(cdTime);
              };

              _this2.schedule(func, 1);
            } else {
              _this2.btnGetEmail.interactable = true;
            }
          });
          NodeHelp.getchildlable(this.Panel, "bangdBtn", Button, function (comp) {
            NodeHelp.getchildlable(comp.node, "Label", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(8045);
            });
          });
          var time = ConfigFile.getGlobalInfoByGlobalId(264).IntValue;
          NodeHelp.getchildlable(this.Panel, "labExplain", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8039).format(time);
          });
          NodeHelp.getchildlable(this.phone, "LabelMa", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8032);
          });
          NodeHelp.getchildlable(this.phone, "LabelShow", Label, function (comp) {
            var phone = GameAllData.bandPhone;
            phone = phone.replace(phone.substring(6, phone.length), "********");
            comp.string = ConfigFile.findLanguage(8059).format(phone);
          });
          NodeHelp.getchildlable(this.email, "LabelShow", Label, function (comp) {
            var email = GameAllData.bandEmail;
            email = email.replace(email.substring(6, email.length), "********");
            comp.string = ConfigFile.findLanguage(8059).format(email);
          });
          NodeHelp.getchildlable(this.email, "LabelMa", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8034);
          });
          NodeHelp.getchildlable(this.key, "LabelMa", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8035);
          });
          NodeHelp.getchildlable(this.key, "label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8036);
          });
          NodeHelp.getchildlable(this.keyAgain, "LabelMa", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8037);
          });
          NodeHelp.getchildlable(this.btnReset.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8006);
          });
          this.EditBoxPhoneNum.placeholder = ConfigFile.findLanguage(8013);
          this.EditBoxEmailNum.placeholder = ConfigFile.findLanguage(8013);
          this.EditBox.string = "";
          this.EditBoxAgain.string = "";
        };

        _proto.closeUI = function closeUI() {
          UIManager.getInstance().closeUI(GoogleVerifySetUI);
        } //绑定安全码
        ;

        _proto.bindingSecurityCode = function bindingSecurityCode() {
          var _this3 = this;

          if (this.EditBoxAgain.string != this.EditBox.string) {
            TipManager.ChickBox(ConfigFile.findLanguage(8038));
            return;
          }

          if (this.EditBox.string.length < 6 || this.EditBox.string.length > 18) {
            TipManager.ChickBox(ConfigFile.findLanguage(8062));
            return;
          }

          if (!NumberUtil.isNumAndLetter(this.EditBox.string)) {
            TipManager.ChickBox(ConfigFile.findLanguage(8064));
            return;
          }

          var keyType = "";

          if (GameAllData.isBandingSafeCode) {
            keyType = "resetGoogle";
          } else {
            keyType = "bindGoogle";
          }

          var url = GameAllData.httpServerUrl + "user/verification/google";

          if (this.emailNode.active && this.EditBoxEmailNum.string != "") {
            HttpMgr.post(url, {
              type: keyType,
              // phone_code: this.EditBoxPhoneNum.string,
              email_code: this.EditBoxEmailNum.string,
              secret: this.EditBox.string
            }, function (data) {
              if (0 != data.code) {
                TipManager.ChickBox(ConfigFile.findLanguage(data.code));
                return;
              }

              if (data.data.begin) {
                GameAllData.bandSafeCodeTime = data.data.begin;
              }

              GameAllData.bandSafeCode = _this3.EditBox.string;
              TipManager.ChickBox(ConfigFile.findLanguage(8027));
              UIManager.getInstance().closeUI(GoogleVerifySetUI);
            });
          } else if (this.phoneNode.active && this.EditBoxPhoneNum.string != "") {
            HttpMgr.post(url, {
              type: keyType,
              phone_code: this.EditBoxPhoneNum.string,
              // email_code: this.EditBoxEmailNum.string,
              secret: this.EditBox.string
            }, function (data) {
              if (0 != data.code) {
                TipManager.ChickBox(ConfigFile.findLanguage(data.code));
                return;
              }

              if (data.data.begin) {
                GameAllData.bandSafeCodeTime = data.data.begin;
              }

              GameAllData.bandSafeCode = _this3.EditBox.string;
              TipManager.ChickBox(ConfigFile.findLanguage(8027));
              UIManager.getInstance().closeUI(GoogleVerifySetUI);
            });
          }
        };

        _proto.onClickSendPhoneCode = function onClickSendPhoneCode() {
          var _this4 = this;

          var keyType = "";

          if (GameAllData.isBandingSafeCode) {
            keyType = "resetGoogle";
          } else {
            keyType = "bindGoogle";
          }

          var url = GameAllData.httpServerUrl + "user/phone/code";
          HttpMgr.post(url, {
            type: keyType
          }, function (data) {
            if (0 != data.code) {
              TipManager.ChickBox(ConfigFile.findLanguage(data.code));
              return;
            }

            NodeHelp.getchildlable(_this4.phone, "LabelShow", Label, function (comp) {
              var phone = GameAllData.bandPhone;
              phone = phone.replace(phone.substring(6, phone.length), "********");
              comp.string = ConfigFile.findLanguage(8059).format(phone);
            });
          });
          this.btnGet.interactable = false;
          var cdTime = 60;
          this.btnGet.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120014).format(cdTime);

          var func = function func() {
            cdTime--;
            GameAllData.veriftPhoneTime = cdTime;

            if (cdTime < 1) {
              _this4.btnGet.interactable = true;
              GameAllData.veriftPhoneTime = 0;
              _this4.btnGet.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120006);

              _this4.unschedule(func);

              return;
            }

            _this4.btnGet.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120014).format(cdTime);
          };

          this.schedule(func, 1);
        };

        _proto.onClickSendEamilCode = function onClickSendEamilCode() {
          var _this5 = this;

          var keyType = "";

          if (GameAllData.isBandingSafeCode) {
            keyType = "resetGoogle";
          } else {
            keyType = "bindGoogle";
          }

          var url = GameAllData.httpServerUrl + "user/email/code";
          HttpMgr.post(url, {
            type: keyType
          }, function (data) {
            if (0 != data.code) {
              TipManager.ChickBox(ConfigFile.findLanguage(data.code));
              return;
            }

            NodeHelp.getchildlable(_this5.email, "LabelShow", Label, function (comp) {
              var email = GameAllData.bandEmail;
              email = email.replace(email.substring(6, email.length), "********");
              comp.string = ConfigFile.findLanguage(8059).format(email);
            });
          });
          this.btnGetEmail.interactable = false;
          var cdTime = 60;
          this.btnGetEmail.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120014).format(cdTime);

          var func = function func() {
            cdTime--;
            GameAllData.veriftEmailTime = cdTime;

            if (cdTime < 1) {
              _this5.btnGetEmail.interactable = true;
              GameAllData.veriftEmailTime = 0;
              _this5.btnGetEmail.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120006);

              _this5.unschedule(func);

              return;
            }

            _this5.btnGetEmail.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120014).format(cdTime);
          };

          this.schedule(func, 1);
        };

        _proto.onClickChange = function onClickChange() {
          if (GameAllData.isBandingEmail || GameAllData.isBandingPhone) {
            UIManager.getInstance().openUI(SetSecondaryUI, 12, function (ui, args) {
              ui.setPanel(5);
            }, undefined, null);
          } else {
            UIManager.getInstance().openUI(SetSecondaryUI, 12, function (ui, args) {
              ui.setPanel(4);
            }, undefined, null);
          }
        };

        _proto.checkPhoneAndEmailNode = function checkPhoneAndEmailNode() {
          if (GameAllData.isBandingEmail) {
            this.emailNode.active = true;
            this.phoneNode.active = false;
          } else if (GameAllData.isBandingPhone) {
            this.emailNode.active = false;
            this.phoneNode.active = true;
          }
        };

        _proto.onDestroy = function onDestroy() {
          _BaseUI.prototype.onDestroy.call(this);
        };

        return GoogleVerifySetUI;
      }(BaseUI), _class3.className = "GoogleVerifySetUI", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Panel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "phone", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "email", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "key", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "keyAgain", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "phoneNode", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "emailNode", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "EditBoxPhoneNum", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "EditBoxEmailNum", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "EditBox", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "EditBoxAgain", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "timeLab", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "btnGet", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "btnGetEmail", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "btnReset", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GuardCtr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameManager.ts', './MainGame.ts', './UIHelp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, Animation, sp, Enum, Node, CCFloat, Vec2, math, Component, GameManager, MainGame, UIHelp;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Animation = module.Animation;
      sp = module.sp;
      Enum = module.Enum;
      Node = module.Node;
      CCFloat = module.CCFloat;
      Vec2 = module.Vec2;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      MainGame = module.MainGame;
    }, function (module) {
      UIHelp = module.UIHelp;
    }],
    execute: function () {
      exports({
        ACTIONTYPE: void 0,
        CIRCUITTYPE: void 0,
        DIRECTTYPE: void 0
      });

      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "8c049Kv9G1DBrMDmZ86/xVR", "GuardCtr", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CIRCUITTYPE;

      (function (CIRCUITTYPE) {
        CIRCUITTYPE[CIRCUITTYPE["CT_POINT"] = 1] = "CT_POINT";
        CIRCUITTYPE[CIRCUITTYPE["CT_RANDOM"] = 2] = "CT_RANDOM";
      })(CIRCUITTYPE || (CIRCUITTYPE = exports('CIRCUITTYPE', {})));

      var ACTIONTYPE;

      (function (ACTIONTYPE) {
        ACTIONTYPE[ACTIONTYPE["AT_NONE"] = 0] = "AT_NONE";
        ACTIONTYPE[ACTIONTYPE["AT_MOVE"] = 1] = "AT_MOVE";
        ACTIONTYPE[ACTIONTYPE["AT_IDLE"] = 2] = "AT_IDLE";
      })(ACTIONTYPE || (ACTIONTYPE = exports('ACTIONTYPE', {})));

      var DIRECTTYPE;

      (function (DIRECTTYPE) {
        DIRECTTYPE[DIRECTTYPE["DT_UP"] = 1] = "DT_UP";
        DIRECTTYPE[DIRECTTYPE["DT_RIGHTUP"] = 2] = "DT_RIGHTUP";
        DIRECTTYPE[DIRECTTYPE["DT_RIGHT"] = 3] = "DT_RIGHT";
        DIRECTTYPE[DIRECTTYPE["DT_RIGHTDOWN"] = 4] = "DT_RIGHTDOWN";
        DIRECTTYPE[DIRECTTYPE["DT_DOWN"] = 5] = "DT_DOWN";
        DIRECTTYPE[DIRECTTYPE["DT_LEFTDOWN"] = 6] = "DT_LEFTDOWN";
        DIRECTTYPE[DIRECTTYPE["DT_LEFT"] = 7] = "DT_LEFT";
        DIRECTTYPE[DIRECTTYPE["DT_LEFTUP"] = 8] = "DT_LEFTUP";
      })(DIRECTTYPE || (DIRECTTYPE = exports('DIRECTTYPE', {})));

      var temp_V3_1 = new Vec3();
      var temp_V3_2 = new Vec3();
      var temp_V3_3 = new Vec3();
      var GuardCtr = exports('GuardCtr', (_dec = ccclass('GuardCtr'), _dec2 = property(Animation), _dec3 = property({
        type: sp.Skeleton
      }), _dec4 = property({
        type: Enum(CIRCUITTYPE)
      }), _dec5 = property({
        type: [Node],
        visible: function visible() {
          return this.GuardType == CIRCUITTYPE.CT_POINT;
        }
      }), _dec6 = property({
        type: CCFloat,
        visible: function visible() {
          return this.GuardType == CIRCUITTYPE.CT_RANDOM;
        }
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GuardCtr, _Component);

        function GuardCtr() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "animationCtl", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spineAni", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "GuardType", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "roadPoint", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "radius", _descriptor5, _assertThisInitialized(_this));

          _this.curPointIndex = 0;
          _this.state = ACTIONTYPE.AT_NONE;
          _this.lastStateTime = 0;
          _this.curTarget = null;
          _this.curDirect = DIRECTTYPE.DT_UP;
          _this._mainGame = null;
          _this._follow = null;
          _this._moveCb = null;
          _this._loop = false;
          _this.lastSpineAni = null;
          return _this;
        }

        var _proto = GuardCtr.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          if (this.animationCtl) {
            this.animationCtl.on("stop", this.onStop, this);
            this.animationCtl.stop();
          }

          if (this.spineAni) {
            //this.spineAni.setCompleteListener(this.onSpingComplete.bind(this));
            //this.spineAni.animation = 'c';// 
            //this.spineAni.loop = true;// 是否循环
            var c = this.node.children[0].children;
            c.forEach(function (item) {
              item.getComponent(sp.Skeleton).setCompleteListener(_this2.onSpingComplete.bind(_this2));
              item.active = false;
            });
          }
        };

        _proto.onSpingComplete = function onSpingComplete(trackEntry) {
          if (this.state == ACTIONTYPE.AT_IDLE) {
            this.playAnimation(this.getAnimationID());
          } else if (this.state == ACTIONTYPE.AT_MOVE) {
            this.playAnimation(this.getAnimationID());
          }
        };

        _proto.onStop = function onStop(type, state) {
          if (this.state == ACTIONTYPE.AT_IDLE) {
            this.playAnimation(this.getAnimationID());
          } else if (this.state == ACTIONTYPE.AT_MOVE) {
            this.playAnimation(this.getAnimationID());
          }
        };

        _proto.getSkeleton = function getSkeleton() {
          if (this.state == ACTIONTYPE.AT_IDLE) {
            var a = this.node.children[0].getChildByName("1");
            if (a) return a.getComponent(sp.Skeleton);
          } else if (this.state == ACTIONTYPE.AT_MOVE) {
            var _a = this.node.children[0].getChildByName("2");

            if (_a) return _a.getComponent(sp.Skeleton);
          }

          return this.spineAni;
        };

        _proto.playerSpine = function playerSpine(spine) {
          switch (this.curDirect) {
            case DIRECTTYPE.DT_UP:
              spine.node.setScale(1, 1, 1);
              spine.animation = "a";
              break;

            case DIRECTTYPE.DT_RIGHTUP:
              spine.node.setScale(1, 1, 1);
              spine.animation = "b";
              break;

            case DIRECTTYPE.DT_RIGHT:
              spine.node.setScale(1, 1, 1);
              spine.animation = "c";
              break;

            case DIRECTTYPE.DT_RIGHTDOWN:
              spine.node.setScale(1, 1, 1);
              spine.animation = "d";
              break;

            case DIRECTTYPE.DT_DOWN:
              spine.node.setScale(1, 1, 1);
              spine.animation = "e";
              break;

            case DIRECTTYPE.DT_LEFTDOWN:
              spine.node.setScale(-1, 1, 1);
              spine.animation = "d";
              break;

            case DIRECTTYPE.DT_LEFT:
              spine.node.setScale(-1, 1, 1);
              spine.animation = "c";
              break;

            case DIRECTTYPE.DT_LEFTUP:
              spine.node.setScale(-1, 1, 1);
              spine.animation = "b";
              break;
          }
        };

        _proto.playAnimation = function playAnimation(id) {
          if (this.animationCtl) {
            var animationState = this.animationCtl.getState(id);

            if (animationState) {
              this.animationCtl.play(id);
            }
          } else if (this.spineAni) {
            var cur = this.getSkeleton();

            if (cur != this.lastSpineAni) {
              cur.node.active = true;
              this.lastSpineAni && (this.lastSpineAni.node.active = false);
            }

            this.lastSpineAni = cur;
            this.playerSpine(cur);
          }
        };

        _proto.getNextPoint = function getNextPoint() {
          var pointsize = this.roadPoint.length;
          if (pointsize < 1) return null;

          if (this._loop) {
            if (this.curPointIndex >= pointsize || this.curPointIndex < 0) this.curPointIndex = 0;
          } else {
            if (this.curPointIndex >= pointsize || this.curPointIndex < 0) return null;
          }

          return this.roadPoint[this.curPointIndex++];
        };

        _proto.setState = function setState(newState) {
          var old = this.state;
          this.state = newState;
          this.lastStateTime = UIHelp.getTimeMask();

          switch (this.state) {
            case ACTIONTYPE.AT_IDLE:
              this.playAnimation(this.getAnimationID());
              break;

            case ACTIONTYPE.AT_MOVE:
              this.playAnimation(this.getAnimationID());
              break;
          }
        };

        _proto.initPointMode = function initPointMode() {
          var point = this.getNextPoint();

          if (point) {
            point.getWorldPosition(temp_V3_1);
            this.node.setWorldPosition(temp_V3_1);
          }
        };

        _proto.getDirectID = function getDirectID(source, target) {
          var wp1 = source.worldPosition;
          var wp2 = target.worldPosition;
          var v1 = new Vec2(wp1.x, wp1.y);
          var v2 = new Vec2(wp2.x, wp2.y);
          var v3 = Vec2.subtract(new Vec2(), v1, v2);
          var angle = Vec2.angle(v3, Vec2.UNIT_X);
          var deg = math.toDegree(angle);

          if (v1.x >= v2.x) {
            if (deg < 30) return DIRECTTYPE.DT_LEFT;
            if (deg > 150) return DIRECTTYPE.DT_RIGHT;

            if (v1.y >= v2.y) {
              if (deg > 75 && deg < 125) return DIRECTTYPE.DT_DOWN;
              if (deg >= 125 && deg < 150) return DIRECTTYPE.DT_LEFTDOWN;
              if (deg >= 30 && deg < 75) return DIRECTTYPE.DT_LEFTDOWN;
            } else {
              if (deg > 75 && deg < 125) return DIRECTTYPE.DT_UP;
              if (deg >= 125 && deg < 150) return DIRECTTYPE.DT_LEFTUP;
              if (deg >= 30 && deg < 75) return DIRECTTYPE.DT_LEFTUP;
            }
          } else {
            if (deg < 30) return DIRECTTYPE.DT_LEFT;
            if (deg > 150) return DIRECTTYPE.DT_RIGHT;

            if (v1.y >= v2.y) {
              if (deg > 75 && deg < 125) return DIRECTTYPE.DT_DOWN;
              if (deg >= 125 && deg < 150) return DIRECTTYPE.DT_RIGHTDOWN;
              if (deg >= 30 && deg < 75) return DIRECTTYPE.DT_RIGHTDOWN;
            } else {
              if (deg > 75 && deg < 125) return DIRECTTYPE.DT_UP;
              if (deg >= 125 && deg < 150) return DIRECTTYPE.DT_RIGHTUP;
              if (deg >= 30 && deg < 75) return DIRECTTYPE.DT_RIGHTUP;
            }
          }

          return this.curDirect;
        };

        _proto.getAnimationID = function getAnimationID() {
          var i1 = 1;
          if (this.state == ACTIONTYPE.AT_MOVE) i1 = 2;
          return i1 + "-" + this.curDirect;
        };

        _proto.setDirect = function setDirect(dirID) {
          if (dirID == this.curDirect) return;
          this.curDirect = dirID;
          var id = this.getAnimationID();
          this.playAnimation(id);
        };

        _proto.startMoveToNode = function startMoveToNode() {
          var next = this.getNextPoint();
          if (!next) return;
          this.curTarget = next;
          this.setState(ACTIONTYPE.AT_MOVE);
        };

        _proto.startMove = function startMove(target, cb) {
          var _this3 = this;

          this._moveCb = cb;
          this._mainGame = GameManager.getInstance().getGame(MainGame);
          this.roadPoint = [];
          this.curPointIndex = 0;
          target.children.forEach(function (item) {
            _this3.roadPoint.push(item);
          });
          this.startMoveToNode();
        };

        _proto.setParentToScene = function setParentToScene() {
          this._mainGame = GameManager.getInstance().getGame(MainGame);

          this._mainGame.scensTree.insertNode(this.node);
        };

        _proto.start = function start() {
          this.setState(ACTIONTYPE.AT_IDLE); // this.startMoveToNode();
        };

        _proto.onMoveStop = function onMoveStop() {
          this.setState(ACTIONTYPE.AT_IDLE);
          this._moveCb && this._moveCb();
          this._moveCb = null;
        };

        _proto.onMove = function onMove(deltaTime) {
          if (!this.curTarget) {
            return this.onMoveStop();
          }

          this.node.getWorldPosition(temp_V3_1);
          this.curTarget.getWorldPosition(temp_V3_2);
          var diff = Math.abs(Vec3.distance(temp_V3_1, temp_V3_2));

          if (diff < 10) {
            var next = this.getNextPoint();
            if (!next) return this.onMoveStop();
            this.curTarget = next;
          }

          this.curTarget.getWorldPosition(temp_V3_3);
          var curDir = this.getDirectID(this.node, this.curTarget);
          this.setDirect(curDir);
          Vec3.subtract(temp_V3_2, temp_V3_3, temp_V3_1);
          temp_V3_2.normalize();
          temp_V3_2.multiplyScalar(300 * deltaTime);
          temp_V3_1.add(temp_V3_2);
          this.node.setWorldPosition(temp_V3_1);

          this._mainGame.scensTree.moveNode(this.node);
        };

        _proto.update = function update(deltaTime) {
          if (this.state == ACTIONTYPE.AT_MOVE) {
            this.onMove(deltaTime);
          }
        };

        return GuardCtr;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "animationCtl", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spineAni", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "GuardType", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return CIRCUITTYPE.CT_POINT;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "roadPoint", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "radius", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 80;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HandCtl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './OperaleDef.ts', './NodeHelp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Vec3, UITransform, resources, SpriteFrame, Component, OperaleData, NodeHelp;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      resources = module.resources;
      SpriteFrame = module.SpriteFrame;
      Component = module.Component;
    }, function (module) {
      OperaleData = module.OperaleData;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "083e9qtYcNPy5CAmQ9klrtJ", "HandCtl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          menu = _decorator.menu;
      var HandCtl = exports('HandCtl', (_dec = property(Sprite), _dec2 = property(Sprite), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(HandCtl, _Component);

        function HandCtl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "icon", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "item", _descriptor2, _assertThisInitialized(_this));

          _this.moveCB = null;
          _this.moveLock = false;
          _this._cbdata = null;
          _this._mode = "";
          return _this;
        }

        var _proto = HandCtl.prototype;

        _proto.onLoad = function onLoad() {
          this.node.active = false;
          this.icon.node.active = true;
          this.item.node.active = false;
        };

        _proto.start = function start() {};

        _proto.startTow = function startTow(pos, mode, data, cb) {
          var operaledata = OperaleData[mode];

          if (!operaledata) {
            return;
          } //if(this.node.active) return;


          this.node.active = true;
          this.node.setWorldPosition(new Vec3(pos.x, pos.y, 0));
          this.moveCB = cb;
          this._mode = mode;
          this._cbdata = data;
          var self = this;

          if (this._cbdata && this._cbdata.modeid) {
            NodeHelp.loadIcon("propIcon/itemicon", this._cbdata.modeid.toString(), function (res) {
              self.icon.spriteFrame = res;
              var scale = NodeHelp.setScopeLimitation(self.icon.node.getComponent(UITransform), 80, 80);
              self.icon.node.setScale(new Vec3(scale, scale, 1));
              self.node.active = true;
              self.node.setWorldPosition(new Vec3(pos.x, pos.y, 0));
            });
          } else {
            if (!operaledata.icon || operaledata.icon == "") {
              self.icon.spriteFrame = null;
            } else {
              var iconname = "icon/" + operaledata.icon + "/spriteFrame";
              console.log("hand=>", iconname);
              resources.load(iconname, SpriteFrame, function (error, spriteRes) {
                if (spriteRes && self.icon && self.icon.isValid) {
                  // let scale = NodeHelp.setScopeLimitation(self.icon.node.getComponent(UITransform), 80, 80)
                  self.icon.node.setScale(new Vec3(1, 1, 1));
                  self.icon.spriteFrame = spriteRes;
                  self.node.active = true;
                  self.node.setWorldPosition(new Vec3(pos.x, pos.y, 0));
                }

                if (error) console.log(error);
              });
            }
          }
        };

        _proto.stopTow = function stopTow(pos) {
          var self = this;

          if (this.node.active) {
            this.scheduleOnce(function () {
              self.icon.spriteFrame = null;
              self.item.spriteFrame = null;
              self.moveCB = null;
              self._cbdata = null;
              self._mode = "";
              self.item.node.active = false;
              self.node.active = false;
            }, 0.01);
          }
        };

        _proto.onMove = function onMove(offset, pos) {
          if (!this.node.active) return;
          this.moveLock = true;
          var nodepos = this.node.getWorldPosition(new Vec3());
          nodepos.x = pos.x;
          nodepos.y = pos.y;
          this.node.setWorldPosition(nodepos);
          if (this.moveCB) this.moveCB(offset, pos, this._cbdata);
        };

        return HandCtl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "icon", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "item", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HotUpdateView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstValue.ts', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './TipManager.ts', './UIManager.ts', './HttpMgr.ts', './NodeHelp.ts', './NumberUtil.ts', './PlatformUtil.ts', './UIHelp.ts', './BaseUI.ts', './UILogin.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, ProgressBar, Asset, game, sys, view, UITransform, Vec3, ConstValue, ConfigFile, GameAllData, EventManager, MessageManager, TipManager, UIManager, HttpMgr, NodeHelp, NumberUtil, PlatformUtil, UIHelp, BaseUI, UILogin;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      ProgressBar = module.ProgressBar;
      Asset = module.Asset;
      game = module.game;
      sys = module.sys;
      view = module.view;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
    }, function (module) {
      ConstValue = module.ConstValue;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      HttpMgr = module.HttpMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }, function (module) {
      PlatformUtil = module.PlatformUtil;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      UILogin = module.UILogin;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _class3;

      cclegacy._RF.push({}, "8a38eVk3K5DKa2ri6ObfWl4", "HotUpdateView", undefined);

      var jsb = window.jsb;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var HotUpdateView = exports('HotUpdateView', (_dec = ccclass('HotUpdateView'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(ProgressBar), _dec8 = property(Asset), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(HotUpdateView, _BaseUI);

        function HotUpdateView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "nodProgress", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodMessageBox", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labDownloadInfo", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labMessageInfo", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labStepInfo", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pgbDownload", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "manifest", _descriptor7, _assertThisInitialized(_this));

          _this._updating = false;
          _this._canRetry = false;
          _this._storagePath = '';
          _this._am = null;
          _this._checkListener = null;
          _this._updateListener = null;
          _this._failCount = 0;
          _this.versionCompareHandle = null;
          _this.time = 0;
          return _this;
        }

        var _proto = HotUpdateView.prototype;

        _proto.showMessage = function showMessage(text, cb) {
          this.nodMessageBox.active = true;
          this.labMessageInfo.string = text;
        };

        _proto.checkCb = function checkCb(event) {
          var _this2 = this;

          console.log('Code: ' + event.getEventCode());

          switch (event.getEventCode()) {
            case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
              UIHelp.closeLoadingTA();
              console.log("No local manifest file found, hot update skipped.");
              var str = ConfigFile.findLanguage(10012) == "10012" ? "Update file not found, please try again…" : ConfigFile.findLanguage(10012);
              TipManager.ChickBox(str, function () {
                // this.retry();
                _this2.checkUpdateTry();
              });
              break;

            case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
            case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
              UIHelp.closeLoadingTA();
              var text = "Fail to download manifest file, hot update skipped." + event.getMessage();
              console.log(text);
              var strF = ConfigFile.findLanguage(10013) == "10013" ? "Failed to connect to the server, please try again…" : ConfigFile.findLanguage(10013); // TipManager.ChickBox(strF, () => {
              //     // this.skipUpdate();
              //     // this.retry();
              //     this.checkUpdateTry();
              // });

              this.checkUpdateTry();
              break;

            case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
              UIHelp.closeLoadingTA();
              console.log("Already up to date with the latest remote version.");
              this.skipUpdate();
              break;

            case jsb.EventAssetsManager.NEW_VERSION_FOUND:
              UIHelp.closeLoadingTA();
              var resSize = NumberUtil.numberFormat(this._am.getTotalBytes() / 1024 / 1024, ConstValue.DECIMAL_PLACES_NUM);
              console.log("New version found, please try to update.this._am.getTotalBytes", this._am.getTotalBytes()); // TipManager.ChickBox("游戏资源有新版本(下载大小%sMB)是否开始下载？".format(resSize), () => {

              var foundStr = ConfigFile.findLanguage(10006);
              foundStr = foundStr == "10006" ? "New version for the game detected (Download Size: %s)\nWould you like to download now?" : foundStr;
              TipManager.ChickBox(foundStr.format(resSize), function () {
                _this2.nodProgress.active = true;
                var mbStr = ConfigFile.findLanguage(10010) == "10010" ? "Download progress:%s/%sMB" : ConfigFile.findLanguage(10010);
                _this2.labDownloadInfo.string = mbStr.format(0, resSize); // this.labDownloadInfo.string = "下载进度：0/%sMB".format(resSize);

                _this2.pgbDownload.progress = 0;
                _this2.labStepInfo.node.active = false;
                _this2._updating = false;

                _this2.hotUpdate();
              });
              return;

            default:
              console.log("checkCb default");
              return;
          }

          this._am.setEventCallback(null);

          this._checkListener = null;
          this._updating = false;
        };

        _proto.updateCb = function updateCb(event) {
          var needRestart = false;
          var failed = false;

          switch (event.getEventCode()) {
            case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
              //这个case应该是进不来的，上面检测时就做了处理了
              console.log("No local manifest file found, hot update skipped.");
              failed = true;
              break;

            case jsb.EventAssetsManager.UPDATE_PROGRESSION:
              var curSize = NumberUtil.numberFormat(event.getDownloadedBytes() / 1024 / 1024, ConstValue.DECIMAL_PLACES_NUM);
              var totalSize = NumberUtil.numberFormat(event.getTotalBytes() / 1024 / 1024, ConstValue.DECIMAL_PLACES_NUM); // this.labDownloadInfo.string = "下载进度：%s/%sMB".format(curSize, totalSize);

              var jinduStr = ConfigFile.findLanguage(10010) == "10010" ? "Download progress:%s/%sMB" : ConfigFile.findLanguage(10010);
              this.labDownloadInfo.string = jinduStr.format(curSize, totalSize);
              this.pgbDownload.progress = event.getPercent(); // this.panel.fileProgress.progress = event.getPercentByFile();
              // this.panel.fileLabel.string = event.getDownloadedFiles() + ' / ' + event.getTotalFiles();
              // console.log(this.panel.fileLabel.string, this.panel.byteLabel.string);
              // var msg = event.getMessage();
              // if (msg) {
              //     this.panel.info.string = 'Updated file: ' + msg;
              //     // cc.log(event.getPercent()/100 + '% : ' + msg);
              // }

              break;

            case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
            case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
              //这个case应该是进不来的，上面检测时就做了处理了
              console.log("Fail to download manifest file, hot update skipped.");
              failed = true;
              break;

            case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
              //这个case应该是进不来的，上面检测时就做了处理了
              console.log("Already up to date with the latest remote version.");
              failed = true;
              break;

            case jsb.EventAssetsManager.UPDATE_FINISHED:
              console.log("Update finished. " + event.getMessage());
              needRestart = true;
              break;

            case jsb.EventAssetsManager.UPDATE_FAILED:
              var text = "Update failed. " + event.getMessage();
              console.log(text);
              this._updating = false;
              this._canRetry = true; // TipManager.ChickBox(text, () => {
              //     this.retry();
              // });
              // let strF = ConfigFile.findLanguage(10013) == "10013" ? "Failed to connect to the server, please try again…" : ConfigFile.findLanguage(10013);
              // TipManager.ChickBox(strF, () => {
              //     this.retry();
              // });

              this.retry();
              break;

            case jsb.EventAssetsManager.ERROR_UPDATING:
              var text1 = "Asset update error: " + event.getAssetId() + ", " + event.getMessage();
              console.log(text1); // TipManager.tip(text1);

              break;

            case jsb.EventAssetsManager.ERROR_DECOMPRESS:
              console.log(event.getMessage()); // TipManager.tip(event.getMessage());

              break;

            default:
              console.log("updateCb default");
              break;
          }

          if (failed) {
            this._am.setEventCallback(null);

            this._updateListener = null;
            this._updating = false;
          }

          if (needRestart) {
            this._am.setEventCallback(null);

            this._updateListener = null; // Prepend the manifest's search path

            var searchPaths = jsb.fileUtils.getSearchPaths();

            var newPaths = this._am.getLocalManifest().getSearchPaths();

            console.log(JSON.stringify(newPaths));
            Array.prototype.unshift.apply(searchPaths, newPaths); // This value will be retrieved and appended to the default search path during game startup,
            // please refer to samples/js-tests/main.js for detailed usage.
            // !!! Re-add the search paths in main.js is very important, otherwise, new scripts won't take effect.

            localStorage.setItem('HotUpdateSearchPaths', JSON.stringify(searchPaths));
            jsb.fileUtils.setSearchPaths(searchPaths); // restart game.

            setTimeout(function () {
              game.restart();
            }, 1000);
          }
        } //测试用的(没用了)
        ;

        _proto.loadCustomManifest = function loadCustomManifest() {// if (this._am.getState() === jsb.AssetsManager.State.UNINITED) {
          //     var manifest = new jsb.Manifest(customManifestStr, this._storagePath);
          //     this._am.loadLocalManifest(manifest, this._storagePath);
          //     console.log("Using custom manifest");
          // }
        };

        _proto.retry = function retry() {
          if (!this._updating && this._canRetry) {
            // this.panel.retryBtn.active = false;
            this._canRetry = false;

            this._am.downloadFailedAssets();

            console.log("Retry failed Assets...");
          }
        };

        _proto.checkUpdate = function checkUpdate() {
          UIHelp.openLoadingTA();

          if (this._updating) {
            console.log("Checking or updating ...");
            return;
          }

          if (this._am.getState() === jsb.AssetsManager.State.UNINITED) {
            this._am.loadLocalManifest(this.manifest.nativeUrl);
          }

          if (!this._am.getLocalManifest() || !this._am.getLocalManifest().isLoaded()) {
            console.log("Failed to load local manifest ...");
            return;
          }

          this._am.setEventCallback(this.checkCb.bind(this));

          this._am.checkUpdate();

          this._updating = true;
        };

        _proto.checkUpdateTry = function checkUpdateTry() {
          UIHelp.openLoadingTA(); // if (this._updating) {
          //     console.log("Checking or updating ...");
          //     return;
          // }

          this._am.loadLocalManifest(this.manifest.nativeUrl);

          if (!this._am.getLocalManifest() || !this._am.getLocalManifest().isLoaded()) {
            console.log("Failed to load local manifest ...");
            return;
          }

          this._am.setEventCallback(this.checkCb.bind(this));

          this._am.checkUpdate();

          this._updating = true;
        };

        _proto.hotUpdate = function hotUpdate() {
          if (this._am && !this._updating) {
            this._am.setEventCallback(this.updateCb.bind(this));

            if (this._am.getState() === jsb.AssetsManager.State.UNINITED) {
              this._am.loadLocalManifest(this.manifest.nativeUrl);
            }

            this._failCount = 0;

            this._am.update();

            this._updating = true;
          }
        };

        _proto.onLoad = function onLoad() {
          var _this3 = this;

          this.nodProgress.active = true; // this.labStepInfo.string = "Loading...";//请求版本信息.......

          PlatformUtil.buriedPoint("hotUpdatePersonNumber", "hotUpdate-number", -1);
          this.labStepInfo.string = ConfigFile.findLanguage(10008) == "10008" ? "Loading..." : ConfigFile.findLanguage(10008); //打点计时

          this.schedule(function () {
            _this3.addTime();
          }, 1);
        };

        _proto.onDisable = function onDisable() {
          //取消计时发送打点数据
          this.unschedule(this.addTime());
          var f = "-";

          if (sys.Platform.IOS === sys.platform) {
            f = "_";
          }

          PlatformUtil.buriedPoint("hotUpdateCostTime", "hotUpdate" + f + "time", this.time);
        };

        _proto.onDestroy = function onDestroy() {
          if (this._updateListener) {
            this._am.setEventCallback(null);

            this._updateListener = null;
          }
        };

        _proto.start = function start() {
          var _this4 = this;

          var target = this.node.getChildByName("Node");
          var cs = view.getVisibleSize();
          var scale = NodeHelp.setScopeLimitationInSizeNew(target.getComponent(UITransform), cs.width, cs.height);
          target.setScale(new Vec3(scale, scale, 1));
          console.log("GameAllData.httpServerUrlGameAllData.httpServerUrl+++++", GameAllData.httpServerUrl);
          HttpMgr.post(GameAllData.httpServerUrl + "user/version", {
            operater_id: 1001
          }, function (data) {
            var manifestVersion = PlatformUtil.getManifestVersion(_this4.manifest);
            var version = manifestVersion.split('.');

            if (parseInt(version[0]) < data.engine_version || parseInt(version[1]) < data.app_version) {
              var str = ConfigFile.findLanguage(10009);
              str = str == "10009" ? "A new version is available. Do you want to download the installation package?" : str;
              TipManager.ChoiceBox(str, function () {
                // TipManager.ChoiceBox("已有新的大版本，是否下载安装包？", () => {
                _this4.skipUpdate();
              }, function () {// 跳转到下载界面
              });
              return;
            }

            _this4.init();

            _this4.checkUpdate();
          });
        } // use this for initialization
        ;

        _proto.init = function init() {
          // Hot update is only available in Native build
          if (!jsb) {
            return;
          }

          this._storagePath = (jsb.fileUtils ? jsb.fileUtils.getWritablePath() : '/') + 'remote-assets';
          console.log('Storage path for remote asset : ' + this._storagePath);
          var str = ConfigFile.findLanguage(10011);
          this.labStepInfo.string = str == "10011" ? "Compare version information…" : str; // this.labStepInfo.string = "Loading...";//比较版本信息...........
          // Setup your own version compare handler, versionA and B is versions in string
          // if the return value greater than 0, versionA is greater than B,
          // if the return value equals 0, versionA equals to B,
          // if the return value smaller than 0, versionA is smaller than B.

          this.versionCompareHandle = function (versionA, versionB) {
            console.log("JS Custom Version Compare: version A is " + versionA + ', version B is ' + versionB);
            var vA = versionA.split('.');
            var vB = versionB.split('.');

            for (var i = 0; i < vA.length; ++i) {
              var a = parseInt(vA[i]);
              var b = parseInt(vB[i] || '0');

              if (a === b) {
                continue;
              } else {
                return a - b;
              }
            }

            if (vB.length > vA.length) {
              return -1;
            } else {
              return 0;
            }
          }; // Init with empty manifest url for testing custom manifest


          this._am = new jsb.AssetsManager(ConstValue.PROJECT_MANIFEST_FILE, this._storagePath, this.versionCompareHandle); // Setup the verification callback, but we don't have md5 check function yet, so only print some message
          // Return true if the verification passed, otherwise return false

          this._am.setVerifyCallback(function (path, asset) {
            // When asset is compressed, we don't need to check its md5, because zip file have been deleted.
            var compressed = asset.compressed; // Retrieve the correct md5 value.

            var expectedMD5 = asset.md5; // asset.path is relative path and path is absolute.

            var relativePath = asset.path; // The size of asset file, but this value could be absent.

            var size = asset.size;

            if (compressed) {
              console.log("Verification passed : " + relativePath);
              return true;
            } else {
              console.log("Verification passed : " + relativePath + " (" + expectedMD5 + ")");
              return true;
            }
          });

          console.log("Hot update is ready, please check or directly update.");
        };

        _proto.onClickOk = function onClickOk() {
          this.skipUpdate();
        };

        _proto.skipUpdate = function skipUpdate() {
          UIManager.getInstance().closeUI(HotUpdateView);
          var token = sys.localStorage.getItem("token");

          if (token) {
            console.log("token", token);
            EventManager.getInstance().trigger(MessageManager.Custom.ConnectWebSocket);
          } else if (GameAllData.jsonData && GameAllData.jsonData.s && GameAllData.jsonData.time && GameAllData.jsonData.t) {
            var url = GameAllData.httpServerUrl + "agent/login_web";
            var params = {
              //token: paramsData.access_token,
              s: GameAllData.jsonData.s,
              i: GameAllData.jsonData.i,
              time: GameAllData.jsonData.time,
              t: GameAllData.jsonData.t,
              agent_id: GameAllData.channelId,
              operater_id: GameAllData.operatorId,
              invite_code: GameAllData.invitationCode,
              language_id: GameAllData.languageId
            };
            EventManager.getInstance().trigger(MessageManager.Custom.RequestLogin, url, params);
          } else UIManager.getInstance().openUI(UILogin, 10, undefined, undefined, undefined, true);
        };

        _proto.addTime = function addTime() {
          this.time++;
        };

        return HotUpdateView;
      }(BaseUI), _class3.className = "HotUpdateView", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nodProgress", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "nodMessageBox", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labDownloadInfo", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "labMessageInfo", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "labStepInfo", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "pgbDownload", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "manifest", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HttpMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PlatformUtil.ts'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, cclegacy, sys, PlatformUtil;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
    }, function (module) {
      PlatformUtil = module.PlatformUtil;
    }],
    execute: function () {
      cclegacy._RF.push({}, "02c2d2PPZtHaZ8V+X1oV+dW", "HttpMgr", undefined);

      var HttpMgr = exports('HttpMgr', /*#__PURE__*/function () {
        function HttpMgr() {}

        HttpMgr.request = function request(options) {
          return new Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();

            xhr.onreadystatechange = function () {
              if (xhr.readyState === 4 && xhr.status >= 200 && xhr.status < 300) {
                if (xhr.responseText && xhr.responseText != "") {
                  var res = JSON.parse(xhr.responseText);
                  resolve(res);
                }
                
                console.log("xhr.responseText::--->" , xhr.responseText);

              }
            };

            xhr.onerror = function (error) {
              console.log("http request error --->", error);
              resolve({
                code: 112071
              });
            };

            xhr.timeout = options.timeout || 50000; // 5 seconds for timeout

            var method = options.method || "GET";
            var url = PlatformUtil.getLocalPort(options.url);
            xhr.open(method, url, true);

            if (method == "get" || method == "GET") {
              xhr.send();
            } else {
              options.params = options.params || {};
              xhr.setRequestHeader("Content-type", "application/json;charset=utf-8");
              xhr.setRequestHeader("token", sys.localStorage.getItem("token"));
              xhr.send(JSON.stringify(options.params));
            }
          });
        };

        HttpMgr.get = /*#__PURE__*/function () {
          var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url, callback) {
            var ret;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return this.request({
                      method: "GET",
                      url: url
                    });

                  case 2:
                    ret = _context.sent;
                    callback && callback(ret);
                    return _context.abrupt("return", ret);

                  case 5:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function get(_x, _x2) {
            return _get.apply(this, arguments);
          }

          return get;
        }();

        HttpMgr.post = /*#__PURE__*/function () {
          var _post = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url, params, callback, callbackData) {
            var ret;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return this.request({
                      method: "POST",
                      url: url,
                      params: params
                    });

                  case 2:
                    ret = _context2.sent;
                    callback && callback(ret, callbackData);
                    return _context2.abrupt("return", ret);

                  case 5:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function post(_x3, _x4, _x5, _x6) {
            return _post.apply(this, arguments);
          }

          return post;
        }();

        return HttpMgr;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IconAnime.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventManager.ts', './MessageManager.ts', './NodeHelp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, Sprite, tween, math, Component, EventManager, MessageManager, NodeHelp;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Sprite = module.Sprite;
      tween = module.tween;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "16898/SI9RMcoHep5urbwFa", "IconAnime", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var temp_v3_1 = new Vec3();
      var IconAnime = exports('IconAnime', (_dec = ccclass('IconAnime'), _dec2 = property(Sprite), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(IconAnime, _Component);

        function IconAnime() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "sp", _descriptor, _assertThisInitialized(_this));

          _this._target = null;
          return _this;
        }

        var _proto = IconAnime.prototype;

        _proto.start = function start() {};

        _proto.targetAni = function targetAni() {
          if (!this.node) return;
          if (!this._target) return;
          if (!temp_v3_1) return;

          try {
            if (this._target && this._target.getWorldPosition) {
              this._target.getWorldPosition(temp_v3_1);

              tween(this.node).to(1, {
                worldPosition: new Vec3(temp_v3_1)
              }, {
                easing: "quintOut"
              }).call(function () {
                EventManager.getInstance().trigger(MessageManager.Custom.BAGITEMEVENT, {});
              }).removeSelf().start();
            }
          } catch (_unused) {
            console.warn("莫名其妙的bug");
          }
        };

        _proto.randomDirect = function randomDirect() {
          var x = (math.randomRangeInt(1, 100) - 50) * 3;
          var y = (math.randomRangeInt(1, 100) - 50) * 3;
          var self = this;

          if (!self) {
            return;
          }

          if (!this.node) return;
          tween(this.node).by(0.5, {
            position: new Vec3(x, y, 0)
          }, {
            easing: "quintOut"
          }).call(function () {
            self.targetAni();
          }).start();
        };

        _proto.initUI = function initUI(BotanyCropsId, target) {
          if (!this.node) return;
          var self = this;
          this._target = target;
          NodeHelp.loadIcon("propIcon/itemicon", BotanyCropsId.toString(), function (res) {
            if (self && self.sp) {
              self.sp.spriteFrame = res;
              self.randomDirect();
            }
          });
        };

        return IconAnime;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "sp", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/iconAnimeBtnTransfer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Vec3, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "58f4euobO1IeqAR/9KAsHcp", "iconAnimeBtnTransfer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var iconAnimbtnTransferStatusManager = exports('iconAnimbtnTransferStatusManager', /*#__PURE__*/function () {
        //0为缩小 1 为放大

        /**
         * @param iconAnimbtnTransfer 
         */
        function iconAnimbtnTransferStatusManager(iconAnimbtnTransfer, node) {
          this.statusType = 0;
          this._iconAnimbtnTransfer = null;
          this._nodeInstance = null;
          this._iconAnimbtnTransfer = iconAnimbtnTransfer;
          this._nodeInstance = node;
        }

        var _proto = iconAnimbtnTransferStatusManager.prototype;

        _proto.update = function update(dt) {
          if (this._nodeInstance.scale.x > 1.1) {
            this.statusType = 1;
          }

          if (this._nodeInstance.scale.x < 0.9) {
            this.statusType = 0;
          }

          if (this.statusType == 0) {
            var x = this._nodeInstance.scale.x;
            this._nodeInstance.scale = new Vec3(x + dt * 1, x + dt * 1);
          }

          if (this.statusType == 1) {
            var _x = this._nodeInstance.scale.x;
            this._nodeInstance.scale = new Vec3(_x - dt * 1, _x + dt * 1);
          }
        };

        return iconAnimbtnTransferStatusManager;
      }());
      var iconAnimbtnTransfer = exports('iconAnimbtnTransfer', (_dec = ccclass('iconAnimbtnTransfer'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(iconAnimbtnTransfer, _Component);

        function iconAnimbtnTransfer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.iconAnimbtnTransferStatusManager = null;
          return _this;
        }

        var _proto2 = iconAnimbtnTransfer.prototype;

        _proto2.onLoad = function onLoad() {
          window["iconAnimbtnTransfer"] = this;
        }
        /**播放动画 */
        ;

        _proto2.playAnim = function playAnim() {
          this.node.scale = new Vec3(1, 1, 1);
          this.iconAnimbtnTransferStatusManager = new iconAnimbtnTransferStatusManager(this, this.node);
        };

        _proto2.stopAnim = function stopAnim() {};

        _proto2.update = function update(deltaTime) {
          this.iconAnimbtnTransferStatusManager && this.iconAnimbtnTransferStatusManager.update(deltaTime);
        };

        return iconAnimbtnTransfer;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/index.ts", ['cc', './Modal.ts', './Provider.ts'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      exports('Modal', module.Modal);
    }, function (module) {
      exports('Provider', module.Provider);
    }],
    execute: function () {
      cclegacy._RF.push({}, "1b0bbqkjV5EA57NxAelAuwM", "index", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/index10.ts", ['cc', './local.ts', './types.ts', './utils.ts'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      var _setter = {};
      _setter.getLocal = module.getLocal;
      _setter.local = module.local;
      _setter.removeLocal = module.removeLocal;
      _setter.setLocal = module.setLocal;
      _setter.updateLocal = module.updateLocal;
      exports(_setter);
    }, null, function (module) {
      var _setter = {};
      _setter.checkInjectedProviders = module.checkInjectedProviders;
      _setter.filterMatches = module.filterMatches;
      _setter.filterProviderChecks = module.filterProviderChecks;
      _setter.filterProviders = module.filterProviders;
      _setter.findMatchingRequiredOptions = module.findMatchingRequiredOptions;
      _setter.getChainId = module.getChainId;
      _setter.getInjectedProvider = module.getInjectedProvider;
      _setter.getInjectedProviderName = module.getInjectedProviderName;
      _setter.getProviderDescription = module.getProviderDescription;
      _setter.getProviderInfo = module.getProviderInfo;
      _setter.getProviderInfoByCheck = module.getProviderInfoByCheck;
      _setter.getProviderInfoById = module.getProviderInfoById;
      _setter.getProviderInfoByName = module.getProviderInfoByName;
      _setter.getProviderInfoFromChecksArray = module.getProviderInfoFromChecksArray;
      _setter.getThemeColors = module.getThemeColors;
      _setter.isLocalStorageAvailable = module.isLocalStorageAvailable;
      _setter.isMobile = module.isMobile;
      _setter.verifyInjectedProvider = module.verifyInjectedProvider;
      exports(_setter);
    }],
    execute: function () {
      cclegacy._RF.push({}, "fb477PXPDhHjKmIaHpUfYNn", "index", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/index2.ts", ['cc', './injected.ts', './boltx.ts', './walletconnect.ts', './portis.ts', './fortmatic.ts', './torus.ts', './venly.ts', './authereum.ts', './burnerconnect.ts', './mewconnect.ts', './dcentwallet.ts', './bitski.ts', './frame.ts', './binancechainwallet.ts', './coinbasewallet.ts', './sequence.ts', './clvwallet.ts', './opera.ts'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      exports('injected', module.default);
    }, function (module) {
      exports('boltx', module.default);
    }, function (module) {
      exports('walletconnect', module.default);
    }, function (module) {
      exports('portis', module.default);
    }, function (module) {
      exports('fortmatic', module.default);
    }, function (module) {
      exports('torus', module.default);
    }, function (module) {
      exports('venly', module.default);
    }, function (module) {
      exports('authereum', module.default);
    }, function (module) {
      exports('burnerconnect', module.default);
    }, function (module) {
      exports('mewconnect', module.default);
    }, function (module) {
      exports('dcentwallet', module.default);
    }, function (module) {
      exports('bitski', module.default);
    }, function (module) {
      exports('frame', module.default);
    }, function (module) {
      exports('binancechainwallet', module.default);
    }, function (module) {
      exports('coinbasewallet', module.default);
    }, function (module) {
      exports('sequence', module.default);
    }, function (module) {
      exports('clvwallet', module.default);
    }, function (module) {
      exports('opera', module.default);
    }],
    execute: function () {
      cclegacy._RF.push({}, "4e9f4XgmKpIjK3LyH7NbuNn", "index", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/index3.ts", ['cc', './events2.ts', './providers.ts'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      exports('EventController', module.EventController);
    }, function (module) {
      exports('ProviderController', module.ProviderController);
    }],
    execute: function () {
      cclegacy._RF.push({}, "5754dmTxAFCm43ixkeLERAc", "index", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/index4.ts", ['cc', './index6.ts'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      var _setter = {};
      _setter.BITKEEPWALLET = module.BITKEEPWALLET;
      _setter.BITPIE = module.BITPIE;
      _setter.BLOCKWALLET = module.BLOCKWALLET;
      _setter.BOLTX = module.BOLTX;
      _setter.BRAVE = module.BRAVE;
      _setter.CELOINJECTED = module.CELOINJECTED;
      _setter.CIPHER = module.CIPHER;
      _setter.CLV = module.CLV;
      _setter.COINBASE = module.COINBASE;
      _setter.DAPPER = module.DAPPER;
      _setter.FALLBACK = module.FALLBACK;
      _setter.FRAMEINJECTED = module.FRAMEINJECTED;
      _setter.IMTOKEN = module.IMTOKEN;
      _setter.LIQUALITY = module.LIQUALITY;
      _setter.MATHWALLET = module.MATHWALLET;
      _setter.METAMASK = module.METAMASK;
      _setter.NIFTY = module.NIFTY;
      _setter.PORTAL = module.PORTAL;
      _setter.RABBY = module.RABBY;
      _setter.RWALLET = module.RWALLET;
      _setter.SAFE = module.SAFE;
      _setter.SEQUENCEINJECTED = module.SEQUENCEINJECTED;
      _setter.STATUS = module.STATUS;
      _setter.TALLYINJECTED = module.TALLYINJECTED;
      _setter.TOKENARY = module.TOKENARY;
      _setter.TRUST = module.TRUST;
      _setter.XDEFI = module.XDEFI;
      exports(_setter);
    }],
    execute: function () {
      cclegacy._RF.push({}, "5975fP0nu1J1YnLlOoRuZvp", "index", undefined); // @ts-ignore


      var WalletConnectLogo = "../logos/walletconnect-circle.svg"; // @ts-ignore

      var PortisLogo = "../logos/portis.svg"; // @ts-ignore

      var FortmaticLogo = "../logos/fortmatic.svg"; // @ts-ignore

      var VenlyLogo = "../logos/venly.svg"; // @ts-ignore

      var TorusLogo = "../logos/torus.svg"; // @ts-ignore

      var AuthereumLogo = "../logos/authereum.svg"; // @ts-ignore

      var BurnerWalletLogo = "../logos/burnerwallet.png"; // @ts-ignore

      var MEWwallet = "../logos/mewwallet.png"; // @ts-ignore

      var DcentWalletLogo = "../logos/dcentwallet.png"; // @ts-ignore

      var BitskiLogo = "../logos/bitski.svg"; // @ts-ignore

      var OperaLogo = "../logos/opera.svg"; // @ts-ignore

      var FrameLogo = "../logos/frame.svg"; // @ts-ignore

      var BinanceChainWalletLogo = "../logos/binancechainwallet.svg"; // @ts-ignore

      var CoinbaseWalletLogo = "../logos/coinbasewallet.svg"; // @ts-ignore

      var SequenceLogo = "../logos/sequence.svg";
      var WALLETCONNECT = exports('WALLETCONNECT', {
        id: "walletconnect",
        name: "WalletConnect",
        logo: WalletConnectLogo,
        type: "qrcode",
        check: "isWalletConnect",
        "package": {
          required: [["infuraId", "rpc"]]
        }
      });
      var PORTIS = exports('PORTIS', {
        id: "portis",
        name: "Portis",
        logo: PortisLogo,
        type: "web",
        check: "isPortis",
        "package": {
          required: ["id"]
        }
      });
      var FORTMATIC = exports('FORTMATIC', {
        id: "fortmatic",
        name: "Fortmatic",
        logo: FortmaticLogo,
        type: "web",
        check: "isFortmatic",
        "package": {
          required: ["key"]
        }
      });
      var TORUS = exports('TORUS', {
        id: "torus",
        name: "Torus",
        logo: TorusLogo,
        type: "web",
        check: "isTorus"
      });
      var VENLY = exports('VENLY', {
        id: "venly",
        name: "Venly",
        logo: VenlyLogo,
        type: "web",
        check: "isVenly",
        "package": {
          required: ["clientId"]
        }
      });
      var AUTHEREUM = exports('AUTHEREUM', {
        id: "authereum",
        name: "Authereum",
        logo: AuthereumLogo,
        type: "web",
        check: "isAuthereum"
      });
      var BURNERCONNECT = exports('BURNERCONNECT', {
        id: "burnerconnect",
        name: "Burner Connect",
        logo: BurnerWalletLogo,
        type: "web",
        check: "isBurnerProvider"
      });
      var MEWCONNECT = exports('MEWCONNECT', {
        id: "mewconnect",
        name: "MEW wallet",
        logo: MEWwallet,
        type: "qrcode",
        check: "isMEWconnect",
        "package": {
          required: [["infuraId", "rpc"]]
        }
      });
      var DCENT = exports('DCENT', {
        id: "dcentwallet",
        name: "D'CENT",
        logo: DcentWalletLogo,
        type: "hardware",
        check: "isDcentWallet",
        "package": {
          required: ["rpcUrl"]
        }
      });
      var BITSKI = exports('BITSKI', {
        id: "bitski",
        name: "Bitski",
        logo: BitskiLogo,
        type: "web",
        check: "isBitski",
        "package": {
          required: ["clientId", "callbackUrl"]
        }
      });
      var FRAME = exports('FRAME', {
        id: "frame",
        name: "Frame",
        logo: FrameLogo,
        type: "web",
        check: "isFrameNative"
      });
      var BINANCECHAINWALLET = exports('BINANCECHAINWALLET', {
        id: "binancechainwallet",
        name: "Binance Chain",
        logo: BinanceChainWalletLogo,
        type: "injected",
        check: "isBinanceChainWallet"
      });
      /**
       * @deprecated Use CoinbaseWalletSdk
       */

      var WALLETLINK = exports('WALLETLINK', {
        id: "walletlink",
        name: "Coinbase Wallet",
        logo: CoinbaseWalletLogo,
        type: "qrcode",
        check: "isWalletLink",
        "package": {
          required: [["appName", "infuraId", "rpc"]]
        }
      });
      var COINBASEWALLET = exports('COINBASEWALLET', {
        id: "coinbasewallet",
        name: "Coinbase",
        logo: CoinbaseWalletLogo,
        type: "injected",
        check: "isWalletLink",
        "package": {
          required: [["appName", "infuraId", "rpc"]]
        }
      });
      var SEQUENCE = exports('SEQUENCE', {
        id: "sequence",
        name: "Sequence",
        logo: SequenceLogo,
        type: "web",
        check: "isSequenceWeb"
      });
      var OPERA = exports('OPERA', {
        id: "opera",
        name: "Opera",
        logo: OperaLogo,
        type: "injected",
        check: "isOpera"
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/index5.ts", ['cc', './index2.ts', './index6.ts', './index4.ts'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      exports('connectors', module);
    }, function (module) {
      exports('injected', module);
    }, function (module) {
      exports('providers', module);
    }],
    execute: function () {
      cclegacy._RF.push({}, "60798lnfpVO0qRAHqZ6uOak", "index", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/index6.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "863a9t9M99EaYdVPv++H5wI", "index", undefined); // @ts-ignore


      var Web3DefaultLogo = "../logos/web3-default.svg"; // @ts-ignore

      var MetaMaskLogo = "../logos/metamask.svg"; // @ts-ignore

      var SafeLogo = "../logos/safe.svg"; // @ts-ignore

      var NiftyWalletLogo = "../logos/niftyWallet.png"; // @ts-ignore

      var TrustLogo = "../logos/trust.svg"; // @ts-ignore

      var DapperLogo = "../logos/dapper.png"; // @ts-ignore

      var CoinbaseLogo = "../logos/coinbase.svg"; // @ts-ignore

      var CipherLogo = "../logos/cipher.svg"; // @ts-ignore

      var imTokenLogo = "../logos/imtoken.svg"; // @ts-ignore

      var StatusLogo = "../logos/status.svg"; // @ts-ignore

      var TokenaryLogo = "../logos/tokenary.png"; // @ts-ignore

      var OperaLogo = "../logos/opera.svg"; // @ts-ignore

      var FrameLogo = "../logos/frame.svg"; // @ts-ignore

      var LiqualityLogo = "../logos/liquality.png"; // @ts-ignore

      var BoltXLogo = "../logos/boltx.svg"; // @ts-ignore

      var MathWalletLogo = "../logos/mathwallet.png"; // @ts-ignore

      var RWalletLogo = "../logos/rwallet.svg"; // @ts-ignore

      var BitpieLogo = "../logos/bitpie.svg"; // @ts-ignore

      var XDEFILogo = "../logos/xdefi.svg"; // @ts-ignore

      var CeloExtensionWalletLogo = "../logos/celoExtensionWallet.svg"; // @ts-ignore

      var BlockWalletLogo = "../logos/blockwallet.svg"; // @ts-ignore

      var TallyLogo = "../logos/tally.svg"; // @ts-ignore

      var PortalLogo = "../logos/portal.svg"; // @ts-ignore

      var SequenceLogo = "../logos/sequence.svg"; // @ts-ignore

      var BraveLogo = "../logos/brave.svg"; // @ts-ignore

      var RabbyLogo = "../logos/rabby.svg"; // @ts-ignore

      var BitkeepLogo = "../logos/bitkeepwallet.png"; // @ts-ignore

      var ClvLogo = "../logos/clv.svg";
      var FALLBACK = exports('FALLBACK', {
        id: "injected",
        name: "Web3",
        logo: Web3DefaultLogo,
        type: "injected",
        check: "isWeb3"
      });
      var METAMASK = exports('METAMASK', {
        id: "injected",
        name: "MetaMask",
        logo: MetaMaskLogo,
        type: "injected",
        check: "isMetaMask"
      });
      var SAFE = exports('SAFE', {
        id: "injected",
        name: "Safe",
        logo: SafeLogo,
        type: "injected",
        check: "isSafe"
      });
      var NIFTY = exports('NIFTY', {
        id: "injected",
        name: "Nifty",
        logo: NiftyWalletLogo,
        type: "injected",
        check: "isNiftyWallet"
      });
      var DAPPER = exports('DAPPER', {
        id: "injected",
        name: "Dapper",
        logo: DapperLogo,
        type: "injected",
        check: "isDapper"
      });
      var OPERA = exports('OPERA', {
        id: "injected",
        name: "Opera",
        logo: OperaLogo,
        type: "injected",
        check: "isOpera"
      });
      var TRUST = exports('TRUST', {
        id: "injected",
        name: "Trust",
        logo: TrustLogo,
        type: "injected",
        check: "isTrust"
      });
      var COINBASE = exports('COINBASE', {
        id: "injected",
        name: "Coinbase",
        logo: CoinbaseLogo,
        type: "injected",
        check: "isCoinbaseWallet"
      });
      var CIPHER = exports('CIPHER', {
        id: "injected",
        name: "Cipher",
        logo: CipherLogo,
        type: "injected",
        check: "isCipher"
      });
      var IMTOKEN = exports('IMTOKEN', {
        id: "injected",
        name: "imToken",
        logo: imTokenLogo,
        type: "injected",
        check: "isImToken"
      });
      var STATUS = exports('STATUS', {
        id: "injected",
        name: "Status",
        logo: StatusLogo,
        type: "injected",
        check: "isStatus"
      });
      var TOKENARY = exports('TOKENARY', {
        id: "injected",
        name: "Tokenary",
        logo: TokenaryLogo,
        type: "injected",
        check: "isTokenary"
      });
      var FRAMEINJECTED = exports('FRAMEINJECTED', {
        id: "injected",
        name: "Frame",
        logo: FrameLogo,
        type: "injected",
        check: "isFrame"
      });
      var LIQUALITY = exports('LIQUALITY', {
        id: "injected",
        name: "Liquality",
        logo: LiqualityLogo,
        type: "injected",
        check: "isLiquality"
      });
      var BOLTX = exports('BOLTX', {
        id: "boltx",
        name: "Bolt-X",
        logo: BoltXLogo,
        type: "injected",
        check: "isBoltX"
      });
      var MATHWALLET = exports('MATHWALLET', {
        id: "injected",
        name: "Math Wallet",
        logo: MathWalletLogo,
        type: "injected",
        check: "isMathWallet"
      });
      var RWALLET = exports('RWALLET', {
        id: "injected",
        name: "rWallet",
        logo: RWalletLogo,
        type: "injected",
        check: "isRWallet"
      });
      var XDEFI = exports('XDEFI', {
        id: "injected",
        name: "XDEFI",
        logo: XDEFILogo,
        type: "injected",
        check: "__XDEFI"
      });
      var BITPIE = exports('BITPIE', {
        id: "injected",
        name: "Bitpie",
        logo: BitpieLogo,
        type: "injected",
        check: "isBitpie"
      });
      var CELOINJECTED = exports('CELOINJECTED', {
        id: "injected",
        name: "Celo extension wallet",
        logo: CeloExtensionWalletLogo,
        type: "injected",
        check: "isCelo"
      });
      var BLOCKWALLET = exports('BLOCKWALLET', {
        id: "injected",
        name: "BlockWallet",
        logo: BlockWalletLogo,
        type: "injected",
        check: "isBlockWallet"
      });
      var TALLYINJECTED = exports('TALLYINJECTED', {
        id: "injected",
        name: "Tally",
        logo: TallyLogo,
        type: "injected",
        check: "isTally"
      });
      var PORTAL = exports('PORTAL', {
        id: "injected",
        name: "Ripio Portal",
        logo: PortalLogo,
        type: "injected",
        check: "isPortal"
      });
      var SEQUENCEINJECTED = exports('SEQUENCEINJECTED', {
        id: "injected",
        name: "Sequence",
        logo: SequenceLogo,
        type: "injected",
        check: "isSequence"
      });
      var RABBY = exports('RABBY', {
        id: "injected",
        name: "Rabby",
        logo: RabbyLogo,
        type: "injected",
        check: "isRabby"
      });
      var BRAVE = exports('BRAVE', {
        id: "injected",
        name: "Brave",
        logo: BraveLogo,
        type: "injected",
        check: "isBraveWallet"
      });
      var CLV = exports('CLV', {
        id: "injected",
        name: "CLV",
        logo: ClvLogo,
        type: "injected",
        check: "isCloverWallet"
      });
      var BITKEEPWALLET = exports('BITKEEPWALLET', {
        id: "injected",
        name: "Bitkeep Wallet",
        logo: BitkeepLogo,
        type: "injected",
        check: "isBitKeep"
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/index7.ts", ['cc', './Core.ts', './index.ts', './index9.ts', './index3.ts', './index5.ts', './index10.ts', './index8.ts', './Modal.ts', './Provider.ts', './chains.ts', './classNames.ts', './events.ts', './keys.ts', './events2.ts', './providers.ts', './index2.ts', './index6.ts', './index4.ts', './local.ts', './utils.ts'], function (exports) {
  'use strict';

  var cclegacy, Core;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Core = module.Core;
      exports('default', module.Core);
    }, null, null, null, null, null, function (module) {
      exports('themesList', module.themesList);
    }, function (module) {
      exports('Modal', module.Modal);
    }, function (module) {
      exports('Provider', module.Provider);
    }, function (module) {
      exports('CHAIN_DATA_LIST', module.CHAIN_DATA_LIST);
    }, function (module) {
      var _setter = {};
      _setter.CONNECT_BUTTON_CLASSNAME = module.CONNECT_BUTTON_CLASSNAME;
      _setter.MODAL_CARD_CLASSNAME = module.MODAL_CARD_CLASSNAME;
      _setter.MODAL_CONTAINER_CLASSNAME = module.MODAL_CONTAINER_CLASSNAME;
      _setter.MODAL_HITBOX_CLASSNAME = module.MODAL_HITBOX_CLASSNAME;
      _setter.MODAL_LIGHTBOX_CLASSNAME = module.MODAL_LIGHTBOX_CLASSNAME;
      _setter.PROVIDER_CONTAINER_CLASSNAME = module.PROVIDER_CONTAINER_CLASSNAME;
      _setter.PROVIDER_DESCRIPTION_CLASSNAME = module.PROVIDER_DESCRIPTION_CLASSNAME;
      _setter.PROVIDER_ICON_CLASSNAME = module.PROVIDER_ICON_CLASSNAME;
      _setter.PROVIDER_NAME_CLASSNAME = module.PROVIDER_NAME_CLASSNAME;
      _setter.PROVIDER_WRAPPER_CLASSNAME = module.PROVIDER_WRAPPER_CLASSNAME;
      exports(_setter);
    }, function (module) {
      var _setter = {};
      _setter.CLOSE_EVENT = module.CLOSE_EVENT;
      _setter.CONNECT_EVENT = module.CONNECT_EVENT;
      _setter.ERROR_EVENT = module.ERROR_EVENT;
      _setter.SELECT_EVENT = module.SELECT_EVENT;
      exports(_setter);
    }, function (module) {
      var _setter = {};
      _setter.CACHED_PROVIDER_KEY = module.CACHED_PROVIDER_KEY;
      _setter.INJECTED_PROVIDER_ID = module.INJECTED_PROVIDER_ID;
      _setter.WEB3_CONNECT_MODAL_ID = module.WEB3_CONNECT_MODAL_ID;
      exports(_setter);
    }, function (module) {
      exports('EventController', module.EventController);
    }, function (module) {
      exports('ProviderController', module.ProviderController);
    }, function (module) {
      exports('connectors', module);
    }, function (module) {
      exports('injected', module);
    }, function (module) {
      exports('providers', module);
    }, function (module) {
      var _setter = {};
      _setter.getLocal = module.getLocal;
      _setter.local = module.local;
      _setter.removeLocal = module.removeLocal;
      _setter.setLocal = module.setLocal;
      _setter.updateLocal = module.updateLocal;
      exports(_setter);
    }, function (module) {
      var _setter = {};
      _setter.checkInjectedProviders = module.checkInjectedProviders;
      _setter.filterMatches = module.filterMatches;
      _setter.filterProviderChecks = module.filterProviderChecks;
      _setter.filterProviders = module.filterProviders;
      _setter.findMatchingRequiredOptions = module.findMatchingRequiredOptions;
      _setter.getChainId = module.getChainId;
      _setter.getInjectedProvider = module.getInjectedProvider;
      _setter.getInjectedProviderName = module.getInjectedProviderName;
      _setter.getProviderDescription = module.getProviderDescription;
      _setter.getProviderInfo = module.getProviderInfo;
      _setter.getProviderInfoByCheck = module.getProviderInfoByCheck;
      _setter.getProviderInfoById = module.getProviderInfoById;
      _setter.getProviderInfoByName = module.getProviderInfoByName;
      _setter.getProviderInfoFromChecksArray = module.getProviderInfoFromChecksArray;
      _setter.getThemeColors = module.getThemeColors;
      _setter.isLocalStorageAvailable = module.isLocalStorageAvailable;
      _setter.isMobile = module.isMobile;
      _setter.verifyInjectedProvider = module.verifyInjectedProvider;
      exports(_setter);
    }],
    execute: function () {
      cclegacy._RF.push({}, "a83220xu2pDiqp1XrF108T0", "index", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/index8.ts", ['cc', './light.ts', './dark.ts'], function (exports) {
  'use strict';

  var cclegacy, lightTheme, darkTheme;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      lightTheme = module.default;
    }, function (module) {
      darkTheme = module.default;
    }],
    execute: function () {
      var _themesList;

      cclegacy._RF.push({}, "c96d9ziLshItbLWMj/+8RU4", "index", undefined);

      var themesList = exports('themesList', (_themesList = {
        "default": lightTheme
      }, _themesList[lightTheme.name] = lightTheme, _themesList[darkTheme.name] = darkTheme, _themesList));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/index9.ts", ['cc', './chains.ts', './classNames.ts', './events.ts', './keys.ts'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      exports('CHAIN_DATA_LIST', module.CHAIN_DATA_LIST);
    }, function (module) {
      var _setter = {};
      _setter.CONNECT_BUTTON_CLASSNAME = module.CONNECT_BUTTON_CLASSNAME;
      _setter.MODAL_CARD_CLASSNAME = module.MODAL_CARD_CLASSNAME;
      _setter.MODAL_CONTAINER_CLASSNAME = module.MODAL_CONTAINER_CLASSNAME;
      _setter.MODAL_HITBOX_CLASSNAME = module.MODAL_HITBOX_CLASSNAME;
      _setter.MODAL_LIGHTBOX_CLASSNAME = module.MODAL_LIGHTBOX_CLASSNAME;
      _setter.PROVIDER_CONTAINER_CLASSNAME = module.PROVIDER_CONTAINER_CLASSNAME;
      _setter.PROVIDER_DESCRIPTION_CLASSNAME = module.PROVIDER_DESCRIPTION_CLASSNAME;
      _setter.PROVIDER_ICON_CLASSNAME = module.PROVIDER_ICON_CLASSNAME;
      _setter.PROVIDER_NAME_CLASSNAME = module.PROVIDER_NAME_CLASSNAME;
      _setter.PROVIDER_WRAPPER_CLASSNAME = module.PROVIDER_WRAPPER_CLASSNAME;
      exports(_setter);
    }, function (module) {
      var _setter = {};
      _setter.CLOSE_EVENT = module.CLOSE_EVENT;
      _setter.CONNECT_EVENT = module.CONNECT_EVENT;
      _setter.ERROR_EVENT = module.ERROR_EVENT;
      _setter.SELECT_EVENT = module.SELECT_EVENT;
      exports(_setter);
    }, function (module) {
      var _setter = {};
      _setter.CACHED_PROVIDER_KEY = module.CACHED_PROVIDER_KEY;
      _setter.INJECTED_PROVIDER_ID = module.INJECTED_PROVIDER_ID;
      _setter.WEB3_CONNECT_MODAL_ID = module.WEB3_CONNECT_MODAL_ID;
      exports(_setter);
    }],
    execute: function () {
      cclegacy._RF.push({}, "d0c32qFlRFIWK4zRam4zFfr", "index", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/injected.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, cclegacy;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "df913vI1dlCqoaQeGoJiCCN", "injected", undefined);

      var ConnectToInjected = exports('default', /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var provider;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  provider = null;

                  if (!(typeof window.ethereum !== 'undefined')) {
                    _context.next = 13;
                    break;
                  }

                  provider = window.ethereum;
                  _context.prev = 3;
                  _context.next = 6;
                  return provider.request({
                    method: 'eth_requestAccounts'
                  });

                case 6:
                  _context.next = 11;
                  break;

                case 8:
                  _context.prev = 8;
                  _context.t0 = _context["catch"](3);
                  throw new Error("User Rejected");

                case 11:
                  _context.next = 22;
                  break;

                case 13:
                  if (!window.web3) {
                    _context.next = 17;
                    break;
                  }

                  provider = window.web3.currentProvider;
                  _context.next = 22;
                  break;

                case 17:
                  if (!window.celo) {
                    _context.next = 21;
                    break;
                  }

                  provider = window.celo;
                  _context.next = 22;
                  break;

                case 21:
                  throw new Error("No Web3 Provider found");

                case 22:
                  return _context.abrupt("return", provider);

                case 23:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[3, 8]]);
        }));

        return function ConnectToInjected() {
          return _ref.apply(this, arguments);
        };
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/InvitationCodeView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BasePanel.ts', './GameAllData.ts', './PlatformUtil.ts', './ConstValue.ts', './CommonUtil.ts', './TipManager.ts', './TweenHelp.ts', './ConfigFile.ts', './EventManager.ts', './MessageManager.ts', './NodeHelp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Button, Graphics, UIOpacity, BasePanel, GameAllData, PlatformUtil, ConstValue, CommonUtil, TipManager, TweenHelper, ETweenType, ConfigFile, EventManager, MessageManager, NodeHelp;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Button = module.Button;
      Graphics = module.Graphics;
      UIOpacity = module.UIOpacity;
    }, function (module) {
      BasePanel = module.BasePanel;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      PlatformUtil = module.PlatformUtil;
    }, function (module) {
      ConstValue = module.ConstValue;
    }, function (module) {
      CommonUtil = module.CommonUtil;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      TweenHelper = module.TweenHelper;
      ETweenType = module.ETweenType;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _class3;

      cclegacy._RF.push({}, "b93ba1SNbFPPo2OIm2OAVsF", "InvitationCodeView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var InvitationCodeView = exports('InvitationCodeView', (_dec = ccclass('InvitationCodeView'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Button), _dec6 = property(Label), _dec7 = property(Label), _dec8 = property(Graphics), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(InvitationCodeView, _BasePanel);

        function InvitationCodeView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "labTitle", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labCode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labLink", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnCopy", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labInvitedNum", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labShareDesc", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "graQRcode", _descriptor7, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = InvitationCodeView.prototype;

        _proto.start = function start() {
          this.labTitle.string = ConfigFile.findLanguage(7200);
          this.labShareDesc.string = ConfigFile.findLanguage(7202);
          NodeHelp.getchildlable(this.btnCopy.node, "Label", Label, function (comp, node) {
            comp.string = ConfigFile.findLanguage(7204);
          });
          EventManager.getInstance().add(MessageManager.Custom.VipOrRankChange, this, this.onVipOrRankChange); // this.labCode.string = GameAllData.FarmUserResponse.InvitationCode;

          var strOperatorId = "?operater_id=%s&".format(GameAllData.operatorId);
          var strInvitationCode = "invite=%s&".format(GameAllData.FarmUserResponse.InvitationCode); //这个是自己的邀请码(千万不要弄成上级的了)

          var strChannelId = "agent_id=%s&".format(GameAllData.channelId);
          var strLanguageId = "language_id=%s".format(GameAllData.languageId);
          this.labLink.string = ConstValue.OPERATOR_URL + strOperatorId + strInvitationCode + strChannelId + strLanguageId;
          this.labInvitedNum.string = ConfigFile.findLanguage(7201).format(GameAllData.FarmUserResponse.InvitationCount);
          CommonUtil.createQRcode(this.labLink.string, this.graQRcode);
          TweenHelper["default"](this.node.getChildByName("Panel"), ETweenType.Jelly);
          TweenHelper.getTween(this.node.getChildByName("SpriteSplash").getComponent(UIOpacity), "open", function (_tween) {
            var sartOpacity = 0;
            var opacity = 150;

            _tween.to(0, {
              opacity: sartOpacity
            }).to(0.1, {
              opacity: opacity
            });
          }).start();
        };

        _proto.onVipOrRankChange = function onVipOrRankChange() {
          this.labInvitedNum.string = ConfigFile.findLanguage(7201).format(GameAllData.FarmUserResponse.InvitationCount);
        };

        _proto.onClickedClose = function onClickedClose(anction) {
          if (anction === void 0) {
            anction = true;
          }

          _BasePanel.prototype.onClickedClose.call(this, anction);

          var opacity = this.node.getChildByName("SpriteSplash").getComponent(UIOpacity);
          if (opacity) opacity.opacity = 0;
        };

        _proto.onClickedCopy = function onClickedCopy() {
          // PlatformUtil.writeClipboardText(this.labCode.string);
          if (PlatformUtil.writeClipboardText(this.labLink.string)) TipManager.TipFromCode(7203);
        };

        _proto.onClickedShare = function onClickedShare(event) {};

        return InvitationCodeView;
      }(BasePanel), _class3.className = "InvitationCodeView", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "labTitle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "labCode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labLink", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "btnCopy", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "labInvitedNum", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "labShareDesc", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "graQRcode", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/jiantouAnimation.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventManager.ts', './GameManager.ts', './MessageManager.ts', './MainGame.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, Vec2, Node, view, math, Component, EventManager, GameManager, MessageManager, MainGame;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Vec2 = module.Vec2;
      Node = module.Node;
      view = module.view;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      MainGame = module.MainGame;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "2759aupyVtNJYiBC/L+AUbe", "jiantouAnimation", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var temp_v3_1 = new Vec3();
      var temp_v3_2 = new Vec3();
      var temp_v3_3 = new Vec3();
      var temp_v2_1 = new Vec2(0, -1);
      var temp_v2_2 = new Vec2();
      var temp_v2_3 = new Vec2(0, 1);
      var jiantouAnimation = exports('jiantouAnimation', (_dec = ccclass('jiantouAnimation'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(jiantouAnimation, _Component);

        function jiantouAnimation() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "jiantou", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "handClik", _descriptor2, _assertThisInitialized(_this));

          _this._target = null;
          _this._cbData = null;
          _this._cb = null;
          _this.nodeprint = null;
          return _this;
        }

        var _proto = jiantouAnimation.prototype;

        _proto.mapAlignmentToNode = function mapAlignmentToNode(target) {
          if (!target) return;
          this.handClik.active = false;
          this.jiantou.active = true;
          var game = GameManager.getInstance().getGame(MainGame);
          target.getWorldPosition(temp_v3_1);
          var tsize = game.getMapObjectSize(target);
          var vs = view.getVisibleSize();

          game._UICamera.node.getWorldPosition(temp_v3_2);

          var sleft = temp_v3_1.x - tsize.width / 2;
          var sright = temp_v3_1.x + tsize.width / 2;
          var stop = temp_v3_1.y + tsize.height / 2;
          var sbottom = temp_v3_1.y - tsize.height / 2;
          var radius = vs.width > vs.height ? vs.height : vs.width;
          radius = radius * game.node.scale.x;
          var tleft = temp_v3_2.x - vs.width / 2;
          var tright = temp_v3_2.x + vs.width / 2;
          var ttop = temp_v3_2.y + vs.height / 2;
          var tbottom = temp_v3_2.y - vs.height / 2;

          if (sleft < tleft || sright > tright || stop > ttop || sbottom < tbottom) {
            Vec3.subtract(temp_v3_3, temp_v3_1, temp_v3_2);
            temp_v3_3.normalize();
            temp_v2_2.set(temp_v3_3.x, temp_v3_3.y);
            var angle = Vec2.angle(temp_v2_2, temp_v2_1);
            var deg = math.toDegree(angle);
            temp_v3_3.multiplyScalar(radius);
            temp_v3_3.add(temp_v3_2);
            temp_v3_3.z = 0;
            this.node.setWorldPosition(temp_v3_3);

            if (temp_v3_2.x > temp_v3_3.x) {
              deg = 720 - deg;
            }

            this.jiantou.setRotationFromEuler(0, 0, deg);
          } else {
            this.handClik.active = true;
            this.jiantou.active = false;
            target.getWorldPosition(temp_v3_1);
            this.node.setWorldPosition(temp_v3_1);
          }
        };

        _proto.initUI = function initUI(args) {
          this._target = args.target;
        };

        _proto.start = function start() {
          EventManager.getInstance().add(MessageManager.Custom.TASKEVENT, this, this.onTaskEvent);
        };

        _proto.onTaskEvent = function onTaskEvent(args) {
          if (args.c == "click") {
            var game = GameManager.getInstance().getGame(MainGame);
            var producer = game.getBuildFromID(1001);

            if (args.target == producer) {
              if (this.node) this.node.destroy();
            }
          }
        };

        _proto.setDestroy = function setDestroy() {
          var _this2 = this;

          this.scheduleOnce(function () {
            _this2.unscheduleAllCallbacks();

            _this2.node.destroy();
          }, 3);
        };

        _proto.update = function update(deltaTime) {
          this.mapAlignmentToNode(this._target);
        };

        return jiantouAnimation;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "jiantou", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "handClik", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/keys.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e7513S1x+JN/60ywkq/uIyH", "keys", undefined);

      var WEB3_CONNECT_MODAL_ID = exports('WEB3_CONNECT_MODAL_ID', "WEB3_CONNECT_MODAL_ID");
      var INJECTED_PROVIDER_ID = exports('INJECTED_PROVIDER_ID', "injected");
      var CACHED_PROVIDER_KEY = exports('CACHED_PROVIDER_KEY', "WEB3_CONNECT_CACHED_PROVIDER");

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/KLineItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Graphics, Label, UITransform, v2, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Graphics = module.Graphics;
      Label = module.Label;
      UITransform = module.UITransform;
      v2 = module.v2;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "d6e90DQOstDP6ziDyJqpo50", "KLineItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var KLineItem = exports('KLineItem', (_dec = ccclass('KLineItem'), _dec2 = property(Graphics), _dec3 = property(Graphics), _dec4 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(KLineItem, _Component);

        function KLineItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.type = 0;
          _this.prePricePosYRatio0 = 0;
          _this.curPricePosYRatio0 = 0;
          _this.prePricePosYRatio1 = 0;
          _this.curPricePosYRatio1 = 0;

          _initializerDefineProperty(_this, "graLine0", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "graLine1", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labDate", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = KLineItem.prototype;

        _proto.start = function start() {
          var contentSize = this.graLine0.node.getComponent(UITransform).contentSize;
          var startPos0 = v2(0, contentSize.height * this.prePricePosYRatio0);
          var endPos0 = v2(contentSize.width, contentSize.height * this.curPricePosYRatio0);
          this.graLine0.moveTo(startPos0.x, startPos0.y);
          this.graLine0.lineTo(endPos0.x, endPos0.y);
          this.graLine0.stroke();

          if (1 == this.type) {
            var startPos1 = v2(0, contentSize.height * this.prePricePosYRatio1);
            var endPos1 = v2(contentSize.width, contentSize.height * this.curPricePosYRatio1);
            this.graLine1.moveTo(startPos1.x, startPos1.y);
            this.graLine1.lineTo(endPos1.x, endPos1.y);
            this.graLine1.stroke();
          }
        };

        return KLineItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "graLine0", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "graLine1", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labDate", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LabelIcon.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "12da3qwb25EoIJTllJZX0uz", "LabelIcon", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LabelIcon = exports('LabelIcon', (_dec = ccclass('LabelIcon'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LabelIcon, _Component);

        function LabelIcon() {
          return _Component.apply(this, arguments) || this;
        }

        return LabelIcon;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/landInfoTip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './OperaleDef.ts', './producer.ts', './UIHelp.ts', './BaseTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, OperaleDef, producer, UIHelp, BaseTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
    }, function (module) {
      OperaleDef = module.OperaleDef;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      BaseTip = module.BaseTip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "18804Du+F9ETqeniZ/xWCpJ", "landInfoTip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var landInfoTip = exports('landInfoTip', (_dec = ccclass('landInfoTip'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseTip) {
        _inheritsLoose(landInfoTip, _BaseTip);

        function landInfoTip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseTip.call.apply(_BaseTip, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "Name", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "State", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Color", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "V1", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Text", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Bar", _descriptor6, _assertThisInitialized(_this));

          _this._updateTime = 0;
          return _this;
        }

        var _proto = landInfoTip.prototype;

        _proto.setBar = function setBar(index) {
          if (index < 3) {
            this.Bar.children[0].active = true;
            this.Bar.children[1].active = false;
            this.Bar.children[2].active = false;
          } else if (index == 3) {
            this.Bar.children[0].active = false;
            this.Bar.children[1].active = true;
            this.Bar.children[2].active = false;
          } else {
            this.Bar.children[0].active = false;
            this.Bar.children[1].active = false;
            this.Bar.children[2].active = true;
          }
        };

        _proto.updateText = function updateText(arg) {
          //this.Name.string = arg.name;
          producer.replaceDefaultColor(this.Name, arg.name); //this.State.string = arg.state;

          producer.replaceDefaultColor(this.State, arg.state);
          this.Text.string = arg.text;
          this.setBar(arg.StateIndex);
          this._updateTime = UIHelp.getTimeMask();

          if (arg.color) {
            this.Color.node.active = true;
            producer.replaceDefaultColor(this.Color, arg.color); //this.Color.string = arg.color;
          } else {
            this.Color.node.active = false;
          }

          if (arg.v1) {
            this.V1.node.active = true;
            producer.replaceDefaultColor(this.V1, arg.v1); //this.V1.string = arg.v1;
          } else {
            this.V1.node.active = false;
          }
        };

        _proto.initUI = function initUI(arg) {
          this.popHeight = 100;

          _BaseTip.prototype.initUI.call(this, arg);

          this._cbData = arg;
          this.updateText(arg);
        };

        _proto.isHarvest = function isHarvest(select) {
          if (select.state == OperaleDef.HARVEST) return true;
          if (select.state == OperaleDef.WATERING) return true;
          if (select.state == OperaleDef.ERADICATE) return true;
          if (select.state == OperaleDef.DIG) return true;
          return false;
        };

        _proto.upText = function upText() {
          var select = this._cbData.select;

          if (select) {
            if (this.isHarvest(select)) {
              var info = select.getHarvest();
              this.updateText(info);
            } else {
              var _info = select.getInfoTip();

              this.updateText(_info);
            }
          }
        };

        _proto.update = function update(deltaTime) {
          _BaseTip.prototype.update.call(this, deltaTime);

          if (UIHelp.getTimeDiff(this._updateTime) > 1000) {
            this._updateTime = UIHelp.getTimeMask();
            this.upText();
          }
        };

        return landInfoTip;
      }(BaseTip), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Name", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "State", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "Color", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "V1", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "Text", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "Bar", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LandUpgradeTip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './MessageManager.ts', './EventManager.ts', './producer.ts', './GameAllData.ts', './OperaleDef.ts', './UpdrageCostTip.ts', './ConfigFile.ts', './TipManager.ts', './BaseUI.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, RichText, Node, Sprite, MessageManager, EventManager, producer, GameAllData, OperaleDef, UpdrageCostTip, ConfigFile, TipManager, BaseUI;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      RichText = module.RichText;
      Node = module.Node;
      Sprite = module.Sprite;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      OperaleDef = module.OperaleDef;
    }, function (module) {
      UpdrageCostTip = module.UpdrageCostTip;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      BaseUI = module.BaseUI;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "ab857P8V0hHbYQOyeS361tO", "LandUpgradeTip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LandUpgradeTip = exports('LandUpgradeTip', (_dec = ccclass('LandUpgradeTip'), _dec2 = property(RichText), _dec3 = property(RichText), _dec4 = property(Node), _dec5 = property(UpdrageCostTip), _dec6 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(LandUpgradeTip, _BaseUI);

        function LandUpgradeTip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "producerName", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Text", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Btn", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "costTipo", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Bar1", _descriptor5, _assertThisInitialized(_this));

          _this._cbData = null;
          return _this;
        }

        var _proto = LandUpgradeTip.prototype;

        _proto.start = function start() {// this.curState = 0;
          // EventManager.getInstance().add(MessageManager.Custom.ScaleChange, this, this.onScaleChange);
          // EventManager.getInstance().add(MessageManager.Custom.TOUCHMOVE, this, this.onMoveTouch);
          // EventManager.getInstance().add(MessageManager.Custom.TOUCHEND, this, this.onStopTouch);
        } // onScaleChange() {
        //     if (this.curState == 2) {
        //         let game: MainGame = GameManager.getInstance().getGame(MainGame) as MainGame;
        //         if(!game._MapAction && game.targetScale == game.scale && game.scale != 1.0) {
        //             this.isReset = false;
        //             game.closeTip();
        //         }
        //     }
        // }
        ;

        _proto.onDestroy = function onDestroy() {
          // if(this.isReset){
          //     let game: MainGame = GameManager.getInstance().getGame(MainGame) as MainGame;
          //     if(game._state != GAMESTATE.GS_TOW){
          //         game.targetScale = game._CopyScaleInfo; 
          //     }
          // }
          _BaseUI.prototype.onDestroy.call(this);
        };

        _proto.update = function update(deltaTime) {// if (this.curState == 0) {
          //     let game: MainGame = GameManager.getInstance().getGame(MainGame) as MainGame;
          //     if (!game._MapAction) {
          //        // game.scale = 1.0;
          //         //game.targetScale = 1.0;
          //         this.curState = 1;
          //     }
          // }else if(this.curState == 1){
          //     let game: MainGame = GameManager.getInstance().getGame(MainGame) as MainGame;
          //     if(game.targetScale == game.scale){
          //         this.curState = 2;
          //     }
          // }
          // super.update(deltaTime);
        };

        _proto.initUI = function initUI(arg) {
          // this.popHeight = 0;
          // super.initUI(arg);
          this.costTipo.node.active = false;
          this.Bar1.active = true;
          this._cbData = arg;
          this.producerName.string = arg.name; // this.Btn.active = false;
          // this.Btn.active = true;

          this.Text.string = arg.text; //this.upgrade.string = producer.getMessageText(3123);
          //producer.replaceDefaultColor(this.upgrade,producer.getMessageText(3123));

          if (this._cbData.select.isMaxLevel()) {
            this.Btn.active = false;
          } else {
            this.Btn.active = true;
            var spriteall = this.Btn.getComponentsInChildren(Sprite);

            if (!this.cahUpgrade()) {
              spriteall.forEach(function (item) {
                return item.grayscale = true;
              });
            } else {
              spriteall.forEach(function (item) {
                return item.grayscale = false;
              });
            }
          }
        };

        _proto.cahUpgrade = function cahUpgrade() {
          var select = this._cbData.select;
          if (!select.getVipCanUpgrade()) return false;
          var needmoney = select.getUpgradeNeedItem();
          var type = select.getNeedItemType();
          if (GameAllData.getCurrencyNumByType(type) < needmoney) return false;
          return true;
        };

        _proto.onBtn = function onBtn() {
          var selectproducer = this._cbData.select;
          var aa = selectproducer.getUpgradeNeedItem();
          var bb = selectproducer.getNeedItemType();

          if (selectproducer.getVipCanUpgrade()) {
            this.Bar1.active = true;
            this.costTipo.node.active = false; //let temple = "本次升级需要%s贝壳币,是否升级";
            //let temple = producer.getMessageText(2019).iconformat(EnumDefine.CurrencyType.PEARL);

            var temple = producer.getMessageText(2019, bb);
            var text = temple.format(aa.toString());
            TipManager.autoTip(4, 2019, text, null, function () {
              var arg = {
                show: false,
                select: selectproducer,
                operaleID: OperaleDef.UPGRADE
              };
              EventManager.getInstance().trigger(MessageManager.Custom.OpenHand, arg);
            });
          } else {
            this.tipNeed(bb);
          }
        };

        _proto.onTest = function onTest() {};

        _proto.getNeedItem = function getNeedItem(id, level) {
          var configdata = ConfigFile.getFarmInfo(id, level);
          var m1 = ConfigFile.getLimitInfo(configdata.NeedItem);
          return m1.val;
        };

        _proto.tipNeed = function tipNeed(id) {
          var a = this._cbData.select;
          var landinfo = ConfigFile.getLandInfo(a.level);
          var n = producer.getMessageText(landinfo.LandName);
          var text = producer.getMessageText(landinfo.LandUnlockTxt);
          var cond = GameAllData.getConditionArray(landinfo.LandUnlock);
          if (cond.length < 2) text = text.format(cond[0].val, cond[0].val);else text = text.format(cond[0].val, cond[1].val); // let money = this.getNeedItem(a.ID, a.level);

          var money = a.getUpgradeNeedItem();
          var name = n + "(LV." + a.level + ")";
          var arg = {
            name: name,
            text: text,
            money: money
          };
          this.Bar1.active = false;
          this.costTipo.node.active = true;
          this.costTipo.initUI(arg, id);
        } // public testClick(uipos: Vec2) {
        //     if (UIHelp.TestUIPoint(uipos, this.sp)) {
        //         return true;
        //     }
        //     if (UIHelp.TestUIPoint(uipos, this.Btn)) {
        //         return true;
        //     }
        //     return false;
        // }
        // onBeginTouch(event) {
        //     let uipos = event.touch.getUILocation();
        //     if (this.Btn.active && UIHelp.TestUIPoint(uipos, this.Btn) && !this._cbData.select.isMaxLevel()) {
        //         this.onBtn();
        //     } else {
        //         event.preventSwallow = true;
        //     }
        // }
        ;

        _proto.onMoveTouch = function onMoveTouch(event) {};

        _proto.onStopTouch = function onStopTouch(event) {};

        return LandUpgradeTip;
      }(BaseUI), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "producerName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Text", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "Btn", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "costTipo", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "Bar1", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Language.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstLanguage.ts', './ConfigFile.ts', './UIManager.ts', './NodeHelp.ts', './Pool.ts', './SetUI.ts', './SetSecondaryUIEntity.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, ScrollView, instantiate, Label, ConstLanguage, ConfigFile, UIManager, NodeHelp, PoolOnce, SetUI, SetSecondaryUIEntity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      ScrollView = module.ScrollView;
      instantiate = module.instantiate;
      Label = module.Label;
    }, function (module) {
      ConstLanguage = module.ConstLanguage;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      SetUI = module.SetUI;
    }, function (module) {
      SetSecondaryUIEntity = module.SetSecondaryUIEntity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "3f628sC9q1NOKrYzzJKGMIE", "Language", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Language = exports('Language', (_dec = ccclass('Language'), _dec2 = property(Prefab), _dec3 = property(ScrollView), _dec(_class = (_class2 = /*#__PURE__*/function (_SetSecondaryUIEntity) {
        _inheritsLoose(Language, _SetSecondaryUIEntity);

        function Language() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SetSecondaryUIEntity.call.apply(_SetSecondaryUIEntity, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "item", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "list", _descriptor2, _assertThisInitialized(_this));

          _this.Pool = new PoolOnce(20, function () {
            return instantiate(_this.item);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          return _this;
        }

        var _proto = Language.prototype;

        _proto.init = function init() {
          _SetSecondaryUIEntity.prototype.init.call(this);

          this.setShow();
          this.creatTooge();
        };

        _proto.setShow = function setShow() {
          NodeHelp.getchildlable(this.node, "LabelTitle", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.Set_PANEL_BUTTON7);
          });
        };

        _proto.creatTooge = function creatTooge() {
          var _this2 = this;

          var config = ConfigFile.getTLanguage();

          if (!config) {
            return;
          }

          var itemNum = Math.ceil(config.length / 2);
          var i = 0;

          var func = function func() {
            if (i >= itemNum) {
              i = 0;

              _this2.unschedule(func);

              return;
            }

            var item = _this2.Pool.get();

            _this2.list.content.addChild(item);

            item.getComponent("setUILanguageItem").init(i, _this2);
            i++;
          };

          this.schedule(func, 0);
        };

        _proto.setToggleShow = function setToggleShow() {
          var setUi = UIManager.getInstance().getUI(SetUI);

          if (setUi) {
            setUi.setTextShow();
            this.setShow();
          } // let wnd: UIGame = UIManager.getInstance().getUI(UIGame) as UIGame;
          // if(wnd&&wnd.ActiveOther)
          // {
          //     wnd.ActiveOther.getComponent(UIGameActiveOther).ActiveSetShow()
          // }


          this.list.content.children.forEach(function (v) {
            v.getComponent("setUILanguageItem").setToggleChecked();
          });
        };

        return Language;
      }(SetSecondaryUIEntity), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "item", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "list", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/light.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "292capTUShBAZCg4Rh5O/PR", "light", undefined);

      var lightTheme = exports('default', {
        name: "light",
        colors: {
          background: "rgb(255, 255, 255)",
          main: "rgb(12, 12, 13)",
          secondary: "rgb(169, 169, 188)",
          border: "rgba(195, 195, 195, 0.14)",
          hover: "rgba(195, 195, 195, 0.14)"
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ListenerType.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8ea11Tcb4BI7ojchoTKxYZm", "ListenerType", undefined);

      var ListenerType = exports('ListenerType', function ListenerType() {});
      ListenerType.Test = "Test";
      ListenerType.GameStart = "GameStart";
      ListenerType.UpdateMainUI = "UpdateMainUI";
      ListenerType.LoopUpdate = "LoopUpdate";
      ListenerType.ShowWaiting = "ShowWaiting";
      ListenerType.RemoveWaiting = "RemoveWaiting";
      ListenerType.OnLose = "OnLose";
      ListenerType.OnWin = "OnWin";
      ListenerType.OnInitStage = "OnInitStage";
      ListenerType.OnInitStageUI = "OnInitStageUI";
      ListenerType.SHOW_TOAST = "SHOW_TOAST";
      ListenerType.Game_Close = "Game_Close";
      ListenerType.GameMsg = "GameMsg";
      ListenerType.RoomClose = "RoomClose";
      ListenerType.NetBreak = "NetBreak";
      ListenerType.UPDATEBAG = "UPDATEBAG";
      ListenerType.UPDATEINFO = "UPDATEINFO";
      ListenerType.OPENGAME1 = "OPENGAME1";
      ListenerType.OPENMAINUI = "OPENMAINUI";
      ListenerType.LOADINGEND = "LOADINGEND";

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingLiteView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './BaseUI.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ProgressBar, Label, ConfigFile, BaseUI;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ProgressBar = module.ProgressBar;
      Label = module.Label;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      BaseUI = module.BaseUI;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _class3;

      cclegacy._RF.push({}, "81067B4jkRKZYROcn+EYHlq", "LoadingLiteView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LoadingLiteView = exports('LoadingLiteView', (_dec = ccclass('LoadingLiteView'), _dec2 = property(ProgressBar), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(LoadingLiteView, _BaseUI);

        function LoadingLiteView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "progressBar", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = LoadingLiteView.prototype;

        _proto.onLoad = function onLoad() {
          this.progressBar.progress = 0;
          this.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(113017);
        };

        _proto.start = function start() {};

        _proto.update = function update(deltaTime) {};

        return LoadingLiteView;
      }(BaseUI), _class3.className = "LoadingLiteView", _class3), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "progressBar", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingTAView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseUI.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, BaseUI;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
    }, function (module) {
      BaseUI = module.BaseUI;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _class3;

      cclegacy._RF.push({}, "00a565KhXpCOoJimK/93ZyQ", "LoadingTAView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LoadingTAView = exports('LoadingTAView', (_dec = ccclass('LoadingTAView'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(LoadingTAView, _BaseUI);

        function LoadingTAView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "bg1", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bg2", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = LoadingTAView.prototype;

        _proto.start = function start() {};

        _proto.setBg = function setBg(type) {
          if (type == 1) {
            this.bg2.active = false;
          } else {
            this.bg2.active = true;
          }
        };

        _proto.update = function update(deltaTime) {};

        return LoadingTAView;
      }(BaseUI), _class3.className = "LoadingTAView", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bg1", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bg2", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ResourceManager.ts', './UIManager.ts', './NodeHelp.ts', './PlatformUtil.ts', './UIHelp.ts', './BaseUI.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ProgressBar, Asset, Label, view, sys, Widget, ResourceManager, UIManager, NodeHelp, PlatformUtil, UIHelp, BaseUI;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ProgressBar = module.ProgressBar;
      Asset = module.Asset;
      Label = module.Label;
      view = module.view;
      sys = module.sys;
      Widget = module.Widget;
    }, function (module) {
      ResourceManager = module.ResourceManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PlatformUtil = module.PlatformUtil;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      BaseUI = module.BaseUI;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _class3;

      cclegacy._RF.push({}, "c431aaCcJJLHrPim7w9Eay/", "LoadingUI", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LOADSTATE;

      (function (LOADSTATE) {
        LOADSTATE[LOADSTATE["LS_ENTRY"] = 0] = "LS_ENTRY";
        LOADSTATE[LOADSTATE["LS_LOAD"] = 1] = "LS_LOAD";
        LOADSTATE[LOADSTATE["LS_EXIT"] = 2] = "LS_EXIT";
        LOADSTATE[LOADSTATE["LS_DESTORY"] = 3] = "LS_DESTORY";
      })(LOADSTATE || (LOADSTATE = {}));

      var LoadingUI = exports('LoadingUI', (_dec = ccclass('LoadingUI'), _dec2 = property(ProgressBar), _dec3 = property(Asset), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(LoadingUI, _BaseUI);

        function LoadingUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "pbar", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Manifest", _descriptor2, _assertThisInitialized(_this));

          _this.status = LOADSTATE.LS_ENTRY;
          _this.entryCb = null;
          _this.loadCb = null;
          _this.exitCb = null;
          _this._res = null;
          _this._isLoadOk = false;
          _this._curTime = 0;
          _this._lastTime = 0;
          return _this;
        }

        var _proto = LoadingUI.prototype;

        _proto.initUI = function initUI(args, cb1, cb2, cb3) {
          var _this2 = this;

          var self = this;
          this.pbar && (this.pbar.progress = 0.0);
          this.entryCb = cb1;
          this.loadCb = cb2;
          this.exitCb = cb3;
          this.changeStats(LOADSTATE.LS_ENTRY);

          if (args) {
            ResourceManager.getInstance().load(args, function (result, count, total) {
              _this2.pbar && (_this2.pbar.progress = count / total);
            }, function (errors, resources) {
              self._res = resources;
              self._isLoadOk = true;
            });
          } else {
            self._res = null;
            self._isLoadOk = true;
          }
        } // setMat(rate:number){
        //     let t = rate>1.0?1.0:rate;
        //     t = t<0.0?0.0:t;
        //     let mat = this.bg.material;
        //     mat.setProperty("customFadeAlpha", t, 0);
        // }
        ;

        _proto.changeStats = function changeStats(s) {
          this.status = s;
          this._lastTime = UIHelp.getTimeMask();

          switch (this.status) {
            case LOADSTATE.LS_ENTRY:
              this.pbar.node.active = false;
              this._isLoadOk = false;
              this._res = null;
              this._curTime = 0; //this.setMat(0.0);

              break;

            case LOADSTATE.LS_LOAD:
              this.pbar.node.active = true;
              this.entryCb && this.entryCb();
              break;

            case LOADSTATE.LS_EXIT:
              this.pbar.node.active = false; //this.setMat(1.0);

              this.loadCb && this.loadCb(this._res);
              break;

            case LOADSTATE.LS_DESTORY:
              UIManager.getInstance().closeUI(LoadingUI);
              break;
          }
        };

        _proto.onLoad = function onLoad() {};

        _proto.onDestroy = function onDestroy() {
          this.exitCb && this.exitCb();

          _BaseUI.prototype.onDestroy.call(this); // EventManager.getInstance().remove(MessageManager.Net.FarmUserResponse, this, this.onFarmUserResponse);

        };

        _proto.start = function start() {
          var _this3 = this;

          NodeHelp.getchildlable(this.node, "Version", Label, function (comp) {
            comp.string = "V" + PlatformUtil.getManifestVersion(_this3.Manifest);
          }); // EventManager.getInstance().add(MessageManager.Net.FarmUserResponse, this, this.onFarmUserResponse);

          this.setSafe();
        };

        _proto.setSafe = function setSafe() {
          var visibleSize = view.getVisibleSize();
          var safeArea = sys.getSafeAreaRect();
          NodeHelp.getchildlable(this.node, "Version", Widget, function (comp, node) {
            var rightsize = visibleSize.x - (safeArea.x + safeArea.width) - comp.right;
            comp.right = rightsize <= 0 ? comp.right : rightsize;
            comp.updateAlignment();
          });
        };

        _proto.update = function update(deltaTime) {
          if (this.status == LOADSTATE.LS_ENTRY) {
            this._curTime += 0.8 * deltaTime; //this.setMat(this._curTime);

            if (this._curTime > 1.0) {
              this._curTime = 1.0;
              this.changeStats(LOADSTATE.LS_LOAD);
            }
          } else if (this.status == LOADSTATE.LS_LOAD && this._isLoadOk) {
            if (UIHelp.getTimeDiff(this._lastTime) > 3000) this.changeStats(LOADSTATE.LS_EXIT);
          } else if (this.status == LOADSTATE.LS_EXIT) {
            this._curTime -= 0.8 * deltaTime; //this.setMat(this._curTime);

            if (this._curTime < 0.0) {
              this.changeStats(LOADSTATE.LS_DESTORY);
            }
          }
        } // private onFarmUserResponse(data) {
        // }
        ;

        return LoadingUI;
      }(BaseUI), _class3.className = "LoadingUI", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "pbar", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Manifest", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameAllData.ts', './EventManager.ts', './GameManager.ts', './MessageManager.ts', './UIManager.ts', './MainGame.ts', './NodeHelp.ts', './PlatformUtil.ts', './UIHelp.ts', './BaseUI.ts', './SelectRoleView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ProgressBar, Node, Asset, UITransform, v3, view, Vec3, Label, sys, Widget, GameAllData, EventManager, GameManager, MessageManager, UIManager, MainGame, NodeHelp, PlatformUtil, UIHelp, BaseUI, SelectRoleView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ProgressBar = module.ProgressBar;
      Node = module.Node;
      Asset = module.Asset;
      UITransform = module.UITransform;
      v3 = module.v3;
      view = module.view;
      Vec3 = module.Vec3;
      Label = module.Label;
      sys = module.sys;
      Widget = module.Widget;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      MainGame = module.MainGame;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PlatformUtil = module.PlatformUtil;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      SelectRoleView = module.SelectRoleView;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _class3;

      cclegacy._RF.push({}, "52beeJcTBBC4JezUn7lq7Hs", "LoadingView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LoadingView = exports('LoadingView', (_dec = ccclass('LoadingView'), _dec2 = property(ProgressBar), _dec3 = property(Node), _dec4 = property(Asset), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(LoadingView, _BaseUI);

        function LoadingView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "progressBar", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sprProgressMark", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Manifest", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = LoadingView.prototype;

        _proto.onLoad = function onLoad() {
          this.progressBar.progress = 0;
        };

        _proto.onDestroy = function onDestroy() {
          _BaseUI.prototype.onDestroy.call(this);
        };

        _proto.start = function start() {
          var _this2 = this;

          UIHelp.closeLoadingTA();
          GameManager.getInstance().openGame(MainGame, function (game, args) {}, function (completedCount, totalCount, item) {
            var percentage = completedCount / totalCount;

            if (percentage > _this2.progressBar.progress) {
              _this2.progressBar.progress = percentage;

              var progressBarSize = _this2.progressBar.node.getComponent(UITransform).contentSize;

              _this2.sprProgressMark.position = v3(progressBarSize.width * percentage, _this2.sprProgressMark.position.y, 0);
            }
          });
          var target = this.node.getChildByName("Node");
          var cs = view.getVisibleSize();
          var scale = NodeHelp.setScopeLimitationInSizeNew(target.getComponent(UITransform), cs.width, cs.height);
          target.setScale(new Vec3(scale, scale, 1));
          EventManager.getInstance().add(MessageManager.Net.FarmUserResponse, this, this.onFarmUserResponse);
          NodeHelp.getchildlable(this.node, "Version", Label, function (comp) {
            comp.string = "V" + PlatformUtil.getManifestVersion(_this2.Manifest);
          });
          this.setSafe();
        };

        _proto.setSafe = function setSafe() {
          var visibleSize = view.getVisibleSize();
          var safeArea = sys.getSafeAreaRect();
          NodeHelp.getchildlable(this.node, "Version", Widget, function (comp, node) {
            var rightsize = visibleSize.x - (safeArea.x + safeArea.width) - comp.right;
            comp.right = rightsize <= 0 ? comp.right : rightsize;
            comp.updateAlignment();
          });
        };

        _proto.onFarmUserResponse = function onFarmUserResponse(data) {
          UIManager.getInstance().openUI(SelectRoleView, 11, function (ui, args) {
            ui.data = data;
          }, null, null, true);
          GameAllData.languageId = data.Language;
        };

        return LoadingView;
      }(BaseUI), _class3.className = "LoadingView", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "progressBar", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sprProgressMark", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "Manifest", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/local.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _extends, cclegacy, isLocalStorageAvailable;

  return {
    setters: [function (module) {
      _extends = module.extends;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      isLocalStorageAvailable = module.isLocalStorageAvailable;
    }],
    execute: function () {
      exports('local', void 0);

      cclegacy._RF.push({}, "48dc6AHMpBJxIk4KALg/MqC", "local", undefined);

      var local;

      if (isLocalStorageAvailable()) {
        local = exports('local', window.localStorage);
      }

      var setLocal = exports('setLocal', function setLocal(key, data) {
        var jsonData = JSON.stringify(data);

        if (local) {
          local.setItem(key, jsonData);
        }
      });
      var getLocal = exports('getLocal', function getLocal(key) {
        var data = null;
        var raw = null;

        if (local) {
          raw = local.getItem(key);
        }

        if (raw && typeof raw === "string") {
          try {
            data = JSON.parse(raw);
          } catch (error) {
            return null;
          }
        }

        return data;
      });
      var removeLocal = exports('removeLocal', function removeLocal(key) {
        if (local) {
          local.removeItem(key);
        }
      });
      var updateLocal = exports('updateLocal', function updateLocal(key, data) {
        var localData = getLocal(key) || {};

        var mergedData = _extends({}, localData, data);

        setLocal(key, mergedData);
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LogWrap.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, js, log;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      js = module.js;
      log = module.log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "615f7lsxLNDWJSqVJoRIFW3", "LogWrap", undefined);

      var LogWrap = exports('LogWrap', /*#__PURE__*/function () {
        function LogWrap() {}

        LogWrap.getDateString = function getDateString() {
          var d = new Date();
          var str = d.getHours().toString();
          var timeStr = "";
          timeStr += (str.length == 1 ? "0" + str : str) + ":";
          str = d.getMinutes().toString();
          timeStr += (str.length == 1 ? "0" + str : str) + ":";
          str = d.getSeconds().toString();
          timeStr += (str.length == 1 ? "0" + str : str) + ":";
          str = d.getMilliseconds().toString();
          if (str.length == 1) str = "00" + str;
          if (str.length == 2) str = "0" + str;
          timeStr += str;
          timeStr = "[" + timeStr + "]";
          return timeStr;
        };

        LogWrap.stack = function stack(index) {
          var e = new Error();
          var lines = e.stack.split("\n");
          lines.shift();
          var result = [];
          lines.forEach(function (line) {
            line = line.substring(7);
            var lineBreak = line.split(" ");

            if (lineBreak.length < 2) {
              result.push(lineBreak[0]);
            } else {
              var _result$push;

              result.push((_result$push = {}, _result$push[lineBreak[0]] = lineBreak[1], _result$push));
            }
          });
          var list = [];

          if (index < result.length - 1) {
            for (var a in result[index]) {
              list.push(a);
            }
          }

          var splitList = list[0].split(".");
          return splitList[0] + ".js->" + splitList[1] + ": ";
        };

        LogWrap.log = function log$1() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var backLog = console.log || log; // || log;

          {
            backLog.call(this, "%s%s:" + js.formatStr.apply(cc, arguments), LogWrap.stack(2), LogWrap.getDateString());
          }
        };

        LogWrap.info = function info() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          var backLog = console.log || log; // || log;

          {
            backLog.call(this, "%c%s%s:" + js.formatStr.apply(cc, arguments), "color:#00CD00;", LogWrap.stack(2), LogWrap.getDateString());
          }
        };

        LogWrap.warn = function warn() {
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }

          var backLog = console.log || log; // || log;

          {
            backLog.call(this, "%c%s%s:" + js.formatStr.apply(cc, arguments), "color:#ee7700;", LogWrap.stack(2), LogWrap.getDateString()); //cc.warn
          }
        };

        LogWrap.err = function err() {
          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }

          var backLog = console.log || log; // || log;

          {
            backLog.call(this, "%c%s%s:" + js.formatStr.apply(cc, arguments), "color:red", LogWrap.stack(2), LogWrap.getDateString());
          }
        };

        return LogWrap;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/main", ['./pb.mjs_cjs=&original=.js', './AnimalCtl.ts', './BoatCtl.ts', './CloudCtl.ts', './AreaCodeConfig.ts', './BaseConfigContainer.ts', './TaskConfig.ts', './PlayBackGrund.ts', './PlayButtonSound.ts', './PlaySliderSound.ts', './ScrollText.ts', './SwitchChildrenCC.ts', './ConstLanguage.ts', './ConstValue.ts', './EnumDefine.ts', './GameData.ts', './ListenerType.ts', './ConfigFile.ts', './GameAllData.ts', './RoleInfo.ts', './SettingInfo.ts', './GuardCtr.ts', './HandCtl.ts', './GameMain.ts', './text.ts', './AudioManager.ts', './BasicPlatform.ts', './ConfigManager.ts', './EventManager.ts', './GameDataManager.ts', './GameManager.ts', './MessageManager.ts', './PlatformManager.ts', './ResourceManager.ts', './TaskConfigGoManager.ts', './TaskManager.ts', './TipManager.ts', './UIManager.ts', './redDotManager.ts', './HttpMgr.ts', './WebSocketMgr.ts', './OctreeScens.ts', './OperaleDef.ts', './RoleCtl.ts', './BasePanel.ts', './BaseUI.ts', './TipDlg.ts', './LabelIcon.ts', './redDot.ts', './ActivityArena.ts', './ActivityDirectlyunder.ts', './ActivityDirectlyunderItem.ts', './ActivityExtension.ts', './ActivityGeneralAgentRewawrds.ts', './ActivityNobletoken.ts', './ActivityRewardItem.ts', './ActivityUIRewardItem.ts', './UIActivityOtherToggleItem.ts', './UIArenaItem.ts', './UIExtensionItem.ts', './AnswerItem.ts', './AreaCodeItem.ts', './BagUIItem.ts', './BagUIItemGoodsTip.ts', './BagUIItemTip.ts', './ExpAnime.ts', './FamilyPlayerItem.ts', './GetItemEff.ts', './IconAnime.ts', './KLineItem.ts', './MarketGoodsItem.ts', './MarketOrderItem.ts', './MarketTradeRecordItem.ts', './PerformancePlayerItem.ts', './ScrollNum.ts', './SeedItem.ts', './Account.ts', './GiftCode.ts', './Language.ts', './Notice.ts', './PhoneBinding.ts', './Recharge.ts', './SafetyCode.ts', './SetSecondaryUIEntity.ts', './setUILanguageItem.ts', './ToolItem.ts', './ActivityBeeHomeItem.ts', './ActivityComponent.ts', './ActivityFirstChargeItem.ts', './ActivityItem.ts', './ActivityLuckyWheel.ts', './ActivityLuckyWheelitem.ts', './ActivityNobletokenItem.ts', './ActivityPropsItem.ts', './ActivitySignEveryDay.ts', './ActivitySignEveryDayItem.ts', './ActivitySignLimitedDay.ts', './ActivitySignLimitedDayItem.ts', './ActivityUpgradePackage.ts', './ActivityUpgradePackageItem.ts', './ActivityUpgradePackageItemTipItem.ts', './UIActivityToggleItem.ts', './CashOutItem.ts', './ExchangeItem.ts', './ExchangeRecodItem.ts', './RechargeItem.ts', './TransferItem.ts', './UIGameActiveOther.ts', './UIGameHead.ts', './UIGameItemCoin.ts', './UIGameItemExperience.ts', './UIGameItemSettings.ts', './UIGameTask.ts', './UIGameTaskItem.ts', './UIGameTaskItemTip.ts', './UIGameTaskTipItem.ts', './UIHeadItem.ts', './UIShopItem.ts', './UIShopItemLight.ts', './UIShopItemTip.ts', './ActivityTipItem.ts', './DailyTaskUIItem.ts', './EveryDayActivityTaskItem.ts', './TaskUIItem.ts', './TaskUIRewardItem.ts', './VerificationUIItem.ts', './WalletAddress.ts', './iconAnimeBtnTransfer.ts', './newUnlockItem.ts', './AnimalInfoTip.ts', './BaseTip.ts', './CubInfo.ts', './LandUpgradeTip.ts', './PastureUpgradeTip.ts', './SeedInfo.ts', './StatueUnlockTip.ts', './ToolUnlockTip.ts', './UnlockTip.ts', './UpdrageCostTip.ts', './landInfoTip.ts', './producerTip.ts', './seedUnlockTip.ts', './BagUI.ts', './CashOutView.ts', './ChickBox.ts', './ChoiceBox.ts', './ClickMask.ts', './CutscenesView.ts', './ExceptionView.ts', './ExperienceUI.ts', './FamilyView.ts', './GoogleVerifySetUI.ts', './HotUpdateView.ts', './InvitationCodeView.ts', './LoadingLiteView.ts', './LoadingTAView.ts', './LoadingUI.ts', './LoadingView.ts', './MarketLobbyUI.ts', './MarketTradeMineView.ts', './MarketTradeRecordView.ts', './MarketTradeTheirView.ts', './MarketTradeUI.ts', './MarketView.ts', './MessageBox.ts', './MessageBoxD.ts', './NameInput.ts', './PerformanceView.ts', './RechargeView.ts', './SafeCodeInputBox.ts', './SeedView.ts', './SelectRoleView.ts', './SetSecondaryUI.ts', './SetUI.ts', './SetsafetyCodeBanding.ts', './TalkUI.ts', './TaskTalkUI.ts', './TaskUI.ts', './TipsUI.ts', './UIActivity.ts', './UIActivityLuckGet.ts', './UIActivityOther.ts', './UIAnswer.ts', './UIAnswerRet.ts', './UIConchExchange.ts', './UIConchExchangeRecod.ts', './UIDescription.ts', './UIGame.ts', './UIHead.ts', './UIHouse.ts', './UILogin.ts', './UINotice.ts', './PanelContent.ts', './PropItemTip.ts', './UINoticeItem.ts', './UINoticePropItem.ts', './UIShop.ts', './UIStory.ts', './UIVerification.ts', './UIWallet.ts', './UIWalletAddressEdit.ts', './WaitNet.ts', './WelcomeUI.ts', './upLevelUI.ts', './ArrayExtension.ts', './CommonUtil.ts', './DateUtil.ts', './GList.ts', './LogWrap.ts', './NodeHelp.ts', './NumberUtil.ts', './PlatformCbUtil.ts', './PlatformUtil.ts', './Pool.ts', './Sets.ts', './StorageUtil.ts', './StringExtension.ts', './TimerMgr.ts', './TweenHelp.ts', './UIHelp.ts', './condition.ts', './build.ts', './CustomLabel.ts', './CustomSprite.ts', './customScrollView.ts', './fameland.ts', './jiantouAnimation.ts', './ethers.umd.min.mjs_cjs=&original=.js', './operateBtnCtl.ts', './pasture.ts', './plantCtl.ts', './producer.ts', './removeSelfCtl.ts', './BaseGame.ts', './MainGame.ts', './towAnimation.ts', './Modal.ts', './Provider.ts', './index.ts', './chains.ts', './classNames.ts', './events.ts', './index9.ts', './keys.ts', './events2.ts', './index3.ts', './providers.ts', './Core.ts', './detect-browser.mjs_cjs=&original=.js', './index10.ts', './local.ts', './types.ts', './utils.ts', './index7.ts', './authereum.ts', './binancechainwallet.ts', './bitski.ts', './boltx.ts', './burnerconnect.ts', './clvwallet.ts', './coinbasewallet.ts', './dcentwallet.ts', './fortmatic.ts', './frame.ts', './index2.ts', './injected.ts', './mewconnect.ts', './opera.ts', './portis.ts', './sequence.ts', './torus.ts', './venly.ts', './walletconnect.ts', './index5.ts', './index6.ts', './index4.ts', './dark.ts', './index8.ts', './light.ts'], function () {
  'use strict';

  return {
    setters: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    execute: function () {}
  };
});

System.register("chunks:///_virtual/MainGame.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseGame.ts', './HandCtl.ts', './producer.ts', './UIManager.ts', './TaskManager.ts', './UIGame.ts', './UIHelp.ts', './fameland.ts', './pasture.ts', './build.ts', './operateBtnCtl.ts', './BaseTip.ts', './OperaleDef.ts', './MessageManager.ts', './EventManager.ts', './WebSocketMgr.ts', './GameAllData.ts', './MessageBox.ts', './ScrollNum.ts', './IconAnime.ts', './ConfigFile.ts', './TipManager.ts', './ConstLanguage.ts', './upLevelUI.ts', './UIVerification.ts', './removeSelfCtl.ts', './CutscenesView.ts', './OctreeScens.ts', './GetItemEff.ts', './UIAnswerRet.ts', './UIAnswer.ts', './PlatformUtil.ts', './SelectRoleView.ts', './UIActivity.ts', './UIActivityLuckGet.ts', './CommonUtil.ts', './FamilyView.ts', './EnumDefine.ts', './UINotice.ts', './DateUtil.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, _extends, _createClass, cclegacy, Vec3, _decorator, Prefab, Node, Vec2, find, Camera, tween, instantiate, sys, UITransform, view, Size, resources, math, BaseGame, HandCtl, producer, UIManager, TaskManager, UIGame, UIHelp, fameland, pasture, build, operateBtnCtl, BaseTip, OperaleDef, OperaleData, MessageManager, EventManager, WebSocketMgr, GameAllData, MessageBox, ScrollNum, IconAnime, ConfigFile, TipManager, ConstLanguage, upLevelUI, UIVerification, removeSelfCtl, CutscenesView, OctreeScens, GetItemEff, UIAnswerRet, UIAnswer, PlatformUtil, SelectRoleView, UIActivity, UIActivityLuckGet, CommonUtil, FamilyView, EnumDefine, UINotice, DateUtil;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _extends = module.extends;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      Vec2 = module.Vec2;
      find = module.find;
      Camera = module.Camera;
      tween = module.tween;
      instantiate = module.instantiate;
      sys = module.sys;
      UITransform = module.UITransform;
      view = module.view;
      Size = module.Size;
      resources = module.resources;
      math = module.math;
    }, function (module) {
      BaseGame = module.BaseGame;
    }, function (module) {
      HandCtl = module.HandCtl;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      TaskManager = module.TaskManager;
    }, function (module) {
      UIGame = module.UIGame;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      fameland = module.fameland;
    }, function (module) {
      pasture = module.pasture;
    }, function (module) {
      build = module.build;
    }, function (module) {
      operateBtnCtl = module.operateBtnCtl;
    }, function (module) {
      BaseTip = module.BaseTip;
    }, function (module) {
      OperaleDef = module.OperaleDef;
      OperaleData = module.OperaleData;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      MessageBox = module.MessageBox;
    }, function (module) {
      ScrollNum = module.ScrollNum;
    }, function (module) {
      IconAnime = module.IconAnime;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      ConstLanguage = module.ConstLanguage;
    }, function (module) {
      upLevelUI = module.upLevelUI;
    }, function (module) {
      UIVerification = module.UIVerification;
    }, function (module) {
      removeSelfCtl = module.removeSelfCtl;
    }, function (module) {
      CutscenesView = module.CutscenesView;
    }, function (module) {
      OctreeScens = module.OctreeScens;
    }, function (module) {
      GetItemEff = module.GetItemEff;
    }, function (module) {
      UIAnswerRet = module.UIAnswerRet;
    }, function (module) {
      UIAnswer = module.UIAnswer;
    }, function (module) {
      PlatformUtil = module.PlatformUtil;
    }, function (module) {
      SelectRoleView = module.SelectRoleView;
    }, function (module) {
      UIActivity = module.UIActivity;
    }, function (module) {
      UIActivityLuckGet = module.UIActivityLuckGet;
    }, function (module) {
      CommonUtil = module.CommonUtil;
    }, function (module) {
      FamilyView = module.FamilyView;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      UINotice = module.UINotice;
    }, function (module) {
      DateUtil = module.DateUtil;
    }],
    execute: function () {
      exports('GAMESTATE', void 0);

      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _class3;

      cclegacy._RF.push({}, "de3c1DG9KtF64/84W9/uYKZ", "MainGame", undefined);

      var temp_v3_1 = new Vec3();
      var temp_v3_2 = new Vec3();
      var temp_CameraOffset = new Vec3();
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var errorInfo = {
        "1000": "道具不足",
        "1001": "vip等级不足",
        "1002": "爵位不足",
        "1": "土地未解锁",
        "2": "2配置不存在",
        "3": "土地等级不足",
        "4": "还没有产出"
      };
      var GAMESTATE;

      (function (GAMESTATE) {
        GAMESTATE[GAMESTATE["GS_LOADING"] = 1] = "GS_LOADING";
        GAMESTATE[GAMESTATE["GS_ONTIME"] = 2] = "GS_ONTIME";
        GAMESTATE[GAMESTATE["GS_SOWING"] = 3] = "GS_SOWING";
        GAMESTATE[GAMESTATE["GS_PLANTBRUSH"] = 4] = "GS_PLANTBRUSH";
        GAMESTATE[GAMESTATE["GS_ANIMAL"] = 5] = "GS_ANIMAL";
        GAMESTATE[GAMESTATE["GS_ANIMALBRUSH"] = 6] = "GS_ANIMALBRUSH";
        GAMESTATE[GAMESTATE["GS_TOW"] = 7] = "GS_TOW";
        GAMESTATE[GAMESTATE["GS_MOVEMAP"] = 8] = "GS_MOVEMAP";
      })(GAMESTATE || (GAMESTATE = exports('GAMESTATE', {})));

      var MainGame = exports('MainGame', (_dec = ccclass('MainGame'), _dec2 = property(Prefab), _dec3 = property(Prefab), _dec4 = property(Prefab), _dec5 = property(Prefab), _dec6 = property(Prefab), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(Node), _dec10 = property(Node), _dec11 = property(Node), _dec12 = property(Node), _dec13 = property(Node), _dec14 = property(Node), _dec15 = property(Node), _dec16 = property(Node), _dec17 = property(Node), _dec18 = property(Node), _dec19 = property(operateBtnCtl), _dec20 = property(Node), _dec21 = property(Node), _dec22 = property(OctreeScens), _dec23 = property(Node), _dec24 = property(Prefab), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseGame) {
        _inheritsLoose(MainGame, _BaseGame);

        function MainGame() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseGame.call.apply(_BaseGame, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "famelandPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pasturePrefab", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ScrollNum", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "IconAnimation", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ExpAnimation", _descriptor5, _assertThisInitialized(_this));

          _this.hand = null;

          _initializerDefineProperty(_this, "layer1", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "layer2", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "layer3", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "layer4", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "layerDynamic", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "UIlayer", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "farmland", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pasture", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "build", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "waterNode", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "HouseNode", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "BagNode", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "operaleBtn", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tipDlg", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "anchorPoint", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scensTree", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hightSkyAnimation", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "getItemEff", _descriptor23, _assertThisInitialized(_this));

          _this._build = [];
          _this._farmland = [];
          _this._pasture = [];
          _this._UICamera = null;
          _this._LastTime = 0;
          _this._Scale = 0.7;
          _this._selectItem = null;
          _this._selectPos = new Vec2();
          _this._selectTime = null;
          _this._waitClick = false;
          _this._NetLock = false;
          _this._NetLockTime = 0;
          _this._MapAction = null;
          _this._state = 0;
          _this._lastState = 0;
          _this._stateChangeTime = 0;
          _this._gameUI = null;
          _this._BrushTime = 0;
          _this.targetTScale = 0.7;
          _this.targetTScaleLock = false;
          _this._activeCache = [];
          _this._activeEnterLock = false;
          _this._scaleLock = false;
          _this._SpecialTipMode = false;
          _this._CopyScaleInfo = 0;
          _this._NetReplace = false;
          _this._updateTime = 0;
          _this.clickPastureLock = false;
          _this.FarmLandPlantMap = new Map();
          _this.FarmHarvestPlantMap = new Map();
          _this.FarmLandEradicateMap = new Map();
          _this.FarmLandBreedMap = new Map();
          _this.FarmLandAnimalActionMap = new Map();
          _this.FarmLandAnimalBuryMap = new Map();
          return _this;
        }

        var _proto = MainGame.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this; //用UI摄像机作为场景摄像机的锚点


          GameAllData.visitState = false;
          this._UICamera = find("Canvas/Camera").getComponent(Camera);
          this.build.children.forEach(function (item) {
            _this2._build.push(item);
          }); // this.farmland.children.forEach((item) => {
          //     this._farmland.push(item);
          // })
          // this.pasture.children.forEach((item) => {
          //     this._pasture.push(item);
          // })

          this.initPasture();
          this.initFarmLand();
          this.gameStateChange(GAMESTATE.GS_LOADING);
          EventManager.getInstance().add(MessageManager.Net.FarmInitializationResponse, this, this.onFarmInitializationResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmInitialization0Response, this, this.onFarmInitialization0Response);
          EventManager.getInstance().add(MessageManager.Net.FarmUserResponse, this, this.onUserResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmVisitUserResponse, this, this.onFarmVisitUserResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmLandResponse, this, this.onLandResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmPastureResponse, this, this.onPastureResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmLandUnlockResponse, this, this.onLandUnlockResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmPastureUnlockResponse, this, this.onPastureUnlockResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmPastureTroughUpgradeResponse, this, this.onPastureTroughUpgradeResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmPastureUpgradeResponse, this, this.onPastureUpgradeResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmLandUpgradeResponse, this, this.onLandUpgradeResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmLandPlantResponse, this, this.onLandPlantResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmLandHarvestResponse, this, this.onHarvestPlantResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmLandEradicateResponse, this, this.onWeedingPlantResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmLandWateringResponse, this, this.onLandWateringResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmLandBreedResponse, this, this.onLandBreedResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmLandAnimalActionResponse, this, this.onLandAnimalActionResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmLandAnimalCollectResponse, this, this.onLandAnimalCollectResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmLandAnimalBuryResponse, this, this.onLandAnimalBuryResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmAnimalFeedCostResponse, this, this.onAnimalFeedCostResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmVisitResponse, this, this.onFarmVisitResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmVisitBackResponse, this, this.onFarmVisitBackResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmVisitStealPlantResponse, this, this.onFarmVisitStealPlantResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmVisitStealAnimalResponse, this, this.onFarmVisitStealAnimalResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmVisitPlantActionResponse, this, this.onFarmVisitPlantActionResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmVisitAnimalActionResponse, this, this.onFarmVisitAnimalActionResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmVipChangeResponse, this, this.onFarmVipChangeResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmRankChangeResponse, this, this.onFarmRankChangeResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmStatueResponse, this, this.onFarmStatueResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmHouseResponse, this, this.onFarmHouseResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmVisitHearResponse, this, this.onFarmVisitHearResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmSendHeartResponse, this, this.onFarmSendHeartResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmStoreResponse, this, this.onFarmStoreResponse);
          EventManager.getInstance().add(MessageManager.Custom.StartGame, this, this.onStartGame);
          EventManager.getInstance().add(MessageManager.Custom.OpenHand, this, this.onOpenHand);
          EventManager.getInstance().add(MessageManager.Custom.ShowLandEnable, this, this.onLandEnable);
          EventManager.getInstance().add(MessageManager.Custom.OpenOperaleBtn, this, this.onOpenOperaleBtn);
          EventManager.getInstance().add(MessageManager.Custom.ShowFarmTip, this, this.onShowFarmTip);
          EventManager.getInstance().add(MessageManager.Custom.HideFarmTip, this, this.onHideFarmTip);
          EventManager.getInstance().add(MessageManager.Net.FarmItemChangeResponse, this, this.onItemChangeResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmCurrencyChangeResponse, this, this.onFarmCurrencyChangeResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmBuyItemResponse, this, this.FarmBuyItemResponse); //邮箱

          EventManager.getInstance().add(MessageManager.Net.FarmMailListResponse, this, this.onFarmMailListResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmMailAddResponse, this, this.onFarmMailAddResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmMailReceiveResponse, this, this.onFarmMailReceiveResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmMailDeleteResponse, this, this.onFarmMailDeleteResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmMailReadResponse, this, this.onFarmMailReadResponse);
          //EventManager.getInstance().add(MessageManager.Net.FarmAnswerSystemCheckAnswerResponse, this, this.onAnswerResponse);
          //EventManager.getInstance().add(MessageManager.Net.AnswerSystemRandomQuestionResponse, this, this.onRandomQuestionResponse);
          EventManager.getInstance().add(MessageManager.Custom.NETRECONNECT, this, this.onNetReconnect); //答题验证

          EventManager.getInstance().add(MessageManager.Net.FarmAuthingResponse, this, this.onFarmAuthingResponse); //头像

          EventManager.getInstance().add(MessageManager.Net.FarmSelectHeadPortraitResponse, this, this.onFarmSelectHeadPortraitResponse); //任务

          EventManager.getInstance().add(MessageManager.Net.FarmTaskListResponse, this, this.onFarmTaskListResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmTaskUpdateResponse, this, this.onFarmTaskUpdateResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmTaskTalkResponse, this, this.onFarmTaskTalkResponse); //活动

          EventManager.getInstance().add(MessageManager.Net.FarmActivityListResponse, this, this.onFarmActivityListResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmSignResponse, this, this.onFarmSignResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmActivityGetResponse, this, this.onFarmActivityGetResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmActivityAddResponse, this, this.onFarmActivityAddResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmActivityEndResponse, this, this.onFarmActivityEndResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmActivityUpdateResponse, this, this.onFarmActivityUpdateResponse); //市场

          EventManager.getInstance().add(MessageManager.Net.FarmMarketItemPriceResponse, this, this.onFarmMarketItemPriceResponse);
          EventManager.getInstance().add(MessageManager.Custom.BAGITEMEVENT, this, this.onBagGetItem);
          EventManager.getInstance().add(MessageManager.Custom.QuestionCheck, this, this.onQuestionCheck);
          this.SendCloudMessageID();
          this.node.on(Input.EventType.TOUCH_START,this.onPickEvent.bind(this));
          this.node.on(Input.EventType.TOUCH_MOVE,this.onPickMoveEvent.bind(this));
          this.node.on(Input.EventType.TOUCH_END,this.onPickStopEvent.bind(this));
          this.node.on(Input.EventType.TOUCH_CANCEL,this.onPickStopEvent.bind(this));
        };

        _proto.SendCloudMessageID = function SendCloudMessageID() {
          //let Firebase = PlatformUtil.getFCMToken();
          //let Jiguang = PlatformUtil.getJiGuangRegisterID();
          //console.log("firbase=", Firebase, "  jiguang=>", Jiguang);
          //WebSocketMgr.send(MessageManager.Net.FarmCloudMessageRequest, { Jiguang: Jiguang });
        };

        _proto.onNetReconnect = function onNetReconnect() {
          var _this3 = this;

          this.initFarmLand();
          this.initPasture();
          this.closeTipOrBtn(); //this._NetReplace = true;

          this.sendInitialization0Request();
          this.sendInitializationRequest();

          if (GameAllData.visitState) {
            var func = function func() {
              _this3._NetLock = false; //if(data.Code == 0){

              GameAllData.visitState = false;
              EventManager.getInstance().trigger(MessageManager.Custom.ShowToolsView, {
                show: false
              });
              EventManager.getInstance().trigger(MessageManager.Custom.ShowExceptionView, {
                show: false
              });

              _this3.closeTipOrBtn();

              _this3._gameUI.entryVisit(false); // }

            };

            var cv = UIManager.getInstance().getUI(CutscenesView);

            if (cv) {
              func();
            } else {
              UIManager.getInstance().openUI(CutscenesView, 20, function (ui, args) {
                ui.callback = func;
              });
            }
          }
        };

        _proto.onBagGetItem = function onBagGetItem() {
          if (this.BagNode) {
            this.BagNode.setScale(0.9, 0.9, 0.9);
            tween(this.BagNode).to(0.2, {
              scale: new Vec3(1.05, 1.05, 1.05)
            }).to(0.10, {
              scale: new Vec3(0.95, 0.95, 0.95)
            }).to(0.10, {
              scale: new Vec3(1.0, 1.0, 1.0)
            }).start();
          }
        };

        _proto.layerAnalysis = function layerAnalysis(root) {
          var c = root.children;

          for (var index = c.length - 1; index >= 0; index--) {
            var item = c[index];
            this.scensTree.insertNode1(item);
          }
        };

        _proto.start = function start() {
          this.sendInitialization0Request();
          this.layerAnalysis(this.build);
          this.layerAnalysis(this.layer4);
        };

        _proto.onDestroy = function onDestroy() {
          _BaseGame.prototype.onDestroy.call(this);
        };

        _proto.update = function update(deltaTime) {
          if (this.targetTScale != this._Scale) {
            var diff = 1 * deltaTime;

            if (this.targetTScale > this._Scale) {
              var cs = this._Scale + diff;
              if (cs > this.targetTScale) cs = this.targetTScale;
              this.scale = cs;
            } else {
              var _cs = this._Scale - diff;

              if (_cs < this.targetTScale) _cs = this.targetTScale;
              this.scale = _cs;
            }
          } //每秒计时


          this._updateTime += deltaTime;

          if (this._updateTime >= 1) {
            if (GameAllData.veriftPhoneTime > 0) {
              GameAllData.veriftPhoneTime -= this._updateTime;
            }

            if (GameAllData.veriftEmailTime > 0) {
              GameAllData.veriftEmailTime -= this._updateTime;
            }

            if (GameAllData.changePhoneTimeOld > 0) {
              GameAllData.changePhoneTimeOld -= this._updateTime;
            }

            if (GameAllData.changePhoneTime > 0) {
              GameAllData.changePhoneTime -= this._updateTime;
            }

            if (GameAllData.changeEmailTimeOld > 0) {
              GameAllData.changeEmailTimeOld -= this._updateTime;
            }

            if (GameAllData.bandPhoneEmailTimeOld > 0) {
              GameAllData.bandPhoneEmailTimeOld -= this._updateTime;
            }

            if (GameAllData.bandPhoneTime > 0) {
              GameAllData.bandPhoneTime -= this._updateTime;
            }

            if (GameAllData.bandEmailPhoneTimeOld > 0) {
              GameAllData.bandEmailPhoneTimeOld -= this._updateTime;
            }

            if (GameAllData.bandEmailTime > 0) {
              GameAllData.bandEmailTime -= this._updateTime;
            }

            this._updateTime = 0;
          }
        };

        _proto.initFarmLand = function initFarmLand() {
          var item = {
            LandModeId: 0,
            Grade: 0,
            Plant: []
          };

          for (var index = 1; index <= 12; index++) {
            var lid = index.toString();
            var land = this.getFarmLandFromID(index);

            if (!land) {
              var pasturenode = this.farmland.getChildByName(lid);
              item.LandModeId = index;
              this.loadLand(pasturenode, this.famelandPrefab, item);

              this._farmland.push(pasturenode);
            } else {
              land && land.resetData(item);
            }
          }
        };

        _proto.initPasture = function initPasture() {
          var item = {
            PastureModeId: 0,
            Grade: 0,
            Animal: []
          };

          for (var index = 1; index <= 5; index++) {
            var lid = index.toString();
            var land = this.getPastureFromID(index);

            if (!land) {
              var pasturenode = this.pasture.getChildByName(lid);
              item.PastureModeId = index;
              this.loadLand(pasturenode, this.pasturePrefab, item);

              this._pasture.push(pasturenode);
            } else {
              land && land.resetData(item);
            }
          }
        };

        _proto.gameStateChange = function gameStateChange(value) {
          if (value === this._state) {
            return;
          }

          this._lastState = this._state;
          this._state = value;
          this._stateChangeTime = UIHelp.getTimeMask();

          switch (this._state) {
            case GAMESTATE.GS_LOADING:
              break;

            case GAMESTATE.GS_ONTIME:
              EventManager.getInstance().trigger(MessageManager.Custom.ShowLandEnable, {
                show: false
              });
              break;

            case GAMESTATE.GS_SOWING:
              break;

            case GAMESTATE.GS_PLANTBRUSH:
              break;

            case GAMESTATE.GS_ANIMAL:
              break;

            case GAMESTATE.GS_ANIMALBRUSH:
              break;

            case GAMESTATE.GS_TOW:
              break;

            case GAMESTATE.GS_MOVEMAP:
              break;
          }
        };

        _proto.CheckVisit = function CheckVisit() {
          this._UICamera.node.getWorldPosition(temp_CameraOffset);

          this.anchorPoint.setWorldPosition(temp_CameraOffset);
          this.scensTree.checkVisit(this.anchorPoint);
        };

        _proto.syncAnchorPoint = function syncAnchorPoint() {
          this._UICamera.node.getWorldPosition(temp_CameraOffset);

          temp_CameraOffset.z = 0;
          this.anchorPoint.setWorldPosition(temp_CameraOffset);
          this.node.setScale(this._Scale, this._Scale, this._Scale);
          this.anchorPoint.getWorldPosition(temp_v3_1);
          Vec3.subtract(temp_v3_2, temp_v3_1, temp_CameraOffset);
          this.node.getWorldPosition(temp_CameraOffset);
          Vec3.subtract(temp_v3_1, temp_CameraOffset, temp_v3_2);
          temp_v3_1.z = temp_CameraOffset.z;
          this.node.setWorldPosition(temp_v3_1);
          this.adjustmentCameraPositon();
        };

        _proto.showNum = function showNum(follow, x, y, num, type) {
          if (follow) {
            follow.getWorldPosition(temp_v3_1);
            temp_v3_1.x += x;
            temp_v3_1.y += y;
          } else {
            temp_v3_1.x = x;
            temp_v3_1.y = y;
            temp_v3_1.z = 0;
          }

          var data = instantiate(this.ScrollNum);
          data.parent = this.UIlayer;
          data.setWorldPosition(temp_v3_1);
          data.getComponent(ScrollNum).initUI(num, type);
        };

        _proto.showBotanyCropAni = function showBotanyCropAni(follow, x, y, Id) {
          if (follow) {
            follow.getWorldPosition(temp_v3_1);
            temp_v3_1.x += x;
            temp_v3_1.y += y;
          } else {
            temp_v3_1.x = x;
            temp_v3_1.y = y;
            temp_v3_1.z = 0;
          }

          var data = instantiate(this.IconAnimation); //data.parent = this.UIlayer;

          data.parent = find("Canvas");
          data.setWorldPosition(temp_v3_1);
          if (GameAllData.visitState) data.getComponent(IconAnime).initUI(Id, this.HouseNode);else data.getComponent(IconAnime).initUI(Id, this.BagNode);
        };

        _proto.Message = function Message(text, cbData, cb) {
          var newText = text;
          UIManager.getInstance().openUI(MessageBox, 99, function (ui, arg) {
            ui.initUI(newText, cbData, cb);
          }, null, null);
        };

        _proto.onShowFarmTip = function onShowFarmTip(arg) {
          var select = arg.select;

          if (arg.select) {
            var mode = arg.mode;
            var tipInfo = arg.Info;
            select.node.getWorldPosition(temp_v3_1);
            this.openTip(tipInfo, temp_v3_1);
          }
        };

        _proto.onHideFarmTip = function onHideFarmTip(arg) {
          this.closeTipOrBtn();
        };

        _proto.onOpenOperaleBtn = function onOpenOperaleBtn(arg) {
          if (arg.show) {
            this.operaleBtn.operalemode = arg.id;
            this.operaleBtn.operaledata = arg.data;
            this.closeTip();
            this.operaleBtn.popBtn(arg.select, arg.id, arg.data);
          } else {
            this.operaleBtn.operalemode = arg.id;
            this.operaleBtn.operaledata = arg.data;
            this.operaleBtn.pushBtn();
          }
        };

        _proto.getFamelandCnt = function getFamelandCnt(level) {
          var Cnt = 0;

          for (var index = 0; index < this._farmland.length; index++) {
            var script = this._farmland[index].getComponentInChildren(fameland);

            if (!script) continue;
            if (script.level >= level) Cnt++;
          }

          return Cnt;
        };

        _proto.getPastureCnt = function getPastureCnt(level) {
          var Cnt = 0;

          for (var index = 0; index < this._pasture.length; index++) {
            var script = this._pasture[index].getComponentInChildren(pasture);

            if (!script) continue;
            if (script.level >= level) Cnt++;
          }

          return Cnt;
        };

        _proto.getPastureGrooveCnt = function getPastureGrooveCnt(level) {
          var Cnt = 0;

          for (var index = 0; index < this._pasture.length; index++) {
            var script = this._pasture[index].getComponentInChildren(pasture);

            if (!script) continue;
            if (script.getGrooveNum() >= level) Cnt++;
          }

          return Cnt;
        };

        _proto.getCanUnlockFameland = function getCanUnlockFameland() {
          for (var index = 0; index < this._farmland.length; index++) {
            var script = this._farmland[index].getComponentInChildren(fameland);

            if (!script) continue;
            if (script.state == OperaleDef.UNLOCK && script.checkCanUnlock(1)) return script;
          }

          return undefined;
        };

        _proto.getCanUnlockPasture = function getCanUnlockPasture() {
          for (var index = 0; index < this._pasture.length; index++) {
            var script = this._pasture[index].getComponentInChildren(pasture);

            if (!script) continue;
            if (script.state == OperaleDef.UNLOCKPASTURE && script.checkCanUnlock(1)) return script;
          }

          return undefined;
        };

        _proto.onLandEnable = function onLandEnable(arg) {
          if (arg.show) {
            var seedID = arg.seedID;

            if (arg.type == "fameland") {
              var botany = ConfigFile.getBotanyFromSeedId(seedID);

              this._farmland.forEach(function (item) {
                var scripit = item.getComponentInChildren(fameland);
                if (!scripit) return;
                var isLock = !GameAllData.checkConditionArray(botany.BotanyUnlock);

                if (scripit.level < botany.NeedLevel || isLock || !scripit.isUnLock()) {
                  scripit.pickEnable(true);
                }
              });
            } else {
              var animal = ConfigFile.getAnimalFromCubId(seedID);

              this._pasture.forEach(function (item) {
                var scripit = item.getComponentInChildren(pasture);
                if (!scripit) return;
                var isLock = !GameAllData.checkConditionArray(animal.AnimalUnlock);

                if (scripit.level < animal.NeedLevel || isLock || !scripit.canGroove() || !scripit.isUnLock()) {
                  scripit.pickEnable(true);
                }
              });
            }
          } else {
            this._farmland.forEach(function (item) {
              var scripit = item.getComponentInChildren(fameland);
              if (!scripit) return;
              scripit.pickEnable(false);
            });

            this._pasture.forEach(function (item) {
              var scripit = item.getComponentInChildren(pasture);
              if (!scripit) return;
              scripit.pickEnable(false);
            });
          }
        };

        _proto.onStartGame = function onStartGame() {
          var _this4 = this; //打点
          //ios热更修改修改


          var f = "-";

          if (sys.Platform.IOS === sys.platform) {
            f = "_";
          }

          var Pointdata = "userID" + f + GameAllData.FarmUserResponse.Id;
          PlatformUtil.buriedPoint("intoGame", Pointdata, -1);
          this.sendInitializationRequest();

          if (!TaskManager.getInstance().isTaskFinish(1)) {
            var self = this;
            this.node.setPosition(new Vec3(-3089.23, -3034.702, 0));
            TaskManager.getInstance().startFirstTask(function () {
              TaskManager.getInstance().finishTask(1);
              UIManager.getInstance().openUI(UIGame, 2, function (ui, args) {
                self.hand = ui.getComponentInChildren(HandCtl);
                self.UIlayer = ui.node.getChildByName("Layer1");
                self.BagNode = ui.BagNode;
                self._gameUI = ui;
                var gameLayer = ui.node.getChildByName("gameLayer");
                self.tipDlg.parent = gameLayer;
                _this4.operaleBtn.node.parent = gameLayer;
                ui.initUI(self);
                ui.entryVisit(false);
                self.gameStateChange(GAMESTATE.GS_ONTIME);

                GameAllData.NetReplace = false;

                _this4.showNotice();
              }, undefined, null);
            });
          } else {
            this.node.setPosition(new Vec3(-3941.943, 371.64, 0));
            var ts = this._Scale;
            this.scale = 0.3;
            this.targetScale = 0.3; //this.node.setScale(0.1, 0.1, 0.1);

            var _self = this;

            tween(this).to(1.5, {
              scale: ts
            }, {
              onUpdate: function onUpdate(eventtarget, ratio) {
                _self.targetScale = _self.scale; // let tpos = self.getTargetWorldPositon(target);
                // this.node.getWorldPosition(temp_CameraOffset);
                // Vec3.lerp(temp_v3_2, temp_CameraOffset, tpos, ratio);
                // self.node.setWorldPosition(temp_v3_2);
                // self.CheckVisit();
              }
            }).call(function () {
              TaskManager.getInstance().startFirstTask(function () {
                UIManager.getInstance().openUI(UIGame, 2, function (ui, args) {
                  _self.hand = ui.getComponentInChildren(HandCtl);
                  _self.UIlayer = ui.node.getChildByName("Layer1");
                  _self.BagNode = ui.BagNode;
                  _self._gameUI = ui;
                  var gameLayer = ui.node.getChildByName("gameLayer");
                  _self.tipDlg.parent = gameLayer;
                  _this4.operaleBtn.node.parent = gameLayer;
                  ui.initUI(_self);
                  ui.entryVisit(false);

                  _self.gameStateChange(GAMESTATE.GS_ONTIME);

                  TaskManager.getInstance().startEntryGameTask(null);

                  GameAllData.NetReplace = false;

                  _this4.showNotice();
                }, undefined, null);
              });
            }).start();
          }
        };

        _proto.onOpenHand = function onOpenHand(arg) {
          var uipos = arg.Pos;
          this.operaleBtn.operaledata = {
            select: arg.select,
            seedid: arg.seedID,
            modeid: arg.itemId
          };

          if (arg.show) {
            var _this$hand;

            this.gameStateChange(GAMESTATE.GS_TOW);
            this.closeTipOrBtn();
            this.operaleBtn.operalemode = arg.operaleID;
            var mode = this.operaleBtn.operalemode;
            var info = this.operaleBtn.operaledata;
            (_this$hand = this.hand) == null ? void 0 : _this$hand.startTow(uipos, arg.operaleID, this.operaleBtn.operaledata, this.toolMove.bind(this));
            TaskManager.getInstance().onClickOperaBtn(info.select, mode);
          } else {
            this.operaleBtn.operalemode = arg.operaleID;

            if (arg.select.canOperale(arg.operaleID, this.operaleBtn.operaledata, true)) {
              this.onOperateBtn(arg.operaleID, this.operaleBtn.operaledata);
            }
          }
        };

        _proto.getScenCameraOffset = function getScenCameraOffset(pos) {
          temp_v3_1.set(this.layer1.position);
          temp_v3_1.x -= pos.x;
          temp_v3_1.y -= pos.y;
          return Vec3.subtract(temp_CameraOffset, temp_v3_1, this._UICamera.node.position);
        };

        _proto.getMoveArea = function getMoveArea() {
          var scale = this.node.scale;
          var waterSize = this.waterNode.getComponent(UITransform).contentSize;
          var vs = view.getVisibleSize();
          var enableWidth = (waterSize.width * scale.x - vs.width) / 2;
          var enableHeight = (waterSize.height * scale.y - vs.height) / 2;
          return {
            top: enableHeight,
            bottom: -enableHeight,
            left: -enableWidth,
            right: enableWidth
          };
        } //是否能将摄像机移到这个点上
        ;

        _proto.canMoveCamera = function canMoveCamera(pos) {
          var _this$getMoveArea = this.getMoveArea(),
              top = _this$getMoveArea.top,
              bottom = _this$getMoveArea.bottom,
              left = _this$getMoveArea.left,
              right = _this$getMoveArea.right;

          var offset = this.getScenCameraOffset(pos);
          if (offset.x > bottom && offset.x < top && offset.y > left && offset.y < right) return true;
          return false;
        };

        _proto.testScale = function testScale() {
          var land = this.getFarmLandFromID(1);
          UIManager.getInstance().openUI(upLevelUI, 99, function (ui, arg) {
            ui.initUI(land);
          });
        };

        _proto.onGameHeartResponse = function onGameHeartResponse(data) {
          GameAllData.GameHeartResponse = data;
        };

        _proto.onFarmStoreResponse = function onFarmStoreResponse(data) {
          GameAllData.FarmStoreResponse = data;
          EventManager.getInstance().trigger(MessageManager.Custom.PropOnChange);
        };

        _proto.onUserResponse = function onUserResponse(data) {
          GameAllData.FarmUserResponse = data;
          GameAllData.bandPhone = data.Phone;
          GameAllData.bandPhoneAreaCode = data.PhonePrefix;
          GameAllData.bandEmail = data.Email;
          GameAllData.bandSafeCode = data.GoogleSecret;
          GameAllData.bandSafeCodeTime = data.SecretBegin;
          GameAllData.isSafeCodeTips = true;
          GameAllData.severTimeZoneName = data.TimeZoneName;
          GameAllData.severTimeZoneDiff = data.TimeZoneDiff;
          console.log("GameAllData.bandPhone:" + data.Phone);
          GameAllData.visitState = false;
          console.log("更新用户信息");
          var a = GameAllData.FarmUserResponse.RankLevel;
          var b = GameAllData.FarmUserResponse.VipLevel;
          console.log("-------更新用户信息------------", a, b);
          EventManager.getInstance().trigger(MessageManager.Custom.VipOrRankChange);
          EventManager.getInstance().trigger(MessageManager.Custom.HeadOnChange);
        };

        _proto.onFarmVisitUserResponse = function onFarmVisitUserResponse(data) {
          GameAllData.FarmVisitUserResponse = data;

          this._gameUI.upVisitData();

          EventManager.getInstance().trigger(MessageManager.Custom.OterVipOrRankChange);
          EventManager.getInstance().trigger(MessageManager.Custom.OterHeadOnChange);
        };

        _proto.onFarmVipChangeResponse = function onFarmVipChangeResponse(data) {
          GameAllData.FarmUserResponse.VipLevel = data.VipLevel;
          GameAllData.FarmUserResponse.VipExp = data.VipExp;
          this.onLandResponse(GameAllData.FarmLandResponse);
          this.onPastureResponse(GameAllData.FarmPastureResponse);
          EventManager.getInstance().trigger(MessageManager.Custom.VipOrRankChange);
        };

        _proto.onFarmRankChangeResponse = function onFarmRankChangeResponse(data) {
          GameAllData.FarmUserResponse.RankLevel = data.RankLevel;
          GameAllData.FarmUserResponse.RankExp = data.RankExp;
          if (data.InvitationCount) GameAllData.FarmUserResponse.InvitationCount = data.InvitationCount;
          this.onLandResponse(GameAllData.FarmLandResponse);
          this.onPastureResponse(GameAllData.FarmPastureResponse);
          EventManager.getInstance().trigger(MessageManager.Custom.VipOrRankChange);
        };

        _proto.onFarmStatueResponse = function onFarmStatueResponse(data) {
          GameAllData.FarmStatueResponse = data;
        };

        _proto.onFarmHouseResponse = function onFarmHouseResponse(data) {
          GameAllData.FarmHouseResponse = data;
          EventManager.getInstance().trigger(MessageManager.Custom.HouseDataChange);
        };

        _proto.onLandResponse = function onLandResponse(data) {
          this._NetLock = false;
          var self = this;

          if (!data.Land) {
            console.log("没有land 返回");
            return;
          }

          if (!GameAllData.FarmLandResponse) {
            GameAllData.FarmLandResponse = data;
          } else {
            var dataArray = data.Land; // let gameArray = GameAllData.FarmLandResponse.Land;\

            var length = 0;

            for (var value in dataArray) {
              length++;
            }

            if (length == 1) {
              for (var prop in dataArray) {
                GameAllData.FarmLandResponse.Land[prop] = dataArray[prop];
              }
            } else {
              GameAllData.FarmLandResponse = data;
            }
          }

          var landArray = data.Land;

          if (landArray instanceof Array) {
            landArray.forEach(function (item) {
              var land = self.getFarmLandFromID(item.LandModeId);
              if (land) land.onLandResponse(item);else {
                var landnode = self.farmland.getChildByName(item.LandModeId.toString());
                self.loadLand(landnode, self.famelandPrefab, item);

                self._farmland.push(landnode);
              }
            });
          } else {
            for (var prop in landArray) {
              var item = landArray[prop];
              var land = self.getFarmLandFromID(item.LandModeId);
              if (land) land.onLandResponse(item);else {
                var landnode = self.farmland.getChildByName(item.LandModeId.toString());

                if (landnode) {
                  self.loadLand(landnode, self.famelandPrefab, item);

                  self._farmland.push(landnode);
                }
              }
            }

            var pp = [];

            self._farmland.forEach(function (item) {
              if (!item) {
                console.log("aaaaaa");
              }

              var script = item.getComponentInChildren(fameland);
              if (!script) return;
              if (script.level <= 0) pp.push(script);
            });

            if (pp.length > 0) {
              pp.sort(function (a, b) {
                return a.ID - b.ID;
              });
              var endpos = pp[0];

              self._farmland.forEach(function (item) {
                var script = item.getComponentInChildren(fameland);
                if (!script) return;
                script.onbackProcess(endpos.ID);
              });
            }
          }
        };

        _proto.onPastureResponse = function onPastureResponse(data) {
          this._NetLock = false;

          if (!data.Pasture) {
            console.log("没有land 返回");
            return;
          }

          if (!GameAllData.FarmPastureResponse) {
            GameAllData.FarmPastureResponse = data;
          } else {
            var dataArray = data.Pasture; // let gameArray = GameAllData.FarmPastureResponse.Pasture;

            var length = 0;

            for (var value in dataArray) {
              length++;
            }

            if (length == 1) {
              //更新单条数据
              for (var prop in dataArray) {
                GameAllData.FarmPastureResponse.Pasture[prop] = dataArray[prop]; // this.FarmLandAnimalBuryMap.set(dataArray[prop].PastureModeId,false);
              }
            } else {
              GameAllData.FarmPastureResponse = data;
            }
          }

          var pastureArray = data.Pasture;

          for (var prop in pastureArray) {
            var item = pastureArray[prop];
            var land = this.getPastureFromID(item.PastureModeId);
            if (land) land.onPastureResponse(item);else {
              var landnode = this.pasture.getChildByName(item.PastureModeId.toString());
              this.loadLand(landnode, this.pasturePrefab, item);

              this._pasture.push(landnode);
            }
          }

          var pp = [];

          this._pasture.forEach(function (item) {
            var script = item.getComponentInChildren(pasture);
            if (!script) return;
            if (script.level <= 0) pp.push(script);
          });

          if (pp.length > 0) {
            pp.sort(function (a, b) {
              return a.ID - b.ID;
            });
            var endpos = pp[0];

            this._pasture.forEach(function (item) {
              var script = item.getComponentInChildren(pasture);
              if (!script) return;
              script.onbackProcess(endpos.ID);
            });
          }
        };

        _proto.onItemChangeResponse = function onItemChangeResponse(datas) {
          console.log("道具变化消息");
          var store = GameAllData.FarmStoreResponse;
          if (!store) return;

          for (var _iterator = _createForOfIteratorHelperLoose(datas.items), _step; !(_step = _iterator()).done;) {
            var data = _step.value;

            if (data.action == 0) {
              GameAllData.FarmStoreResponse.items.push(data.item);
            } else {
              var i = 0;

              for (var _iterator2 = _createForOfIteratorHelperLoose(GameAllData.FarmStoreResponse.items), _step2; !(_step2 = _iterator2()).done;) {
                var item = _step2.value;

                if (data.item.ItemModeId == item.ItemModeId) {
                  if (data.action == 1) {
                    GameAllData.FarmStoreResponse.items.splice(i, 1);
                    break;
                  } else {
                    item.ItemCount = data.item.ItemCount;
                    break;
                  }
                }

                i++;
              }
            }
          }
        };

        _proto.getCurrencyModeId = function getCurrencyModeId(modeId) {
          var currency = GameAllData.FarmStoreResponse.currency;
          var select = currency.find(function (item) {
            return item.CurrencyModeId == modeId;
          });
          return select;
        };

        _proto.delCurrencyModeId = function delCurrencyModeId(select) {
          var currency = GameAllData.FarmStoreResponse.currency;
          var newCurrency = currency.filter(function (item) {
            return item != select;
          });
          GameAllData.FarmStoreResponse.currency = newCurrency;
        };

        _proto.onFarmCurrencyChangeResponse = function onFarmCurrencyChangeResponse(datas) {
          var _this5 = this;

          console.log("mny变化消息");

          var _loop = function _loop() {
            var data = _step3.value;

            if (data.action == 0) {
              GameAllData.FarmStoreResponse.currency.push(data.item);
            } else {
              var select = _this5.getCurrencyModeId(data.item.CurrencyModeId);

              if (!select) {
                GameAllData.FarmStoreResponse.currency.push(data.item);
              } else {
                if (data.action == 1) {
                  _this5.delCurrencyModeId(select);
                } else {
                  var idx = GameAllData.FarmStoreResponse.currency.findIndex(function (v) {
                    return v.CurrencyModeId == data.item.CurrencyModeId;
                  });
                  GameAllData.FarmStoreResponse.currency[idx].CurrencyCount = data.item.CurrencyCount;
                }
              }
            }
          };

          for (var _iterator3 = _createForOfIteratorHelperLoose(datas.items), _step3; !(_step3 = _iterator3()).done;) {
            _loop();
          }

          EventManager.getInstance().trigger(MessageManager.Custom.PropOnChange);
        };

        _proto.isNetOk = function isNetOk() {
          if (this._NetLock && UIHelp.getTimeDiff(this._NetLockTime) < 2000) {
            console.log("等待网络请求返回");
            return false;
          }

          return true;
        };

        _proto.sendToNet = function sendToNet(code, data) {
          //if(!this.isNetOk()) return;
          WebSocketMgr.send(code, data);
          this._NetLock = true;
          this._NetLockTime = UIHelp.getTimeMask();
        } //初始化请求
        ;

        _proto.sendInitializationRequest = function sendInitializationRequest() {
          WebSocketMgr.send(MessageManager.Net.FarmInitializationRequest, undefined);
        } //初始化返回
        ;

        _proto.onFarmInitializationResponse = function onFarmInitializationResponse(data) {
          this._NetLock = false;

          if (data.Code == 0) {
            console.log("初始化连接成功");
            UIHelp.closeLoadingTA();
          }
        };

        _proto.onFarmMarketItemPriceResponse = function onFarmMarketItemPriceResponse(data) {
          GameAllData.FarmMarketItemPriceResponse = data;
          console.log("市场价格返回----------");
        };

        _proto.onFarmActivityListResponse = function onFarmActivityListResponse(data) {
          GameAllData.FarmActivityListResponse = data;
          var have = true;

          while (have) {
            var index = 0;
            var node = GameAllData.FarmActivityListResponse.Activities.find(function (v, i) {
              // 取本地时间
              var localTime = UIHelp.getTimeMask() / 1000;
              var servertime = DateUtil.getServerTimeDiff2(localTime) / 1000;
              var endeTime = v.EndTime;

              if (endeTime - servertime < 0) {
                index = i;
                return true;
              }

              return false;
            });

            if (node) {
              GameAllData.FarmActivityListResponse.Activities.splice(index, 1);
              have = true;
            } else {
              have = false;
            }
          }

          GameAllData.FarmActivityListResponse.Activities.sort(function (a, b) {
            return a.ActivityType - b.ActivityType;
          });
          EventManager.getInstance().trigger(MessageManager.Custom.ActivityChange);
          GameAllData.setRedDotOnActivityList();
          if (this._gameUI) this._gameUI.setGameUiActivShow();
        };

        _proto.onFarmSignResponse = function onFarmSignResponse(data) {
          for (var _iterator4 = _createForOfIteratorHelperLoose(GameAllData.FarmActivityListResponse.Signs), _step4; !(_step4 = _iterator4()).done;) {
            var sign = _step4.value;

            if (sign.ModeId == data.SignId) {
              sign.IsGet = true;
            }
          }

          if (data.Get) {
            var gameUi = UIManager.getInstance().getUI(UIGame);

            if (gameUi) {
              var _gameUi = UIManager.getInstance().getUI(UIGame);

              if (_gameUi) {
                var flyNode = instantiate(this.getItemEff);
                flyNode.parent = find("Canvas");
                flyNode.getComponent(GetItemEff).getFly(_gameUi.node.worldPosition, data.Get);
              } //this.onProcessGet(this._UICamera.node, data.Get);

            }
          }

          EventManager.getInstance().trigger(MessageManager.Custom.SignChange);
          GameAllData.setRedDotOnActivityList();
          if (this._gameUI) this._gameUI.setGameUiActivShow();
        };

        _proto.onFarmActivityGetResponse = function onFarmActivityGetResponse(data) {
          var nowActiviType = null;

          for (var _iterator5 = _createForOfIteratorHelperLoose(GameAllData.FarmActivityListResponse.Activities), _step5; !(_step5 = _iterator5()).done;) {
            var Activi = _step5.value;

            if (Activi.ActivityModeId == data.ActivityModeId) {
              Activi.TodayGet = data.TodayGet;
              Activi.TodayMaxTime = data.TodayMaxTime;
              Activi.TotalGet = data.TotalGet;
              Activi.TotalGetTime = data.TotalGetTime;
              Activi.other = data.other;
              nowActiviType = Activi.ActivityType;
            }
          }

          if (nowActiviType == EnumDefine.ActivityType.Generalrepresentative || true) {
            var changeInfo = null;

            for (var _iterator6 = _createForOfIteratorHelperLoose(GameAllData.FarmActivityListResponse.Activities), _step6; !(_step6 = _iterator6()).done;) {
              var activi = _step6.value;

              if (activi.ActivityModeId == data.ActivityModeId) {
                changeInfo = activi;
              }
            }

            if (changeInfo) {
              EventManager.getInstance().trigger(MessageManager.Custom.ActivityInfoChange, changeInfo);
            }
          }

          if (nowActiviType == 6 || nowActiviType == 7) {
            var activityUi = UIManager.getInstance().getUI(UIActivity);

            if (activityUi) {
              console.log("main--------->%o", data.Get);
              activityUi.setLuckGet(data.Get, data.ActivityModeId);
            } else {
              UIManager.getInstance().openUI(UIActivityLuckGet, 20, function (ui, args) {
                ui.init(data.Get);
              }, undefined, null);
            }
          } else {
            if (data.Get) {
              var gameUi = UIManager.getInstance().getUI(UIGame);

              if (gameUi) {
                var _gameUi2 = UIManager.getInstance().getUI(UIGame);

                if (_gameUi2) {
                  var flyNode = instantiate(this.getItemEff);
                  flyNode.parent = find("Canvas");
                  flyNode.getComponent(GetItemEff).getFly(_gameUi2.node.worldPosition, data.Get);
                } //this.onProcessGet(this._UICamera.node, data.Get);

              }
            }

            EventManager.getInstance().trigger(MessageManager.Custom.ActivityGet, data.ActivityModeId);
          }

          GameAllData.setRedDotOnActivityList();
          if (this._gameUI) this._gameUI.setGameUiActivShow();
        };

        _proto.onFarmActivityAddResponse = function onFarmActivityAddResponse(data) {
          data.Activities.forEach(function (v) {
            GameAllData.FarmActivityListResponse.Activities.push(v);
          });
          GameAllData.FarmActivityListResponse.Activities.sort(function (a, b) {
            return a.ActivityType - b.ActivityType;
          });
          EventManager.getInstance().trigger(MessageManager.Custom.ActivityChange);
          GameAllData.setRedDotOnActivityList();
          if (this._gameUI) this._gameUI.setGameUiActivShow();
        };

        _proto.onFarmActivityEndResponse = function onFarmActivityEndResponse(data) {
          var index = -1;
          GameAllData.FarmActivityListResponse.Activities.find(function (v, i) {
            if (v.ActivityModeId == data.ActivityModeIds) {
              index = i;
              return true;
            }
          });
          GameAllData.FarmActivityListResponse.Activities.splice(index, 1);
          EventManager.getInstance().trigger(MessageManager.Custom.ActivityChange);
          GameAllData.setRedDotOnActivityList();
          if (this._gameUI) this._gameUI.setGameUiActivShow();
        };

        _proto.onFarmActivityUpdateResponse = function onFarmActivityUpdateResponse(data) {
          data.Activities.forEach(function (v) {
            var idx = GameAllData.FarmActivityListResponse.Activities.findIndex(function (v_1) {
              return v.ActivityModeId == v_1.ActivityModeId;
            });
            GameAllData.FarmActivityListResponse.Activities[idx] = v;
          });
          var a = GameAllData.FarmActivityListResponse.Activities;
          console.log("GameAllData.FarmActivityListResponse.Activities-----------%o", a);
          EventManager.getInstance().trigger(MessageManager.Custom.ActivityChange);
          GameAllData.setRedDotOnActivityList();
          if (this._gameUI) this._gameUI.setGameUiActivShow();
        };

        _proto.onFarmTaskListResponse = function onFarmTaskListResponse(data) {
          GameAllData.FarmTaskListResponse = data;
          GameAllData.DayFarmTaskUpdateResponse = null;
          GameAllData.FarmTaskUpdateResponse = null;
          GameAllData.setRedDotOnTaskList();
          EventManager.getInstance().trigger(MessageManager.Custom.TaskChange, 1);
        };

        _proto.onFarmTaskUpdateResponse = function onFarmTaskUpdateResponse(data) {
          if (!GameAllData.FarmTaskListResponse) {
            return;
          }

          for (var _iterator7 = _createForOfIteratorHelperLoose(data.actionList), _step7; !(_step7 = _iterator7()).done;) {
            var actionData = _step7.value;

            if (actionData.TaskModeId == 10000 && actionData.Action == 1) {
              //打点
              var f = "-";

              if (sys.Platform.IOS === sys.platform) {
                f = "_";
              }

              var Pointdata = "userID" + f + GameAllData.FarmUserResponse.Id;
              Pointdata += ">>" + "taskID" + f + "10000";
              PlatformUtil.buriedPoint("completeFirstTask", Pointdata, -1);
            }

            if (actionData.TaskModeId == 10001 && actionData.Action == 1) {
              //打点
              var _f = "-";

              if (sys.Platform.IOS === sys.platform) {
                _f = "_";
              }

              var _Pointdata = "userID" + _f + GameAllData.FarmUserResponse.Id;

              _Pointdata += ">>" + "taskID" + _f + "10001";
              PlatformUtil.buriedPoint("completeSecondTask", _Pointdata, -1);
            }

            if (actionData.TaskType == 5 || actionData.TaskType == 4) {
              if (!GameAllData.DayFarmTaskUpdateResponse) {
                GameAllData.DayFarmTaskUpdateResponse = [];
              }

              GameAllData.DayFarmTaskUpdateResponse.push(actionData);
            } else {
              if (!GameAllData.FarmTaskUpdateResponse) {
                GameAllData.FarmTaskUpdateResponse = [];
              }

              GameAllData.FarmTaskUpdateResponse.push(actionData);
            }
          }

          GameAllData.setRedDotOnTaskList();
          EventManager.getInstance().trigger(MessageManager.Custom.TaskChange, 2);
        };

        _proto.onFarmTaskTalkResponse = function onFarmTaskTalkResponse(data) {
          if (!GameAllData.FarmTaskListResponse) {
            return;
          }

          GameAllData.FarmTaskListResponse.taskList.find(function (v) {
            if (v.TaskModeId == data.TaskModeId) {
              v.TalkState = 1;
              return true;
            }
          });
          EventManager.getInstance().trigger(MessageManager.Custom.TaskTalkChange, data.TaskModeId);
        };

        _proto.sendInitialization0Request = function sendInitialization0Request() {
          WebSocketMgr.send(MessageManager.Net.FarmInitialization0Request, undefined);
        } //初始化返回
        ;

        _proto.onFarmInitialization0Response = function onFarmInitialization0Response(data) {
          this._NetLock = false;

          if (data.Code == 0) {
            console.log("初始化连接成功");
          } // if (GameAllData.NetReplace) {
          //     this.sendInitializationRequest();
          //     GameAllData.NetReplace = false;
          // }

        } //
        ;

        _proto.onFarmSelectHeadPortraitResponse = function onFarmSelectHeadPortraitResponse(data) {
          if (data.Code == 0) {
            GameAllData.FarmUserResponse.RoleModeId = data.NowUseHPortraitModeId;
            EventManager.getInstance().trigger(MessageManager.Custom.HeadOnChange);
            TipManager.TipFromCode(ConstLanguage.UIHEAD_TRADE_MSG_TIP1);
          } else {
            TipManager.TipFromCode(ConstLanguage.UIHEAD_TRADE_MSG_TIP2);
          }
        };

        _proto.onFarmAuthingResponse = function onFarmAuthingResponse(data) {
          GameAllData.FarmAuthingResponse = data;
          this.schedule(this.openUIVerification, 1);
        };

        _proto.onFarmMailListResponse = function onFarmMailListResponse(data) {
          GameAllData.FarmMailListResponse = data;
          GameAllData.setRedDotOnMailList();
          EventManager.getInstance().trigger(MessageManager.Custom.FarmMailList); // this.showNotice();
        };

        _proto.onFarmMailAddResponse = function onFarmMailAddResponse(data) {
          if (!GameAllData.FarmMailListResponse || !GameAllData.FarmMailListResponse.Mails || GameAllData.FarmMailListResponse.Mails.length < 1) {
            GameAllData.FarmMailListResponse = data;
          } else {
            GameAllData.FarmMailListResponse.Mails = GameAllData.FarmMailListResponse.Mails.concat(data.Mails);
          }

          GameAllData.setRedDotOnMailList();
          EventManager.getInstance().trigger(MessageManager.Custom.FarmMailList);
          this.showNotice();
        };

        _proto.onFarmMailReceiveResponse = function onFarmMailReceiveResponse(data) {
          UIHelp.closeLoadingTA();
          if (!GameAllData.FarmMailListResponse || !GameAllData.FarmMailListResponse.Mails || GameAllData.FarmMailListResponse.Mails.length < 1) return;
          if (!data.Mails) return;

          var _loop2 = function _loop2() {
            var Mail = _step8.value;
            GameAllData.FarmMailListResponse.Mails.find(function (v) {
              if (v.ID == Mail.ID) {
                v.MailState = 1;
                v.MailReceiveState = 1;
                return true;
              }
            });
          };

          for (var _iterator8 = _createForOfIteratorHelperLoose(data.Mails), _step8; !(_step8 = _iterator8()).done;) {
            _loop2();
          }

          if (data.Get) {
            var gameUi = UIManager.getInstance().getUI(UIGame);

            if (gameUi) {
              var flyNode = instantiate(this.getItemEff);
              flyNode.parent = find("Canvas");
              flyNode.getComponent(GetItemEff).getFly(gameUi.node.worldPosition, data.Get);
            }
          }

          GameAllData.setRedDotOnMailList();

          if (data.Mails && data.Mails.length == 1) {
            EventManager.getInstance().trigger(MessageManager.Custom.FarmMailGetRes, data.Mails[0]);
          } else {
            EventManager.getInstance().trigger(MessageManager.Custom.FarmMailList);
          }
        };

        _proto.onFarmMailDeleteResponse = function onFarmMailDeleteResponse(data) {
          if (!GameAllData.FarmMailListResponse || !GameAllData.FarmMailListResponse.Mails || GameAllData.FarmMailListResponse.Mails.length < 1) return;
          if (!data.ID || data.ID.length < 1) return;

          var _loop3 = function _loop3() {
            var id = _step9.value;
            var index = -1;
            GameAllData.FarmMailListResponse.Mails.find(function (v, i) {
              if (v.ID == id) {
                index = i;
                return true;
              }
            });
            if (index != -1) GameAllData.FarmMailListResponse.Mails.splice(index, 1);
          };

          for (var _iterator9 = _createForOfIteratorHelperLoose(data.ID), _step9; !(_step9 = _iterator9()).done;) {
            _loop3();
          }

          GameAllData.setRedDotOnMailList();
          EventManager.getInstance().trigger(MessageManager.Custom.FarmMailList);
        };

        _proto.onFarmMailReadResponse = function onFarmMailReadResponse(data) {
          if (!GameAllData.FarmMailListResponse || !GameAllData.FarmMailListResponse.Mails || GameAllData.FarmMailListResponse.Mails.length < 1) return;
          if (!data.Mails) return;

          var _loop4 = function _loop4() {
            var Mail = _step10.value;
            GameAllData.FarmMailListResponse.Mails.find(function (v) {
              if (v.ID == Mail.ID) {
                v.MailState = Mail.MailState;
                return true;
              }
            });
          };

          for (var _iterator10 = _createForOfIteratorHelperLoose(data.Mails), _step10; !(_step10 = _iterator10()).done;) {
            _loop4();
          }

          GameAllData.setRedDotOnMailList();
        };

        _proto.onQuestionCheck = function onQuestionCheck() {
          if (this._activeCache.length > 0) {
            var uirole = UIManager.getInstance().getUI(SelectRoleView);

            if (uirole) {
              return;
            }

            var item = this._activeCache.shift();

            this._activeEnterLock = false;
            UIManager.getInstance().openUI(UIAnswer, 60, function (ui, args) {
              ui.initUI(item.id);
            });
          }
        };

        _proto.onRandomQuestionResponse = function onRandomQuestionResponse(data) {
          if (!data) return;
          var uirole = UIManager.getInstance().getUI(SelectRoleView);

          if (uirole) {
            return;
          }

          if (this._activeEnterLock) {
            this._activeCache.push({
              type: "question",
              id: data.RandomQuestionId
            });
          } else {
            UIManager.getInstance().openUI(UIAnswer, 60, function (ui, args) {
              ui.initUI(data.RandomQuestionId);
            });
          }
        };

        _proto.onAnswerResponse = function onAnswerResponse(data) {
          if (!data) return;
          var isOk = 0;
          this._activeEnterLock = true;
          if (data.AppointmentCode && data.AppointmentCode == 10019) isOk = 1;
          if (data.AppointmentCode && data.AppointmentCode == 10018) isOk = 2;

          if (data.Get) {
            var gameUi = UIManager.getInstance().getUI(UIGame);

            if (gameUi) {
              var flyNode = instantiate(this.getItemEff);
              flyNode.parent = find("Canvas");
              flyNode.getComponent(GetItemEff).getFly(gameUi.node.worldPosition, data.Get);
            } //this.onProcessGet(this._UICamera.node, data.Get);

          }

          UIManager.getInstance().openUI(UIAnswerRet, 60, function (ui, args) {
            ui.initUI(isOk, data.AnswerSuccessId);
          }); //AnswerSoccessId
        };

        _proto.FarmBuyItemResponse = function FarmBuyItemResponse(data) {
          if (data.Code != 0) {
            TipManager.TipFromCode(ConstLanguage.SHOP_ITEM_MASK_TIP2);
            return;
          }

          TipManager.TipFromCode(ConstLanguage.SHOP_ITEM_MASK_TIP);
          EventManager.getInstance().trigger(MessageManager.Custom.ShopChange);
        };

        _proto.messageBox = function messageBox(info) {
          this.Message(info, null, null);
        };

        _proto.popMessageBox = function popMessageBox(code) {
          var text1 = producer.getMessageText(code);
          TipManager.autoTip(3, code, text1); //text1 = producer.AddDefaultColor(text1);
          //this.messageBox(text1);
        } //土地解锁请求
        ;

        _proto.sendLandUnlockRequest = function sendLandUnlockRequest(data, cb) {
          var _this6 = this;

          var curData = _extends({}, data);

          var fi = ConfigFile.getFarmInfo(curData.select.getID(), 1);
          var unlockConsume = fi.FarmUnlockConsume.split(",");
          var currencyType = unlockConsume[0];
          var currencyNum = unlockConsume[1]; //  .ChoiceBox(ConfigFile.findLanguage(2366).iconformat(currencyType).format(currencyNum), null, () => {
          //     let curCurrencyNum = GameAllData.getCurrencyNumByType(currencyType);
          //     if (curCurrencyNum < currencyNum) {
          //         TipManager.ChickBox(ConfigFile.findLanguage(111033).iconformat(currencyType));
          //     } else {
          //         if (!this.isNetOk()) return;
          //         this.sendToNet(MessageManager.Net.FarmLandUnlockRequest, { LandModeId: curData.select.getID() });
          //     }
          // });

          TipManager.ChoiceBox(ConfigFile.findLanguage(2366, currencyType).format(currencyNum), null, function () {
            var curCurrencyNum = GameAllData.getCurrencyNumByType(currencyType);

            if (curCurrencyNum < currencyNum) {
              // TipManager.ChickBox(ConfigFile.findLanguage(111033, currencyType))
              TipManager.ChickBoxNew(111033, currencyType);
            } else {
              if (!_this6.isNetOk()) return;

              _this6.sendToNet(MessageManager.Net.FarmLandUnlockRequest, {
                LandModeId: curData.select.getID()
              });
            }
          });
        };

        _proto.onLandUnlockResponse = function onLandUnlockResponse(data) {
          var _this7 = this;

          this._NetLock = false;
          var land = this.getFarmLandFromID(data.LandModeId);

          if (data.Code && data.Code != 0) {
            console.log("Net error==>", errorInfo[data.Code]);
            return;
          }

          if (!land) {
            return;
          }

          land.playRoleAni(function () {
            land.elasticEffect();
            land.playEffectNode(land.node, "landBuild", function () {
              land.setAnimationLock(false);
              TaskManager.getInstance().onDataResponse("LandUnlock", {
                select: land
              });

              if (data.Cost) {
                _this7.onProcessCost(land ? land.node : null, data.Cost);
              }
            });
          });
        };

        _proto.sendFarmVisitHearRequest = function sendFarmVisitHearRequest(id) {
          this.sendToNet(MessageManager.Net.FarmVisitHearRequest, {
            UserId: id
          });
        };

        _proto.sendPastureUnlockRequest = function sendPastureUnlockRequest(data, cb) {
          var _this8 = this;

          var curData = _extends({}, data);

          var pi = ConfigFile.getPastureInfo(curData.select.getID(), 1);
          var unlockConsume = pi.PastureUnlockConsume.split(",");
          var currencyType = unlockConsume[0];
          var currencyNum = unlockConsume[1];
          console.log("消耗道具类型：" + unlockConsume); // TipManager.ChoiceBox(ConfigFile.findLanguage(3231).iconformat(currencyType).format(currencyNum), null, () => {
          //     let curCurrencyNum = GameAllData.getCurrencyNumByType(currencyType);
          //     if (curCurrencyNum < currencyNum) {
          //         TipManager.ChickBox(ConfigFile.findLanguage(111033).iconformat(currencyType));
          //     } else {
          //         if (!this.isNetOk()) return;
          //         this.sendToNet(MessageManager.Net.FarmPastureUnlockRequest, { PastureModeId: curData.select.getID() });
          //     }
          // });

          TipManager.ChoiceBox(ConfigFile.findLanguage(3231, currencyType).format(currencyNum), null, function () {
            var curCurrencyNum = GameAllData.getCurrencyNumByType(currencyType);

            if (curCurrencyNum < currencyNum) {
              // TipManager.ChickBox(ConfigFile.findLanguage(111033, currencyType))
              TipManager.ChickBoxNew(111033, currencyType);
            } else {
              if (!_this8.isNetOk()) return;

              _this8.sendToNet(MessageManager.Net.FarmPastureUnlockRequest, {
                PastureModeId: curData.select.getID()
              });
            }
          });
        };

        _proto.onPastureUnlockResponse = function onPastureUnlockResponse(data) {
          var _this9 = this;

          this._NetLock = false;
          var land = this.getPastureFromID(data.PastureModeId);

          if (data.Code && data.Code != 0) {
            console.log("Net error==>", errorInfo[data.Code]);
            return;
          }

          land.playUnlockEff();
          land.playRoleAni(land.effNode, 0, function () {
            land.elasticEffect();
            land.playEffectNode(land.node, "landBuild", function () {
              land.setAnimationLock(false);
              TaskManager.getInstance().onDataResponse("PastureUnlock", {
                select: land
              });

              if (data.Cost) {
                _this9.onProcessCost(land ? land.node : null, data.Cost);
              }
            });
          });
        };

        _proto.onProcessCost = function onProcessCost(land, Cost) {
          var _this10 = this;

          var delay = 0.3;

          if (Cost.Currency) {
            Cost.Currency.forEach(function (item) {
              var cur = item;

              _this10.scheduleOnce(function () {
                _this10.showNum(land, 20, 20, cur.ChangeCount, cur.CurrencyModeId);
              }, delay);

              delay += 0.4;
            });
          } //delay = 0.3;


          if (Cost.Items) {
            Cost.Items.forEach(function (item) {
              if (CommonUtil.isTestNet()) {
                console.log("消耗的物品==>", item);
              }

              var cur = item;

              _this10.scheduleOnce(function () {
                _this10.showNum(land, 20, 20, cur.ChangeCount, cur.ItemModeId);
              }, delay);

              delay += 0.4;
            });
          }
        };

        _proto.onProcessGet = function onProcessGet(land, Get) {
          var _this11 = this;

          land && this.removeEffectInNodeAll(land.getChildByName("tipsEffect"));

          if (Get.Items) {
            var ItemModeIds = [];
            Get.Items.forEach(function (item) {
              if (item.hasOwnProperty("ItemModeId")) {
                for (var index = 0; index < item.ChangeCount; index++) {
                  var itemModeId = ItemModeIds.find(function (v) {
                    return v[0] == item.ItemModeId;
                  });

                  if (itemModeId) {
                    if (item.length <= 10) item.push(item.ItemModeId);
                  } else {
                    var arr = [item.ItemModeId];
                    ItemModeIds.push(arr);
                  }
                }
              } else {
                console.log("道具展示没有id==>%o", item);
                return;
              }
            });
            ItemModeIds.forEach(function (v) {
              v.forEach(function (v) {
                _this11.showBotanyCropAni(land, 0, 0, v);
              });
            });
          }

          if (Get.Currency) {
            Get.Currency.forEach(function (item) {
              if (item.hasOwnProperty("ItemModeId")) {
                var max = item.ChangeCount >= 10 ? 10 : item.ChangeCount;

                for (var index = 0; index < max; index++) {
                  _this11.showBotanyCropAni(land, 0, 0, item.ItemModeId);
                }
              } else {
                _this11.showBotanyCropAni(land, 0, 0, item.CurrencyModeId);
              }
            });
          }
        };

        _proto.onProcessOne = function onProcessOne(land, Item) {
          if (!Item) return;
          land && this.removeEffectInNodeAll(land.getChildByName("tipsEffect"));
          if (Item.hasOwnProperty("ItemModeId")) this.showBotanyCropAni(land, 0, 0, Item.ItemModeId);else this.showBotanyCropAni(land, 0, 0, Item.CurrencyModeId);
        };

        _proto.getPropNum = function getPropNum(ModeId, Get) {
          for (var index in Get.Currency) {
            var item = Get.Currency[index];
            if (item.CurrencyModeId == ModeId) return item.ChangeCount;
          }

          return 0;
        } //土地升级请求
        ;

        _proto.sendLandUpgradeRequest = function sendLandUpgradeRequest(data, cb) {
          var curLane = data.select;
          if (!this.isNetOk()) return;

          var curData = _extends({}, data);

          this.sendToNet(MessageManager.Net.FarmLandUpgradeRequest, {
            LandModeId: curData.select.getID()
          });
        };

        _proto.onLandUpgradeResponse = function onLandUpgradeResponse(data) {
          var _this12 = this;

          this._NetLock = false;
          console.log("data=>", data);
          var land = this.getFarmLandFromID(data.LandModeId);

          if (data.Code && data.Code != 0) {
            console.log("Net error==>", errorInfo[data.Code]);
            return;
          }

          land.playRoleAni(function () {
            land.playEffectNode(land.node, "houseUpgradeEffect", function () {
              land.setAnimationLock(false);
              TaskManager.getInstance().onDataResponse("LandUpgrade", {
                select: land
              });

              if (data.Cost) {
                console.log("data.Cost=>", data.Cost);

                _this12.onProcessCost(land ? land.node : null, data.Cost);
              }

              UIManager.getInstance().openUI(upLevelUI, 99, function (ui, arg) {
                ui.initUI(land, data.Level);
              });
            });
          });
        };

        _proto.sendPastureUpgradeRequest = function sendPastureUpgradeRequest(data, cb) {
          var curpasture = data.select;
          if (!this.isNetOk()) return;

          var curData = _extends({}, data);

          this.sendToNet(MessageManager.Net.FarmPastureUpgradeRequest, {
            PastureModeId: curData.select.getID()
          });
        };

        _proto.onPastureUpgradeResponse = function onPastureUpgradeResponse(data) {
          var _this13 = this;

          this._NetLock = false;
          var pasture = this.getPastureFromID(data.PastureModeId);

          if (data.Code && data.Code != 0) {
            console.log("Net error==>", errorInfo[data.Code]);
            return;
          }

          pasture.playRoleAni(pasture.effNode, 0, function () {
            pasture.playlevelUpEff();
            EventManager.getInstance().trigger(MessageManager.Custom.ShowToolsView, {
              show: false
            });
            pasture.setAnimationLock(false);
            TaskManager.getInstance().onDataResponse("PastureUpgrade", {
              select: pasture
            });

            if (data.Cost) {
              _this13.onProcessCost(pasture ? pasture.node : null, data.Cost);
            }

            pasture.activeBuild(data.Level, function () {
              UIManager.getInstance().openUI(upLevelUI, 99, function (ui, arg) {
                ui.initUI(pasture, data.Level);
              });
            });
          });
        };

        _proto.sendPastureTroughUpgradeRequest = function sendPastureTroughUpgradeRequest(data, cb) {
          this.sendToNet(MessageManager.Net.FarmPastureTroughUpgradeRequest, {
            PastureModeId: data.select.getID()
          });
          EventManager.getInstance().trigger(MessageManager.Custom.ShowToolsView, {
            show: false
          });
        };

        _proto.onPastureTroughUpgradeResponse = function onPastureTroughUpgradeResponse(data) {
          this._NetLock = false;
          var pasture = this.getPastureFromID(data.PastureModeId);
          TaskManager.getInstance().onDataResponse("TroughUpgrade", {
            select: pasture
          });
          if (data.Code && data.Code != 0) console.log("Net error==>", errorInfo[data.Code]);

          if (data.Cost) {
            this.onProcessCost(pasture ? pasture.node : null, data.Cost);
          }

          if (pasture) {
            EventManager.getInstance().trigger(MessageManager.Custom.ShowToolsView, {
              show: false
            });
            pasture.playFireworksEff();
          }
        } //土地种植请求
        ;

        _proto.sendLandPlantRequest = function sendLandPlantRequest(data, cb) {
          var _this14 = this;

          if (this.FarmLandPlantMap.has(data.select.getID()) && this.FarmLandPlantMap.get(data.select.getID())) return;
          this.FarmLandPlantMap.set(data.select.getID(), true);
          this.scheduleOnce(function () {
            _this14.FarmLandPlantMap.set(data.select.getID(), false);

            console.log("--请求种植setFalse------>>id ==", data.select.getID());
          }, 1);

          if (!data.seedid) {
            console.log("plant land==>", data.select.getID(), "  pid==", data.seedid);
          }

          console.log("-----------------请求种植----------->>id ==", data.select.getID());
          this.sendToNet(MessageManager.Net.FarmLandPlantRequest, {
            LandModeId: data.select.getID(),
            PlantModeId: data.seedid
          }); ///////先表现？

          var landID = data.select.getID();
          var land = this.getFarmLandFromID(landID);

          if (land) {
            land.showSeed(1, data.seedid);
            land.showElasticEff();
          }
        };

        _proto.onLandPlantResponse = function onLandPlantResponse(data) {
          this.FarmLandPlantMap.set(data.LandModeId, false);
          console.log("种植返回----》", data.LandModeId);
          this._NetLock = false;
          var land = this.getFarmLandFromID(data.LandModeId);

          if (data.Code && data.Code != 0) {
            console.log("Net error==>", errorInfo[data.Code]);
            return;
          }

          TaskManager.getInstance().onDataResponse("LandPlant", {
            select: land
          });

          if (data.Cost) {
            this.onProcessCost(land ? land.node : null, data.Cost);
          }
        };

        _proto.sendLandBreedRequest = function sendLandBreedRequest(data, cb) {
          var _this15 = this;

          if (this.FarmLandBreedMap.has(data.select.getID()) && this.FarmLandBreedMap.get(data.select.getID())) return;
          this.FarmLandBreedMap.set(data.select.getID(), true);
          this.scheduleOnce(function () {
            _this15.FarmLandBreedMap.set(data.select.getID(), false);
          }, 1);
          this.sendToNet(MessageManager.Net.FarmLandBreedRequest, {
            PastureModeId: data.select.getID(),
            AnimalModeId: data.seedid
          });
          EventManager.getInstance().trigger(MessageManager.Custom.ShowToolsView, {
            show: false
          });
        };

        _proto.onLandBreedResponse = function onLandBreedResponse(data) {
          this._NetLock = false;
          var pasture = this.getPastureFromID(data.PastureModeId);

          if (data.Code && data.Code != 0) {
            console.log("Net error==>", errorInfo[data.Code]);
            return;
          } //TaskManager.getInstance().onDataResponse("LandBreed", { select: pasture });


          if (data.Cost) {
            this.onProcessCost(pasture ? pasture.node : null, data.Cost);
          }

          if (this._state == GAMESTATE.GS_TOW) {
            var od = this.operaleBtn.operaledata;
            var ab = ConfigFile.getAnimalFromModeId(od.seedid);
            var a = {
              seedID: ab.AnimalCubId,
              type: "pasture",
              show: true
            };
            this.onLandEnable(a);
          }

          this.FarmLandBreedMap.set(data.PastureModeId, false);
        };

        _proto.onAnimalFeedCostResponse = function onAnimalFeedCostResponse(data) {
          this._NetLock = false;

          for (var index in data.Feed) {
            var feedInfo = data.Feed[index];

            var _pasture = this.getPastureFromID(feedInfo.PastureId); //int64 AnimalId = 2;


            if (feedInfo.Cost) {
              this.onProcessCost(_pasture ? _pasture.node : null, feedInfo.Cost);
            }
          }
        };

        _proto.onFarmVisitResponse = function onFarmVisitResponse(data) {
          var _this16 = this;

          this._NetLock = false;
          this.initFarmLand();
          this.initPasture();
          this.closeTipOrBtn();
          GameAllData.FarmVisitResponse = data;

          if (data.Code == 0) {
            var func = function func() {
              GameAllData.visitState = true;
              EventManager.getInstance().trigger(MessageManager.Custom.ShowToolsView, {
                show: false
              });
              EventManager.getInstance().trigger(MessageManager.Custom.ShowExceptionView, {
                show: false
              });

              _this16.closeTipOrBtn();

              _this16._gameUI.setVisiData(true);

              _this16._gameUI.entryVisit(true);
            };

            var cv = UIManager.getInstance().getUI(CutscenesView);

            if (cv) {
              func();
            } else {
              UIManager.getInstance().openUI(CutscenesView, 20, function (ui, args) {
                ui.callback = func;
              });
            }

            UIManager.getInstance().closeUI(FamilyView);
            console.log("进入他人庄园 ");
          }
        };

        _proto.onFarmVisitHearResponse = function onFarmVisitHearResponse(data) {
          this._NetLock = false;

          if (data.Code == 0) {
            var visit = GameAllData.FarmVisitUserResponse;
            visit.IsSendHeart = data.IsSendHeart;
            var text = producer.getMessageText(7002);
            var coin = this.getPropNum(-2, data.Get); //text = "<color=#56c5ff>你给ID  %s的家族成员献上了一枚爱心，获得了%s点小屋经验，获得%s个贝壳币</color>"

            text = text.format(data.UserId.toString(), data.HouseExp.toString(), coin.toString());
            TipManager.TipFromText(7002, text);
            if (this._gameUI) this._gameUI.upHeart(); // int64               HouseExp      = 2; //帮忙获取的小屋经验
            // FarmStoreChangeInfo Get           = 3;//帮忙获取的贝壳币
            // int64 UserId = 4;//拜访玩家id
            // int64 IsSendHeart = 5;//送心状态 0 未送 1已送

            if (data.Get) {
              var gameUi = UIManager.getInstance().getUI(UIGame);

              if (gameUi) {
                var flyNode = instantiate(this.getItemEff);
                flyNode.parent = find("Canvas");
                flyNode.getComponent(GetItemEff).getFly(gameUi.node.worldPosition, data.Get);
              } //this.onProcessGet(null, data.Get);

            }
          }
        };

        _proto.onFarmSendHeartResponse = function onFarmSendHeartResponse(data) {
          this._NetLock = false;
          GameAllData.FarmSendHeartResponse = data;
          if (this._gameUI) this._gameUI.upHeart();
        };

        _proto.onFarmVisitBackResponse = function onFarmVisitBackResponse(data) {
          var _this17 = this;

          this.initFarmLand();
          this.initPasture();
          this.closeTipOrBtn();

          var func = function func() {
            _this17._NetLock = false;
            GameAllData.FarmVisitBackResponse = data; //if(data.Code == 0){

            GameAllData.visitState = false;
            EventManager.getInstance().trigger(MessageManager.Custom.ShowToolsView, {
              show: false
            });
            EventManager.getInstance().trigger(MessageManager.Custom.ShowExceptionView, {
              show: false
            });

            _this17.closeTipOrBtn();

            _this17._gameUI.entryVisit(false); // }

          };

          var cv = UIManager.getInstance().getUI(CutscenesView);

          if (cv) {
            func();
          } else {
            UIManager.getInstance().openUI(CutscenesView, 20, function (ui, args) {
              ui.callback = func;
            });
          } // UIManager.getInstance().openUI(CutscenesView, 11, (ui: CutscenesView, args) => {
          //     ui.callback = func;
          // });


          console.log("返回自己庄园 ");
        };

        _proto.onFarmVisitStealPlantResponse = function onFarmVisitStealPlantResponse(data) {
          this._NetLock = false;
          var land = this.getFarmLandFromID(data.LandModeId);

          if (data.Code && data.Code != 0) {
            if (data.Code == 7006) {
              this.popMessageBox(7008);
            }

            if (data.Code == 10022) {
              this.popMessageBox(7008);
            }

            console.log("Net error==>", errorInfo[data.Code]);
            return;
          }

          if (data.Cost) {
            this.onProcessCost(land ? land.node : null, data.Cost);
          }

          if (data.Get) {
            var gameUi = UIManager.getInstance().getUI(UIGame);

            if (gameUi) {
              var flyNode = instantiate(this.getItemEff);
              flyNode.parent = find("Canvas");
              flyNode.getComponent(GetItemEff).getFly(land ? land.node.worldPosition : gameUi.node.worldPosition, data.Get);
            } //this.onProcessGet(land ? land.node : null, data.Get);

          }
        };

        _proto.onFarmVisitStealAnimalResponse = function onFarmVisitStealAnimalResponse(data) {
          this._NetLock = false;
          var land = this.getPastureFromID(data.PastureModeId);

          if (data.Code && data.Code != 0) {
            if (data.Code == 7006) {
              this.popMessageBox(7008);
            }

            if (data.Code == 10022) {
              this.popMessageBox(7008);
            }

            console.log("Net error==>", errorInfo[data.Code]);
            return;
          }

          if (data.Cost) {
            this.onProcessCost(land ? land.node : null, data.Cost);
          }

          if (data.Get) {
            var gameUi = UIManager.getInstance().getUI(UIGame);

            if (gameUi) {
              var flyNode = instantiate(this.getItemEff);
              flyNode.parent = find("Canvas");
              flyNode.getComponent(GetItemEff).getFly(land ? land.node.worldPosition : gameUi.node.worldPosition, data.Get);
            } //this.onProcessGet(land ? land.node : null, data.Get);

          }
        };

        _proto.onFarmVisitPlantActionResponse = function onFarmVisitPlantActionResponse(data) {
          this._NetLock = false; //Action

          var land = this.getFarmLandFromID(data.LandModeId);

          if (data.Code && data.Code != 0) {
            console.log("Net error==>", errorInfo[data.Code]);
            return;
          }

          if (data.Cost) {
            this.onProcessCost(land ? land.node : null, data.Cost);
          }

          var animNameList = ["e1", "KettleWatering", "e3"];
          land.playHeadEffect(animNameList[data.Action - 1], {}, function (data) {
            land.plantHideEx(function () {
              land.setAnimationLock(false);
            });
          });
        };

        _proto.onFarmVisitAnimalActionResponse = function onFarmVisitAnimalActionResponse(data) {
          this._NetLock = false;
          var land = this.getFarmLandFromID(data.LandModeId);

          if (data.Code && data.Code != 0) {
            console.log("Net error==>", errorInfo[data.Code]);
            return;
          }

          if (data.Cost) {
            this.onProcessCost(land ? land.node : null, data.Cost);
          }
        };

        _proto.sendLandAnimalActionRequest = function sendLandAnimalActionRequest(data, aid, cb) {
          var _this18 = this; //if (!data.animal) console.log("sendLandAnimalActionRequest no animal");
          // if (this.FarmLandAnimalActionMap.has(data.select.getID()) && this.FarmLandAnimalActionMap.get(data.select.getID())) return;
          // this.FarmLandAnimalActionMap.set(data.select.getID(),true);
          // this.scheduleOnce(()=>{
          //     this.FarmLandAnimalActionMap.set(data.select.getID(),false);
          // },0.5);


          var animal = data.animal;

          var dataCpy = _extends({}, data);

          var name = "a1";
          if (aid == 2) name = "FlyShoot";else if (aid == 3) name = "a3";
          animal.playHeadEffect(name, aid, {}, function (data) {
            animal.plantHideEx(function () {
              if (GameAllData.visitState) {
                _this18.sendToNet(MessageManager.Net.FarmVisitAnimalActionRequest, {
                  PastureModeId: dataCpy.select.getID(),
                  AnimalId: dataCpy.animal.socket,
                  Action: aid
                });
              } else {
                _this18.sendToNet(MessageManager.Net.FarmLandAnimalActionRequest, {
                  PastureModeId: dataCpy.select.getID(),
                  AnimalId: dataCpy.animal.socket,
                  Action: aid
                });
              }

              animal.setAnimationLock(false);
            });
          });
        };

        _proto.sendLandAnimalBuryRequest = function sendLandAnimalBuryRequest(data, aid, cb) {
          var _this19 = this; // if (this.FarmLandAnimalBuryMap.has(data.select.getID()) && this.FarmLandAnimalBuryMap.get(data.select.getID())) return;
          // this.FarmLandAnimalBuryMap.set(data.select.getID(),true);
          // this.scheduleOnce(()=>{
          //     this.FarmLandAnimalBuryMap.set(data.select.getID(),false);
          // },1);


          var s = this.node.scale;
          if (!this.isNetOk()) return;

          var dataCpy = _extends({}, data);

          var pasturenode = dataCpy.select;
          var animal = dataCpy.animal;
          pasturenode.playAnimalAni(animal, -60 * s.x, function () {
            if (animal && pasturenode.testAnimal(animal)) {
              animal.bodyHideEx(function () {
                animal.setAnimationLock(false);

                _this19.sendToNet(MessageManager.Net.FarmLandAnimalBuryRequest, {
                  PastureModeId: dataCpy.select.getID(),
                  AnimalId: dataCpy.animal.socket,
                  Action: aid
                });
              });
            }
          });
        };

        _proto.onLandAnimalActionResponse = function onLandAnimalActionResponse(data) {
          this._NetLock = false;
          var land = this.getFarmLandFromID(data.LandModeId);

          if (data.Code && data.Code != 0) {
            console.log("Net error==>", errorInfo[data.Code]);
            return;
          }

          TaskManager.getInstance().onDataResponse("LandAnimalAction", {
            select: land
          });

          if (data.Cost) {
            this.onProcessCost(land ? land.node : null, data.Cost);
          } // this.FarmLandAnimalActionMap.set(data.LandModeId,false);

        };

        _proto.onLandAnimalCollectResponse = function onLandAnimalCollectResponse(data) {
          this._NetLock = false;
          var land = this.getPastureFromID(data.PastureModeId);
          if (data.Code && data.Code != 0) console.log("Net error==>", errorInfo[data.Code]);

          if (data.Cost) {
            this.onProcessCost(land ? land.node : null, data.Cost);
          }

          if (data.Get) {
            var gameUi = UIManager.getInstance().getUI(UIGame);

            if (gameUi) {
              var flyNode = instantiate(this.getItemEff);
              flyNode.parent = find("Canvas");
              flyNode.getComponent(GetItemEff).getFly(land ? land.node.worldPosition : gameUi.node.worldPosition, data.Get);
            } //this.onProcessGet(land ? land.node : null, data.Get);

          }

          TaskManager.getInstance().onDataResponse("LandAnimalCollect", {
            select: land
          });
          this.FarmLandAnimalActionMap.set(data.PastureModeId, false);
        };

        _proto.onLandAnimalBuryResponse = function onLandAnimalBuryResponse(data) {
          this._NetLock = false;
          console.log("onLandAnimalBuryResponse==>", data);
        } //土地收割请求
        ;

        _proto.sendHarvestPlantRequest = function sendHarvestPlantRequest(data, cb) {
          var _this20 = this;

          if (this.FarmHarvestPlantMap.has(data.select.getID()) && this.FarmHarvestPlantMap.get(data.select.getID())) return;
          this.FarmHarvestPlantMap.set(data.select.getID(), true);
          this.scheduleOnce(function () {
            _this20.FarmHarvestPlantMap.set(data.select.getID(), false);
          }, 1);

          if (GameAllData.visitState) {
            this.sendToNet(MessageManager.Net.FarmVisitStealPlantRequest, {
              LandModeId: data.select.getID(),
              PlantModeId: data.plantID
            });
          } else {
            this.sendToNet(MessageManager.Net.FarmHarvestPlantRequest, {
              LandModeId: data.select.getID(),
              PlantModeId: data.plantID
            });
          }
        };

        _proto.onHarvestPlantResponse = function onHarvestPlantResponse(data) {
          this._NetLock = false;
          var land = this.getFarmLandFromID(data.LandModeId);

          if (data.Code && data.Code != 0) {
            console.log("Net error==>", errorInfo[data.Code]);
            return;
          }

          land && land.elasticEffect();

          if (data.Cost) {
            this.onProcessCost(land ? land.node : null, data.Cost);
          }

          if (data.Get) {
            var gameUi = UIManager.getInstance().getUI(UIGame);

            if (gameUi) {
              var flyNode = instantiate(this.getItemEff);
              flyNode.parent = find("Canvas");
              flyNode.getComponent(GetItemEff).getFly(land ? land.node.worldPosition : gameUi.node.worldPosition, data.Get);
            } //this.onProcessGet(land ? land.node : null, data.Get);

          }

          TaskManager.getInstance().onDataResponse("HarvestPlant", {
            select: land
          });
          this.FarmHarvestPlantMap.set(data.LandModeId, false);
        } //土地铲除请求
        ;

        _proto.sendWeedingPlantRequest = function sendWeedingPlantRequest(data, cb) {
          var _this21 = this;

          if (this.FarmLandEradicateMap.has(data.select.getID()) && this.FarmLandEradicateMap.get(data.select.getID())) return;
          this.FarmLandEradicateMap.set(data.select.getID(), true);
          this.scheduleOnce(function () {
            _this21.FarmLandEradicateMap.set(data.select.getID(), false);
          }, 1);

          var curData = _extends({}, data);

          if (!this.isNetOk()) return;
          var land = data.select;
          land.playRoleAni(function () {
            land.elasticEffect();
            land.plantHide(function () {
              land.setAnimationLock(false);

              _this21.sendToNet(MessageManager.Net.FarmLandEradicateRequest, {
                LandModeId: curData.select.getID()
              });
            });
          });
        };

        _proto.onWeedingPlantResponse = function onWeedingPlantResponse(data) {
          this._NetLock = false;
          var land = this.getFarmLandFromID(data.LandModeId);

          if (data.Code && data.Code != 0) {
            console.log("Net error==>", errorInfo[data.Code]);
            return;
          }

          if (data.Cost) {
            this.onProcessCost(land ? land.node : null, data.Cost);
          }

          TaskManager.getInstance().onDataResponse("WeedingPlant", {
            select: land
          });
          this.FarmLandEradicateMap.set(data.LandModeId, false);
        } //土地浇水请求
        ;

        _proto.sendLandWateringRequest = function sendLandWateringRequest(data, cb) {
          //console.log("sendLandWateringRequest");
          var self = this;

          var datacoy = _extends({}, data);

          if (GameAllData.visitState) {
            self.sendToNet(MessageManager.Net.FarmVisitPlantActionRequest, {
              LandModeId: datacoy.select.getID(),
              PlantModeId: 0,
              Action: 2
            });
          } else {
            var land = data.select;
            land.playHeadEffect("KettleWatering", {}, function (data) {
              land.plantHideEx(function () {
                self.sendToNet(MessageManager.Net.FarmLandWateringRequest, {
                  LandModeId: datacoy.select.getID(),
                  Action: 2
                });
                land.setAnimationLock(false);
              });
            });
          }
        };

        _proto.onLandWateringResponse = function onLandWateringResponse(data) {
          this._NetLock = false; //Action

          var land = this.getFarmLandFromID(data.LandModeId);

          if (data.Code && data.Code != 0) {
            console.log("Net error==>", errorInfo[data.Code]);
            return;
          }

          if (data.Cost) {
            this.onProcessCost(land ? land.node : null, data.Cost);
          }

          TaskManager.getInstance().onDataResponse("LandWatering", {
            select: land
          });
        };

        _proto.sendLandDigRequest = function sendLandDigRequest(data, cb) {
          var _this22 = this; //console.log("sendLandDigRequest");


          var datacoy = _extends({}, data);

          if (GameAllData.visitState) {
            this.sendToNet(MessageManager.Net.FarmVisitPlantActionRequest, {
              LandModeId: datacoy.select.getID(),
              PlantModeId: 0,
              Action: 1
            });
          } else {
            var land = data.select;
            land.playHeadEffect("e1", {}, function (data) {
              land.plantHideEx(function () {
                _this22.sendToNet(MessageManager.Net.FarmLandWateringRequest, {
                  LandModeId: datacoy.select.getID(),
                  Action: 1
                });

                land.setAnimationLock(false);
              });
            });
          }
        } //土地杀虫请求
        ;

        _proto.sendLandInsectRequest = function sendLandInsectRequest(data, cb) {
          var _this23 = this; // console.log("sendLandInsectRequest");


          var datacoy = _extends({}, data);

          if (GameAllData.visitState) {
            this.sendToNet(MessageManager.Net.FarmVisitPlantActionRequest, {
              LandModeId: datacoy.select.getID(),
              PlantModeId: 0,
              Action: 3
            });
          } else {
            var land = data.select;
            land.playHeadEffect("e3", {}, function (data) {
              land.plantHideEx(function () {
                _this23.sendToNet(MessageManager.Net.FarmLandWateringRequest, {
                  LandModeId: datacoy.select.getID(),
                  Action: 3
                });

                land.setAnimationLock(false);
              });
            });
          }
        };

        _proto.onLandInsectResponse = function onLandInsectResponse(data) {
          this._NetLock = false;
          var land = this.getFarmLandFromID(data.LandModeId);

          if (data.Code && data.Code != 0) {
            console.log("Net error==>", errorInfo[data.Code]);
            return;
          }

          if (data.Cost) {
            this.onProcessCost(land ? land.node : null, data.Cost);
          }
        };

        _proto.sendLandAnimalCollectRequest = function sendLandAnimalCollectRequest(data, cb) {
          var _this24 = this;

          if (this.FarmLandAnimalActionMap.has(data.select.getID()) && this.FarmLandAnimalActionMap.get(data.select.getID())) return;
          this.FarmLandAnimalActionMap.set(data.select.getID(), true);
          this.scheduleOnce(function () {
            _this24.FarmLandAnimalActionMap.set(data.select.getID(), false);
          }, 1);

          if (GameAllData.visitState) {
            this.sendToNet(MessageManager.Net.FarmVisitStealAnimalRequest, {
              PastureModeId: data.select.getID(),
              AnimalId: data.animal.socket
            });
          } else {
            this.sendToNet(MessageManager.Net.FarmLandAnimalCollectRequest, {
              PastureModeId: data.select.getID(),
              AnimalId: data.animal.socket
            });
          }
        };

        _proto.sendFarmVisitBackRequest = function sendFarmVisitBackRequest(data) {
          this.sendToNet(MessageManager.Net.FarmVisitBackRequest, undefined);
        };

        _proto.sendFarmVisitStealPlantRequest = function sendFarmVisitStealPlantRequest(data, cb) {
          this.sendToNet(MessageManager.Net.FarmVisitStealPlantRequest, {
            LandModeId: data.select.getID(),
            PlantModeId: data.plantID
          });
        };

        _proto.sendFarmVisitStealAnimalRequest = function sendFarmVisitStealAnimalRequest(data, cb) {
          this.sendToNet(MessageManager.Net.FarmVisitStealAnimalRequest, {
            PastureModeId: data.select.getID(),
            AnimalId: data.animal.socket
          });
        };

        _proto.sendFarmVisitPlantActionRequest = function sendFarmVisitPlantActionRequest(data, acid, cb) {
          this.sendToNet(MessageManager.Net.FarmVisitPlantActionRequest, {
            LandModeId: data.select.getID(),
            PlantModeId: data.plantI,
            Action: acid
          });
        };

        _proto.sendFarmVisitAnimalActionRequest = function sendFarmVisitAnimalActionRequest(data, acid, cb) {
          this.sendToNet(MessageManager.Net.FarmVisitAnimalActionRequest, {
            PastureModeId: data.select.getID(),
            AnimalId: data.animal.socket,
            Action: acid
          });
        };

        _proto.loadLand = function loadLand(parentNode, instant, data) {
          if (!parentNode) return;

          var dataCopy = _extends({}, data);

          var item = instantiate(instant); //if (parentNode.children.length < 1) {

          parentNode.addChild(item);
          item.getComponent(producer).initData(dataCopy); // }
        };

        _proto.getFarmLandFromID = function getFarmLandFromID(id) {
          for (var index = 0; index < this._farmland.length; index++) {
            var script = this._farmland[index].getComponentInChildren(fameland);

            if (!script) continue;
            if (script.ID == id) return script;
          }

          return undefined;
        };

        _proto.getPastureFromID = function getPastureFromID(id) {
          for (var index = 0; index < this._pasture.length; index++) {
            var script = this._pasture[index].getComponentInChildren(pasture);

            if (!script) continue;
            if (script.ID == id) return script;
          }

          return undefined;
        };

        _proto.getBuildFromID = function getBuildFromID(id) {
          for (var index = 0; index < this._build.length; index++) {
            var script = this._build[index].getComponent(build);

            if (!script) continue;
            if (script.ID == id) return script;
          }

          return undefined;
        };

        _proto.getBuildFromName = function getBuildFromName(id) {
          for (var index = 0; index < this._build.length; index++) {
            var script = this._build[index].getComponent(build);

            if (!script) continue;
            if (script.nameCode == id) return script;
          }

          return undefined;
        } //缩放后重置位置
        ;

        _proto.adjustmentCameraPositon = function adjustmentCameraPositon() {
          var _this$getMoveArea2 = this.getMoveArea(),
              top = _this$getMoveArea2.top,
              bottom = _this$getMoveArea2.bottom,
              left = _this$getMoveArea2.left,
              right = _this$getMoveArea2.right;

          this.node.getPosition(temp_v3_1);
          if (temp_v3_1.x < left) temp_v3_1.x = left;else if (temp_v3_1.x > right) temp_v3_1.x = right;
          if (temp_v3_1.y < bottom) temp_v3_1.y = bottom;else if (temp_v3_1.y > top) temp_v3_1.y = top;
          this.node.setPosition(temp_v3_1);
        };

        _proto.getMapObjectSize = function getMapObjectSize(target) {
          var scale = this.node.scale;
          var tsize = new Size(target.getComponent(UITransform).contentSize);
          tsize.width = tsize.width * scale.x;
          tsize.height = tsize.height * scale.y;
          return tsize;
        };

        _proto.mapAlignmentToNode = function mapAlignmentToNode(target) {
          var _this25 = this;

          target.getWorldPosition(temp_v3_1);
          console.log("Node target==>", temp_v3_1);
          var self = this;
          var tsize = this.getMapObjectSize(target);
          var vs = view.getVisibleSize();

          this._UICamera.node.getWorldPosition(temp_v3_2);

          var sleft = temp_v3_1.x - tsize.width / 2;
          var sright = temp_v3_1.x + tsize.width / 2;
          var stop = temp_v3_1.y + tsize.height / 2;
          var sbottom = temp_v3_1.y - tsize.height / 2;
          var tleft = temp_v3_2.x - vs.width / 2;
          var tright = temp_v3_2.x + vs.width / 2;
          var ttop = temp_v3_2.y + vs.height / 2;
          var tbottom = temp_v3_2.y - vs.height / 2;

          if (sleft < tleft || sright > tright || stop > ttop || sbottom < tbottom) {
            var xoffset = 0;
            var yoffset = 0;
            if (sleft < tleft) xoffset = tleft - sleft + 100;else if (sright > tright) xoffset = tright - sright - 100;
            if (stop > ttop) yoffset = ttop - stop - 100;else if (sbottom < tbottom) yoffset = tbottom - sbottom + 100;

            if (this._MapAction) {
              this._MapAction.stop();

              this._MapAction = null;
              this._scaleLock = false;
            }

            this._scaleLock = true;
            this._MapAction = tween(this.node).by(0.5, {
              position: new Vec3(xoffset, yoffset, 0)
            }).call(function () {
              self._MapAction = null;
              _this25._scaleLock = false;

              _this25.CheckVisit();
            }).start();
          }
        };

        _proto.getTargetWorldPositon = function getTargetWorldPositon(target) {
          this._UICamera.node.getWorldPosition(temp_CameraOffset);

          target.getWorldPosition(temp_v3_1);
          Vec3.subtract(temp_v3_2, temp_v3_1, temp_CameraOffset);
          this.node.getWorldPosition(temp_CameraOffset);
          Vec3.subtract(temp_v3_1, temp_CameraOffset, temp_v3_2);
          temp_v3_1.z = temp_CameraOffset.z;
          return temp_v3_1;
        };

        _proto.mapAlignmentToNodeCenter = function mapAlignmentToNodeCenter(target, isTween, isScale) {
          var _this26 = this;

          var tpos = this.getTargetWorldPositon(target);
          var xoffset = tpos.x;
          var yoffset = tpos.y;
          var zoffset = tpos.z;

          if (!isTween) {
            this.node.setWorldPosition(tpos);
            this.CheckVisit();

            if (isScale) {
              this.targetScale = isScale;
            }
          } else {
            var self = this;

            if (this._MapAction) {
              this._MapAction.stop();

              this._MapAction = null;
              this._scaleLock = false;
            }

            if (isScale) {
              self._scaleLock = false;
              this._MapAction = tween(this).to(0.5, {
                scale: isScale
              }, {
                onUpdate: function onUpdate(eventtarget, ratio) {
                  self.targetScale = self.scale;
                  var tpos = self.getTargetWorldPositon(target);

                  _this26.node.getWorldPosition(temp_CameraOffset);

                  Vec3.lerp(temp_v3_2, temp_CameraOffset, tpos, ratio);
                  self.node.setWorldPosition(temp_v3_2);
                  self.CheckVisit();
                }
              }).call(function () {
                self._scaleLock = false;
                self._MapAction = null;
              }).start();
            } else {
              self._scaleLock = true;
              this._MapAction = tween(this.node).to(0.5, {
                worldPosition: new Vec3(xoffset, yoffset, zoffset)
              }).call(function () {
                self._MapAction = null;
                self._scaleLock = false;

                _this26.CheckVisit();
              }).start();
            }
          }
        };

        _proto.mapMove = function mapMove(offset, pos, data) {
          var _this$getMoveArea3 = this.getMoveArea(),
              top = _this$getMoveArea3.top,
              bottom = _this$getMoveArea3.bottom,
              left = _this$getMoveArea3.left,
              right = _this$getMoveArea3.right;

          this.node.getPosition(temp_v3_1);
          var targetX = temp_v3_1.x + offset.x;
          var targetY = temp_v3_1.y + offset.y; //当摄像机己经在界外时，需要能移回去

          if (targetX < 0 && targetX > temp_v3_1.x) temp_v3_1.x += offset.x;else if (targetX > 0 && targetX < temp_v3_1.x) temp_v3_1.x += offset.x;else if (targetX > left && targetX < right) temp_v3_1.x += offset.x;
          if (targetY < 0 && targetY > temp_v3_1.y) temp_v3_1.y += offset.y;else if (targetY > 0 && targetY < temp_v3_1.y) temp_v3_1.y += offset.y;else if (targetY > bottom && targetY < top) temp_v3_1.y += offset.y;
          this.node.setPosition(temp_v3_1);
          this.CheckVisit();
        };

        _proto.toolMove = function toolMove(offset, pos, data) {
          var _this27 = this;

          if (!data.select) return;
          var mode = this.operaleBtn.operalemode;
          var modeData = OperaleData[mode];
          if (!modeData) return;

          if (data.select.getType() == "pasture") {
            var arraySelect = this.pickPasture(pos);

            var curData = _extends({}, data);

            if (modeData.fruit) {
              //操作动物
              arraySelect.forEach(function (item) {
                var select = item.pickAnimalAll(pos);
                select.forEach(function (animal) {
                  if (animal.canOperale(mode, data, true)) {
                    curData.select = item;
                    curData["animal"] = animal;
                    console.log("onOperateBtn===>", mode);

                    _this27.onOperateBtn(mode, curData);
                  }
                });
              });
            } else {
              //操作牧场
              arraySelect.forEach(function (item) {
                if (item.canOperale(mode, data, true)) {
                  curData.select = item;
                  console.log("onOperateBtn===>", mode);

                  _this27.onOperateBtn(mode, curData);
                }
              });
            }
          } else {
            var _arraySelect = this.pickaFarmlandRect(pos, 50);

            var _curData = _extends({}, data);

            _arraySelect.forEach(function (item) {
              if (item.canOperale(mode, data, true)) {
                _curData.select = item;
                _curData.plantID = item.plantID;
                console.log("onOperateBtn===>", mode);

                _this27.onOperateBtn(mode, _curData);
              }
            });
          }
        } //响应单击的操作按钮
        ;

        _proto.onOperateBtn = function onOperateBtn(mode, data) {
          // if (UIHelp.getTimeDiff(this._NetLockTime) < 1500) {
          //     console.log("等待网络返回===>", mode);
          //     return;
          // }
          // if (/*this._NetLock && */UIHelp.getTimeDiff(this._NetLockTime) < 2000) {
          //     console.log("等待网络返回===>", mode);
          //     return;
          // }
          if (mode == OperaleDef.CANBREED) {
            if (UIHelp.getTimeDiff(this._BrushTime) < 1000) {
              return;
            }

            this._BrushTime = UIHelp.getTimeMask();
          }

          if (mode == OperaleDef.UNLOCK) this.sendLandUnlockRequest(data, this.onLandResponse.bind(this));else if (mode == OperaleDef.UPGRADE) this.sendLandUpgradeRequest(data, this.onLandResponse.bind(this));else if (mode == OperaleDef.SOWING) this.sendLandPlantRequest(data, this.onLandResponse.bind(this));else if (mode == OperaleDef.HARVEST) this.sendHarvestPlantRequest(data, this.onLandResponse.bind(this));else if (mode == OperaleDef.WEEDING) this.sendWeedingPlantRequest(data, null);else if (mode == OperaleDef.WATERING) this.sendLandWateringRequest(data, null);else if (mode == OperaleDef.ERADICATE) this.sendLandInsectRequest(data, null);else if (mode == OperaleDef.DIG) this.sendLandDigRequest(data, null);else if (mode == OperaleDef.UNLOCKPASTURE) this.sendPastureUnlockRequest(data, null);else if (mode == OperaleDef.UPGRADEPASTURE) this.sendPastureUpgradeRequest(data, null);else if (mode == OperaleDef.UPGRADETROUGH) this.sendPastureTroughUpgradeRequest(data, null);else if (mode == OperaleDef.CANBREED) this.sendLandBreedRequest(data, this.onPastureResponse.bind(this));else if (mode == OperaleDef.CLEANING) this.sendLandAnimalActionRequest(data, 1, null);else if (mode == OperaleDef.FUMIGATE) this.sendLandAnimalActionRequest(data, 2, null);else if (mode == OperaleDef.REMEDY) this.sendLandAnimalActionRequest(data, 3, null);else if (mode == OperaleDef.COLLECT) this.sendLandAnimalCollectRequest(data, null);else if (mode == OperaleDef.CLEARDIE) this.sendLandAnimalBuryRequest(data, 1, null);else if (mode == OperaleDef.STEALPLANT) this.sendFarmVisitStealPlantRequest(data, null);else if (mode == OperaleDef.STEALANIMAL) this.sendFarmVisitStealAnimalRequest(data, null);
        };

        _proto.getUnlockFarm = function getUnlockFarm() {
          for (var index = 0; index < this._farmland.length; index++) {
            var script = this._farmland[index].getComponentInChildren(fameland);

            if (!script) continue;
            if (script.state == OperaleDef.UNLOCK) return script;
          }

          return undefined;
        };

        _proto.getUnlockPasture = function getUnlockPasture() {
          for (var index = 0; index < this._pasture.length; index++) {
            var script = this._pasture[index].getComponentInChildren(pasture);

            if (!script) continue;
            if (script.state == OperaleDef.UNLOCKPASTURE) return script;
          }

          return undefined;
        };

        _proto.pickaFarmlandRect = function pickaFarmlandRect(uipos, radius) {
          var arraySelect = [];

          this._farmland.forEach(function (item) {
            var scripit = item.getComponentInChildren(fameland);
            if (!scripit) return;

            if (UIHelp.rectPolygonHitTest(uipos, radius, scripit.node)) {
              arraySelect.push(scripit);
            }
          });

          return arraySelect;
        };

        _proto.pickaFarmland = function pickaFarmland(uipos) {
          var arraySelect = [];

          this._farmland.forEach(function (item) {
            var scripit = item.getComponentInChildren(fameland);
            if (!scripit) return;

            if (UIHelp.polygonHitTest(uipos, scripit.node)) {
              arraySelect.push(scripit);
            }
          });

          return arraySelect;
        };

        _proto.pickPastureRect = function pickPastureRect(uipos, radius) {
          var arraySelect = [];

          this._pasture.forEach(function (item) {
            var scripit = item.getComponentInChildren(pasture);
            if (!scripit) return;

            if (UIHelp.rectPolygonHitTest(uipos, radius, scripit.node)) {
              arraySelect.push(scripit);
            }
          });

          return arraySelect;
        };

        _proto.pickPasture = function pickPasture(uipos) {
          var arraySelect = [];

          this._pasture.forEach(function (item) {
            var scripit = item.getComponentInChildren(pasture);
            if (!scripit) return; // let collder = scripit.Collider.children;
            // if(UIHelp.polygonHitTest(uipos,collder[0])){
            //     arraySelect.push(scripit);
            // }else if(UIHelp.polygonHitTest(uipos,collder[1])){
            //     arraySelect.push(scripit);
            // }else if(UIHelp.polygonHitTest(uipos,collder[2])){
            //     arraySelect.push(scripit);
            // }else if(UIHelp.polygonHitTest(uipos,collder[3])){
            //     arraySelect.push(scripit);
            // }else if(UIHelp.TestUIPoint(uipos,scripit.BuildPick)){
            //     arraySelect.push(scripit);
            // } else {
            //     let s = scripit.pickAnimalAll(uipos);
            //     if(s.length>0) arraySelect.push(scripit);
            // }

            if (UIHelp.polygonHitTest(uipos, scripit.node)) {
              arraySelect.push(scripit);
            }
          });

          return arraySelect;
        };

        _proto.pickBuild = function pickBuild(uipos) {
          var arraySelect = [];

          this._build.forEach(function (item) {
            var scripit = item.getComponent(build);
            if (!scripit) return;

            if (UIHelp.TestUIPoint(uipos, scripit.node)) {
              arraySelect.push(scripit);
            }
          });

          return arraySelect;
        };

        _proto.closeTipOrBtn = function closeTipOrBtn() {
          var _this$operaleBtn;

          this.closeTip();
          (_this$operaleBtn = this.operaleBtn) == null ? void 0 : _this$operaleBtn.pushBtn();
        };

        _proto.closeOperaleBtn = function closeOperaleBtn() {
          var _this$operaleBtn2;

          (_this$operaleBtn2 = this.operaleBtn) == null ? void 0 : _this$operaleBtn2.pushBtn();
        };

        _proto.testTip = function testTip(uipos) {
          if (!this.tipDlg.active) return false;
          var TipScript = this.tipDlg.getComponentInChildren(BaseTip);
          if (!TipScript) return false;
          return TipScript.testClick(uipos);
        };

        _proto.getTipData = function getTipData() {
          if (!this.tipDlg.active) return null;
          var TipScript = this.tipDlg.getComponentInChildren(BaseTip);
          if (!TipScript) return null;
          return TipScript._cbData;
        };

        _proto.getTipName = function getTipName() {
          if (!this.tipDlg.active) return "";
          var TipScript = this.tipDlg.getComponentInChildren(BaseTip);
          if (!TipScript) return "";
          return TipScript.node.name;
        };

        _proto.getTipAnimal = function getTipAnimal() {
          var cbData = this.getTipData();
          if (!cbData) return null;
          return cbData.animal;
        };

        _proto.getTipTarget = function getTipTarget() {
          var cbData = this.getTipData();
          if (!cbData) return null;
          return cbData.select;
        };

        _proto.closeTip = function closeTip() {
          var script = this.tipDlg.getComponentInChildren(BaseTip);

          if (script) {
            script.onDestroy();
          }

          this.tipDlg.removeAllChildren();
          this.tipDlg.active = false;
          this._SpecialTipMode = false;
        };

        _proto.openTip = function openTip(data, pos) {
          var self = this;
          var name = "ProducerTip";
          if (data.tip && data.tip != "") name = data.tip;
          if (name == "LandIUpgradeTip" || name == "PastureUpgradeTip") this._SpecialTipMode = true;

          if (name == "LandIUpgradeTip" || name == "PastureUpgradeTip") {
            return;
          }

          resources.load("prefabs/ui/item/" + name, function (error, prefab) {
            if (error) {
              console.log(error);
              return;
            }

            if (self.tipDlg.active) {
              self.tipDlg.removeAllChildren();
            }

            var dlg = instantiate(prefab);
            dlg.parent = self.tipDlg;
            self.tipDlg.setWorldPosition(pos);
            self.tipDlg.active = true;
            dlg.getComponent(BaseTip).initUI(data);
          });
        };

        _proto.setSelectItem = function setSelectItem(select, uipos) {
          if (this._selectItem && this._selectItem != select) this._selectItem.setSelectState(false);
          select && select.setSelectState(true);
          this._selectItem = select;
          this._selectTime = UIHelp.getTimeMask();
          this._waitClick = true;

          this._selectPos.set(uipos);
        };

        _proto.onSceenEvent = function onSceenEvent(event) {
          var uipos = event.touch.getUILocation();

          if (this._state == GAMESTATE.GS_SOWING) {
            var tv = this._gameUI.getToolsView();

            if (!UIHelp.TestUIPoint(uipos, tv.BG)) {
              EventManager.getInstance().trigger(MessageManager.Custom.HideSeedTip, {});

              if (tv.type == "pasture") {
                var s = this.onBreedEvent(event, OperaleDef.CANBREED, tv.selectItem);

                if (!this._gameUI.testClickUI(uipos) && !s) {
                  EventManager.getInstance().trigger(MessageManager.Custom.ShowToolsView, {
                    show: false
                  });
                  this.closeTipOrBtn();
                }
              } else if (tv.type == "fameland") {
                var _s = this.onSowingEvent(event, OperaleDef.SOWING, tv.selectItem);

                if (!this._gameUI.testClickUI(uipos) && !_s) {
                  EventManager.getInstance().trigger(MessageManager.Custom.ShowToolsView, {
                    show: false
                  });
                  this.closeTipOrBtn();
                }
              }
            }
          } else if (this._state == GAMESTATE.GS_PLANTBRUSH) {
            var ev = this._gameUI.getexceptionView();

            if (!UIHelp.TestUIPoint(uipos, ev.RectNode)) {
              EventManager.getInstance().trigger(MessageManager.Custom.HideSeedTip, {});

              var _s2 = this.onSowingEvent(event, ev.getMode(), ev.selectItem);

              if (!this._gameUI.testClickUI(uipos) && !_s2) {
                EventManager.getInstance().trigger(MessageManager.Custom.ShowExceptionView, {
                  show: false
                });
                this.closeTipOrBtn();
              }
            }
          } else if (this._state == GAMESTATE.GS_ONTIME) {
            this.onPickEvent(event);
          }
        };

        _proto.TestOperaBtn = function TestOperaBtn(uipos) {
          return this.operaleBtn.node.active && UIHelp.TestUIPoint(uipos, this.operaleBtn.node);
        };

        _proto.getOperaBtnData = function getOperaBtnData() {
          if (!this.operaleBtn.node.active) return null;
          return this.operaleBtn.operaledata;
        };

        _proto.onBreedEvent = function onBreedEvent(event, mode, selectItem) {
          if (mode == OperaleDef.NONE) return false;
          var uipos = event.touch.getUILocation();
          var uiMask = this.testTip(uipos);
          var BtnMask = this.TestOperaBtn(uipos);

          if (!BtnMask) {
            EventManager.getInstance().trigger(MessageManager.Custom.OpenOperaleBtn, {
              show: false
            });
          }

          if (!uiMask) {
            var arraySelect = this.pickPasture(uipos);

            var seedid = this._gameUI.getToolsView().getGetSeedID();

            if (arraySelect.length > 0) {
              if (!seedid) return false;
              var item = arraySelect[0];
              var curData = {
                select: item,
                seedid: seedid
              };

              if (item.canOperale(mode, curData, true)) {
                if (mode == OperaleDef.CANBREED) {
                  // seedid = ConfigFile.getAnimalFromCubId(seedid).AnimalId;
                  // curData.seedid = seedid;
                  this.onOperateBtn(mode, curData);
                } else {
                  this.onOperateBtn(mode, curData);
                }
              } else {
                var _seedid = 0;

                var tv = this._gameUI.getToolsView();

                if (tv) {
                  _seedid = tv.getGetSeedID(); //seedid = ConfigFile.getAnimalFromCubId(seedid).AnimalId;
                }

                item.checkAction(mode, {
                  seedid: _seedid
                });
              }

              return true;
            } else if (BtnMask) {
              var _this$operaleBtn3;

              var operaledata = OperaleData[this.operaleBtn.operalemode];

              if (operaledata.drag) {
                var _this$hand2;

                var _mode = this.operaleBtn.operalemode;
                var info = this.operaleBtn.operaledata;
                (_this$hand2 = this.hand) == null ? void 0 : _this$hand2.startTow(uipos, this.operaleBtn.operalemode, this.operaleBtn.operaledata, this.toolMove.bind(this));
                TaskManager.getInstance().onClickOperaBtn(info.select, _mode);
                this.gameStateChange(GAMESTATE.GS_TOW);
              } else {
                var _curData2 = this.operaleBtn.operaledata;
                var select = _curData2.select;
                var _mode2 = this.operaleBtn.operalemode;

                if (select && select.canOperale(_mode2, _curData2, true)) {
                  this.onOperateBtn(_mode2, _curData2);
                }
              }

              (_this$operaleBtn3 = this.operaleBtn) == null ? void 0 : _this$operaleBtn3.pushBtn();
              return false;
            }
          } else if (uiMask) {
            return true;
          }

          return false;
        };

        _proto.onSowingEvent = function onSowingEvent(event, mode, selectItem) {
          if (mode == OperaleDef.NONE) return false;
          var uipos = event.touch.getUILocation();
          var uiMask = this.testTip(uipos);
          var BtnMask = this.TestOperaBtn(uipos);

          if (!BtnMask) {
            EventManager.getInstance().trigger(MessageManager.Custom.OpenOperaleBtn, {
              show: false
            });
          }

          if (!uiMask) {
            var arraySelect = this.pickaFarmland(uipos);

            var seedid = this._gameUI.getToolsView().getGetSeedID();

            if (arraySelect.length > 0) {
              if (!seedid) return false;
              var config = selectItem ? selectItem.Config : null;
              var plantModeId = config ? config.ItemId : 0;
              var item = arraySelect[0];
              var curData = {
                select: item,
                PlantModeId: plantModeId,
                seedid: seedid
              };

              if (selectItem && item.canOperale(mode, curData, true)) {
                this.onOperateBtn(mode, curData);
              } else {
                var _seedid2 = 0;

                var tv = this._gameUI.getToolsView();

                if (tv) _seedid2 = tv.getGetSeedID();
                item.checkAction(mode, {
                  seedid: _seedid2
                });
                console.log("cur state===>", item.state);
              }

              return true;
            } else if (BtnMask) {
              var _this$operaleBtn4;

              var operaledata = OperaleData[this.operaleBtn.operalemode];

              if (operaledata.drag) {
                var _this$hand3;

                var _mode3 = this.operaleBtn.operalemode;
                var info = this.operaleBtn.operaledata;
                (_this$hand3 = this.hand) == null ? void 0 : _this$hand3.startTow(uipos, this.operaleBtn.operalemode, this.operaleBtn.operaledata, this.toolMove.bind(this));
                TaskManager.getInstance().onClickOperaBtn(info.select, _mode3);
                this.gameStateChange(GAMESTATE.GS_TOW);
              } else {
                var _curData3 = this.operaleBtn.operaledata;
                var select = _curData3.select;
                var _mode4 = this.operaleBtn.operalemode;

                if (select && select.canOperale(_mode4, _curData3, true)) {
                  this.onOperateBtn(_mode4, _curData3);
                }
              }

              (_this$operaleBtn4 = this.operaleBtn) == null ? void 0 : _this$operaleBtn4.pushBtn();
              return false;
            }
          } else if (uiMask) {
            return true;
          }

          return false;
        };

        _proto.pickProduct = function pickProduct(uipos) {
          var arraySelect = this.pickaFarmland(uipos);
          if (arraySelect.length > 0) return arraySelect[0];
          arraySelect = this.pickPasture(uipos);
          if (arraySelect.length > 0) return arraySelect[0];
          arraySelect = this.pickBuild(uipos);
          if (arraySelect.length > 0) return arraySelect[0];
          return null;
        };

        _proto.onPickEvent = function onPickEvent(event) {
          var uipos = event.touch.getUILocation();
          var selectProduct = this.pickProduct(uipos);

          if (!selectProduct) {
            this.closeTip();
          }

          var tipData = this.getTipData();

          if (tipData) {
            if (tipData.select && tipData.select != selectProduct) this.closeTip();
          }

          var BtnMask = this.TestOperaBtn(uipos);

          if (!BtnMask) {
            EventManager.getInstance().trigger(MessageManager.Custom.OpenOperaleBtn, {
              show: false
            });
          } else {
            var _this$operaleBtn5;

            var operaledata = OperaleData[this.operaleBtn.operalemode]; //拖动工具图标

            if (operaledata.drag) {
              var _this$hand4;

              var mode = this.operaleBtn.operalemode;
              var info = this.operaleBtn.operaledata;
              (_this$hand4 = this.hand) == null ? void 0 : _this$hand4.startTow(uipos, this.operaleBtn.operalemode, this.operaleBtn.operaledata, this.toolMove.bind(this));
              TaskManager.getInstance().onClickOperaBtn(info.select, mode);
              this.gameStateChange(GAMESTATE.GS_TOW);
            } else {
              var curData = this.operaleBtn.operaledata;
              var select = curData.select;
              var _mode5 = this.operaleBtn.operalemode;

              if (select && select.canOperale(_mode5, curData, true)) {
                this.onOperateBtn(_mode5, curData);
              }
            }

            (_this$operaleBtn5 = this.operaleBtn) == null ? void 0 : _this$operaleBtn5.pushBtn();
            return;
          }

          var uiMask = this.testTip(uipos);
          if (uiMask) return;

          if (selectProduct) {
            this.setSelectItem(selectProduct, uipos); //this.scheduleOnce(this.onDelayClick, 0.3);
          } else {
            temp_v3_1.set(uipos.x, uipos.y, 0); // this.playEffectPos(temp_v3_1,"landBuild",null);
          }
        };

        _proto.onDelayClick = function onDelayClick() {
          this._waitClick = false;

          if (this._selectItem) {
            this._selectItem.onClick(this._selectPos);

            if (this._selectItem.getType() == "fameland") {
              var farmland = this._selectItem;

              if (this._selectItem.getState() == OperaleDef.UNABLELOCK) {
                // let unlock = this.getUnlockFarm();
                // unlock && this.mapAlignmentToNodeCenter(unlock.node.parent);
                this.mapAlignmentToNode(this._selectItem.node.parent);
              } else if (this._SpecialTipMode || farmland._UnusualState > 0) {
                this._CopyScaleInfo = this._Scale;
                this.mapAlignmentToNodeCenter(this._selectItem.node.parent, true, 0.7);
              } else {
                this.mapAlignmentToNode(this._selectItem.node.parent);
              }
            } else if (this._selectItem.getType() == "pasture") {
              if (this._selectItem.getState() == OperaleDef.UNABLELOCK) {
                // let unlock = this.getUnlockPasture();
                // unlock && this.mapAlignmentToNodeCenter(unlock.node.parent);
                this.mapAlignmentToNode(this._selectItem.node.parent);
              } else if (this._SpecialTipMode) {
                this._CopyScaleInfo = this._Scale;
                this.mapAlignmentToNodeCenter(this._selectItem.node.getChildByName("select"), true, 0.5);
              } else {
                this.mapAlignmentToNode(this._selectItem.node.parent);
              }
            } else {
              this.mapAlignmentToNode(this._selectItem.node);
            }
          }
        };

        _proto.onPickMoveEvent = function onPickMoveEvent(event) {
          var _this$hand6;

          var uioffset = event.touch.getDelta(new Vec2());
          var uipos = event.touch.getUILocation();

          if (this._state == GAMESTATE.GS_ONTIME) {
            if (this._selectPos) {
              var uis = TaskManager.getInstance().moveMapLock;

              if (Vec2.distance(uipos, this._selectPos) > 10 && !uis) {
                var _this$hand5;

                this.unschedule(this.onDelayClick);
                this.gameStateChange(GAMESTATE.GS_MOVEMAP);
                (_this$hand5 = this.hand) == null ? void 0 : _this$hand5.startTow(this._selectPos, OperaleDef.MOVEMAP, null, this.mapMove.bind(this));
              }
            }
          }

          (_this$hand6 = this.hand) == null ? void 0 : _this$hand6.onMove(uioffset, uipos);
        };

        _proto.stopTow = function stopTow() {
          if (this.hand) {
            if (this._state == GAMESTATE.GS_TOW) {
              this.hand.stopTow(null);
              this.gameStateChange(this._lastState);
            }
          }
        };

        _proto.onPickStopEvent = function onPickStopEvent(event) {
          var _this$hand7;

          var uipos = event.touch.getUILocation();
          (_this$hand7 = this.hand) == null ? void 0 : _this$hand7.stopTow(uipos);

          if (this._state == GAMESTATE.GS_ONTIME) {
            var selectProduct = this.pickProduct(uipos);

            if (selectProduct == this._selectItem) {
              this.onDelayClick();
            } else {
              temp_v3_1.set(uipos.x, uipos.y, 0);
              this.playEffectPos(temp_v3_1, "mouseClick", null);
            }
          }

          if (this._state == GAMESTATE.GS_TOW) {
            this.gameStateChange(this._lastState);
          } else if (this._state == GAMESTATE.GS_MOVEMAP) {
            this.gameStateChange(this._lastState);
            temp_v3_1.set(uipos.x, uipos.y, 0);
            this.playEffectPos(temp_v3_1, "mouseClick", null);
          } else {
            temp_v3_1.set(uipos.x, uipos.y, 0);
            this.playEffectPos(temp_v3_1, "mouseClick", null);
          }

          if (this.hand.node.active) {
            EventManager.getInstance().trigger(MessageManager.Custom.ShowToolsView, {
              show: false
            });
            EventManager.getInstance().trigger(MessageManager.Custom.ShowExceptionView, {
              show: false
            });
          }
        };

        _proto.playEffectPos = function playEffectPos(pos, effectName, cb) {
          var self = this;
          resources.load("prefabs/game/" + effectName, function (error, res) {
            if (res) {
              var e = instantiate(res);
              e.parent = self.layer3; //let pos1 =  self.node.getComponent(UITransform).convertToNodeSpaceAR(pos);

              e.setWorldPosition(pos);
              var script = e.getComponent(removeSelfCtl);

              if (script) {
                script.initUI({}, cb);
              } else {
                cb && cb();
              }
            }

            if (error) {
              console.log("加载效果 ==>", error);
              cb && cb();
            }
          });
        };

        _proto.playEffectInNode = function playEffectInNode(node, effectName, isOnce, cb) {
          if (!node) return;

          if (isOnce) {
            var nodEffect = node && node.children.find(function (v) {
              return v.name === effectName;
            });

            if (nodEffect) {
              return;
            }
          }

          resources.load("prefabs/game/" + effectName, function (error, res) {
            if (res) {
              var e = instantiate(res);
              e.parent = node;
            }

            if (error) {
              console.log("加载效果 ==>", error);
            }

            cb && cb();
          });
        };

        _proto.playEffect = function playEffect(target, effectName, cb) {
          var self = this;
          resources.load("prefabs/game/" + effectName, function (error, res) {
            if (res) {
              var e = instantiate(res);
              e.parent = self.layer3;
              var pos = target.getWorldPosition(new Vec3());
              e.setWorldPosition(pos);
              var script = e.getComponent(removeSelfCtl);

              if (script) {
                script.initUI({}, cb);
              } else {
                cb && cb();
              }
            }

            if (error) {
              console.log("加载效果 ==>", error);
              cb && cb();
            }
          });
        };

        _proto.removeEffect = function removeEffect(effectName) {
          var nodEffect = this.layer3.children.find(function (v) {
            return v.name === effectName;
          });
          nodEffect && nodEffect.destroy();
        };

        _proto.removeEffectInNode = function removeEffectInNode(node, effectName) {
          var nodEffect = node.children.find(function (v) {
            return v.name === effectName;
          });
          nodEffect && nodEffect.destroy();
        };

        _proto.removeEffectInNodeAll = function removeEffectInNodeAll(node) {
          node && node.removeAllChildren();
        };

        _proto.openUIVerification = function openUIVerification() {
          var role = UIManager.getInstance().getUI(SelectRoleView);
          var cutscenesView = UIManager.getInstance().getUI(CutscenesView);

          if (!role && !cutscenesView) {
            UIManager.getInstance().openUI(UIVerification, 1000, function (ui) {
              ui.onFarmAuthingResponse();
            }, null, null);
            this.unschedule(this.openUIVerification);
            return;
          }
        }
        /**弹窗公告提示**/
        ;

        _proto.showNotice = function showNotice() {
          var uigame = UIManager.getInstance().getUI(UIGame);

          if (!uigame) {
            return;
          }

          if (GameAllData.FarmMailListResponse && GameAllData.FarmMailListResponse.Mails && GameAllData.FarmMailListResponse.Mails.length > 0) {
            var mails = GameAllData.FarmMailListResponse.Mails;
            var notice = [];

            for (var i = 0; i < mails.length; i++) {
              var cell = mails[i];

              if (cell.MailType == EnumDefine.NoticeEailType.Notice) {
                notice.push(cell);
              }
            }

            if (notice.length <= 0) {
              return;
            }

            notice.sort(function (a, b) {
              return b.SendTime - a.SendTime;
            });
            var itemData = notice[0];

            if (itemData.MailType == EnumDefine.NoticeEailType.Notice && itemData.MailState != 1) {
              UIManager.getInstance().openUI(UINotice, 11);
            }
          }
        }
        /**重置请求消息限制**/
        ;

        _proto.resetRequest = function resetRequest() {
          var _this28 = this;

          this.FarmLandPlantMap.forEach(function (info, key) {
            _this28.FarmLandPlantMap.set(key, false);
          });
          this.FarmHarvestPlantMap.forEach(function (info, key) {
            _this28.FarmHarvestPlantMap.set(key, false);
          });
          this.FarmLandEradicateMap.forEach(function (info, key) {
            _this28.FarmLandEradicateMap.set(key, false);
          });
          this.FarmLandBreedMap.forEach(function (info, key) {
            _this28.FarmLandBreedMap.set(key, false);
          });
          this.FarmLandAnimalActionMap.forEach(function (info, key) {
            _this28.FarmLandAnimalActionMap.set(key, false);
          }); // this.FarmLandAnimalBuryMap.forEach((info,key) => {
          //     this.FarmLandAnimalBuryMap.set(key,false);
          // }) 
        };

        _createClass(MainGame, [{
          key: "targetScale",
          get: function get() {
            return this.targetTScale;
          },
          set: function set(val) {
            var _this29 = this;

            if (this._scaleLock) return;
            if (this.targetTScaleLock) return; // this.targetTScale = math.clamp(val, 0.3, 1.0);

            var value = math.clamp(val, 0.28, 1.0);

            if (value < 0.3) {
              // this.node.setScale(this._Scale, this._Scale, this._Scale);
              // let pos = this.node.getWorldPosition(temp_CameraOffset);
              this._scaleLock = true;
              tween(this.node).to(0.2, {
                scale: new Vec3(0.28, 0.28, 0.28)
              }).to(0.2, {
                scale: new Vec3(0.3, 0.3, 0.3)
              }) // .to(0.2, { position: new Vec3(0.3, 0.3, 0.3) })
              .call(function () {
                _this29.targetTScale = math.clamp(val, 0.3, 1.0);
                _this29._scaleLock = false; // this.scheduleOnce(() => {
                //     this._scaleLock = false;
                // }, 0.5);
                // this.node.setWorldPosition(pos)
              }).start();
            } else {
              this.targetTScale = math.clamp(val, 0.3, 1.0);
            }
          }
        }, {
          key: "scale",
          get: function get() {
            return this._Scale;
          },
          set: function set(val) {
            if (this._scaleLock) return;
            this._Scale = math.clamp(val, 0.3, 1.0); // this._Scale = math.clamp(val, 0.1, 1.5);

            this.syncAnchorPoint();
            EventManager.getInstance().trigger(MessageManager.Custom.ScaleChange, {});

            if (this._Scale < 0.7) {
              this.hightSkyAnimation.active = true;
            } else {
              this.hightSkyAnimation.active = false;
            }
          }
        }]);

        return MainGame;
      }(BaseGame), _class3.className = "MainGame", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "famelandPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "pasturePrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "ScrollNum", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "IconAnimation", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "ExpAnimation", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "layer1", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "layer2", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "layer3", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "layer4", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "layerDynamic", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "UIlayer", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "farmland", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "pasture", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "build", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "waterNode", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "HouseNode", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "BagNode", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "operaleBtn", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "tipDlg", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "anchorPoint", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "scensTree", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "hightSkyAnimation", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "getItemEff", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MarketGoodsItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './MessageManager.ts', './WebSocketMgr.ts', './NodeHelp.ts', './MarketLobbyUI.ts', './MarketTradeUI.ts', './BagUIItemTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, Node, Sprite, Label, Input, Color, UITransform, v3, Component, ConfigFile, MessageManager, WebSocketMgr, NodeHelp, MarketLobbyUI, MarketTradeUI, BagUIItemTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Sprite = module.Sprite;
      Label = module.Label;
      Input = module.Input;
      Color = module.Color;
      UITransform = module.UITransform;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      MarketLobbyUI = module.MarketLobbyUI;
    }, function (module) {
      MarketTradeUI = module.MarketTradeUI;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "d4e0e/TDNBArLNpKo1A6z0r", "MarketGoodsItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Colors = ["ffffff", "ff2b32", "41f71b"];
      var MarketGoodsItem = exports('MarketGoodsItem', (_dec = ccclass('MarketGoodsItem'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Sprite), _dec5 = property(Sprite), _dec6 = property(Label), _dec7 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MarketGoodsItem, _Component);

        function MarketGoodsItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.srtMarketView = null;
          _this.id = 0;
          _this.config = null;
          _this.propName = "";
          _this.propText = "";
          _this.colorNum = 0;
          _this.priceModeId = "-2";

          _initializerDefineProperty(_this, "sprBg", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sprClickBg", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sprIcon", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sprChickIcon", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labNum", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "clickLabNum", _descriptor6, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = MarketGoodsItem.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this.node.on(Input.EventType.TOUCH_END, this.onEventTouchEnd, this);
          this.node.on(Input.EventType.TOUCH_START, this.onEventTouchStart, this);
          this.node.on(Input.EventType.TOUCH_MOVE, this.onEventTouchEnd, this);
          this.node.on(Input.EventType.TOUCH_CANCEL, this.onEventTouchEnd, this);
          this.labNum.color = new Color().fromHEX(Colors[this.colorNum]);
          this.clickLabNum.color = this.labNum.color;
          this.config = ConfigFile.getItemData(this.id);

          if (this.config) {
            this.propName = ConfigFile.findLanguage(this.config.Name);
            this.propText = ConfigFile.findLanguage(Number(this.config.Tips));
          }

          NodeHelp.loadIcon("propIcon/itemicon", this.id.toString(), function (res) {
            _this2.sprIcon.spriteFrame = res;
            _this2.sprChickIcon.spriteFrame = res;
            var scale = NodeHelp.setScopeLimitation(_this2.sprIcon.node.getComponent(UITransform), 90, 90);

            _this2.sprIcon.node.setScale(v3(scale, scale, 1));

            _this2.sprChickIcon.node.setScale(v3(scale, scale, 1));
          });
        };

        _proto.onEventTouchStart = function onEventTouchStart() {
          this.scheduleOnce(this.openTip, 0.15);
        };

        _proto.onEventTouchEnd = function onEventTouchEnd() {
          this.unschedule(this.openTip);
          BagUIItemTip.getInstance().closeTip();
        };

        _proto.openTip = function openTip() {
          if (!this.config) return;
          BagUIItemTip.getInstance().openTip(this.srtMarketView.node, this.propName, this.propText, this, null);
        };

        _proto.onClicked = function onClicked() {
          for (var _iterator = _createForOfIteratorHelperLoose(this.node.parent.children), _step; !(_step = _iterator()).done;) {
            var itr = _step.value;
            itr.getComponent(MarketGoodsItem).sprClickBg.active = false;
          }

          this.sprClickBg.active = true;
          this.srtMarketView.selectedGoodsItem = this;

          if (this.srtMarketView.nodLobby.active) {
            var srtMarketLobbyUI = this.srtMarketView.nodLobby.getComponent(MarketLobbyUI);
            srtMarketLobbyUI.init();
          } else {
            var status = 0 == this.srtMarketView.nodTrade.getComponent(MarketTradeUI).sheet ? "buy" : "sell";
            WebSocketMgr.send(MessageManager.Net.FarmMarketGoodsListRequest, {
              Id: 0,
              Status: status,
              IsUser: false,
              ItemModeId: this.id
            });
            WebSocketMgr.send(MessageManager.Net.FarmMarketGoodsListRequest, {
              Id: 0,
              Status: status,
              IsUser: true,
              ItemModeId: this.id
            });
          }

          if (this.srtMarketView.nodTrade.active) {
            WebSocketMgr.send(MessageManager.Net.FarmMarketGoodsListSumRequest, {
              ItemModeId: this.id
            });
          }
        };

        return MarketGoodsItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sprBg", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sprClickBg", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "sprIcon", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "sprChickIcon", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "labNum", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "clickLabNum", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MarketLobbyUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstLanguage.ts', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './UIManager.ts', './WebSocketMgr.ts', './NodeHelp.ts', './Pool.ts', './UIHelp.ts', './KLineItem.ts', './MarketTradeTheirView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, Label, Sprite, Button, Toggle, ScrollView, Prefab, Node, instantiate, UITransform, v3, Color, LabelOutline, Widget, Component, ConstLanguage, ConfigFile, GameAllData, EventManager, MessageManager, UIManager, WebSocketMgr, NodeHelp, PoolOnce, UIHelp, KLineItem, MarketTradeTheirView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Sprite = module.Sprite;
      Button = module.Button;
      Toggle = module.Toggle;
      ScrollView = module.ScrollView;
      Prefab = module.Prefab;
      Node = module.Node;
      instantiate = module.instantiate;
      UITransform = module.UITransform;
      v3 = module.v3;
      Color = module.Color;
      LabelOutline = module.LabelOutline;
      Widget = module.Widget;
      Component = module.Component;
    }, function (module) {
      ConstLanguage = module.ConstLanguage;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      KLineItem = module.KLineItem;
    }, function (module) {
      MarketTradeTheirView = module.MarketTradeTheirView;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15;

      cclegacy._RF.push({}, "c8bb3A8XcFAa6bJWuEseUjI", "MarketLobbyUI", undefined);

      var Colors = ["ffffff", "ff2b32", "41f71b"];
      var LineColors = ["984b00", "fcfcfc", "0c5903"];
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MarketLobbyUI = exports('MarketLobbyUI', (_dec = ccclass('MarketLobbyUI'), _dec2 = property(Label), _dec3 = property(Sprite), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Sprite), _dec8 = property(Button), _dec9 = property(Toggle), _dec10 = property(Toggle), _dec11 = property(Toggle), _dec12 = property(ScrollView), _dec13 = property([Label]), _dec14 = property(Prefab), _dec15 = property(Node), _dec16 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MarketLobbyUI, _Component);

        function MarketLobbyUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.srtMarketView = null;
          _this.kLineData = null;
          _this.diffPrice = 0;
          _this.priceList = [];
          _this.maxPriceList = [];
          _this.minPriceList = [];
          _this.pfbKLineItemList = [];

          _initializerDefineProperty(_this, "labNotice", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sprIcon", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labItemNum", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labPrice", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labPriceNum", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sprUnitIcon", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnSell", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnDayK", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnMonthK", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnYearK", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrKLine", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labPriceNumList", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pfbKLineItem", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "linePanel", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lineInfo", _descriptor15, _assertThisInitialized(_this));

          _this.Pool = new PoolOnce(30, function () {
            return instantiate(_this.pfbKLineItem);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          return _this;
        }

        var _proto = MarketLobbyUI.prototype;

        _proto.onLoad = function onLoad() {
          EventManager.getInstance().add(MessageManager.Net.FarmMarketKListResponse, this, this.onFarmMarketKListResponse);
        };

        _proto.onEnable = function onEnable() {
          this.init();
        };

        _proto.onDisable = function onDisable() {
          UIHelp.closeLoadingTA();
        };

        _proto.onDestroy = function onDestroy() {
          EventManager.getInstance().remove(MessageManager.Net.FarmMarketKListResponse, this, this.onFarmMarketKListResponse);
          this.Pool.clear();
        };

        _proto.start = function start() {
          var star = ConfigFile.getGlobalInfoByGlobalId(190).Text.split(",");
          var end = ConfigFile.getGlobalInfoByGlobalId(191).Text.split(",");
          var starString = star[0];
          var endString = end[0];
          this.labNotice.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_LOBBY_NOTICE).format(starString, endString);
          this.labPrice.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_LOBBY_GOODSINFO);
          this.setButtonLabelText(this.btnSell, ConstLanguage.MARKET_VIEW_CURRENCY_TEXT5);
          this.setButtonLabelText(this.btnDayK, ConstLanguage.MARKET_VIEW_LOBBY_BUTTON2);
          this.setButtonLabelText(this.btnMonthK, ConstLanguage.MARKET_VIEW_LOBBY_BUTTON3);
          this.setButtonLabelText(this.btnYearK, ConstLanguage.MARKET_VIEW_LOBBY_BUTTON4);
          NodeHelp.getchildlable(this.lineInfo, "labMin", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_LOBBY_LINEINFO);
          });
          NodeHelp.getchildlable(this.lineInfo, "labMax", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_LOBBY_LINEINFO2);
          });
        };

        _proto.setButtonLabelText = function setButtonLabelText(Button, id) {
          NodeHelp.getchildlable(Button.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(id);
          });
        };

        _proto.init = function init() {
          var _this2 = this;

          var GoodsItem = this.srtMarketView && this.srtMarketView.selectedGoodsItem;

          if (!GoodsItem) {
            return;
          }

          var storeItem = GameAllData.getStoreItemByModeId(GoodsItem.id);
          NodeHelp.loadIcon("propIcon/itemicon", GoodsItem.id.toString(), function (res) {
            _this2.sprIcon.spriteFrame = res;
            var scale = NodeHelp.setScopeLimitation(_this2.sprIcon.node.getComponent(UITransform), 42, 42);

            _this2.sprIcon.node.setScale(v3(scale, scale, 1));
          });
          var price = GoodsItem.priceModeId;
          NodeHelp.loadIcon("propIcon/itemicon", price, function (res) {
            _this2.sprUnitIcon.spriteFrame = res;
            var scale = NodeHelp.setScopeLimitation(_this2.sprUnitIcon.node.getComponent(UITransform), 40, 40);

            _this2.sprUnitIcon.node.setScale(v3(scale, scale, 1));
          });
          if (storeItem && storeItem.ItemCount) this.labItemNum.string = storeItem.ItemCount + "";else this.labItemNum.string = "0";
          this.labPriceNum.string = GoodsItem.labNum.string;
          this.labPriceNum.color = new Color().fromHEX(Colors[GoodsItem.colorNum]);
          this.labPriceNum.node.getComponent(LabelOutline).color = new Color().fromHEX(LineColors[GoodsItem.colorNum]);
          WebSocketMgr.send(MessageManager.Net.FarmMarketKListRequest, {
            ItemModeId: GoodsItem.id
          });
        };

        _proto.onClickedSell = function onClickedSell() {
          var _this3 = this;

          UIManager.getInstance().openUI(MarketTradeTheirView, 12, function (ui, args) {
            var goodsId = _this3.srtMarketView.selectedGoodsItem.id;
            var storeItem = GameAllData.getStoreItemByModeId(goodsId);
            ui.isLobby = true;
            ui.type = 0;
            ui.typeSell = 1;
            ui.goodsId = goodsId;
            ui.mineNum = Number(storeItem && storeItem.ItemCount || 0);
            ui.sprGoodsIcon.spriteFrame = _this3.sprIcon.spriteFrame;
            ui.labPrice.string = _this3.labPriceNum.string;
            ui.labPrice.color = _this3.labPriceNum.color;
            ui.openfram = 1;
            ui.labPrice.node.getComponent(LabelOutline).color = _this3.labPriceNum.node.getComponent(LabelOutline).color;
          });
        };

        _proto.onClickedDayK = function onClickedDayK() {
          this.btnDayK.isChecked = true;
          this.scrKLine.content.destroyAllChildren();
          this.producedPriceNumD();
          this.producedKLineD(); // this.producedKLineDNew();

          this.lineInfo.active = false;
        };

        _proto.onClickedMonthK = function onClickedMonthK() {
          this.btnMonthK.isChecked = true;
          this.scrKLine.content.destroyAllChildren();
          this.producedPriceNumMY(this.kLineData.MonthPrice);
          this.producedKLineMY(this.kLineData.MonthPrice);
          this.lineInfo.active = true;
        };

        _proto.onClickedYearK = function onClickedYearK() {
          this.btnYearK.isChecked = true;
          this.scrKLine.content.destroyAllChildren();
          this.producedPriceNumMY(this.kLineData.YearPrice);
          this.producedKLineMY(this.kLineData.YearPrice);
          this.lineInfo.active = true;
        };

        _proto.onFarmMarketKListResponse = function onFarmMarketKListResponse(data) {
          UIHelp.closeLoadingTA();
          this.kLineData = data;
          this.onClickedDayK();
        };

        _proto.producedPriceNum = function producedPriceNum(maxPrice, minPrice) {
          var widthMax = 0;
          this.diffPrice = maxPrice - minPrice;
          var ladderPrice = 0;

          if (0 == this.diffPrice) {
            ladderPrice = 1;
          } else {
            ladderPrice = this.diffPrice / 6;
          }

          this.labPriceNumList.forEach(function (v, i) {
            var priceNum = minPrice + ladderPrice * i;
            v.string = (Math.floor(priceNum * 100) / 100).toString();
            v.updateRenderData(true);
            var width = v.node.getComponent(UITransform).contentSize.width;
            widthMax = width > widthMax ? width : widthMax;
          });
          var widget = this.linePanel.getComponent(Widget);
          widget.left = widthMax;
          this.linePanel.getComponentsInChildren(Widget).forEach(function (v) {
            v.updateAlignment();
          });
          this.scrKLine.scrollToRight();
        };

        _proto.producedPriceNumD = function producedPriceNumD() {
          this.priceList = [];

          for (var _iterator = _createForOfIteratorHelperLoose(this.kLineData.DayPrice), _step; !(_step = _iterator()).done;) {
            var itr = _step.value;
            this.priceList.push(itr.MinPrice);
          }

          var maxPrice = this.priceList.max();
          var minPrice = this.priceList.min();
          this.producedPriceNum(maxPrice, minPrice);
        };

        _proto.producedPriceNumMY = function producedPriceNumMY(priceData) {
          this.maxPriceList = [];
          this.minPriceList = [];

          for (var _iterator2 = _createForOfIteratorHelperLoose(priceData), _step2; !(_step2 = _iterator2()).done;) {
            var itr = _step2.value;
            this.maxPriceList.push(itr.MaxPrice);
            this.minPriceList.push(itr.MinPrice);
          }

          var maxPrice = this.maxPriceList.max();
          var minPrice = this.minPriceList.min();
          this.producedPriceNum(maxPrice, minPrice);
        };

        _proto.producedKLineD = function producedKLineD() {
          var _this4 = this;

          this.priceList.forEach(function (v, i, a) {
            var prePrice = 0;
            var curPrice = 0;

            if (i > 0) {
              prePrice = a[i - 1];
              curPrice = v;
            } else {
              prePrice = v;
              curPrice = v;
            }

            var minPriceNum = Number(_this4.labPriceNumList[0].string);
            var prePricePosYRatio = _this4.diffPrice ? (prePrice - minPriceNum) / _this4.diffPrice : 0;
            var curPricePosYRatio = _this4.diffPrice ? (curPrice - minPriceNum) / _this4.diffPrice : 0; // const nodKLineItem = instantiate(this.pfbKLineItem);

            var nodKLineItem = _this4.Pool.get();

            nodKLineItem.parent = _this4.scrKLine.content;
            var srtKLineItem = nodKLineItem.getComponent(KLineItem);
            srtKLineItem.type = 0;
            srtKLineItem.prePricePosYRatio0 = prePricePosYRatio;
            srtKLineItem.curPricePosYRatio0 = curPricePosYRatio;
            srtKLineItem.labDate.string = _this4.kLineData.DayPrice[i].Date;
          }); // this.scrKLine.node.active = false;

          this.scheduleOnce(function () {
            _this4.showToNewestKLine();
          });
        };

        _proto.producedKLineMY = function producedKLineMY(priceData) {
          var _this5 = this;

          this.maxPriceList.forEach(function (v, i, a) {
            var prePrice0 = 0;
            var curPrice0 = 0;
            var prePrice1 = 0;
            var curPrice1 = 0;

            if (i > 0) {
              prePrice0 = a[i - 1];
              curPrice0 = v;
              prePrice1 = _this5.minPriceList[i - 1];
              curPrice1 = _this5.minPriceList[i];
            } else {
              prePrice0 = v;
              curPrice0 = v;
              prePrice1 = _this5.minPriceList[i];
              curPrice1 = _this5.minPriceList[i];
            }

            var minPriceNum = Number(_this5.labPriceNumList[0].string);
            var prePricePosYRatio0 = _this5.diffPrice ? (prePrice0 - minPriceNum) / _this5.diffPrice : 0;
            var curPricePosYRatio0 = _this5.diffPrice ? (curPrice0 - minPriceNum) / _this5.diffPrice : 0;
            var prePricePosYRatio1 = _this5.diffPrice ? (prePrice1 - minPriceNum) / _this5.diffPrice : 0;
            var curPricePosYRatio1 = _this5.diffPrice ? (curPrice1 - minPriceNum) / _this5.diffPrice : 0; // const nodKLineItem = instantiate(this.pfbKLineItem);

            var nodKLineItem = _this5.Pool.get();

            nodKLineItem.parent = _this5.scrKLine.content;
            var srtKLineItem = nodKLineItem.getComponent(KLineItem);
            srtKLineItem.type = 1;
            srtKLineItem.prePricePosYRatio0 = prePricePosYRatio0;
            srtKLineItem.curPricePosYRatio0 = curPricePosYRatio0;
            srtKLineItem.prePricePosYRatio1 = prePricePosYRatio1;
            srtKLineItem.curPricePosYRatio1 = curPricePosYRatio1;
            srtKLineItem.labDate.string = priceData[i].Date;
          }); // this.scrKLine.node.active = false;

          this.scheduleOnce(function () {
            _this5.showToNewestKLine();
          });
        };

        _proto.showToNewestKLine = function showToNewestKLine() {
          this.scrKLine.node.active = true;
          var klineSize = this.scrKLine.content.getComponent(UITransform).contentSize;
          var klineViewSize = this.scrKLine.content.parent.getComponent(UITransform).contentSize;

          if (klineSize.width > klineViewSize.width) {
            this.scrKLine.content.position = v3(klineViewSize.width - klineSize.width, 0, 0);
          }
        };

        return MarketLobbyUI;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "labNotice", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sprIcon", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labItemNum", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "labPrice", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "labPriceNum", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "sprUnitIcon", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "btnSell", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "btnDayK", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "btnMonthK", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "btnYearK", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "scrKLine", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "labPriceNumList", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "pfbKLineItem", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "linePanel", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "lineInfo", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MarketOrderItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumDefine.ts', './ConfigFile.ts', './GameAllData.ts', './MessageManager.ts', './UIManager.ts', './WebSocketMgr.ts', './ChoiceBox.ts', './MarketTradeTheirView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, Sprite, Label, Component, EnumDefine, ConfigFile, GameAllData, MessageManager, UIManager, WebSocketMgr, ChoiceBox, MarketTradeTheirView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      ChoiceBox = module.ChoiceBox;
    }, function (module) {
      MarketTradeTheirView = module.MarketTradeTheirView;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "04149f0WClOGYUOZUB9SL+6", "MarketOrderItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MarketOrderItem = exports('MarketOrderItem', (_dec = ccclass('MarketOrderItem'), _dec2 = property(Sprite), _dec3 = property(Label), _dec4 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MarketOrderItem, _Component);

        function MarketOrderItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.id = 0;
          _this.type = 0;
          _this.Price = 0;
          _this.SumNum = 0;
          _this.isMine = false;
          _this.itemModeId = 0;
          _this.srtMarketView = null;
          _this.clickedCount = 0;

          _initializerDefineProperty(_this, "sprSelected", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labPrice", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labNum", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = MarketOrderItem.prototype;

        _proto.start = function start() {
          this.sprSelected.node.active = false;
        };

        _proto.onClicked = function onClicked() {
          var _this2 = this;

          if (!this.sprSelected.node.active) {
            for (var _iterator = _createForOfIteratorHelperLoose(this.node.parent.children), _step; !(_step = _iterator()).done;) {
              var itr = _step.value;
              itr.getComponent(MarketOrderItem).resetClicked();
            }

            this.sprSelected.node.active = true;
            return;
          }

          this.resetClicked();

          if (this.isMine) {
            var needitem = ConfigFile.getItemData(this.itemModeId);
            var text = ConfigFile.findLanguage(needitem.Name);
            var msgId = 106073;

            if (this.type == 1) {
              msgId = 106095;
            }

            UIManager.getInstance().openUI(ChoiceBox, 13, function (ui, args) {
              // ui.text = "<color=#FFFFFF>此单价格</color><color=#0FA600>%s</color><color=#A7521F>，收购</color><color=#0FA600>%s个</color><color=#A7521F>，是否</color><color=#0FA600>撤销</color><color=#A7521F>此单？</color>".format(this.labPrice.string, this.labNum.string);
              ui.text = ConfigFile.findLanguage(msgId).format(_this2.labPrice.string, _this2.labNum.string, text);

              ui.confirmCb = function () {
                WebSocketMgr.send(MessageManager.Net.FarmMarketGoodsRevokeRequest, {
                  GoodsId: _this2.id
                });
              };
            });
            return;
          }

          UIManager.getInstance().openUI(MarketTradeTheirView, 12, function (ui, args) {
            var storeItem = GameAllData.getStoreItemByModeId(_this2.srtMarketView.selectedGoodsItem.id);
            ui.type = _this2.type;
            ui.orderId = _this2.id;
            ui.goodsId = _this2.srtMarketView.selectedGoodsItem.id;
            ui.theirNum = Number(_this2.labNum.string);
            ui.mineNum = Number(storeItem && storeItem.ItemCount || 0);
            ui.mineMoney = GameAllData.getTotalConch(EnumDefine.CurrencyType.Conch);
            ui.sprGoodsIcon.spriteFrame = _this2.srtMarketView.selectedGoodsItem.sprIcon.spriteFrame;
            ui.openfram = 0;
            ui.labPrice.string = _this2.labPrice.string;
          });
        };

        _proto.resetClicked = function resetClicked() {
          this.sprSelected.node.active = false;
        };

        return MarketOrderItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sprSelected", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "labPrice", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labNum", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MarketTradeMineView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstLanguage.ts', './ConstValue.ts', './EnumDefine.ts', './ConfigFile.ts', './GameAllData.ts', './MessageManager.ts', './TipManager.ts', './WebSocketMgr.ts', './NodeHelp.ts', './NumberUtil.ts', './BasePanel.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Button, Sprite, Node, Input, EditBox, Slider, ProgressBar, math, ConstLanguage, ConstValue, EnumDefine, ConfigFile, GameAllData, MessageManager, TipManager, WebSocketMgr, NodeHelp, NumberUtil, BasePanel;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Button = module.Button;
      Sprite = module.Sprite;
      Node = module.Node;
      Input = module.Input;
      EditBox = module.EditBox;
      Slider = module.Slider;
      ProgressBar = module.ProgressBar;
      math = module.math;
    }, function (module) {
      ConstLanguage = module.ConstLanguage;
    }, function (module) {
      ConstValue = module.ConstValue;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }, function (module) {
      BasePanel = module.BasePanel;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _class3;

      cclegacy._RF.push({}, "26f28QCbZJPo6kXNRuU49VW", "MarketTradeMineView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MarketTradeMineView = exports('MarketTradeMineView', (_dec = ccclass('MarketTradeMineView'), _dec2 = property(Label), _dec3 = property(Button), _dec4 = property(Sprite), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(Node), _dec10 = property(Node), _dec11 = property(Node), _dec12 = property(Node), _dec13 = property(Node), _dec14 = property(Node), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(MarketTradeMineView, _BasePanel);

        function MarketTradeMineView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;
          _this.type = 0;
          _this.goodsId = 0;
          _this.taxRateNUM = 1;
          _this.mineOrderTotalNum = 0;
          _this.addBtnBuySell = 1;
          _this.itemNum = 0;

          _initializerDefineProperty(_this, "labTitle", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnBuySell", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sprGoodsIcon", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labMineDesc", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labPrice", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodBuySellPrice", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodBuySellNum", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodBuySellMoney", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sliSellNum", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonAddPrice", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonSubPrice", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonAddNum", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonSubNum", _descriptor13, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = MarketTradeMineView.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this.buttonAddPrice.on(Input.EventType.TOUCH_START, this.onButtAddPriceStartTouch, this);
          this.buttonAddPrice.on(Input.EventType.TOUCH_END, this.onButtAddPriceEndTouch, this);
          this.buttonAddPrice.on(Input.EventType.TOUCH_CANCEL, this.onButtAddPriceCancelTouch, this);
          this.buttonSubPrice.on(Input.EventType.TOUCH_START, this.onButtSubPriceStartTouch, this);
          this.buttonSubPrice.on(Input.EventType.TOUCH_END, this.onButtSubPriceEndTouch, this);
          this.buttonSubPrice.on(Input.EventType.TOUCH_CANCEL, this.onButtSubPriceCancelTouch, this);
          this.buttonAddNum.on(Input.EventType.TOUCH_START, this.onButtAddNumStartTouch, this);
          this.buttonAddNum.on(Input.EventType.TOUCH_END, this.onButtAddNumEndTouch, this);
          this.buttonAddNum.on(Input.EventType.TOUCH_CANCEL, this.onButtAddNumCancelTouch, this);
          this.buttonSubNum.on(Input.EventType.TOUCH_START, this.onButtSubNumStartTouch, this);
          this.buttonSubNum.on(Input.EventType.TOUCH_END, this.onButtSubNumEndTouch, this);
          this.buttonSubNum.on(Input.EventType.TOUCH_CANCEL, this.onButtSubNumCancelTouch, this);
          this.taxRateNUM = 1;
          this.nodBuySellPrice.getChildByName("edtBuySellNum").getComponent(EditBox).placeholder = ConfigFile.findLanguage(106060);
          this.nodBuySellNum.getChildByName("edtBuySellNum").getComponent(EditBox).placeholder = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_EDITBOX_PLACEHOLDER1);

          if (0 == this.type) {
            this.labTitle.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_CURRENCY_TEXT1);
            this.nodBuySellPrice.getChildByName("labBuySell").getComponent(Label).string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT1);
            this.nodBuySellNum.getChildByName("labBuySell").getComponent(Label).string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT2);
            this.nodBuySellMoney.getChildByName("labBuySell").getComponent(Label).string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT3);
          } else {
            var taxRate = ConfigFile.getGlobalInfo(120);
            if (taxRate && taxRate.IntValue) this.taxRateNUM = (10000 - taxRate.IntValue) / 10000;
            this.labTitle.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_CURRENCY_TEXT2);
            this.nodBuySellPrice.getChildByName("labBuySell").getComponent(Label).string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT4);
            this.nodBuySellNum.getChildByName("labBuySell").getComponent(Label).string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT5);
            this.nodBuySellMoney.getChildByName("labBuySell").getComponent(Label).string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT6);
          }

          NodeHelp.getchildlable(this.btnBuySell.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_MINE_BUTTON1);
          });
          NodeHelp.getchildlable(this.nodBuySellPrice, "BtnSub", Label, function (comp) {
            comp.string = "-" + _this2.ongetAddNum();
          });
          NodeHelp.getchildlable(this.nodBuySellPrice, "BtnAdd", Label, function (comp) {
            comp.string = "+" + _this2.ongetAddNum();
          });
          this.setBuySellPrice();
          this.setSliSellNum();
        };

        _proto.onDisable = function onDisable() {
          this.buttonAddPrice.off(Input.EventType.TOUCH_START, this.onButtAddPriceStartTouch, this);
          this.buttonAddPrice.off(Input.EventType.TOUCH_END, this.onButtAddPriceEndTouch, this);
          this.buttonAddPrice.off(Input.EventType.TOUCH_CANCEL, this.onButtAddPriceCancelTouch, this);
          this.buttonSubPrice.off(Input.EventType.TOUCH_START, this.onButtSubPriceStartTouch, this);
          this.buttonSubPrice.off(Input.EventType.TOUCH_END, this.onButtSubPriceEndTouch, this);
          this.buttonSubPrice.off(Input.EventType.TOUCH_CANCEL, this.onButtSubPriceCancelTouch, this);
          this.buttonAddNum.off(Input.EventType.TOUCH_START, this.onButtAddNumStartTouch, this);
          this.buttonAddNum.off(Input.EventType.TOUCH_END, this.onButtAddNumEndTouch, this);
          this.buttonAddNum.off(Input.EventType.TOUCH_CANCEL, this.onButtAddNumCancelTouch, this);
          this.buttonSubNum.off(Input.EventType.TOUCH_START, this.onButtSubNumStartTouch, this);
          this.buttonSubNum.off(Input.EventType.TOUCH_END, this.onButtSubNumEndTouch, this);
          this.buttonSubNum.off(Input.EventType.TOUCH_CANCEL, this.onButtSubNumCancelTouch, this);
        };

        _proto.setBuySellPrice = function setBuySellPrice() {
          var labBuySellNum = NodeHelp.getchildlable(this.nodBuySellMoney, "labBuySellNum", Label);
          labBuySellNum.string = "";
          var edtBuySellNumP = this.nodBuySellPrice.getChildByName("edtBuySellNum").getComponent(EditBox);
          edtBuySellNumP.string = this.labPrice.string && this.labPrice.string || "0";
          var edtBuySellNumN = this.nodBuySellNum.getChildByName("edtBuySellNum").getComponent(EditBox);

          if (!NumberUtil.checkInt(edtBuySellNumN.string)) {
            return;
          }

          var buysell = Number(edtBuySellNumP.string) * Number(edtBuySellNumN.string) * this.taxRateNUM;
          labBuySellNum.string = NumberUtil.numberFormat(buysell, ConstValue.DECIMAL_PLACES_NUM).toString();
          this.setLabBuySellNumColor(Number(NumberUtil.stringGetNumber(labBuySellNum.string)), Number(edtBuySellNumN.string));
        };

        _proto.setSliSellNum = function setSliSellNum() {
          var labBuySellNum = NodeHelp.getchildlable(this.nodBuySellMoney, "labBuySellNum", Label);
          labBuySellNum.string = "";
          NodeHelp.getchildlable(this.sliSellNum, "slider", Slider, function (comp) {
            comp.progress = 1;
            comp.node.parent.getComponent(ProgressBar).progress = comp.progress;
          });
          var num = 1;

          if (0 == this.type) {
            var Conch = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.Conch);
            var buySellNum = Number(this.labPrice.string);
            num = Math.floor(Conch / buySellNum);
            num = num <= 0 ? 1 : num;
          } else {
            num = this.itemNum;
            num = num <= 0 ? 1 : num;
          }

          var edtBuySellNumN = this.nodBuySellNum.getChildByName("edtBuySellNum").getComponent(EditBox);
          var edtBuySellNumP = this.nodBuySellPrice.getChildByName("edtBuySellNum").getComponent(EditBox);
          edtBuySellNumN.string = "" + num;
          NodeHelp.getchildlable(this.sliSellNum, "slider", Slider, function (comp) {
            var sound = comp.node.getComponent("PlaySliderSound");
            sound.setnowNum(num);
          });
          this.setGrayscale();
          var buysell = Number(edtBuySellNumP.string) * Number(edtBuySellNumN.string) * this.taxRateNUM;
          labBuySellNum.string = NumberUtil.numberFormat(buysell, ConstValue.DECIMAL_PLACES_NUM).toString();
          this.setLabBuySellNumColor(Number(NumberUtil.stringGetNumber(labBuySellNum.string)), Number(edtBuySellNumN.string));
        };

        _proto.ongetAddNum = function ongetAddNum() {
          var num = 0;
          var numstr = "1";
          if (this.labPrice.string && this.labPrice.string != "") num = NumberUtil.getNumberNnm(Number(this.labPrice.string));
          var i = 1;

          while (i < num) {
            numstr += "0";
            i++;
          }

          this.addBtnBuySell = Number(numstr);
          return NumberUtil.unitConversion(Number(numstr), false);
        };

        _proto.onClickedBuySell = function onClickedBuySell() {
          var Conch = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.Conch);
          var labBuySellNum = NodeHelp.getchildlable(this.nodBuySellMoney, "labBuySellNum", Label);
          var edtBuySellNumP = this.nodBuySellPrice.getChildByName("edtBuySellNum").getComponent(EditBox);
          var edtBuySellNumN = this.nodBuySellNum.getChildByName("edtBuySellNum").getComponent(EditBox);

          if ("" == labBuySellNum.string || labBuySellNum.string == "0") {
            //弹框提示输入价格和数量
            TipManager.TipFromCode(ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT9);
            return;
          } else if (Conch < Number(NumberUtil.stringGetNumber(labBuySellNum.string)) && 0 == this.type) {
            //弹框提示贝壳币不足
            TipManager.TipFromCode(ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT10);
            return;
          } else if (Number(edtBuySellNumN.string) > this.itemNum && 0 != this.type) {
            //弹框提示数量不足
            TipManager.TipFromCode(ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT11);
            return;
          } //下单总数大于配置限制的最大数


          var globalInfo = ConfigFile.getGlobalInfoByGlobalId(110);

          if (this.mineOrderTotalNum >= globalInfo.IntValue) {
            TipManager.ChickBox(ConfigFile.findLanguage(106080).format(globalInfo.IntValue));
            return;
          }

          if (GameAllData.isMeetTheConditionsByGlobalId(292) != "") {
            TipManager.ChickBox(GameAllData.isMeetTheConditionsByGlobalId(292));
            return;
          }

          var data = {
            ItemModeId: this.goodsId,
            Number: Number(edtBuySellNumN.string),
            Price: Number(edtBuySellNumP.string),
            Status: 0 == this.type ? "buy" : "sell",
            GoogleCode: GameAllData.bandSafeCode
          };

          if (0 == this.type) {
            var config = ConfigFile.getItemData(this.goodsId);
            var propName = "";

            if (config) {
              propName = ConfigFile.findLanguage(config.Name);
            }

            TipManager.autoTip(4, ConstLanguage.MARKET_VIEW_TRADE_TIP2, ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_TRADE_TIP2).format(edtBuySellNumP.string, edtBuySellNumN.string, propName), null, function () {
              TipManager.SafeCodeInputBox(function () {
                WebSocketMgr.send(MessageManager.Net.FarmMarketGoodsCreateRequest, data);
              });
            });
          } else TipManager.autoTip(4, ConstLanguage.MARKET_VIEW_TRADE_TIP1, ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_TRADE_TIP1).format(edtBuySellNumP.string), null, function () {
            TipManager.SafeCodeInputBox(function () {
              WebSocketMgr.send(MessageManager.Net.FarmMarketGoodsCreateRequest, data);
            });
          });

          this.onClickedClose();
        };

        _proto.onEditEndedPrice = function onEditEndedPrice() {
          var labBuySellNum = NodeHelp.getchildlable(this.nodBuySellMoney, "labBuySellNum", Label);
          labBuySellNum.string = "";
          var edtBuySellNumP = this.nodBuySellPrice.getChildByName("edtBuySellNum").getComponent(EditBox);

          if (!NumberUtil.checkFloat(edtBuySellNumP.string) || Number(edtBuySellNumP.string) <= 0) {
            edtBuySellNumP.string = "";
            return;
          }

          edtBuySellNumP.string = Number(edtBuySellNumP.string).toString(); //去掉数字前面无意义的0

          var str = edtBuySellNumP.string;
          if (Number(str) < 0.0001) edtBuySellNumP.string = 0.0001 + "";
          var edtBuySellNumN = this.nodBuySellNum.getChildByName("edtBuySellNum").getComponent(EditBox);

          if (!NumberUtil.checkInt(edtBuySellNumN.string)) {
            return;
          }

          this.onClickNum();
          this.setLabBuySellNumColor(Number(NumberUtil.stringGetNumber(labBuySellNum.string)), Number(edtBuySellNumN.string));
        };

        _proto.onClickNum = function onClickNum() {
          var _this3 = this;

          var edtBuySellNumN = this.nodBuySellNum.getChildByName("edtBuySellNum").getComponent(EditBox);
          var edtBuySellNumP = this.nodBuySellPrice.getChildByName("edtBuySellNum").getComponent(EditBox);
          var maxNum = this.itemNum;

          if (0 == this.type) {
            var Conch = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.Conch);
            maxNum = Math.floor(Conch / Number(edtBuySellNumP.string));
          }

          maxNum = maxNum <= 0 ? 1 : maxNum;

          if (!NumberUtil.checkInt(edtBuySellNumN.string)) {
            edtBuySellNumN.string = maxNum + "";
          } else {
            var buySellNumN = Number(edtBuySellNumN.string);

            if (buySellNumN >= maxNum || buySellNumN <= 0) {
              edtBuySellNumN.string = maxNum + "";
            }
          }

          var editbuyNum = Number(edtBuySellNumN.string);
          NodeHelp.getchildlable(this.sliSellNum, "slider", Slider, function (comp) {
            var num = editbuyNum / maxNum >= 1 ? 1 : editbuyNum / maxNum <= 0 ? 0 : editbuyNum / maxNum;
            var num2 = comp.progress;

            if (num2 != num) {
              comp.progress = num;
              comp.node.parent.getComponent(ProgressBar).progress = comp.progress;
              var sound = comp.node.getComponent("PlaySliderSound");
              sound.playSoundNow();

              _this3.onEditEndedNum();
            }
          });
          this.setGrayscale();
          var labBuySellNum = NodeHelp.getchildlable(this.nodBuySellMoney, "labBuySellNum", Label);
          var buysell = Number(edtBuySellNumP.string) * Number(edtBuySellNumN.string) * this.taxRateNUM;
          labBuySellNum.string = NumberUtil.numberFormat(buysell, ConstValue.DECIMAL_PLACES_NUM).toString();
        };

        _proto.onEditEndedNum = function onEditEndedNum() {
          var labBuySellNum = NodeHelp.getchildlable(this.nodBuySellMoney, "labBuySellNum", Label);
          labBuySellNum.string = "";
          var edtBuySellNumN = this.nodBuySellNum.getChildByName("edtBuySellNum").getComponent(EditBox);

          if (!NumberUtil.checkInt(edtBuySellNumN.string) || Number(edtBuySellNumN.string) <= 0) {
            edtBuySellNumN.string = "";
            this.setGrayscale();
            return;
          }

          edtBuySellNumN.string = Number(edtBuySellNumN.string).toString(); //去掉数字前面无意义的0

          var edtBuySellNumP = this.nodBuySellPrice.getChildByName("edtBuySellNum").getComponent(EditBox);
          if (edtBuySellNumP.string == "") edtBuySellNumP.string = this.labPrice.string && this.labPrice.string || "";

          if (!NumberUtil.checkFloat(edtBuySellNumP.string)) {
            return;
          }

          this.setGrayscale();
          var buysell = Number(edtBuySellNumP.string) * Number(edtBuySellNumN.string) * this.taxRateNUM;
          labBuySellNum.string = NumberUtil.numberFormat(buysell, ConstValue.DECIMAL_PLACES_NUM).toString();
          this.setLabBuySellNumColor(Number(NumberUtil.stringGetNumber(labBuySellNum.string)), Number(edtBuySellNumN.string));
        };

        _proto.onslider = function onslider(slider) {
          var edtBuySellNumP = this.nodBuySellPrice.getChildByName("edtBuySellNum").getComponent(EditBox);
          slider.node.parent.getComponent(ProgressBar).progress = slider.progress;
          var maxNum = this.itemNum;

          if (0 == this.type) {
            var Conch = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.Conch);
            maxNum = Math.floor(Conch / Number(edtBuySellNumP.string));
          }

          maxNum = maxNum <= 0 ? 1 : maxNum;
          var buyNum = Math.floor(maxNum * slider.progress);
          var sound = slider.node.getComponent("PlaySliderSound");
          var play = sound.playSound(buyNum);

          if (play) {
            var edtBuySellNumN = this.nodBuySellNum.getChildByName("edtBuySellNum").getComponent(EditBox);
            edtBuySellNumN.string = String(buyNum);
            this.onEditEndedNum();
          }
        };

        _proto.onButtAddPriceStartTouch = function onButtAddPriceStartTouch() {
          var _this4 = this;

          this.unscheduleAllCallbacks();
          this.scheduleOnce(function () {
            _this4.schedule(function () {
              _this4.onClickBtnAdd();
            }, 0.1);
          }, 0.2);
        };

        _proto.onButtAddPriceEndTouch = function onButtAddPriceEndTouch() {
          this.unscheduleAllCallbacks();
        };

        _proto.onButtAddPriceCancelTouch = function onButtAddPriceCancelTouch() {
          this.unscheduleAllCallbacks();
        };

        _proto.onButtSubPriceStartTouch = function onButtSubPriceStartTouch() {
          var _this5 = this;

          this.unscheduleAllCallbacks();
          this.scheduleOnce(function () {
            _this5.schedule(function () {
              _this5.onClickBtnSub();
            }, 0.1);
          }, 0.2);
        };

        _proto.onButtSubPriceEndTouch = function onButtSubPriceEndTouch() {
          this.unscheduleAllCallbacks();
        };

        _proto.onButtSubPriceCancelTouch = function onButtSubPriceCancelTouch() {
          this.unscheduleAllCallbacks();
        };

        _proto.onButtAddNumStartTouch = function onButtAddNumStartTouch() {
          var _this6 = this;

          this.unscheduleAllCallbacks();
          this.scheduleOnce(function () {
            _this6.schedule(function () {
              _this6.onClickBtnAddBySellNum();
            }, 0.1);
          }, 0.2);
        };

        _proto.onButtAddNumEndTouch = function onButtAddNumEndTouch() {
          this.unscheduleAllCallbacks();
        };

        _proto.onButtAddNumCancelTouch = function onButtAddNumCancelTouch() {
          this.unscheduleAllCallbacks();
        };

        _proto.onButtSubNumStartTouch = function onButtSubNumStartTouch() {
          var _this7 = this;

          this.unscheduleAllCallbacks();
          this.scheduleOnce(function () {
            _this7.schedule(function () {
              _this7.onClickBtnSubBySellNum();
            }, 0.1);
          }, 0.2);
        };

        _proto.onButtSubNumEndTouch = function onButtSubNumEndTouch() {
          this.unscheduleAllCallbacks();
        };

        _proto.onButtSubNumCancelTouch = function onButtSubNumCancelTouch() {
          this.unscheduleAllCallbacks();
        };

        _proto.onClickBtnSub = function onClickBtnSub() {
          var edtBuySellNumP = this.nodBuySellPrice.getChildByName("edtBuySellNum").getComponent(EditBox);
          var SellNumstr = edtBuySellNumP.string;
          var SellNums = SellNumstr.split(".");
          var newSellNum = Number(SellNums[0]) - Math.floor(this.addBtnBuySell);
          var SellNum = newSellNum;

          if (SellNums[1]) {
            SellNum = Number(newSellNum + "." + SellNums[1]);
          }

          SellNum = SellNum <= 0 ? 0 : SellNum;
          var num = NumberUtil.numberFormat(SellNum, ConstValue.DECIMAL_PLACES_NUM, false, false);
          edtBuySellNumP.string = num;
          this.onEditEndedPrice();
        };

        _proto.onClickBtnAdd = function onClickBtnAdd() {
          var edtBuySellNumP = this.nodBuySellPrice.getChildByName("edtBuySellNum").getComponent(EditBox);
          var SellNumstr = edtBuySellNumP.string;
          var SellNums = SellNumstr.split(".");
          var newSellNum = Number(SellNums[0]) + Math.floor(this.addBtnBuySell);
          var SellNum = newSellNum;

          if (SellNums[1]) {
            SellNum = Number(newSellNum + "." + SellNums[1]);
          }

          SellNum = SellNum <= 0 ? 0 : SellNum;
          var num = NumberUtil.numberFormat(SellNum, ConstValue.DECIMAL_PLACES_NUM, false, false);
          edtBuySellNumP.string = num;
          this.onEditEndedPrice();
        };

        _proto.onClickBtnSubBySellNum = function onClickBtnSubBySellNum() {
          var _this8 = this;

          var edtBuySellNumP = this.nodBuySellPrice.getChildByName("edtBuySellNum").getComponent(EditBox);
          var edtBuySellNumN = this.nodBuySellNum.getChildByName("edtBuySellNum").getComponent(EditBox);

          if (!NumberUtil.checkInt(edtBuySellNumN.string) || Number(edtBuySellNumN.string) <= 0) {
            edtBuySellNumN.string = "";
          } else {
            edtBuySellNumN.string = Number(edtBuySellNumN.string).toString(); //去掉数字前面无意义的0
          }

          var editbuyNum = !edtBuySellNumN.string || edtBuySellNumN.string == "" ? 0 : Number(edtBuySellNumN.string);
          editbuyNum -= 1;
          editbuyNum = editbuyNum <= 0 ? 0 : editbuyNum;
          var maxNum = this.itemNum;

          if (0 == this.type) {
            var Conch = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.Conch);
            maxNum = Math.floor(Conch / Number(edtBuySellNumP.string));
          }

          maxNum = maxNum <= 0 ? 1 : maxNum;
          NodeHelp.getchildlable(this.sliSellNum, "slider", Slider, function (comp) {
            var num = editbuyNum / maxNum >= 1 ? 1 : editbuyNum / maxNum <= 0 ? 0 : editbuyNum / maxNum;
            var num2 = comp.progress;

            if (num2 != num) {
              comp.progress = num;
              comp.node.parent.getComponent(ProgressBar).progress = comp.progress;
              var sound = comp.node.getComponent("PlaySliderSound");
              sound.playSoundNow();
              edtBuySellNumN.string = "" + editbuyNum;

              _this8.onEditEndedNum();
            } else if (editbuyNum >= maxNum) {
              editbuyNum = maxNum;
              edtBuySellNumN.string = "" + editbuyNum;

              _this8.onEditEndedNum();
            }
          });
        };

        _proto.onClickBtnAddBySellNum = function onClickBtnAddBySellNum() {
          var _this9 = this;

          var edtBuySellNumP = this.nodBuySellPrice.getChildByName("edtBuySellNum").getComponent(EditBox);
          var edtBuySellNumN = this.nodBuySellNum.getChildByName("edtBuySellNum").getComponent(EditBox);

          if (!NumberUtil.checkInt(edtBuySellNumN.string) || Number(edtBuySellNumN.string) <= 0) {
            edtBuySellNumN.string = "";
          } else {
            edtBuySellNumN.string = Number(edtBuySellNumN.string).toString(); //去掉数字前面无意义的0
          }

          var editbuyNum = !edtBuySellNumN.string || edtBuySellNumN.string == "" ? 0 : Number(edtBuySellNumN.string);
          var maxNum = this.itemNum;

          if (0 == this.type) {
            var Conch = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.Conch);
            maxNum = Math.floor(Conch / Number(edtBuySellNumP.string));
          }

          maxNum = maxNum <= 0 ? 1 : maxNum;
          editbuyNum += 1;
          editbuyNum = editbuyNum >= maxNum ? maxNum : editbuyNum;
          NodeHelp.getchildlable(this.sliSellNum, "slider", Slider, function (comp) {
            var num = editbuyNum / maxNum >= 1 ? 1 : editbuyNum / maxNum <= 0 ? 0 : editbuyNum / maxNum;
            var num2 = comp.progress;

            if (num2 != num) {
              comp.progress = num;
              comp.node.parent.getComponent(ProgressBar).progress = comp.progress;
              var sound = comp.node.getComponent("PlaySliderSound");
              sound.playSoundNow();
              edtBuySellNumN.string = "" + editbuyNum;

              _this9.onEditEndedNum();
            } else if (editbuyNum >= maxNum) {
              editbuyNum = maxNum;
              edtBuySellNumN.string = "" + editbuyNum;

              _this9.onEditEndedNum();
            }
          });
        };

        _proto.setLabBuySellNumColor = function setLabBuySellNumColor(buyMnyNum, NeddNum) {
          var Conch = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.Conch);

          if (buyMnyNum > Conch && 0 == this.type) {
            NodeHelp.getchildlable(this.nodBuySellMoney, "labBuySellNum", Label, function (comp) {
              comp.color = new math.Color(255, 0, 0);
            });
          } else {
            NodeHelp.getchildlable(this.nodBuySellMoney, "labBuySellNum", Label, function (comp) {
              comp.color = new math.Color(255, 255, 255);
            });
          }

          if (NeddNum && NeddNum > this.itemNum && this.type != 0) {
            NodeHelp.getchildlable(this.nodBuySellNum, "edtBuySellNum", EditBox, function (comp) {
              comp.textLabel.color = new math.Color(255, 0, 0);
            });
          } else {
            NodeHelp.getchildlable(this.nodBuySellNum, "edtBuySellNum", EditBox, function (comp) {
              comp.textLabel.color = new math.Color(255, 255, 255);
            });
          }
        };

        _proto.setGrayscale = function setGrayscale() {
          var edtBuySellNumP = this.nodBuySellPrice.getChildByName("edtBuySellNum").getComponent(EditBox);
          var edtBuySellNumN = this.nodBuySellNum.getChildByName("edtBuySellNum").getComponent(EditBox);
          var buySellNum = edtBuySellNumN.string == "" ? 0 : Number(edtBuySellNumN.string);
          var maxNum = this.itemNum;

          if (0 == this.type) {
            var Conch = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.Conch);

            if (!edtBuySellNumP.string || edtBuySellNumP.string == "") {
              maxNum = 1;
            }

            maxNum = Math.floor(Conch / Number(edtBuySellNumP.string));
          }

          maxNum = maxNum <= 0 ? 1 : maxNum;
          if (buySellNum <= 0) this.buttonSubNum.getComponent(Sprite).grayscale = true;else this.buttonSubNum.getComponent(Sprite).grayscale = false;
          if (buySellNum >= maxNum) this.buttonAddNum.getComponent(Sprite).grayscale = true;else this.buttonAddNum.getComponent(Sprite).grayscale = false;
        };

        return MarketTradeMineView;
      }(BasePanel), _class3.className = "MarketTradeMineView", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "labTitle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnBuySell", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "sprGoodsIcon", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "labMineDesc", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "labPrice", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "nodBuySellPrice", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "nodBuySellNum", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "nodBuySellMoney", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "sliSellNum", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "buttonAddPrice", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "buttonSubPrice", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "buttonAddNum", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "buttonSubNum", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MarketTradeRecordItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstLanguage.ts', './ConfigFile.ts', './MessageManager.ts', './WebSocketMgr.ts', './NodeHelp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Component, ConstLanguage, ConfigFile, Configname, MessageManager, WebSocketMgr, NodeHelp;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      ConstLanguage = module.ConstLanguage;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "597c1axvoBIvYSOpKIrPrCR", "MarketTradeRecordItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MarketTradeRecordItem = exports('MarketTradeRecordItem', (_dec = ccclass('MarketTradeRecordItem'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MarketTradeRecordItem, _Component);

        function MarketTradeRecordItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "cancellation", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnCancellation", _descriptor2, _assertThisInitialized(_this));

          _this.configData = null;
          _this.GoodsInfo = null;
          return _this;
        }

        var _proto = MarketTradeRecordItem.prototype; // public initOrderInfo(OrderInfo: pb.FarmMarketOrderListResponse.IOrderInfo) {
        //     this.OrderInfo = OrderInfo
        //     this.setconfigData(this.OrderInfo.ItemModeId)
        //     this.setShow({
        //         id: this.OrderInfo.Code + "",
        //         timenum: Number(this.OrderInfo.CreatedAt),
        //         Goods: ConfigFile.findLanguage(this.configData.Name),
        //         Price: this.OrderInfo.Price + "",
        //         Total: this.OrderInfo.SumNum + "",
        //         CompleteNum: this.OrderInfo.Num + "",
        //         Cancellation: true
        //     })
        // }

        _proto.initGoodsInfo = function initGoodsInfo(GoodsInfo, IsHistory) {
          this.GoodsInfo = GoodsInfo;
          this.setconfigData(this.GoodsInfo.ItemModeId);
          this.setShow({
            id: this.GoodsInfo.Code + "",
            timenum: Number(this.GoodsInfo.CreatedAt),
            Goods: ConfigFile.findLanguage(this.configData.Name),
            Price: this.GoodsInfo.Price + "",
            Total: this.GoodsInfo.SumNum + "",
            CompleteNum: this.GoodsInfo.Num + "",
            Cancellation: IsHistory
          });
        };

        _proto.setconfigData = function setconfigData(Id) {
          this.configData = ConfigFile.getInstance().config.get(Configname.TItemInfo).find(function (v) {
            if (v.ItemId == Id) return true;
          });
        };

        _proto.setShow = function setShow(data) {
          NodeHelp.getchildlable(this.node, "ID", Label, function (comp) {
            comp.string = data.id;
          });
          NodeHelp.getchildlable(this.node, "years", Label, function (comp) {
            var date = new Date(data.timenum * 1000);
            var year = date.getFullYear() + "";
            var month = date.getMonth() + 1 + "";
            var day = date.getDate() + "";
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_RECORD_TIME1).format(year, month, day);
          });
          NodeHelp.getchildlable(this.node, "day", Label, function (comp) {
            var date = new Date(data.timenum * 1000);
            var hours = date.getHours() < 10 ? "0" + date.getHours() : date.getHours() + "";
            var minutes = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes() + "";
            var seconds = date.getSeconds() < 10 ? "0" + date.getSeconds() : date.getSeconds() + "";
            comp.string = hours + ":" + minutes + ":" + seconds;
          });
          NodeHelp.getchildlable(this.node, "Goods", Label, function (comp) {
            comp.string = data.Goods;
          });
          NodeHelp.getchildlable(this.node, "Price", Label, function (comp) {
            comp.string = data.Price;
          });
          NodeHelp.getchildlable(this.node, "Total", Label, function (comp) {
            comp.string = data.Total;
          });
          NodeHelp.getchildlable(this.node, "CompleteNum", Label, function (comp) {
            comp.string = data.CompleteNum;
          });
          NodeHelp.getchildlable(this.btnCancellation, "Label", Label, function (comp) {
            comp.string = data.CompleteNum;
          });

          if (data.Cancellation) {
            this.cancellation.active = true;
            this.btnCancellation.active = false;
            if (this.GoodsInfo.State == "revoke") this.cancellation.getComponent(Label).string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_RECORD_BUTTON4);else if (this.GoodsInfo.State = "conduct") this.cancellation.getComponent(Label).string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_RECORD_BUTTON5);else this.cancellation.getComponent(Label).string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_RECORD_BUTTON3);
          } else {
            NodeHelp.getchildlable(this.btnCancellation, "Label", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(106087);
            });
            this.btnCancellation.active = true;
            this.cancellation.active = false;
          }
        };

        _proto.ButtonChick = function ButtonChick() {
          if (this.GoodsInfo) {
            WebSocketMgr.send(MessageManager.Net.FarmMarketGoodsRevokeRequest, {
              GoodsId: this.GoodsInfo.Id
            });
          }
        };

        return MarketTradeRecordItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "cancellation", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnCancellation", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MarketTradeRecordView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstLanguage.ts', './EnumDefine.ts', './ConfigFile.ts', './EventManager.ts', './MessageManager.ts', './WebSocketMgr.ts', './NodeHelp.ts', './Pool.ts', './BasePanel.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ScrollView, Node, Prefab, Label, instantiate, Widget, ConstLanguage, EnumDefine, ConfigFile, EventManager, MessageManager, WebSocketMgr, NodeHelp, PoolOnce, BasePanel;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ScrollView = module.ScrollView;
      Node = module.Node;
      Prefab = module.Prefab;
      Label = module.Label;
      instantiate = module.instantiate;
      Widget = module.Widget;
    }, function (module) {
      ConstLanguage = module.ConstLanguage;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      BasePanel = module.BasePanel;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _class3;

      cclegacy._RF.push({}, "5049aL0cA5KprupncZ5zy3W", "MarketTradeRecordView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MarketTradeRecordView = exports('MarketTradeRecordView', (_dec = ccclass('MarketTradeRecordView'), _dec2 = property({
        type: ScrollView,
        displayName: "交易记录表"
      }), _dec3 = property({
        type: Node,
        displayName: "操作按钮"
      }), _dec4 = property({
        type: Prefab,
        displayName: "item模板"
      }), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Label), _dec8 = property(Node), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(MarketTradeRecordView, _BasePanel);

        function MarketTradeRecordView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "list", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonOperation", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "PFitem", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ButtonBuy", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ButtonSell", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ButtonBuyLabel", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ButtonSellLabel", _descriptor7, _assertThisInitialized(_this));

          _this.listType = EnumDefine.MarketTradeRecordType;
          _this.CodeType = EnumDefine.MarketTradeRecordOrderType;
          _this.RecordType = 1;
          _this.sort = 1;
          _this.listDatas = [];
          _this.GoodsListRequestData = {
            id: 0,
            Messageid: "",
            Status: "",
            type: "",
            IsUser: true,
            ItemModeId: 0,
            IsHistory: false
          };
          _this.addOver = true;
          _this.nowDataIndex = 0;
          _this.ischick = false;
          _this.chickIndex = 0;
          _this.panel = null;
          _this.Pool = new PoolOnce(30, function () {
            return instantiate(_this.PFitem);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          return _this;
        }

        var _proto = MarketTradeRecordView.prototype;

        _proto.onLoad = function onLoad() {
          this.panel = this.node.getChildByName("Panel");
          EventManager.getInstance().add(MessageManager.Net.FarmMarketGoodsListResponse, this, this.FarmMarketGoodsListResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmMarketGoodsRevokeResponse, this, this.FarmMarketGoodsRevokeResponse);
          this.RecordType = this.listType.CurrentBuy;
          this.sort = this.CodeType.Code;
          this.nowDataIndex = 0;
          NodeHelp.getchildlable(this.buttonOperation, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_RECORD_BUTTON1);
          });
          this.list.node.on(ScrollView.EventType.SCROLL_TO_BOTTOM, this.onMessageSend, this);
          this.setTextShow();
          this.setListShow();
          this.onMessageSend();
        };

        _proto.start = function start() {
          this.node.getChildByName("mask").getComponent(Widget).updateAlignment();
        };

        _proto.setTextShow = function setTextShow() {
          NodeHelp.getchildlable(this.panel, "current", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_RECORD_BUTTON6);
          });
          NodeHelp.getchildlable(this.panel, "history", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_RECORD_BUTTON7);
          });
          NodeHelp.getchildlable(this.panel, "ButtonCode", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_RECORD_BUTTON8);
          });
          NodeHelp.getchildlable(this.panel, "ButtonTime", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_RECORD_BUTTON9);
          });
          NodeHelp.getchildlable(this.panel, "ButtonGoods", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_RECORD_BUTTON10);
          });
          NodeHelp.getchildlable(this.panel, "ButtonPrice", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_RECORD_BUTTON11);
          });
          NodeHelp.getchildlable(this.panel, "ButtonTotal", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_RECORD_BUTTON12);
          });
          NodeHelp.getchildlable(this.panel, "ButtonCompleteNum", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_RECORD_BUTTON13);
          });
          NodeHelp.getchildlable(this.panel, "ButtonBuy", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_CURRENCY_TEXT1);
          });
          NodeHelp.getchildlable(this.ButtonBuy, "LabelCheck", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_CURRENCY_TEXT1);
          });
          this.ButtonBuyLabel.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_CURRENCY_TEXT1);
          NodeHelp.getchildlable(this.panel, "ButtonSell", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_CURRENCY_TEXT2);
          });
          NodeHelp.getchildlable(this.ButtonSell, "LabelCheck", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_CURRENCY_TEXT2);
          });
          this.ButtonSellLabel.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_CURRENCY_TEXT2);
        };

        _proto.setListShow = function setListShow() {
          switch (this.RecordType) {
            case EnumDefine.MarketTradeRecordType.CurrentBuy:
              {
                this.GoodsListRequestData.IsHistory = false;
                this.GoodsListRequestData.Status = "buy";
                this.GoodsListRequestData.type = "Current";
                break;
              }

            case EnumDefine.MarketTradeRecordType.CurrentSell:
              {
                this.GoodsListRequestData.IsHistory = false;
                this.GoodsListRequestData.Status = "sell";
                this.GoodsListRequestData.type = "Current";
                break;
              }

            case EnumDefine.MarketTradeRecordType.HistoryBuy:
              {
                this.GoodsListRequestData.IsHistory = true;
                this.GoodsListRequestData.Status = "buy";
                this.GoodsListRequestData.type = "Current";
                break;
              }

            case EnumDefine.MarketTradeRecordType.HistorySell:
              {
                this.GoodsListRequestData.IsHistory = true;
                this.GoodsListRequestData.Status = "sell";
                this.GoodsListRequestData.type = "Current";
                break;
              }
          }

          this.GoodsListRequestData.Messageid = MessageManager.Net.FarmMarketGoodsListRequest;
        };

        _proto.FarmMarketGoodsListResponse = function (_FarmMarketGoodsListResponse) {
          function FarmMarketGoodsListResponse(_x) {
            return _FarmMarketGoodsListResponse.apply(this, arguments);
          }

          FarmMarketGoodsListResponse.toString = function () {
            return _FarmMarketGoodsListResponse.toString();
          };

          return FarmMarketGoodsListResponse;
        }(function (data) {
          if (data.IsUser) {
            // this.RecordType = this.listType.CurrentBuy
            // if (data.IsHistory)
            //     if (data.Status == "buy")
            //         this.RecordType = this.listType.HistoryBuy
            //     else
            //         this.RecordType = this.listType.HistorySell
            // else
            //     if (data.Status == "buy")
            //         this.RecordType = this.listType.CurrentBuy
            //     else
            //         this.RecordType = this.listType.CurrentSell
            if (data.Goods && data.Goods.length < 1) return;
            if (!this.listDatas) this.listDatas = [];
            if (this.listDatas.length < 1) this.listDatas = data.Goods;else if (this.listDatas.find(function (v) {
              return v.Id == data.Goods[0].Id;
            })) return;else this.listDatas = this.listDatas.concat(data.Goods);
            this.GoodsListRequestData.id = this.listDatas[this.listDatas.length - 1].Id;
            if (this.addOver) this.addListItems();
          }
        });

        _proto.FarmMarketGoodsRevokeResponse = function FarmMarketGoodsRevokeResponse(data) {
          if (data.GoodsId) {
            var index = -1;
            this.listDatas.find(function (v, i) {
              if (v.Id == data.GoodsId) {
                index = i;
                return true;
              }
            });
            if (index != -1) this.listDatas.splice(index, 1);
            index = -1;
            var node = this.list.content.children.find(function (v, i) {
              var com = v.getComponent("MarketTradeRecordItem");
              return data.GoodsId == com.GoodsInfo.Id;
            });
            if (node) this.Pool.put(node);
          }
        };

        _proto.addListItems = function addListItems() {
          var _this2 = this;

          if (!this.listDatas || this.listDatas.length < 1) {
            return;
          }

          var currentFunc = function currentFunc() {
            if (_this2.listDatas) {
              _this2.addOver = false;

              if (_this2.nowDataIndex > _this2.listDatas.length - 1 || !_this2.node.activeInHierarchy) {
                _this2.unschedule(currentFunc);

                _this2.addOver = true;
                return;
              }

              var itemData = _this2.listDatas[_this2.nowDataIndex];

              var node = _this2.Pool.get();

              _this2.list.content.addChild(node);

              node.getComponent("MarketTradeRecordItem").initGoodsInfo(itemData, _this2.GoodsListRequestData.IsHistory);
              _this2.nowDataIndex++;
            }
          };

          this.schedule(currentFunc, 0);
        };

        _proto.clearItems = function clearItems() {
          this.GoodsListRequestData.id = 0;
          this.listDatas = null;

          while (this.list.content.children.length >= 1) {
            this.Pool.put(this.list.content.children[0]);
          }

          this.nowDataIndex = 0;
          this.onMessageSend();
        };

        _proto.onMessageSend = function onMessageSend() {
          if (!this.addOver) return;
          WebSocketMgr.send(this.GoodsListRequestData.Messageid, {
            Id: this.GoodsListRequestData.id,
            Status: this.GoodsListRequestData.Status,
            IsUser: this.GoodsListRequestData.IsUser,
            ItemModeId: this.GoodsListRequestData.ItemModeId,
            IsHistory: this.GoodsListRequestData.IsHistory
          });
        };

        _proto.onChickCurrent = function onChickCurrent() {
          if (this.RecordType == this.listType.CurrentBuy || this.RecordType == this.listType.CurrentSell) return;
          this.RecordType = this.RecordType == this.listType.HistoryBuy ? this.listType.CurrentBuy : this.listType.CurrentSell;
          NodeHelp.getchildlable(this.buttonOperation, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_RECORD_BUTTON1);
          });
          this.setListShow();
          this.clearItems();
        };

        _proto.onChickHistory = function onChickHistory() {
          if (this.RecordType == this.listType.HistoryBuy || this.RecordType == this.listType.HistorySell) return;
          this.RecordType = this.RecordType == this.listType.CurrentBuy ? this.listType.HistoryBuy : this.listType.HistorySell;
          NodeHelp.getchildlable(this.buttonOperation, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_RECORD_BUTTON2);
          });
          this.setListShow();
          this.clearItems();
        };

        _proto.onChickBuy = function onChickBuy() {
          if (this.RecordType == this.listType.CurrentBuy || this.RecordType == this.listType.HistoryBuy) return;
          this.RecordType = this.RecordType == this.listType.CurrentSell ? this.listType.CurrentBuy : this.listType.HistoryBuy;
          this.setListShow();
          this.clearItems();
        };

        _proto.onChickSell = function onChickSell() {
          if (this.RecordType == this.listType.CurrentSell || this.RecordType == this.listType.HistorySell) return;
          this.RecordType = this.RecordType == this.listType.CurrentBuy ? this.listType.CurrentSell : this.listType.HistorySell;
          this.setListShow();
          this.clearItems();
        };

        _proto.onChickButtonCode = function onChickButtonCode() {
          // message GoodsInfo{
          //     int64   Id            = 1;  //ID
          //     int64   ItemModeId    = 2;  //道具ID
          //     int64   UserId        = 3;  //用户ID
          //     int64   SumNum        = 4;  //总数量
          //     int64   Num           = 5;  //数量
          //     double  Price         = 6;  //价格
          //     string  State         = 7;  //conduct=进行中 revoke=撤销 success=成功
          //     string  Status        = 8;  //sell=卖  buy=买
          //     int64   CreatedAt     = 9;  //时间戳
          //     string  Code          = 10;  //商品单号
          // }
          this.getitemsDataUsSort("Code", 1);
        };

        _proto.onChickButtonTime = function onChickButtonTime() {
          if (this.addOver) this.getitemsDataUsSort("CreatedAt", 2);
        };

        _proto.onChickButtonGoods = function onChickButtonGoods() {
          if (this.addOver) this.getitemsDataUsSort("ItemModeId", 3);
        };

        _proto.onChickButtonPrice = function onChickButtonPrice() {
          if (this.addOver) this.getitemsDataUsSort("Price", 4);
        };

        _proto.onChickButtonTotal = function onChickButtonTotal() {
          if (this.addOver) this.getitemsDataUsSort("SumNum", 5);
        };

        _proto.onChickButtonCompleteNum = function onChickButtonCompleteNum() {
          if (this.addOver) this.getitemsDataUsSort("Num", 6);
        };

        _proto.onChickButtonOperation = function onChickButtonOperation() {
          if (this.addOver) this.getitemsDataUsSort("State", 7);
        }
        /**
         * 
         * @param sort 排序类型
         * @param node 取排序表的节点
         * @param chickIndex 按键编号
         */
        ;

        _proto.getitemsDataUsSort = function getitemsDataUsSort(sort, chickIndex) {
          if (this.chickIndex == chickIndex) this.ischick = !this.ischick;else this.chickIndex = chickIndex;
          var arr = [];
          if (this.list.content.children.length < 1) return;else this.list.content.children.forEach(function (v) {
            arr.push(v.getComponent("MarketTradeRecordItem"));
          });
          this.bubbleSort(arr, sort, this.ischick);
        }
        /**
         * 
         * @param arr 排序用的表
         * @param sort 排序类型
         * @param isup 上下排序
         */
        ;

        _proto.bubbleSort = function bubbleSort(arr, sort, isup) {
          var i = arr.length,
              j;
          var tempExchangVal;
          if (isup) while (i > 0) {
            for (j = 0; j < i - 1; j++) {
              if (arr[j].GoodsInfo[sort] < arr[j + 1].GoodsInfo[sort]) {
                tempExchangVal = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = tempExchangVal;
              }
            }

            i--;
          } else {
            while (i > 0) {
              for (j = 0; j < i - 1; j++) {
                if (arr[j].GoodsInfo[sort] > arr[j + 1].GoodsInfo[sort]) {
                  tempExchangVal = arr[j];
                  arr[j] = arr[j + 1];
                  arr[j + 1] = tempExchangVal;
                }
              }

              i--;
            }
          }

          for (var _i = 0; _i < arr.length; _i++) {
            arr[_i].node.setSiblingIndex(_i);
          }
        };

        return MarketTradeRecordView;
      }(BasePanel), _class3.className = "MarketTradeRecordView", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "list", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "buttonOperation", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "PFitem", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "ButtonBuy", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "ButtonSell", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "ButtonBuyLabel", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "ButtonSellLabel", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MarketTradeTheirView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstLanguage.ts', './ConstValue.ts', './ConfigFile.ts', './GameAllData.ts', './MessageManager.ts', './TipManager.ts', './WebSocketMgr.ts', './NodeHelp.ts', './NumberUtil.ts', './BasePanel.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Button, Sprite, Slider, Node, Input, EditBox, UITransform, v3, ProgressBar, math, ConstLanguage, ConstValue, ConfigFile, GameAllData, MessageManager, TipManager, WebSocketMgr, NodeHelp, NumberUtil, BasePanel;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Button = module.Button;
      Sprite = module.Sprite;
      Slider = module.Slider;
      Node = module.Node;
      Input = module.Input;
      EditBox = module.EditBox;
      UITransform = module.UITransform;
      v3 = module.v3;
      ProgressBar = module.ProgressBar;
      math = module.math;
    }, function (module) {
      ConstLanguage = module.ConstLanguage;
    }, function (module) {
      ConstValue = module.ConstValue;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }, function (module) {
      BasePanel = module.BasePanel;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _class3;

      cclegacy._RF.push({}, "179a5BOhC9Osbq2X2PGW1rj", "MarketTradeTheirView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MarketTradeTheirView = exports('MarketTradeTheirView', (_dec = ccclass('MarketTradeTheirView'), _dec2 = property(Label), _dec3 = property(Button), _dec4 = property(Sprite), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Label), _dec8 = property(Slider), _dec9 = property(Node), _dec10 = property(Node), _dec11 = property(Node), _dec12 = property(Node), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(MarketTradeTheirView, _BasePanel);

        function MarketTradeTheirView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;
          _this.type = 0;
          _this.typeSell = 0;
          _this.openfram = 0;
          _this.goodsId = 0;
          _this.orderId = 0;
          _this.theirNum = 0;
          _this.mineNum = 0;
          _this.mineMoney = 0;
          _this.taxRateNUM = 1;
          _this.isLobby = false;

          _initializerDefineProperty(_this, "labTitle", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnBuySell", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sprGoodsIcon", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labPrice", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labTheirDesc", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labMineDesc", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sliGoodsNum", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodBuySellNum", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodBuySellMoney", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonAdd", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonSub", _descriptor11, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = MarketTradeTheirView.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this.buttonAdd.on(Input.EventType.TOUCH_START, this.onButtonAddStartTouch.bind(this));
          this.buttonAdd.on(Input.EventType.TOUCH_END, this.onButtonAddEndTouch.bind(this));
          this.buttonAdd.on(Input.EventType.TOUCH_CANCEL, this.onButtonAddCancelTouch.bind(this));
          this.buttonSub.on(Input.EventType.TOUCH_START, this.onButtonSubStartTouch.bind(this));
          this.buttonSub.on(Input.EventType.TOUCH_END, this.onButtonSubEndTouch.bind(this));
          this.buttonSub.on(Input.EventType.TOUCH_CANCEL, this.onButtonSubCancelTouch.bind(this));
          this.nodBuySellNum.getChildByName("edtBuySellNum").getComponent(EditBox).string = "";
          this.nodBuySellNum.getChildByName("edtBuySellNum").getComponent(EditBox).placeholder = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_EDITBOX_PLACEHOLDER1);
          var goodsName = "";
          NodeHelp.getchildlable(this.nodBuySellMoney, "labBuySellNum", Label, function (comp) {
            comp.string = "";
          });
          NodeHelp.getchildlable(this.nodBuySellMoney, "labBuySellNum", Sprite, function (comp) {
            var id = "-2";

            if (_this2.openfram == 1) {
              var _itemid = _this2.goodsId;

              if (_itemid) {
                var ItemData = ConfigFile.getItemData(_itemid);
                var Price = ItemData && ItemData.ItemPrice;
                var name = ItemData && ItemData.Name;
                if (name) goodsName = ConfigFile.findLanguage(name);
                if (Price) id = Price.split(",")[0];
              }
            }

            NodeHelp.loadIcon("propIcon/itemicon", id, function (res) {
              comp.spriteFrame = res;
              var scale = NodeHelp.setScopeLimitation(comp.node.getComponent(UITransform), 50, 50);
              comp.node.setScale(v3(scale, scale, 1));
            });
          });
          var itemid = this.goodsId || this.orderId;

          if (itemid) {
            var ItemData = ConfigFile.getItemData(itemid);
            var name = ItemData && ItemData.Name;
            if (name) goodsName = ConfigFile.findLanguage(name);
          }

          this.taxRateNUM = 1;

          if (0 == this.type) {
            if (!this.isLobby) {
              var taxRate = ConfigFile.getGlobalInfo(120);
              if (taxRate && taxRate.IntValue) this.taxRateNUM = (10000 - taxRate.IntValue) / 10000;
            }

            this.labTitle.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_CURRENCY_TEXT5);
            this.nodBuySellNum.getChildByName("labBuySell").getComponent(Label).string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT5);
            this.nodBuySellMoney.getChildByName("labBuySell").getComponent(Label).string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT7);
            this.btnBuySell.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_CURRENCY_TEXT5);
            this.labTheirDesc.string = 0 == this.typeSell ? ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_THEIR_GOODSINFO1).format(this.theirNum, goodsName) : "";
            this.labMineDesc.string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_THEIR_GOODSINFO3).format(this.mineNum, goodsName);
            this.setGrayscaleBtn(this.mineNum <= 0);
          } else {
            this.labTitle.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_CURRENCY_TEXT6);
            this.nodBuySellNum.getChildByName("labBuySell").getComponent(Label).string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT2);
            this.nodBuySellMoney.getChildByName("labBuySell").getComponent(Label).string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT8);
            this.btnBuySell.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_CURRENCY_TEXT6);
            this.labTheirDesc.string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_THEIR_GOODSINFO2).format(this.theirNum, goodsName);
            this.labMineDesc.string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_THEIR_GOODSINFO4).format(NumberUtil.numberFormat(this.mineMoney, ConstValue.DECIMAL_PLACES_NUM));
            this.setGrayscaleBtn(this.mineMoney <= 0);
          }

          this.setmaxbuyPrice();
        };

        _proto.onDisable = function onDisable() {
          this.buttonAdd.off(Input.EventType.TOUCH_START, this.onButtonAddStartTouch.bind(this));
          this.buttonAdd.off(Input.EventType.TOUCH_END, this.onButtonAddEndTouch.bind(this));
          this.buttonAdd.off(Input.EventType.TOUCH_CANCEL, this.onButtonAddCancelTouch.bind(this));
          this.buttonSub.off(Input.EventType.TOUCH_START, this.onButtonSubStartTouch.bind(this));
          this.buttonSub.off(Input.EventType.TOUCH_END, this.onButtonSubEndTouch.bind(this));
          this.buttonSub.off(Input.EventType.TOUCH_CANCEL, this.onButtonSubCancelTouch.bind(this));
        };

        _proto.onButtonAddStartTouch = function onButtonAddStartTouch() {
          var _this3 = this;

          this.unscheduleAllCallbacks();
          this.scheduleOnce(function () {
            _this3.schedule(function () {
              _this3.onClickAdd();
            }, 0.1);
          }, 0.2);
        };

        _proto.onButtonAddEndTouch = function onButtonAddEndTouch() {
          this.unscheduleAllCallbacks();
        };

        _proto.onButtonAddCancelTouch = function onButtonAddCancelTouch() {
          this.unscheduleAllCallbacks();
        };

        _proto.onButtonSubStartTouch = function onButtonSubStartTouch() {
          var _this4 = this;

          this.unscheduleAllCallbacks();
          this.scheduleOnce(function () {
            _this4.schedule(function () {
              _this4.onClickSub();
            }, 0.1);
          }, 0.2);
        };

        _proto.onButtonSubEndTouch = function onButtonSubEndTouch() {
          this.unscheduleAllCallbacks();
        };

        _proto.onButtonSubCancelTouch = function onButtonSubCancelTouch() {
          this.unscheduleAllCallbacks();
        };

        _proto.onClickedBuySell = function onClickedBuySell() {
          var _this5 = this;

          var edtBuySellNum = this.nodBuySellNum.getChildByName("edtBuySellNum").getComponent(EditBox);

          if ("" == edtBuySellNum.string || Number(edtBuySellNum.string) < 1) {
            //弹框提示输入价格和数量
            TipManager.TipFromCode(ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT12);
            return;
          }

          var edtBuySellNumPick = Number(edtBuySellNum.string); // if(!GameAllData.isMeetTheConditionsByGlobalId(292))
          // {
          //     return;
          // }

          if (0 == this.typeSell) {
            if (GameAllData.isMeetTheConditionsByGlobalId(292) != "") {
              TipManager.ChickBox(GameAllData.isMeetTheConditionsByGlobalId(292));
              return;
            }

            TipManager.SafeCodeInputBox(function () {
              var data = {
                GoodsId: _this5.orderId,
                Number: edtBuySellNumPick,
                Status: 0 == _this5.type ? "sell" : "buy",
                GoogleCode: GameAllData.bandSafeCode
              };
              WebSocketMgr.send(MessageManager.Net.FarmMarketGoodsBusinessRequest, data);
            });
          } else {
            if (GameAllData.IsAccountTypeIsTest) {
              TipManager.SafeCodeInputBox(function () {});
            } else {
              TipManager.SafeCodeInputBox(function () {
                WebSocketMgr.send(MessageManager.Net.FarmMarketSellRequest, {
                  ItemModeId: _this5.goodsId,
                  Number: edtBuySellNumPick,
                  GoogleCode: GameAllData.bandSafeCode
                });
              });
            }
          }

          this.onClickedClose();
        };

        _proto.onSlidedGoodsNum = function onSlidedGoodsNum(slider) {
          var maxNum = this.getMaxNum();
          slider.node.getChildByName("ProgressBar").getComponent(ProgressBar).progress = slider.progress;
          var buySellNum = Math.floor(maxNum * slider.progress);
          var sound = slider.node.getComponent("PlaySliderSound");
          var play = sound.playSound(buySellNum);

          if (play) {
            var buySellMoney = NumberUtil.numberFormat(buySellNum * Number(this.labPrice.string) * this.taxRateNUM, ConstValue.DECIMAL_PLACES_NUM);
            this.nodBuySellNum.getChildByName("edtBuySellNum").getComponent(EditBox).string = buySellNum.toString();
            NodeHelp.getchildlable(this.nodBuySellMoney, "labBuySellNum", Label, function (comp) {
              comp.string = buySellMoney.toString();
            });
          }
        };

        _proto.getMaxNum = function getMaxNum() {
          var maxNum = 0;

          if (0 == this.type) {
            if (0 == this.typeSell) {
              maxNum = this.mineNum > this.theirNum ? this.theirNum : this.mineNum;
            } else {
              maxNum = this.mineNum;
            }
          } else {
            var canBuyMaxNum = Math.floor(this.mineMoney / Number(this.labPrice.string));
            maxNum = canBuyMaxNum > this.theirNum ? this.theirNum : canBuyMaxNum;
          }

          return maxNum;
        };

        _proto.setmaxbuyPrice = function setmaxbuyPrice() {
          var maxNum = this.getMaxNum();
          this.sliGoodsNum.progress = 1;
          this.sliGoodsNum.node.getChildByName("ProgressBar").getComponent(ProgressBar).progress = this.sliGoodsNum.progress;
          var buySellMoney = NumberUtil.numberFormat(maxNum * Number(this.labPrice.string) * this.taxRateNUM, ConstValue.DECIMAL_PLACES_NUM);
          this.nodBuySellNum.getChildByName("edtBuySellNum").getComponent(EditBox).string = maxNum.toString();
          NodeHelp.getchildlable(this.nodBuySellMoney, "labBuySellNum", Label, function (comp) {
            comp.string = buySellMoney.toString();
          });
        };

        _proto.onClickAdd = function onClickAdd() {
          var maxNum = this.getMaxNum();
          var num = 0;
          var edtBuySellNum = this.nodBuySellNum.getChildByName("edtBuySellNum").getComponent(EditBox);
          if ("" == edtBuySellNum.string || Number(edtBuySellNum.string) < 1) num = 0;else num = Number(edtBuySellNum.string);
          var buyNum = num + 1;
          buyNum = buyNum > maxNum ? maxNum : buyNum;
          this.setbuyPrice(buyNum);
        };

        _proto.onClickSub = function onClickSub() {
          var num = 0;
          var edtBuySellNum = this.nodBuySellNum.getChildByName("edtBuySellNum").getComponent(EditBox);
          if ("" == edtBuySellNum.string || Number(edtBuySellNum.string) < 1) num = 0;else num = Number(edtBuySellNum.string);
          var buyNum = num - 1;
          buyNum = buyNum < 0 ? 0 : buyNum;
          this.setbuyPrice(buyNum);
        };

        _proto.setbuyPrice = function setbuyPrice(buyNum) {
          var maxNum = this.getMaxNum();
          this.sliGoodsNum.progress = buyNum / maxNum;
          this.sliGoodsNum.node.getChildByName("ProgressBar").getComponent(ProgressBar).progress = this.sliGoodsNum.progress;
          var sound = this.sliGoodsNum.node.getComponent("PlaySliderSound");
          sound.playSoundNow();
          var buySellMoney = NumberUtil.numberFormat(buyNum * Number(this.labPrice.string) * this.taxRateNUM, ConstValue.DECIMAL_PLACES_NUM);
          this.nodBuySellNum.getChildByName("edtBuySellNum").getComponent(EditBox).string = buyNum.toString();
          NodeHelp.getchildlable(this.nodBuySellMoney, "labBuySellNum", Label, function (comp) {
            comp.string = buySellMoney.toString();
          });
        };

        _proto.onEditEndedNum = function onEditEndedNum() {
          var maxNum = 0;

          if (0 == this.type) {
            if (0 == this.typeSell) {
              maxNum = this.mineNum > this.theirNum ? this.theirNum : this.mineNum;
            } else {
              maxNum = this.mineNum;
            }
          } else {
            var canBuyMaxNum = Math.floor(this.mineMoney / Number(this.labPrice.string));
            maxNum = canBuyMaxNum > this.theirNum ? this.theirNum : canBuyMaxNum;
          }

          var labBuySellNum = NodeHelp.getchildlable(this.nodBuySellMoney, "labBuySellNum", Label);
          labBuySellNum.string = "";
          var edtBuySellNumN = this.nodBuySellNum.getChildByName("edtBuySellNum").getComponent(EditBox);

          if (!NumberUtil.checkInt(edtBuySellNumN.string) || Number(edtBuySellNumN.string) <= 0 || !this.sliGoodsNum.enabled) {
            edtBuySellNumN.string = "";
            return;
          }

          edtBuySellNumN.string = Number(edtBuySellNumN.string).toString(); //去掉数字前面无意义的0

          var buySellNum = Number(edtBuySellNumN.string) > maxNum ? maxNum : Number(edtBuySellNumN.string);
          edtBuySellNumN.string = buySellNum + "";
          var buySellMoney = NumberUtil.numberFormat(buySellNum * Number(this.labPrice.string) * this.taxRateNUM, ConstValue.DECIMAL_PLACES_NUM);
          labBuySellNum.string = buySellMoney.toString();
          this.sliGoodsNum.progress = buySellNum / maxNum;
          this.sliGoodsNum.node.getChildByName("ProgressBar").getComponent(ProgressBar).progress = buySellNum / maxNum;
        } //置灰
        ;

        _proto.setGrayscaleBtn = function setGrayscaleBtn(grayscale) {
          this.buttonAdd.getComponent(Sprite).grayscale = grayscale;
          this.buttonSub.getComponent(Sprite).grayscale = grayscale;
          this.buttonAdd.getComponent(Button).interactable = !grayscale;
          this.buttonSub.getComponent(Button).interactable = !grayscale;
          this.sliGoodsNum.enabled = !grayscale;
          var color = new math.Color(215, 172, 103);
          var text = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_EDITBOX_PLACEHOLDER1);

          if (0 == this.type && grayscale) {
            text = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT11);
            color = new math.Color(255, 0, 0);
          } else if (0 != this.type && grayscale) {
            text = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_MINEORTHEIR_EDT10);
            color = new math.Color(255, 0, 0);
          }

          this.nodBuySellNum.getChildByName("edtBuySellNum").getComponent(EditBox).placeholder = text;
          this.nodBuySellNum.getChildByName("edtBuySellNum").getComponent(EditBox).placeholderLabel.color = color;
        };

        return MarketTradeTheirView;
      }(BasePanel), _class3.className = "MarketTradeTheirView", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "labTitle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnBuySell", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "sprGoodsIcon", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "labPrice", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "labTheirDesc", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "labMineDesc", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "sliGoodsNum", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "nodBuySellNum", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "nodBuySellMoney", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "buttonAdd", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "buttonSub", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MarketTradeUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstLanguage.ts', './EnumDefine.ts', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './UIManager.ts', './WebSocketMgr.ts', './GList.ts', './NodeHelp.ts', './MarketTradeMineView.ts', './MarketTradeRecordView.ts', './MarketView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Toggle, Label, Node, Button, Prefab, ScrollView, LabelOutline, Component, ConstLanguage, EnumDefine, ConfigFile, GameAllData, EventManager, MessageManager, UIManager, WebSocketMgr, GList, NodeHelp, MarketTradeMineView, MarketTradeRecordView, MarketView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Toggle = module.Toggle;
      Label = module.Label;
      Node = module.Node;
      Button = module.Button;
      Prefab = module.Prefab;
      ScrollView = module.ScrollView;
      LabelOutline = module.LabelOutline;
      Component = module.Component;
    }, function (module) {
      ConstLanguage = module.ConstLanguage;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      GList = module.GList;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      MarketTradeMineView = module.MarketTradeMineView;
    }, function (module) {
      MarketTradeRecordView = module.MarketTradeRecordView;
    }, function (module) {
      MarketView = module.MarketView;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16;

      cclegacy._RF.push({}, "d6a33MHodhH35za4mNt/aqw", "MarketTradeUI", undefined);

      var ItemH = 49;
      var Space = 6;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MarketTradeUI = exports('MarketTradeUI', (_dec = ccclass('MarketTradeUI'), _dec2 = property(Toggle), _dec3 = property(Toggle), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Label), _dec8 = property(Label), _dec9 = property(Label), _dec10 = property(Label), _dec11 = property(Label), _dec12 = property(Label), _dec13 = property(Node), _dec14 = property(Node), _dec15 = property(Node), _dec16 = property(Button), _dec17 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MarketTradeUI, _Component);

        function MarketTradeUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.srtMarketView = null;
          _this.sheet = 0;
          _this.ischick = false;
          _this.chickIndex = 0;
          _this.mineOrderTotalNum = 0;
          _this.dtUpdateInfo = 0;
          _this.mineOrderData = null;
          _this.buySellOrderData = null;
          _this.mineOrderGlist = null;
          _this.buySellOrderGlist = null;

          _initializerDefineProperty(_this, "btnBuyGoods", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnSellGoods", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labTradeRecord", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labBuyAveragePrice", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labBuyAveragePriceNum", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labBuyAveragePriceAll", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labBuyAveragePriceName", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labSellAveragePrice", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labSellAveragePriceNum", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labSellAveragePriceAll", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labSellAveragePriceName", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodBuySellOrder", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodMineOrder", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Desc", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnBuySell", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pfbMarketOrderItem", _descriptor16, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = MarketTradeUI.prototype;

        _proto.onLoad = function onLoad() {
          EventManager.getInstance().add(MessageManager.Net.FarmMarketGoodsListResponse, this, this.onFarmMarketGoodsListResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmMarketGoodsListSumResponse, this, this.onFarmMarketGoodsListSumResponse);
        };

        _proto.onDestroy = function onDestroy() {
          EventManager.getInstance().remove(MessageManager.Net.FarmMarketGoodsListResponse, this, this.onFarmMarketGoodsListResponse);
          EventManager.getInstance().remove(MessageManager.Net.FarmMarketGoodsListSumResponse, this, this.onFarmMarketGoodsListSumResponse);
        };

        _proto.start = function start() {
          var _this2 = this;

          NodeHelp.getchildlable(this.btnBuyGoods.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_TRADE_BUTTON1);
          });
          NodeHelp.getchildlable(this.btnBuyGoods.checkMark.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_TRADE_BUTTON1);
          });
          NodeHelp.getchildlable(this.btnSellGoods.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_TRADE_BUTTON2);
          });
          NodeHelp.getchildlable(this.btnSellGoods.checkMark.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_TRADE_BUTTON2);
          });
          NodeHelp.getchildlable(this.nodBuySellOrder, "btnPrice", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_CURRENCY_TEXT3);
          });
          NodeHelp.getchildlable(this.nodBuySellOrder, "btnNum", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_CURRENCY_TEXT4);
          });
          NodeHelp.getchildlable(this.nodMineOrder, "labTitle", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_TRADE_MINEORDER1);
          });
          NodeHelp.getchildlable(this.nodMineOrder, "labDesc", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_TRADE_MINEORDER2);
          });
          NodeHelp.getchildlable(this.nodMineOrder, "btnPrice", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_CURRENCY_TEXT3);
          });
          NodeHelp.getchildlable(this.nodMineOrder, "btnNum", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_CURRENCY_TEXT4);
          });
          NodeHelp.getchildlable(this.Desc, "Label", Label, function (comp) {
            var config = ConfigFile.getGlobalInfo(120);
            var num = Number(config.IntValue) / 100;
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_TRADE_DESC).format(num);
          });
          NodeHelp.getchildlable(this.nodMineOrder, "scrOrder", ScrollView, function (comp, node) {
            _this2.mineOrderGlist = new GList(comp, _this2.pfbMarketOrderItem, ItemH, false, Space);
          });
          NodeHelp.getchildlable(this.nodBuySellOrder, "scrOrder", ScrollView, function (comp, node) {
            _this2.buySellOrderGlist = new GList(comp, _this2.pfbMarketOrderItem, ItemH, false, Space);
          });
          this.labBuyAveragePrice.string = ConfigFile.findLanguage(106088);
          this.labSellAveragePrice.string = ConfigFile.findLanguage(106089);
          this.labBuyAveragePriceName.string = ConfigFile.findLanguage(106091);
          this.labSellAveragePriceName.string = ConfigFile.findLanguage(106092);
          this.labTradeRecord.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_TRADE_RECORD);
        };

        _proto.onEnable = function onEnable() {
          this.onClickedBuyGoods();
        };

        _proto.update = function update(deltaTime) {
          this.dtUpdateInfo += deltaTime;

          if (this.dtUpdateInfo > 60) {
            this.dtUpdateInfo = 0;

            if (this.srtMarketView.selectedGoodsItem) {
              var itemModeId = this.srtMarketView.selectedGoodsItem.id;
              WebSocketMgr.send(MessageManager.Net.FarmMarketGoodsListSumRequest, {
                ItemModeId: itemModeId
              });
            }
          }
        };

        _proto.setButtonLabelText = function setButtonLabelText(Button, id) {
          NodeHelp.getchildlable(Button.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(id);
          });
        };

        _proto.onClickedBuyGoods = function onClickedBuyGoods() {
          if (!this.srtMarketView) {
            this.srtMarketView = UIManager.getInstance().getUI(MarketView);
          }

          if (!this.srtMarketView || !this.srtMarketView.selectedGoodsItem || !this.srtMarketView.selectedGoodsItem.id) return;
          var itemModeId = this.srtMarketView.selectedGoodsItem.id;
          this.sheet = 0;
          NodeHelp.getchildlable(this.nodBuySellOrder, "labTitle", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_TRADE_BUYSELLORDER1);
          });
          NodeHelp.getchildlable(this.nodBuySellOrder, "labDesc", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_TRADE_BUYSELLORDER3);
          });
          this.setButtonLabelText(this.btnBuySell, ConstLanguage.MARKET_VIEW_CURRENCY_TEXT1);
          WebSocketMgr.send(MessageManager.Net.FarmMarketGoodsListRequest, {
            Id: 0,
            Status: "buy",
            IsUser: false,
            ItemModeId: itemModeId
          });
          WebSocketMgr.send(MessageManager.Net.FarmMarketGoodsListRequest, {
            Id: 0,
            Status: "buy",
            IsUser: true,
            ItemModeId: itemModeId
          });
          WebSocketMgr.send(MessageManager.Net.FarmMarketGoodsListSumRequest, {
            ItemModeId: itemModeId
          });
        };

        _proto.onClickedSellGoods = function onClickedSellGoods() {
          var itemModeId = this.srtMarketView.selectedGoodsItem.id;
          if (!itemModeId) return;
          this.sheet = 1;
          NodeHelp.getchildlable(this.nodBuySellOrder, "labTitle", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_TRADE_BUYSELLORDER2);
          });
          NodeHelp.getchildlable(this.nodBuySellOrder, "labDesc", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_TRADE_BUYSELLORDER4);
          });
          this.setButtonLabelText(this.btnBuySell, ConstLanguage.MARKET_VIEW_CURRENCY_TEXT2);
          WebSocketMgr.send(MessageManager.Net.FarmMarketGoodsListRequest, {
            Id: 0,
            Status: "sell",
            IsUser: false,
            ItemModeId: itemModeId
          });
          WebSocketMgr.send(MessageManager.Net.FarmMarketGoodsListRequest, {
            Id: 0,
            Status: "sell",
            IsUser: true,
            ItemModeId: itemModeId
          });
          WebSocketMgr.send(MessageManager.Net.FarmMarketGoodsListSumRequest, {
            ItemModeId: itemModeId
          });
        };

        _proto.onClickedBuySell = function onClickedBuySell() {
          var _this3 = this;

          var storeItem = GameAllData.getStoreItemByModeId(this.srtMarketView.selectedGoodsItem.id); // if (1 == this.sheet && storeItem.ItemCount < 1) {
          //     // 弹框提示道具数量不足
          //     return;
          // }

          UIManager.getInstance().openUI(MarketTradeMineView, 12, function (ui, args) {
            ui.type = _this3.sheet;
            ui.itemNum = storeItem && storeItem.ItemCount || 0;
            ui.goodsId = _this3.srtMarketView.selectedGoodsItem.id;
            ui.mineOrderTotalNum = _this3.mineOrderTotalNum;
            ui.sprGoodsIcon.spriteFrame = _this3.srtMarketView.selectedGoodsItem.sprIcon.spriteFrame;
            var goodsName = "";
            var num = 1;

            if (ui.goodsId) {
              var ItemData = ConfigFile.getItemData(ui.goodsId);
              var name = ItemData && ItemData.Name;
              var Price = ItemData && ItemData.ItemPrice;

              if (Price) {
                var id = Price.split(",")[0];
                if (Number(id) == EnumDefine.CurrencyType.PEARL) num = Number(ConfigFile.getGlobalInfo(26).Text);
              }

              if (name) goodsName = ConfigFile.findLanguage(name);
            }

            ui.labMineDesc.string = ConfigFile.findLanguage(ConstLanguage.MARKET_TRADE_MINE_GOODSINFO).format(storeItem && storeItem.ItemCount || 0, goodsName);
            ui.labPrice.string = (Number(_this3.srtMarketView.selectedGoodsItem.labNum.string) / num).toFixed(4);
            ui.labPrice.color = _this3.srtMarketView.selectedGoodsItem.labNum.color;
            ui.labPrice.node.getComponent(LabelOutline).color = _this3.srtMarketView.selectedGoodsItem.labNum.node.getComponent(LabelOutline).color;
          });
        };

        _proto.onClickedTradeRecord = function onClickedTradeRecord() {
          UIManager.getInstance().openUI(MarketTradeRecordView, 13, function (ui, args) {}, undefined, null);
        };

        _proto.onClickedBuySellPrice = function onClickedBuySellPrice() {
          this.getitemsDataUsSort("Price", this.buySellOrderData.Goods, 1);
          this.setListShow(this.buySellOrderGlist, this.buySellOrderData);
        };

        _proto.onClickedBuySellNum = function onClickedBuySellNum() {
          this.getitemsDataUsSort("SumNum", this.buySellOrderData.Goods, 2);
          this.setListShow(this.buySellOrderGlist, this.buySellOrderData);
        };

        _proto.onClickedMinePrice = function onClickedMinePrice() {
          this.getitemsDataUsSort("Price", this.mineOrderData.Goods, 3);
          this.setListShow(this.mineOrderGlist, this.mineOrderData);
        };

        _proto.onClickedMineNum = function onClickedMineNum() {
          this.getitemsDataUsSort("SumNum", this.mineOrderData.Goods, 4);
          this.setListShow(this.mineOrderGlist, this.mineOrderData);
        }
        /**
         * 
         * @param sort 排序类型
         * @param node 取排序表的节点
         * @param chickIndex 按键编号
         */
        ;

        _proto.getitemsDataUsSort = function getitemsDataUsSort(sort, arr, chickIndex) {
          if (!arr || arr.length < 1) {
            return;
          }

          if (this.chickIndex == chickIndex) this.ischick = !this.ischick;else this.chickIndex = chickIndex;
          this.bubbleSort(arr, sort, this.ischick);
        }
        /**
         * 
         * @param arr 排序用的表
         * @param sort 排序类型
         * @param isup 上下排序
         */
        ;

        _proto.bubbleSort = function bubbleSort(arr, sort, isup) {
          var i = arr.length,
              j;
          var tempExchangVal;
          if (isup) while (i > 0) {
            for (j = 0; j < i - 1; j++) {
              if (arr[j][sort] < arr[j + 1][sort]) {
                tempExchangVal = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = tempExchangVal;
              }
            }

            i--;
          } else {
            while (i > 0) {
              for (j = 0; j < i - 1; j++) {
                if (arr[j][sort] > arr[j + 1][sort]) {
                  tempExchangVal = arr[j];
                  arr[j] = arr[j + 1];
                  arr[j + 1] = tempExchangVal;
                }
              }

              i--;
            }
          }
        };

        _proto.onFarmMarketGoodsListResponse = function onFarmMarketGoodsListResponse(data) {
          var Record = UIManager.getInstance().getUI(MarketTradeRecordView);

          if (Record) {
            return;
          }

          if (data.IsUser) {
            this.mineOrderData = data;
            this.setListShow(this.mineOrderGlist, this.mineOrderData);
          } else {
            this.buySellOrderData = data;
            this.setListShow(this.buySellOrderGlist, this.buySellOrderData);
          }
        };

        _proto.setListShow = function setListShow(list, data) {
          var _this4 = this;

          list.itemRenderer = function (index, item) {
            var srtMarketOrderItem = item.getComponent("MarketOrderItem");
            srtMarketOrderItem.id = data.Goods[index].Id;
            srtMarketOrderItem.type = _this4.sheet;
            srtMarketOrderItem.Price = Number(Number(data.Goods[index].Price).toFixed(4));
            srtMarketOrderItem.SumNum = data.Goods[index].SumNum;
            srtMarketOrderItem.itemModeId = data.Goods[index].ItemModeId;
            srtMarketOrderItem.srtMarketView = _this4.srtMarketView;
            srtMarketOrderItem.labPrice.string = Number(data.Goods[index].Price).toFixed(4);
            srtMarketOrderItem.labNum.string = data.Goods[index].SumNum - data.Goods[index].Num + "";
            srtMarketOrderItem.isMine = data.IsUser;
          };

          list.SetItemNum(data.Goods.length);
        };

        _proto.onFarmMarketGoodsListSumResponse = function onFarmMarketGoodsListSumResponse(data) {
          this.labBuyAveragePriceNum.string = data.SumPrice1 + "";
          this.labSellAveragePriceNum.string = data.SumPrice2 + "";
          this.labBuyAveragePriceAll.string = ConfigFile.findLanguage(106090).format(data.SumNum1);
          this.labSellAveragePriceAll.string = ConfigFile.findLanguage(106090).format(data.SumNum2); // this.labBuyAveragePrice.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_TRADE_INFO1).format(data.SumPrice1, data.SumNum1);
          // this.labSellAveragePrice.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_TRADE_INFO2).format(data.SumPrice2, data.SumNum2);

          this.mineOrderTotalNum = data.SelfNum;
        };

        _proto.refresh = function refresh() {
          if (0 == this.sheet) {
            this.onClickedBuyGoods();
          } else {
            this.onClickedSellGoods();
          }
        };

        _proto.onClickExplain = function onClickExplain() {
          this.Desc.active = !this.Desc.active;
        };

        return MarketTradeUI;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btnBuyGoods", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnSellGoods", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labTradeRecord", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "labBuyAveragePrice", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "labBuyAveragePriceNum", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "labBuyAveragePriceAll", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "labBuyAveragePriceName", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "labSellAveragePrice", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "labSellAveragePriceNum", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "labSellAveragePriceAll", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "labSellAveragePriceName", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "nodBuySellOrder", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "nodMineOrder", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "Desc", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "btnBuySell", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "pfbMarketOrderItem", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MarketView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstLanguage.ts', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './TipManager.ts', './NodeHelp.ts', './Pool.ts', './TweenHelp.ts', './UIHelp.ts', './BasePanel.ts', './BagUIItemTip.ts', './MarketGoodsItem.ts', './MarketLobbyUI.ts', './MarketTradeUI.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, Toggle, Node, ScrollView, Prefab, instantiate, Label, Widget, UIOpacity, view, sys, Color, LabelOutline, ConstLanguage, ConfigFile, GameAllData, EventManager, MessageManager, TipManager, NodeHelp, PoolOnce, TweenHelper, ETweenType, UIHelp, BasePanel, BagUIItemTip, MarketGoodsItem, MarketLobbyUI, MarketTradeUI;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Toggle = module.Toggle;
      Node = module.Node;
      ScrollView = module.ScrollView;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      Label = module.Label;
      Widget = module.Widget;
      UIOpacity = module.UIOpacity;
      view = module.view;
      sys = module.sys;
      Color = module.Color;
      LabelOutline = module.LabelOutline;
    }, function (module) {
      ConstLanguage = module.ConstLanguage;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      TweenHelper = module.TweenHelper;
      ETweenType = module.ETweenType;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      BasePanel = module.BasePanel;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }, function (module) {
      MarketGoodsItem = module.MarketGoodsItem;
    }, function (module) {
      MarketLobbyUI = module.MarketLobbyUI;
    }, function (module) {
      MarketTradeUI = module.MarketTradeUI;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _class3;

      cclegacy._RF.push({}, "8b423lLR+pFIrUOW2JXFLLo", "MarketView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Colors = ["fcf0da", "ff2b32", "41f71b"];
      var LineColors = ["984b00", "fcfcfc", "0c5903"];
      var MarketView = exports('MarketView', (_dec = ccclass('MarketView'), _dec2 = property(Toggle), _dec3 = property(Toggle), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(ScrollView), _dec7 = property(Prefab), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(MarketView, _BasePanel);

        function MarketView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;
          _this.selectedGoodsItem = null;

          _initializerDefineProperty(_this, "btnLobby", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnTrade", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodLobby", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodTrade", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrGoods", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pfbMarketGoodsItem", _descriptor6, _assertThisInitialized(_this));

          _this.Pool = new PoolOnce(30, function () {
            return instantiate(_this.pfbMarketGoodsItem);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          return _this;
        }

        var _proto = MarketView.prototype;

        _proto.onLoad = function onLoad() {
          EventManager.getInstance().add(MessageManager.Net.FarmMarketGoodsCreateResponse, this, this.onFarmMarketGoodsCreateResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmMarketGoodsBusinessResponse, this, this.onFarmMarketGoodsBusinessResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmMarketGoodsRevokeResponse, this, this.onFarmMarketGoodsRevokeResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmMarketSellResponse, this, this.onFarmMarketSellResponse); //市场

          EventManager.getInstance().add(MessageManager.Net.FarmMarketItemPriceResponse, this, this.onFarmMarketItemPriceResponse);
        };

        _proto.onDestroy = function onDestroy() {
          UIHelp.closeLoadingTA();
          EventManager.getInstance().remove(MessageManager.Net.FarmMarketGoodsCreateResponse, this, this.onFarmMarketGoodsCreateResponse);
          EventManager.getInstance().remove(MessageManager.Net.FarmMarketGoodsBusinessResponse, this, this.onFarmMarketGoodsBusinessResponse);
          EventManager.getInstance().remove(MessageManager.Net.FarmMarketGoodsRevokeResponse, this, this.onFarmMarketGoodsRevokeResponse);
          EventManager.getInstance().remove(MessageManager.Net.FarmMarketSellResponse, this, this.onFarmMarketSellResponse); //市场

          EventManager.getInstance().remove(MessageManager.Net.FarmMarketItemPriceResponse, this, this.onFarmMarketItemPriceResponse);
          BagUIItemTip.getInstance().tipDestroy();

          if (this.scrGoods.content && this.scrGoods.content.children) {
            while (this.scrGoods.content.children.length >= 1) {
              this.Pool.put(this.scrGoods.content.children[0]);
            }

            this.Pool.clear();
          }
        };

        _proto.start = function start() {
          this.node.getComponent("PlayButtonSound").play();
          NodeHelp.getchildlable(this.btnLobby.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_PANEL_TITLE2);
          });
          NodeHelp.getchildlable(this.btnTrade.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_PANEL_TITLE1);
          });
          NodeHelp.getchildlable(this.btnLobby.checkMark.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_PANEL_TITLE2);
          });
          NodeHelp.getchildlable(this.btnTrade.checkMark.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.MARKET_VIEW_PANEL_TITLE1);
          });
          this.nodLobby.getComponent(MarketLobbyUI).srtMarketView = this;
          this.nodTrade.getComponent(MarketTradeUI).srtMarketView = this;
          this.onClickedLobby(); //WebSocketMgr.send(MessageManager.Net.FarmMarketItemPriceRequest);

          UIHelp.openLoadingTA();
          this.scheduleOnce(UIHelp.closeLoadingTA, 3);
          this.setFarmMarketItemPrice(); //动画效果

          this.node.getComponent(Widget).updateAlignment();
          TweenHelper["default"](this.node.getChildByName("Panel"), ETweenType.Jelly);
          TweenHelper.getTween(this.node.getChildByName("SpriteSplash").getComponent(UIOpacity), "open", function (_tween) {
            var sartOpacity = 0;
            var opacity = 150;

            _tween.to(0, {
              opacity: sartOpacity
            }).to(0.1, {
              opacity: opacity
            });
          }).start();
          this.setSafe();
        };

        _proto.setSafe = function setSafe() {
          var visibleSize = view.getVisibleSize();
          var safeArea = sys.getSafeAreaRect();
          NodeHelp.getchildlable(this.node, "Sheet", Widget, function (comp, node) {
            comp.left = safeArea.x - comp.left <= 0 ? comp.left : safeArea.x - comp.left;
            comp.updateAlignment();
          });
        };

        _proto.onClickedClose = function onClickedClose(anction) {
          if (anction === void 0) {
            anction = true;
          }

          _BasePanel.prototype.onClickedClose.call(this, anction);

          this.node.getChildByName("SpriteSplash").getComponent(UIOpacity).opacity = 0;
        };

        _proto.onClickedLobby = function onClickedLobby() {
          this.nodLobby.active = true;
          this.nodTrade.active = false;
          this.nodLobby.getComponent(MarketLobbyUI).srtMarketView = this;
        };

        _proto.onClickedTrade = function onClickedTrade() {
          this.nodLobby.active = false;
          this.nodTrade.active = true;
          this.nodTrade.getComponent(MarketTradeUI).onClickedBuyGoods();
        };

        _proto.onFarmMarketItemPriceResponse = function onFarmMarketItemPriceResponse(data) {
          GameAllData.FarmMarketItemPriceResponse = data;
          console.log("市场价格返回----------");

          while (this.scrGoods.content.children.length >= 1) {
            this.Pool.put(this.scrGoods.content.children[0]);
          }

          this.Pool.clear();
          this.setFarmMarketItemPrice();
        };

        _proto.setFarmMarketItemPrice = function setFarmMarketItemPrice() {
          var data = GameAllData.FarmMarketItemPriceResponse;

          for (var _iterator = _createForOfIteratorHelperLoose(data.Item), _step; !(_step = _iterator()).done;) {
            var itr = _step.value; // const nodMarketGoodsItem = instantiate(this.pfbMarketGoodsItem);

            var nodMarketGoodsItem = this.Pool.get();
            nodMarketGoodsItem.parent = this.scrGoods.content;
            var srtMarketGoodsItem = nodMarketGoodsItem.getComponent(MarketGoodsItem);
            srtMarketGoodsItem.srtMarketView = this;
            srtMarketGoodsItem.id = itr.ItemModeId;
            srtMarketGoodsItem.labNum.string = "" + itr.Price;
            srtMarketGoodsItem.clickLabNum.string = "" + itr.Price;
            srtMarketGoodsItem.priceModeId = "" + (itr.PriceModeId || -2);
            srtMarketGoodsItem.colorNum = itr.Number || 0;
            srtMarketGoodsItem.labNum.color = new Color().fromHEX(Colors[srtMarketGoodsItem.colorNum]);
            srtMarketGoodsItem.labNum.node.getComponent(LabelOutline).color = new Color().fromHEX(LineColors[srtMarketGoodsItem.colorNum]);
            srtMarketGoodsItem.clickLabNum.color = srtMarketGoodsItem.labNum.color;
            srtMarketGoodsItem.clickLabNum.node.getComponent(LabelOutline).color = srtMarketGoodsItem.labNum.node.getComponent(LabelOutline).color;
          }

          var item = this.scrGoods.content.children[0];
          item && item.getComponent(MarketGoodsItem).onClicked();
        };

        _proto.onFarmMarketGoodsCreateResponse = function onFarmMarketGoodsCreateResponse(data) {
          if (0 == data.Code) {
            TipManager.TipFromCode(ConstLanguage.MARKET_VIEW_CURRENCY_TIPS1);
          }

          this.nodTrade.getComponent(MarketTradeUI).refresh();
        };

        _proto.onFarmMarketGoodsBusinessResponse = function onFarmMarketGoodsBusinessResponse(data) {
          if (0 == data.Code) {
            if (data.Status == "buy") TipManager.TipFromCode(ConstLanguage.MARKET_VIEW_CURRENCY_TIPS3);else TipManager.TipFromCode(ConstLanguage.MARKET_VIEW_CURRENCY_TIPS5);
          }

          this.nodTrade.getComponent(MarketTradeUI).refresh();
          this.selectedGoodsItem.onClicked();
        };

        _proto.onFarmMarketGoodsRevokeResponse = function onFarmMarketGoodsRevokeResponse(data) {
          if (0 == data.Code) {
            TipManager.TipFromCode(ConstLanguage.MARKET_VIEW_CURRENCY_TIPS7);
          }

          this.nodTrade.getComponent(MarketTradeUI).refresh();
        };

        _proto.onFarmMarketSellResponse = function onFarmMarketSellResponse(data) {
          if (0 == data.Code) {
            TipManager.TipFromCode(ConstLanguage.MARKET_VIEW_CURRENCY_TIPS5);
          }

          this.selectedGoodsItem.onClicked();
        };

        return MarketView;
      }(BasePanel), _class3.className = "MarketView", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btnLobby", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnTrade", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nodLobby", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "nodTrade", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "scrGoods", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "pfbMarketGoodsItem", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MessageBox.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseUI.ts', './UIManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, RichText, Node, Input, BaseUI, UIManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      RichText = module.RichText;
      Node = module.Node;
      Input = module.Input;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      UIManager = module.UIManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _class3;

      cclegacy._RF.push({}, "f66d8LWctFMdo925PFz17nC", "MessageBox", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MessageBox = exports('MessageBox', (_dec = ccclass('MessageBox'), _dec2 = property(RichText), _dec3 = property(Node), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(MessageBox, _BaseUI);

        function MessageBox() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;
          _this._cbData = null;
          _this._cb = null;

          _initializerDefineProperty(_this, "Text", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maskNode", _descriptor2, _assertThisInitialized(_this));

          _this._isOk = false;
          return _this;
        }

        var _proto = MessageBox.prototype;

        _proto.start = function start() {
          this.maskNode.on(Input.EventType.TOUCH_START, this.onBeginTouch.bind(this));
          this.maskNode.on(Input.EventType.TOUCH_MOVE, this.onMoveTouch.bind(this));
          this.maskNode.on(Input.EventType.TOUCH_END, this.onStopTouch.bind(this));
          this.maskNode.on(Input.EventType.TOUCH_CANCEL, this.onStopTouch.bind(this));
        };

        _proto.onDestroy = function onDestroy() {
          this._cb && this._cb(this._cbData, this._isOk);
        };

        _proto.initUI = function initUI(text, cbData, cb) {
          this._cbData = cbData;
          this._cb = cb;
          this.Text.string = text;
        };

        _proto.onClose = function onClose() {
          this._isOk = false;
          UIManager.getInstance().closeUI(MessageBox);
        };

        _proto.onOK = function onOK() {
          this._isOk = true;
          UIManager.getInstance().closeUI(MessageBox);
        };

        _proto.onBeginTouch = function onBeginTouch(event) {};

        _proto.onMoveTouch = function onMoveTouch(event) {};

        _proto.onStopTouch = function onStopTouch(event) {};

        return MessageBox;
      }(BaseUI), _class3.className = "MessageBox", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Text", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "maskNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MessageBoxD.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseUI.ts', './UIManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, RichText, Input, BaseUI, UIManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      RichText = module.RichText;
      Input = module.Input;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      UIManager = module.UIManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _class3;

      cclegacy._RF.push({}, "040378AevpN14wnJwxkgCa0", "MessageBoxD", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MessageBoxD = exports('MessageBoxD', (_dec = ccclass('MessageBoxD'), _dec2 = property(Node), _dec3 = property(RichText), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(MessageBoxD, _BaseUI);

        function MessageBoxD() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;
          _this._cbData = null;
          _this._cb = null;

          _initializerDefineProperty(_this, "maskNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Text", _descriptor2, _assertThisInitialized(_this));

          _this._isOk = false;
          return _this;
        }

        var _proto = MessageBoxD.prototype;

        _proto.start = function start() {
          this.maskNode.on(Input.EventType.TOUCH_START, this.onBeginTouch.bind(this));
          this.maskNode.on(Input.EventType.TOUCH_MOVE, this.onMoveTouch.bind(this));
          this.maskNode.on(Input.EventType.TOUCH_END, this.onStopTouch.bind(this));
          this.maskNode.on(Input.EventType.TOUCH_CANCEL, this.onStopTouch.bind(this));
        };

        _proto.onDestroy = function onDestroy() {
          this._cb && this._cb(this._cbData, this._isOk);
        };

        _proto.initUI = function initUI(text, cbData, cb) {
          this._cbData = cbData;
          this._cb = cb;
          this.Text.string = text;
        };

        _proto.onClose = function onClose() {
          this._isOk = false;
          UIManager.getInstance().closeUI(MessageBoxD);
        };

        _proto.onOK = function onOK() {
          this._isOk = true;
          UIManager.getInstance().closeUI(MessageBoxD);
        };

        _proto.onBeginTouch = function onBeginTouch(event) {};

        _proto.onMoveTouch = function onMoveTouch(event) {};

        _proto.onStopTouch = function onStopTouch(event) {};

        return MessageBoxD;
      }(BaseUI), _class3.className = "MessageBoxD", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "maskNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Text", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MessageManager.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      exports('MessageManager', void 0);

      cclegacy._RF.push({}, "55c3337FxROqI3iYcFDYvFE", "MessageManager", undefined);

      var MessageManager;

      (function (_MessageManager) {
        var Net = _MessageManager.Net = {
          GameMessageRequest: "GameMessageRequest",
          //消息id请求
          GameMessageResponse: "GameMessageResponse",
          //消息id返回
          GameLoginRequest: "GameLoginRequest",
          //登录请求
          GameLoginResponse: "GameLoginResponse",
          //登录请求返回
          GameRegisterRequest: "GameRegisterRequest",
          //注册请求
          GameRegisterResponse: "GameRegisterResponse",
          //注册返回
          GamePlanConfigureResponse: "GamePlanConfigureResponse",
          //配置表信息返回
          GameHeartRequest: "GameHeartRequest",
          GameHeartResponse: "GameHeartResponse",
          //服务器心跳
          FarmCloudMessageRequest: "FarmCloudMessageRequest",
          //推送服务
          //
          FarmInitializationRequest: "FarmInitializationRequest",
          //请求场景初始化
          FarmInitializationResponse: "FarmInitializationResponse",
          //场景初始化返回
          FarmInitialization0Request: "FarmInitialization0Request",
          FarmInitialization0Response: "FarmInitialization0Response",
          //
          FarmLandUnlockRequest: "FarmLandUnlockRequest",
          //土地解锁
          FarmPastureUnlockRequest: "FarmPastureUnlockRequest",
          FarmLandUnlockResponse: "FarmLandUnlockResponse",
          FarmPastureUnlockResponse: "FarmPastureUnlockResponse",
          FarmLandUpgradeRequest: "FarmLandUpgradeRequest",
          //土地升级
          FarmPastureUpgradeRequest: "FarmPastureUpgradeRequest",
          FarmLandUpgradeResponse: "FarmLandUpgradeResponse",
          FarmPastureUpgradeResponse: "FarmPastureUpgradeResponse",
          FarmPastureTroughUpgradeRequest: "FarmPastureTroughUpgradeRequest",
          FarmPastureTroughUpgradeResponse: "FarmPastureTroughUpgradeResponse",
          FarmLandPlantRequest: "FarmLandPlantRequest",
          //种植
          FarmLandPlantResponse: "FarmLandPlantResponse",
          FarmLandBreedRequest: "FarmLandBreedRequest",
          //养殖
          FarmLandBreedResponse: "FarmLandBreedResponse",
          FarmHarvestPlantRequest: "FarmLandHarvestRequest",
          //收割 
          FarmLandHarvestResponse: "FarmLandHarvestResponse",
          FarmLandAnimalActionRequest: "FarmLandAnimalActionRequest",
          FarmLandAnimalActionResponse: "FarmLandAnimalActionResponse",
          FarmLandEradicateRequest: "FarmLandEradicateRequest",
          //铲除
          FarmLandEradicateResponse: "FarmLandEradicateResponse",
          FarmLandWateringRequest: "FarmLandWateringRequest",
          //浇水
          FarmLandWateringResponse: "FarmLandWateringResponse",
          FarmLandInsectRequest: "FarmLandInsectRequest",
          //杀虫
          FarmLandInsectResponse: "FarmLandInsectResponse",
          FarmLandAnimalCollectResponse: "FarmLandAnimalCollectResponse",
          FarmLandAnimalCollectRequest: "FarmLandAnimalCollectRequest",
          FarmLandAnimalBuryRequest: "FarmLandAnimalBuryRequest",
          //牧场铲除
          FarmLandAnimalBuryResponse: "FarmLandAnimalBuryResponse",
          FarmAnimalFeedCostResponse: "FarmAnimalFeedCostResponse",
          FarmUserResponse: "FarmUserResponse",
          //场景中的人物数据
          FarmVisitUserResponse: "FarmVisitUserResponse",
          //参观的用户
          FarmLandResponse: "FarmLandResponse",
          //农场数据
          FarmPastureResponse: "FarmPastureResponse",
          //牧场数据
          FarmVisitRequest: "FarmVisitRequest",
          //拜访玩家请求
          FarmVisitResponse: "FarmVisitResponse",
          //拜访玩家返回
          FarmVisitBackRequest: "FarmVisitBackRequest",
          //拜访返回请求
          FarmVisitBackResponse: "FarmVisitBackResponse",
          //拜访返回返回
          FarmVisitStealPlantRequest: "FarmVisitStealPlantRequest",
          FarmVisitStealPlantResponse: "FarmVisitStealPlantResponse",
          FarmVisitStealAnimalRequest: "FarmVisitStealAnimalRequest",
          FarmVisitStealAnimalResponse: "FarmVisitStealAnimalResponse",
          FarmVisitPlantActionRequest: "FarmVisitPlantActionRequest",
          FarmVisitPlantActionResponse: "FarmVisitPlantActionResponse",
          FarmVisitAnimalActionRequest: "FarmVisitAnimalActionRequest",
          FarmVisitAnimalActionResponse: "FarmVisitAnimalActionResponse",
          FarmVisitHearRequest: "FarmVisitHearRequest",
          FarmVisitHearResponse: "FarmVisitHearResponse",
          FarmSendHeartResponse: "FarmSendHeartResponse",
          FarmVipChangeResponse: "FarmVipChangeResponse",
          FarmRankChangeResponse: "FarmRankChangeResponse",
          FarmStatueResponse: "FarmStatueResponse",
          FarmHouseResponse: "FarmHouseResponse",
          FarmHouseLevelUpRequest: "FarmHouseLevelUpRequest",
          FarmHouseLevelUpResponse: "FarmHouseLevelUpResponse",
          FarmHouseNameChangeRequest: "FarmHouseNameChangeRequest",
          FarmHouseNameChangeResponse: "FarmHouseNameChangeResponse",
          FarmSelectNewRoleRequest: "FarmSelectNewRoleRequest",
          FarmSelectNewRoleResponse: "FarmSelectNewRoleResponse",
          //
          FarmStoreResponse: "FarmStoreResponse",
          //玩家仓库信息
          FarmItemChangeResponse: "FarmItemChangeResponse",
          //玩家道具更改
          FarmCurrencyChangeResponse: "FarmCurrencyChangeResponse",
          //玩家货币更改
          FarmCommissionsGetRequest: "FarmCommissionsGetRequest",
          //佣金提取请求
          FarmCommissionsGetResponse: "FarmCommissionsGetResponse",
          //佣金提取响应
          //市场
          FarmMarketItemPriceRequest: "FarmMarketItemPriceRequest",
          //市场道具价格请求
          FarmMarketItemPriceResponse: "FarmMarketItemPriceResponse",
          //市场道具价格返回
          FarmMarketSellRequest: "FarmMarketSellRequest",
          //商品出售请求
          FarmMarketSellResponse: "FarmMarketSellResponse",
          //商品出售返回
          FarmMarketKListRequest: "FarmMarketKListRequest",
          //市场K线图列表请求
          FarmMarketKListResponse: "FarmMarketKListResponse",
          //市场K线图列表返回
          FarmMarketGoodsListRequest: "FarmMarketGoodsListRequest",
          //商品列表请求
          FarmMarketGoodsListResponse: "FarmMarketGoodsListResponse",
          //商品列表返回
          FarmMarketGoodsListSumRequest: "FarmMarketGoodsListSumRequest",
          //商品列表统计请求
          FarmMarketGoodsListSumResponse: "FarmMarketGoodsListSumResponse",
          //商品列表统计返回
          FarmMarketGoodsCreateRequest: "FarmMarketGoodsCreateRequest",
          //商品创建请求
          FarmMarketGoodsCreateResponse: "FarmMarketGoodsCreateResponse",
          //商品创建返回
          FarmMarketGoodsRevokeRequest: "FarmMarketGoodsRevokeRequest",
          //商品撤销请求
          FarmMarketGoodsRevokeResponse: "FarmMarketGoodsRevokeResponse",
          //商品撤销返回
          FarmMarketGoodsBusinessRequest: "FarmMarketGoodsBusinessRequest",
          //商品买卖请求
          FarmMarketGoodsBusinessResponse: "FarmMarketGoodsBusinessResponse",
          //商品买卖返回
          FarmMarketOrderListRequest: "FarmMarketOrderListRequest",
          //订单请求
          FarmMarketOrderListResponse: "FarmMarketOrderListResponse",
          //订单返回
          FarmBuyItemRequest: "FarmBuyItemRequest",
          //购买请求
          FarmBuyItemResponse: "FarmBuyItemResponse",
          //购买返回
          //家族、业绩
          FarmFamilyTeamListRequest: "FarmFamilyTeamListRequest",
          //家族团队列表
          FarmFamilyTeamListResponse: "FarmFamilyTeamListResponse",
          //家族团队列表返回
          FarmFamilyTeamCountRequest: "FarmFamilyTeamCountRequest",
          //家族团队列表
          FarmFamilyTeamCountResponse: "FarmFamilyTeamCountResponse",
          //家族团队列表返回
          FarmFamilyTeamAchievementCountRequest: "FarmFamilyTeamAchievementCountRequest",
          //家族业绩请求
          FarmFamilyTeamAchievementCountResponse: "FarmFamilyTeamAchievementCountResponse",
          //家族业绩返回
          FarmFamilyTeamAchievementListRequest: "FarmFamilyTeamAchievementListRequest",
          //家族业绩列表请求
          FarmFamilyTeamAchievementListResponse: "FarmFamilyTeamAchievementListResponse",
          //家族业绩列表返回
          //
          FarmFillInvitationCodeRequest: "FarmFillInvitationCodeRequest",
          //填写邀请码请求
          FarmFillInvitationCodeResponse: "FarmFillInvitationCodeResponse",
          //填写邀请码返回
          //
          UserRechargeAddressRequest: "UserRechargeAddressRequest",
          UserRechargeAddressResponse: "UserRechargeAddressResponse",
          FarmGoldExchangeRequest: "FarmGoldExchangeRequest",
          FarmGoldExchangeResponse: "FarmGoldExchangeResponse",
          FarmNewGuideRequest: "FarmNewGuideRequest",
          FarmNewGuideResponse: "FarmNewGuideResponse",
          //
          //RandomQuestionResponse: "AnswerSystemRandomQuestionResponse",
          //FarmAnswerSystemCheckAnswerRequest: "FarmAnswerSystemCheckAnswerRequest",
          //FarmAnswerSystemCheckAnswerResponse: "FarmAnswerSystemCheckAnswerResponse",
          //FarmAnswerSystemInitializationRequest: "FarmAnswerSystemInitializationRequest",
          //
          FarmAuthingResponse: "FarmAuthingResponse",
          //打开答题验证
          FarmAuthRequest: "FarmAuthRequest",
          //答题验证选择完成请求
          FarmAuthResponse: "FarmAuthResponse",
          //答题验证选择返回
          FarmAuthRefreshRequest: "FarmAuthRefreshRequest",
          //答题刷新请求
          FarmAuthRefreshResponse: "FarmAuthRefreshResponse",
          //答题刷新返回
          FarmGmRequest: "FarmGmRequest",
          //gm发送
          //
          FarmGmResponse: "FarmGmResponse",
          //gm接受
          FarmMailListResponse: "FarmMailListResponse",
          //上线邮件同步响应接收
          FarmMailAddResponse: "FarmMailAddResponse",
          //添加邮件接收
          FarmMailReceiveRequest: "FarmMailReceiveRequest",
          //批量领取邮件请求
          FarmMailReceiveResponse: "FarmMailReceiveResponse",
          //批量领取邮件响应
          FarmMailDeleteRequest: "FarmMailDeleteRequest",
          //批量删除邮件请求
          FarmMailDeleteResponse: "FarmMailDeleteResponse",
          //批量删除邮件响应
          FarmMailReadRequest: "FarmMailReadRequest",
          //批量阅读邮件请求
          FarmMailReadResponse: "FarmMailReadResponse",
          //批量阅读邮件返回
          //
          FarmSelectHeadPortraitRequest: "FarmSelectHeadPortraitRequest",
          //选取头像请求
          FarmSelectHeadPortraitResponse: "FarmSelectHeadPortraitResponse",
          //选取头像响应
          //
          FarmTaskListResponse: "FarmTaskListResponse",
          //任务同步
          FarmTaskUpdateResponse: "FarmTaskUpdateResponse",
          //任务改变
          //
          FarmTaskTalkRequest: "FarmTaskTalkRequest",
          //任务对话完成
          FarmTaskTalkResponse: "FarmTaskTalkResponse",
          //任务对话返回
          //
          FarmActivityListResponse: "FarmActivityListResponse",
          //活动上线同步
          FarmActivityReadRequest: "FarmActivityReadRequest",
          FarmActivityReadResponse: "FarmActivityReadResponse",
          FarmActivityGetRequest: "FarmActivityGetRequest",
          FarmActivityGetResponse: "FarmActivityGetResponse",
          FarmSignRequest: "FarmSignRequest",
          FarmSignResponse: "FarmSignResponse",
          FarmActivityBeeRequest: "FarmActivityBeeRequest",
          FarmActivityBeeResponse: "FarmActivityBeeResponse",
          FarmActivityAddResponse: "FarmActivityAddResponse",
          FarmActivityEndResponse: "FarmActivityEndResponse",
          FarmActivityUpdateResponse: "FarmActivityUpdateResponse",
          FarmActivityRankRequest: "FarmActivityRankRequest",
          FarmActivityRankResponse: "FarmActivityRankResponse",
          FarmTransferRequest: "FarmTransferRequest",
          //请求转账
          FarmTransferResponse: "FarmTransferResponse",
          OrderTransferLogRequest: "OrderTransferLogRequest",
          //转账记录
          OrderTransferLogResponse: "OrderTransferLogResponse",
          //转账记录
          FarmTaskShareSuccessRequest: "FarmTaskShareSuccessRequest",
          //分享成功
          FarmTaskShareSuccessResponse: "FarmTaskShareSuccessResponse",
          FarmTaskFinishRequest: "FarmTaskFinishRequest",
          FarmTaskFinishResponse: "FarmTaskFinishResponse",
          FarmChangeLanguageRequest: "FarmChangeLanguageRequest",
          //请求语言切换
          FarmClientActionRequest: "FarmClientActionRequest" //玩家操作 1：打开市场

        };
        var Custom = _MessageManager.Custom = {
          RequestLogin: "RequestLogin",
          ConnectWebSocket: "ConnectWebSocket",
          ReConnectWebSocket: "ReConnectWebSocket",
          WebSocketOnOpen: "WebSocketOnOpen",
          WebSocketOnClose: "WebSocketOnClose",
          WebSocketOnError: "WebSocketOnError",
          //
          StartLaunchLogic: "StartLaunchLogic",
          UpdateTMessageInfo: "UpdateTMessageInfo",
          ThirdPartyLoginSuccess: "ThirdPartyLoginSuccess",
          SelectedAreaCode: "SelectedAreaCode",
          //
          StartGame: "StartGame",
          PropOnChange: "PropOnChange",
          UseItem: "UseItem",
          OpenHand: "OpenHand",
          ScaleChange: "ScaleChange",
          OpenOperaleBtn: "OpenOperaleBtn",
          ShowFarmTip: "ShowFarmTip",
          HideFarmTip: "HideFarmTip",
          ShowSeedTip: "ShowSeedTip",
          HideSeedTip: "HideSeedTip",
          ShowToolsView: "ShowToolsView",
          ShowLandEnable: "ShowLandEnable",
          ShowExceptionView: "ShowExceptionView",
          FarmTipInfoUpdate: "FarmTipInfoUpdate",
          UserDataChange: "UserDataChange",
          HouseDataChange: "HouseDataChange",
          SelectSeedHide: "SelectSeedHide",
          TOUCHSTART: "TOUCHSTART",
          TOUCHMOVE: "TOUCHMOVE",
          TOUCHEND: "TOUCHEND",
          FarmMailList: "FarmMailList",
          FarmMailGetRes: "FarmMailGetRes",
          TASKEVENT: "TASKEVENT",
          HOUSEEXPEVENT: "HOUSEEXPEVENT",
          BAGITEMEVENT: "BAGITEMEVENT",
          NETRECONNECT: "NETRECONNECT",
          UPDATEADDRESS: "UPDATEADDRESS",
          SELECTADDRESS: "SELECTADDRESS",
          //
          NETERROR: "NETERROR",
          NETERROR1: "NETERROR1",
          UPDATATASKDATA: "UPDATATASKDATA",
          QuestionCheck: "QuestionCheck",
          //
          VipOrRankChange: "VipChange",
          OterVipOrRankChange: "OterVipOrRankChange",
          //
          HeadOnChange: "HeadOnChange",
          OterHeadOnChange: "OterHeadOnChange",
          //
          ShopChange: "ShopChange",
          //
          RedDotChange: "redDotChange",
          //
          TaskChange: "taskChange",
          //
          TaskTalkChange: "TaskTalkChange",
          //
          TaskIn: "TaskIn",
          //
          ActivityChange: "ActivityChange",
          SignChange: "SignChange",
          ActivityGet: "ActivityGet",
          ActivityGetofPanel: "ActivityGetofPanel",
          ActivityInfoChange: "ActivityInfoChange"
        };
      })(MessageManager || (MessageManager = exports('MessageManager', {})));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/mewconnect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, cclegacy, getChainId;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      getChainId = module.getChainId;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0592c7bGtpHtIpYZ/P/iIKr", "mewconnect", undefined);

      var ConnectToMewConnect = exports('default', function ConnectToMewConnect(MewConnectProvider, opts) {
        return new Promise( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
          var infuraId, rpc, chainId, mewConnect, provider, address;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  infuraId = "";
                  rpc = undefined;
                  chainId = 1;

                  if (opts) {
                    infuraId = opts.infuraId || "";
                    rpc = opts.rpc || undefined;

                    if (opts.infuraId && !rpc) {
                      rpc = "wss://mainnet.infura.io/ws/v3/" + infuraId;
                    }

                    chainId = opts.network && getChainId(opts.network) ? getChainId(opts.network) : 1;
                  }

                  if (MewConnectProvider.Provider.isConnected) {
                    _context.next = 19;
                    break;
                  }

                  mewConnect = new MewConnectProvider.Provider();
                  provider = mewConnect.makeWeb3Provider(chainId, rpc, true);
                  mewConnect.on('disconnected', function () {});
                  _context.prev = 8;
                  _context.next = 11;
                  return mewConnect.enable();

                case 11:
                  address = _context.sent;
                  console.log(address); // todo remove dev item

                  resolve(provider);
                  _context.next = 19;
                  break;

                case 16:
                  _context.prev = 16;
                  _context.t0 = _context["catch"](8);
                  reject(_context.t0);

                case 19:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[8, 16]]);
        })));
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Modal.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _extends, _asyncToGenerator, _regeneratorRuntime, cclegacy;

  return {
    setters: [function (module) {
      _extends = module.extends;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4f9dftQpS9Cs6vls8J93dgL", "Modal", undefined);

      var INITIAL_STATE = {
        show: false,
        lightboxOffset: 0
      };
      var Modal = exports('Modal', /*#__PURE__*/function () {
        function Modal(props) {
          this.lightboxRef = void 0;
          this.mainModalCard = void 0;
          this.state = _extends({}, INITIAL_STATE); //super(props);

          window.updateWeb3Modal = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(state) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));
        }

        var _proto = Modal.prototype;

        _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
          if (prevState.show && !this.state.show) ;

          if (this.lightboxRef) {
            var lightboxRect = this.lightboxRef.getBoundingClientRect();
            var lightboxOffset = lightboxRect.top > 0 ? lightboxRect.top : 0;
            if (lightboxOffset !== INITIAL_STATE.lightboxOffset && lightboxOffset !== this.state.lightboxOffset) ;
          }
        } // public render(){
        //   const { show, lightboxOffset } = this.state;
        //   const { onClose, lightboxOpacity, userOptions, themeColors } = this.props;
        //   return (
        //   //   <SLightbox
        //   //     className={MODAL_LIGHTBOX_CLASSNAME}
        //   //     offset={lightboxOffset}
        //   //     opacity={lightboxOpacity}
        //   //     ref={c => (this.lightboxRef = c)}
        //   //     show={show}
        //   //   >
        //   //     <SModalContainer className={MODAL_CONTAINER_CLASSNAME} show={show}>
        //   //       <SHitbox className={MODAL_HITBOX_CLASSNAME} onClick={onClose} />
        //   //       <SModalCard
        //   //         className={MODAL_CARD_CLASSNAME}
        //   //         show={show}
        //   //         themeColors={themeColors}
        //   //         maxWidth={userOptions.length < 3 ? 500 : 800}
        //   //         ref={c => (this.mainModalCard = c)}
        //   //       >
        //   //         {userOptions.map(provider =>
        //   //           !!provider ? (
        //   //             <Provider
        //   //               name={provider.name}
        //   //               logo={provider.logo}
        //   //               description={provider.description}
        //   //               themeColors={themeColors}
        //   //               onClick={provider.onClick}
        //   //             />
        //   //           ) : null
        //   //         )}
        //   //       </SModalCard>
        //   //     </SModalContainer>
        //   //   </SLightbox>
        //   // );
        // }
        ;

        return Modal;
      }());
      Modal.propTypes = {// userOptions: PropTypes.object.isRequired,
        // onClose: PropTypes.func.isRequired,
        // resetState: PropTypes.func.isRequired,
        // lightboxOpacity: PropTypes.number.isRequired
      };

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NameInput.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './BaseUI.ts', './UIManager.ts', './TipManager.ts', './NumberUtil.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, EditBox, Node, Label, Input, ConfigFile, BaseUI, UIManager, TipManager, NumberUtil;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      EditBox = module.EditBox;
      Node = module.Node;
      Label = module.Label;
      Input = module.Input;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _class3;

      cclegacy._RF.push({}, "c1fbfw5OH5ArKJ1hNK0N2D5", "NameInput", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NameInput = exports('NameInput', (_dec = ccclass('NameInput'), _dec2 = property(EditBox), _dec3 = property(Node), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(NameInput, _BaseUI);

        function NameInput() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "editBox", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bg", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnText", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "titleLabel", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "showsLab", _descriptor5, _assertThisInitialized(_this));

          _this._cbData = null;
          _this._cb = null;
          _this._outName = null;
          return _this;
        }

        var _proto = NameInput.prototype;

        _proto.start = function start() {
          this.bg.on(Input.EventType.TOUCH_START, this.onBeginTouch.bind(this));
          this.btnText.string = ConfigFile.findLanguage(120054);
          this.titleLabel.string = ConfigFile.findLanguage(120061);
          this.showsLab.string = ConfigFile.findLanguage(120062);
          this.editBox.placeholder = ConfigFile.findLanguage(120063);
        };

        _proto.onDestroy = function onDestroy() {
          this._cb && this._cb(this._cbData, this._outName);
        };

        _proto.initUI = function initUI(text, cbData, cb) {
          this._cbData = cbData;
          this._cb = cb; // this.editBox.string = ConfigFile.findLanguage(120063);
        };

        _proto.onBeginTouch = function onBeginTouch(event) {// this.editBox.string = "";
        };

        _proto.onClick = function onClick() {
          this._outName = this.editBox.string;

          if (/\s/.test(this._outName)) {
            TipManager.TipFromCode(120059);
          } else if (this._outName.length >= 4) {
            UIManager.getInstance().closeUI(NameInput);
          } else {
            TipManager.TipFromCode(120050);
          }
        };

        _proto.onInputChange = function onInputChange() {
          // var pattern = /^[\u4e00-\u9fa5]{0,}$/;
          // if(pattern.test(this.editBox.string)){
          //     var leng = this.editBox.string.length;
          //     var str = this.editBox.string.slice(0,leng-1);
          //     this.editBox.string = str;
          // }
          var str = NumberUtil.stringRemoveChinese(this.editBox.string);
          this.editBox.string = str;
        };

        _proto.onInputEnd = function onInputEnd() {
          // var pattern = /^[\u4e00-\u9fa5]{0,}$/;
          // if(pattern.test(this.editBox.string)){
          //     var leng = this.editBox.string.length;
          //     var str = this.editBox.string.slice(0,leng-1);
          //     this.editBox.string = str;
          // }
          var str = NumberUtil.stringRemoveChinese(this.editBox.string);
          this.editBox.string = str;
        };

        _proto.onClickClose = function onClickClose() {
          this._cb = null;
          UIManager.getInstance().closeUI(NameInput);
        };

        return NameInput;
      }(BaseUI), _class3.className = "NameInput", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "editBox", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bg", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btnText", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "titleLabel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "showsLab", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/newUnlockItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './NodeHelp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, RichText, UITransform, Vec3, Component, NodeHelp;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      RichText = module.RichText;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "69cf89zKgZPoodCekVjo6nR", "newUnlockItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var newUnlockItem = exports('newUnlockItem', (_dec = ccclass('newUnlockItem'), _dec2 = property(Sprite), _dec3 = property(RichText), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(newUnlockItem, _Component);

        function newUnlockItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "icon", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Text", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = newUnlockItem.prototype;

        _proto.start = function start() {};

        _proto.setScopeLimitation = function setScopeLimitation(ui, sizew, sizeh) {
          var scale = 1;
          var scaleH = 1;
          var scaleW = 1;
          if (sizew && ui.width > sizew) scaleW = sizew / ui.width;
          if (sizeh && ui.height > sizeh) scaleH = sizeh / ui.height;
          scale = scaleW < scaleH ? scaleW : scaleH;
          return scale;
        };

        _proto.initUI = function initUI(value, select) {
          var _this2 = this;

          var self = this;

          if (select.getType() == "fameland") {
            NodeHelp.loadIcon("propIcon/itemicon", value.BotanySeedId.toString(), function (res) {
              self.icon.spriteFrame = res;

              var scale = _this2.setScopeLimitation(self.icon.node.getComponent(UITransform), 100, 100);

              self.icon.node.setScale(new Vec3(scale, scale, 1));
            });
          } else if (select.getType() == "pasture") {
            NodeHelp.loadIcon("propIcon/itemicon", value.AnimalCubId.toString(), function (res) {
              self.icon.spriteFrame = res;

              var scale = _this2.setScopeLimitation(self.icon.node.getComponent(UITransform), 100, 100);

              self.icon.node.setScale(new Vec3(scale, scale, 1));
            });
          }
        };

        return newUnlockItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "icon", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Text", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NodeHelp.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _createForOfIteratorHelperLoose, cclegacy, Layout, resources, SpriteFrame, SpriteAtlas;

  return {
    setters: [function (module) {
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Layout = module.Layout;
      resources = module.resources;
      SpriteFrame = module.SpriteFrame;
      SpriteAtlas = module.SpriteAtlas;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a04b6FPR+ZFyKzygOrtEgxc", "NodeHelp", undefined);

      var NodeHelp = exports('NodeHelp', /*#__PURE__*/function () {
        function NodeHelp() {}
        /**
             * 找到传入的名字的节点下的第一个传入的组件类型的组件
             * 开始查找的节点
             * @param node 
             * 需要找到的节点名
             * @param name 
             * 需要找的的组件类型（脚本组件请用字符串防止循环引用）如不传则使用node
             * @param comp 
             * 找到组件的回调函数
             * @param cb 
             * 返回找到的组件
             * @returns 
             */


        NodeHelp.getchildlable = function getchildlable(node, name, comp, cb) {
          var getNode = function getNode(v) {
            if (v.name == name) return v;else if (v.children) {
              for (var _iterator = _createForOfIteratorHelperLoose(v.children), _step; !(_step = _iterator()).done;) {
                var child = _step.value;
                node = getNode(child);
                if (node) return node;
              }
            }
            return null;
          };

          var getT = function getT(v) {
            var lab = v.getComponent(comp);
            if (lab) return lab;else if (v.children) {
              for (var _iterator2 = _createForOfIteratorHelperLoose(v.children), _step2; !(_step2 = _iterator2()).done;) {
                var child = _step2.value;

                var _lab = getT(child);

                if (_lab) return _lab;
              }
            }
            return null;
          };

          var _node = node.getChildByName(name);

          if (!_node) {
            _node = getNode(node);

            if (!_node) {
              return null;
            }
          }

          if (!comp) {
            if (_node && cb) cb(null, _node);
            return _node;
          } else {
            var lab = _node.getComponent(comp);

            if (!lab) {
              lab = getT(_node);
            }

            if (lab && cb) cb(lab, _node);
            return lab;
          }
        }
        /**
             * 限制大小
             * @param rect 纹理矩形区域
             * @param sizew  限制宽度
             * @param sizeh  限制高度
             * @returns 
             */
        ;

        NodeHelp.setScopeLimitationByRect = function setScopeLimitationByRect(rect, sizew, sizeh) {
          var scale = 1;
          var scaleH = 1;
          var scaleW = 1;
          if (sizew && rect.width > sizew) scaleW = sizew / rect.width;
          if (sizeh && rect.height > sizeh) scaleH = sizeh / rect.height;
          scale = scaleW < scaleH ? scaleW : scaleH;
          return scale;
        }
        /**
         * 限制大小
         * @param ui 节点的UITransform
         * @param sizew  限制宽度
         * @param sizeh  限制高度
         * @returns 
         */
        ;

        NodeHelp.setScopeLimitation = function setScopeLimitation(ui, sizew, sizeh) {
          var scale = 1;
          var scaleH = 1;
          var scaleW = 1;
          if (sizew && ui.width > sizew) scaleW = sizew / ui.width;
          if (sizeh && ui.height > sizeh) scaleH = sizeh / ui.height;
          scale = scaleW < scaleH ? scaleW : scaleH;
          return scale;
        };

        NodeHelp.setScopeLimitationInSize = function setScopeLimitationInSize(ui, sizew, sizeh) {
          var scale = 1;
          var scaleH = 1;
          var scaleW = 1;
          if (sizew) scaleW = sizew / ui.width;
          if (sizeh) scaleH = sizeh / ui.height;
          scale = scaleW < scaleH ? scaleW : scaleH;
          return scale;
        };

        NodeHelp.setScopeLimitationMax = function setScopeLimitationMax(ui, sizew, sizeh) {
          var scale = 1;
          var scaleH = 1;
          var scaleW = 1;
          if (sizew && ui.width > sizew) scaleW = sizew / ui.width;
          if (sizeh && ui.height > sizeh) scaleH = sizeh / ui.height;
          scale = scaleW > scaleH ? scaleW : scaleH;
          return scale;
        };

        NodeHelp.setScopeLimitationInSizeNew = function setScopeLimitationInSizeNew(ui, sizew, sizeh) {
          var scale = 1;
          var scaleH = 1;
          var scaleW = 1;
          if (sizew) scaleW = sizew / ui.width;
          if (sizeh) scaleH = sizeh / ui.height;
          scale = scaleW > scaleH ? scaleW : scaleH;
          return scale;
        };

        NodeHelp.setLayout = function setLayout(node, strNumMAX, str) {
          if (str.length > strNumMAX) {
            node.getComponent(Layout).enabled = true;
            node.getComponent(Layout).updateLayout();
            return true;
          }

          return false;
        } // //爵位等级显示
        // NodeHelp.getchildlable<Sprite>(Panel, "levelIcon", Sprite, (comp) => {
        //     let compt = comp
        //     let image = "vip/titleIcon/%s/spriteFrame".format(this.showData.title.levelNumOrUrl);
        //     resources.load(image, SpriteFrame, (error, res) => {
        //         if (res) {
        //             compt.spriteFrame = res
        //             let scale = NodeHelp.setScopeLimitation(compt.node.getComponent(UITransform), Iconsize.width, Iconsize.height)
        //             compt.node.setScale(v3(scale, scale, 1))
        //         }
        //         if (error) {
        //             console.log("加载爵位等级icon图片 ==>", error);
        //         }
        //     })
        // })
        ;

        NodeHelp.loadImage = function loadImage(spr, image, cb) {
          resources.load(image, SpriteFrame, function (error, res) {
            if (res) {
              if (!spr || !spr.isValid) return;
              spr.spriteFrame = res;
              if (cb) cb(spr);
            }

            if (error) {
              console.log("加载图片 ==>", error);
              return false;
            }
          });
          return true;
        };

        NodeHelp.loadIcon = function loadIcon(atlas, image, cb, data) {
          resources.load(atlas, SpriteAtlas, function (error, res) {
            if (res) {
              var frame = res.getSpriteFrame(image);

              if (frame) {
                cb && cb(frame);
              } else {
                console.log("图集中不存在 ==>", image);
              }
            } else {
              console.log("加载图集 ==>", error);
            }
          });
        };

        return NodeHelp;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Notice.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstLanguage.ts', './ConfigFile.ts', './GameDataManager.ts', './NodeHelp.ts', './SetSecondaryUIEntity.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, Toggle, UIOpacity, ConstLanguage, ConfigFile, GameDataManager, NodeHelp, SetSecondaryUIEntity;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Toggle = module.Toggle;
      UIOpacity = module.UIOpacity;
    }, function (module) {
      ConstLanguage = module.ConstLanguage;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameDataManager = module.GameDataManager;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      SetSecondaryUIEntity = module.SetSecondaryUIEntity;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "b0ba6xGTuBD6auj728+HJj/", "Notice", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Notice = exports('Notice', (_dec = ccclass('Notice'), _dec(_class = /*#__PURE__*/function (_SetSecondaryUIEntity) {
        _inheritsLoose(Notice, _SetSecondaryUIEntity);

        function Notice() {
          return _SetSecondaryUIEntity.apply(this, arguments) || this;
        }

        var _proto = Notice.prototype;

        _proto.init = function init() {
          _SetSecondaryUIEntity.prototype.init.call(this);

          this.setShow();
        };

        _proto.setShow = function setShow() {
          NodeHelp.getchildlable(this.node, "LabelTitle", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.Set_PANEL_BUTTON2);
          });
          NodeHelp.getchildlable(this.node, "FarmTipSet", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.Set_PANEL_NOTICE1);
          });
          NodeHelp.getchildlable(this.node, "PastureTipSet", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.Set_PANEL_NOTICE2);
          });
          NodeHelp.getchildlable(this.node, "FarmTipSet", Toggle, function (comp) {
            comp.isChecked = GameDataManager.getInstance().getGameData().settingInfo.FarmTipSet;
          });
          NodeHelp.getchildlable(this.node, "PastureTipSet", Toggle, function (comp) {
            comp.isChecked = GameDataManager.getInstance().getGameData().settingInfo.PastureTipSet;
          });
        };

        _proto.onClickFarmTipSet = function onClickFarmTipSet(event) {
          var Checked = event.target.getComponent(Toggle).isChecked;
          NodeHelp.getchildlable(event.target, "NotCheck", UIOpacity, function (comp) {
            comp.opacity = Checked ? 0 : 255;
          });
          GameDataManager.getInstance().getGameData().settingInfo.FarmTipSet = Checked;
        };

        _proto.onClickPastureTipSet = function onClickPastureTipSet(event) {
          var Checked = event.target.getComponent(Toggle).isChecked;
          NodeHelp.getchildlable(event.target, "NotCheck", UIOpacity, function (comp) {
            comp.opacity = Checked ? 0 : 255;
          });
          GameDataManager.getInstance().getGameData().settingInfo.PastureTipSet = Checked;
        };

        return Notice;
      }(SetSecondaryUIEntity)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NumberUtil.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, math;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      math = module.math;
    }],
    execute: function () {
      exports({
        AXIS: void 0,
        TARGETTYPE: void 0
      });

      cclegacy._RF.push({}, "e5362iOuGVAm7OlgU0csp7z", "NumberUtil", undefined);

      var AXIS;

      (function (AXIS) {
        AXIS[AXIS["X_AND_Y"] = 0] = "X_AND_Y";
        AXIS[AXIS["X_AND_Z"] = 1] = "X_AND_Z";
        AXIS[AXIS["Y_AND_Z"] = 2] = "Y_AND_Z";
        AXIS[AXIS["X_AND_Y_AND_Z"] = 3] = "X_AND_Y_AND_Z";
      })(AXIS || (AXIS = exports('AXIS', {})));

      var TARGETTYPE;

      (function (TARGETTYPE) {
        TARGETTYPE[TARGETTYPE["NULL"] = 0] = "NULL";
        TARGETTYPE[TARGETTYPE["PLAYER"] = 1] = "PLAYER";
        TARGETTYPE[TARGETTYPE["MONSTER"] = 2] = "MONSTER";
        TARGETTYPE[TARGETTYPE["NPC"] = 3] = "NPC";
      })(TARGETTYPE || (TARGETTYPE = exports('TARGETTYPE', {})));

      var NumberUtil = exports('NumberUtil', /*#__PURE__*/function () {
        function NumberUtil() {}

        NumberUtil.checkFloat = function checkFloat(obj) {
          if (!obj) {
            return false;
          }

          if (obj == "") {
            return false;
          }

          var re = /^[+]{0,1}(\d+)$|^[+]{0,1}(\d+\.\d+)$/;

          if (!re.test(obj)) {
            return false;
          }

          return true;
        };

        NumberUtil.checkInt = function checkInt(obj) {
          if (!obj) {
            return false;
          }

          if (obj == "") {
            return false;
          }

          var re = /^-?\d+$/;

          if (!re.test(obj)) {
            return false;
          }

          return true;
        } //获取最大值
        ;

        NumberUtil.getMax = function getMax(a, b) {
          var result = [a, b]; //如果a长度小于b长度

          if (a.length < b.length) {
            //b放前面
            result[0] = b;
            result[1] = a; //返回result长度为3，为了减法的不够减而准备

            result[2] = 'not'; //返回最终数组

            return result;
          } //如果a长度等于b长度


          if (a.length == b.length) {
            //循环对比a,b里面的单个元素
            for (var i = 0; i < a.length; i++) {
              if (result[0][i] > result[1][i]) {
                result[0] = a;
                result[1] = b;
                return result;
              }

              if (result[0][i] < result[1][i]) {
                result[0] = b;
                result[1] = a;
                result[2] = 'not';
                return result;
              } //假如全部相等，当最后一个元素，以上条件都不执行，则执行默认的返回结果


              if (i == a.length - 1) {
                return result;
              }
            }
          }

          if (a.length > b.length) {
            return result;
          }
        } //删除字符串前面多余的0
        ;

        NumberUtil.shanchuling = function shanchuling(result) {
          //首先判断是否全部都是0，是的话直接返回一个0
          if (result == 0) {
            result = 0; //返回最终字符串

            return result;
          } //把字符串分割成数组


          result = result.split(''); //获取数组长度

          var hebing = result.length;

          for (var j = 0; j < hebing; j++) {
            //判断数组首位是否为0
            if (result[0] == 0) {
              //把数组首位删掉
              result.splice(0, 1);
            } else {
              //删除完了就跳出循环
              break;
            }
          } //返回最终字符串


          return result;
        } // 获取小数的位数
        ;

        NumberUtil.getDecimalDigits = function getDecimalDigits(n) {
          if (typeof n == 'number') return n.toString().split(".")[1] != null ? n.toString().split(".")[1].length : 0;else if (typeof n == 'string') return n.split(".")[1] != null ? n.split(".")[1].length : 0;
        }
        /*
        * 参数说明：
        * number：要格式化的数字
        * decimals：保留几位小数
        * isAdd0：是否在小数末尾补0
        * thousands_sep：千分位符号
        * */
        ;

        NumberUtil.numberFormat = function numberFormat(number, decimals, isAdd0, thousands_sep) {
          number = (number + '').replace(/[^0-9+-Ee.]/g, '');

          var n = !isFinite(+number) ? 0 : +number,
              prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
              sep = typeof thousands_sep === 'undefined' ? ',' : thousands_sep,
              dec = '.',
              s = [''],
              toFixedFix = function toFixedFix(n, prec) {
            var k = Math.pow(10, prec);
            return '' + Math.floor(n * k) / k;
          };

          s = (prec ? toFixedFix(n, prec) : '' + Math.floor(n)).split('.');

          if ("" != sep) {
            var re = /(-?\d+)(\d{3})/;

            while (re.test(s[0])) {
              s[0] = s[0].replace(re, "$1" + sep + "$2");
            }
          }

          if (isAdd0) {
            if ((s[1] || '').length < prec) {
              s[1] = s[1] || '';
              s[1] += new Array(prec - s[1].length + 1).join('0');
            }
          }

          return s.join(dec);
        } //检查是不是n位数字，不足补全
        ;

        NumberUtil.setNumberLength = function setNumberLength(num, length) {
          num = num.toString();

          while (num.length < length) {
            num = '0' + num;
          }

          return num;
        }
        /*
        * 参数说明：
        * number：要格式化的时间，单位秒
        * */
        ;

        NumberUtil.time_format = function time_format(number) {
          var hour = this.setNumberLength(Math.floor(number / 3600), 2);
          number = number % 3600;
          var min = this.setNumberLength(Math.floor(number / 60), 2);
          var sec = this.setNumberLength(number % 60, 2);
          return hour + ":" + min + ":" + sec;
        };

        NumberUtil.time_split = function time_split(number) {
          var day = Math.floor(number / 86400);
          number = parseInt((number % 86400).toString());
          var hour = Math.floor(number / 3600);
          number = parseInt((number % 3600).toString());
          var min = Math.floor(number / 60);
          var sec = parseInt((number % 60).toString());
          return {
            day: day,
            hour: hour,
            min: min,
            sec: sec
          }; //hour + ":" + min + ":" + sec;
        };

        NumberUtil.millisecondToDate = function millisecondToDate(str) {
          //var mnn = str % 1000;
          var total = str / 1000;
          var min = Math.round(total % 3600);
          var oHour = parseInt((total / 3600).toString()).toString();
          var sen = min % 60;
          var oMin = parseInt((min / 60).toString()).toString();
          var oSen = sen.toString();
          var oTime = this.setNumberLength(oHour, 2) + ':' + this.setNumberLength(oMin, 2) + ':' + this.setNumberLength(oSen, 2);
          return oTime;
        };

        NumberUtil.millisecondToMinute = function millisecondToMinute(msd) {
          if (msd < 500) {
            msd = 0;
          }

          var remainTime = parseFloat(msd) / 1000;
          var minit = parseInt((remainTime / 60).toString());
          var second = parseInt((remainTime - minit * 60).toString());
          var time = this.setNumberLength(minit, 2) + ':' + this.setNumberLength(second, 2);
          return time;
        }
        /***
         * 数组排序
         */
        ;

        NumberUtil.sortByType = function sortByType(array, type) {
          var by = function by(type) {
            return function (o, p) {
              var a, b;

              if (typeof o === "object" && typeof p === "object" && o && p) {
                a = o[type];
                b = p[type];

                if (a === b) {
                  return 0;
                }

                if (typeof a === typeof b) {
                  return a < b ? -1 : 1;
                }

                return typeof a < typeof b ? -1 : 1;
              } else {
                throw "error";
              }
            };
          };

          return array.sort(by(type));
        }
        /***
         * 倒计时
         */
        ;

        NumberUtil.countTime = function countTime(second, callback) {
          callback(second);
          var id = setInterval(function () {
            second--;

            if (second >= 0) {
              callback(second);
            } else {
              console.log('stop Interval=' + id);
              clearInterval(id);
            }
          }.bind(this), 1000);
          return id;
        };

        NumberUtil.clearInterval = function (_clearInterval) {
          function clearInterval(_x) {
            return _clearInterval.apply(this, arguments);
          }

          clearInterval.toString = function () {
            return _clearInterval.toString();
          };

          return clearInterval;
        }(function (id) {
          console.log('clearInterval=' + id);
          clearInterval(id);
        }
        /***
         * 是否是同一天
         */
        );

        NumberUtil.isOneDay = function isOneDay(perTime, nowTime) {
          var per = new Date(parseInt(perTime));
          var now = new Date(parseInt(nowTime));

          if (per.getFullYear() == now.getFullYear()) {
            if (per.getMonth() == now.getMonth()) {
              if (per.getDate() == now.getDate()) {
                return true;
              }
            }
          }

          return false;
        };

        NumberUtil.randomRangeInt = function randomRangeInt(min, max) {
          var rand = Math.random();

          if (rand === 1) {
            rand -= Number.EPSILON;
          }

          return min + Math.floor(rand * (max - min));
        };

        NumberUtil.randomRangeFloat = function randomRangeFloat(min, max) {
          return min + Math.random() * (max - min);
        };

        NumberUtil.fmod = function fmod(x, y) {
          var temp = Math.floor(x / y);
          return x - temp * y;
        }
        /***
         * 占位符替换
         */
        ;

        NumberUtil.format = function format(result, args) {
          if (result) {
            if (typeof args == "object") {
              for (var key in args) {
                if (args[key] != undefined) {
                  var reg = new RegExp("({" + key + "})", "g");
                  result = result.replace(reg, args[key]);
                }
              }
            }
          }

          return result;
        }
        /***
         * 复制到剪切板
         * @param str
         * @returns {boolean}
         */
        ;

        NumberUtil.webCopyString = function webCopyString(str) {
          var input = str + '';
          var el = document.createElement('textarea');
          el.value = input;
          el.setAttribute('readonly', ''); //el.style.contain = 'strict';

          el.style.position = 'absolute';
          el.style.left = '-9999px';
          el.style.fontSize = '12pt'; // Prevent zooming on iOS

          var selection = getSelection();
          var originalRange = null;

          if (selection.rangeCount > 0) {
            originalRange = selection.getRangeAt(0);
          }

          document.body.appendChild(el);
          el.select();
          el.selectionStart = 0;
          el.selectionEnd = input.length;
          var success = false;

          try {
            success = document.execCommand('copy');
          } catch (err) {}

          document.body.removeChild(el);

          if (originalRange) {
            selection.removeAllRanges();
            selection.addRange(originalRange);
          }

          return success;
        } // public static SignedAngle(from:Vec3, to:Vec3, up:Vec3):number
        // {
        //     Vec3.subtract(vt_1,to,from);
        //     vt_1.normalize();
        //     //let direction:Vec3 = (to - from).normalized;
        //     Vec3.cross(vt_2,up, vt_1);
        //     let dot = Vec3.dot(from, vt_2);
        //     return Vec3.angle(from, to) * Math.sign(dot);
        // }
        ;

        NumberUtil.ClampAngle = function ClampAngle(angle, min, max) {
          if (angle < -360) angle += 360;
          if (angle > 360) angle -= 360;
          return math.clamp(angle, -max, -min);
        };

        NumberUtil.DeltaAngle = function DeltaAngle(current, target) {
          var delta = math.repeat(target - current, 360.0);
          if (delta > 180.0) delta -= 360.0;
          return delta;
        };

        NumberUtil.moveClamp = function moveClamp(source, target, offset, cb) {
          var diff = target - source; // if(Math.abs(diff)<0.05){
          //     cb && cb(target);
          //     return true;
          // }

          var ret = target;
          var retb = false;

          if (diff < 0) {
            ret = source - offset;

            if (ret <= target) {
              retb = true;
              ret = target;
            }
          } else if (diff > 0) {
            ret = source + offset;

            if (ret >= target) {
              retb = true;
              ret = target;
            }
          } else {
            retb = true;
            ret = target;
          }

          cb && cb(ret);
          return retb;
        };

        NumberUtil.MoveTowards = function MoveTowards(current, target, maxDelta) {
          if (Math.abs(target - current) <= maxDelta) return target;
          return current + Math.sign(target - current) * maxDelta;
        } // Same as ::ref::MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.
        ;

        NumberUtil.MoveTowardsAngle = function MoveTowardsAngle(current, target, maxDelta) {
          target = current + this.DeltaAngle(current, target);
          return this.MoveTowards(current, target, maxDelta);
        };

        NumberUtil.GetShiftedAngle = function GetShiftedAngle(wayIndex, baseAngle, betweenAngle) {
          var angle = wayIndex % 2 == 0 ? baseAngle - betweenAngle * wayIndex / 2 : baseAngle + betweenAngle * Math.ceil(wayIndex / 2);
          return angle;
        } /// <summary>
        /// Get 0 ~ 360 angle.
        /// </summary>
        ;

        NumberUtil.GetNormalizedAngle = function GetNormalizedAngle(angle) {
          while (angle < 0) {
            angle += 360;
          }

          while (360 < angle) {
            angle -= 360;
          }

          return angle;
        } /// <summary>
        /// Get angle from two transforms position.
        /// </summary>
        ;

        NumberUtil.GetAngleFromTwoPosition = function GetAngleFromTwoPosition(fromTrans, toTrans, axisMove) {
          switch (axisMove) {
            case AXIS.X_AND_Y:
              return NumberUtil.GetZangleFromTwoPosition(fromTrans, toTrans);

            case AXIS.X_AND_Z:
              return NumberUtil.GetYangleFromTwoPosition(fromTrans, toTrans);

            default:
              return 0;
          }
        } /// <summary>
        /// Get Z angle from two transforms position.
        /// </summary>
        ;

        NumberUtil.GetZangleFromTwoPosition = function GetZangleFromTwoPosition(fromTrans, toTrans) {
          if (fromTrans == null || toTrans == null) {
            return 0;
          }

          var xDistance = toTrans.worldPosition.x - fromTrans.worldPosition.x;
          var yDistance = toTrans.worldPosition.y - fromTrans.worldPosition.y;
          var angle = math.toDegree(Math.atan2(yDistance, xDistance)) - 90;
          angle = NumberUtil.GetNormalizedAngle(angle);
          return angle;
        } /// <summary>
        /// Get Y angle from two transforms position.
        /// </summary>
        ;

        NumberUtil.GetYangleFromTwoPosition = function GetYangleFromTwoPosition(fromTrans, toTrans) {
          if (fromTrans == null || toTrans == null) {
            return 0;
          }

          var xDistance = toTrans.worldPosition.x - fromTrans.worldPosition.x;
          var zDistance = toTrans.worldPosition.z - fromTrans.worldPosition.z;
          var angle = math.toDegree(Math.atan2(zDistance, xDistance)) - 90;
          angle = NumberUtil.GetNormalizedAngle(angle);
          return angle;
        }
        /**
             * @param min 
             * @param max 
             * @param is_int 默认转换为整型
             * @returns 返回 min - max 的值， 包括 min max
             */
        ;

        NumberUtil.minToMax = function minToMax(min, max, is_int) {
          if (is_int === void 0) {
            is_int = true;
          } // min ~ max


          if (min == max) return min;

          if (min < 0) {
            if (is_int) return Math.round(Math.random() * (Math.abs(min) + max)) + min;else return Math.random() * (Math.abs(min) + max) + min;
          }

          if (is_int) return Math.round(Math.random() * (max - min)) + min;else return Math.random() * (max - min) + min;
        }
        /**
         * 限定浮点数的最大最小值
         * 数值大于 max 则返回 max
         * 数值小于 min 则返回 min
         * 否则返回自身
         * @method clampf
         * @param {Number} value
         * @param {Number} min
         * @param {Number} max
         * @return {Number}
         * @example
         * var v1 = Maths.clampf(20, 0, 20); // 20;
         * var v2 = Maths.clampf(-1, 0, 20); //  0;
         * var v3 = Maths.clampf(10, 0, 20); // 10;
         */
        ;

        NumberUtil.clampf = function clampf(value, min, max) {
          if (min > max) {
            var temp = min;
            min = max;
            max = temp;
          }

          return value < min ? min : value < max ? value : max;
        }
        /**
         * 返回 0 到 max
         * @param max 
         * @returns {0 ~ max} 不包括 max
         * @example
         * var a = Maths.zeroToMax(10); // 3
         * var b = Maths.zeroToMax(1); // 0
         */
        ;

        NumberUtil.zeroToMax = function zeroToMax(max) {
          if (max <= 1) return 0;
          var random = Math.random();
          return Math.floor((random == 1 ? 0.5 : random) * max);
        }
        /**
         * 
         * @param myPoint 点的世界坐标
         * @param myCircle 需要判断的圆形碰撞
         * @returns 
         */
        ;

        NumberUtil.IsPointInCircle = function IsPointInCircle(myPoint, myCircle) {
          //到圆心的距离 是否大于半径。半径是R  
          //如O(x,y)点圆心，任意一点P（x1,y1） （x-x1）*(x-x1)+(y-y1)*(y-y1)>R*R 那么在圆外 反之在圆内
          var x = myCircle.node.worldPosition.x;
          var y = myCircle.node.worldPosition.y;
          var r = myCircle.worldRadius;
          var x1 = myPoint.x;
          var y1 = myPoint.y;

          if (!((x - x1) * (x - x1) + (y - y1) * (y - y1) > r * r)) {
            return true; //当前点在圆内
          } else {
            return false; //当前点在圆外
          }
        }
        /**
        * 获得数字单位转换后的字符串
        * @param num 数字
        * @param zero 是否保留0
        * @returns str 转换后的字符串
        */
        ;

        NumberUtil.unitConversion = function unitConversion(num, decimal, zero) {
          if (decimal === void 0) {
            decimal = true;
          }

          if (zero === void 0) {
            zero = false;
          }

          var str = "";
          if (num >= 1000000000) str = Math.floor(num / 1000000000) + "B";else if (num >= 1000000) str = Math.floor(num / 1000000) + "M";else if (num >= 1000) str = Math.floor(num / 1000) + "K";else if (num < 100) {
            if (decimal) {
              if (zero) str = "" + num.toFixed(2);else {
                var nums = num.toFixed(2).toString().split(".")[1];

                if (Number(nums) == 0) {
                  str = "" + num.toFixed(0);
                } else if (Number(nums[1]) == 0) {
                  str = "" + num.toFixed(1);
                } else {
                  str = "" + num.toFixed(2);
                }
              }
            } else str = "" + num.toFixed(0);
          } else if (num == 0) str = "0";else str = "" + Math.floor(num);
          return str;
        } //移除中文
        ;

        NumberUtil.stringRemoveChinese = function stringRemoveChinese(str) {
          for (var i = 0; i < str.length; i++) {
            var a = str.charAt(i);

            if (a.match(/[\u4e00-\u9fa5]/)) {
              str = str.slice(0, i);
              return str;
            }
          }

          return str;
        } //是否为数字
        ;

        NumberUtil.isNumber = function isNumber(str) {
          var pattern = /^[0-9]*$/,
              str = '';
          console.log(pattern.test(str));
        } //得到位数
        ;

        NumberUtil.getNumberNnm = function getNumberNnm(num) {
          if (num < 10) return 1;
          return this.getNumberNnm(num / 10) + 1;
        } //去掉千分位
        ;

        NumberUtil.stringGetNumber = function stringGetNumber(str) {
          var string = str.split(",");
          var str_2 = "";
          string.forEach(function (v) {
            str_2 += v;
          });
          return str_2;
        };

        NumberUtil.isEamil = function isEamil(str) {
          var re = /^[a-zA-Z0-9_.-]+@(gmail|qq|163|sina|hotmail|sohu).com$/;

          if (!re.test(str)) {
            return false;
          }

          return true;
        }
        /**字母和数字**/
        ;

        NumberUtil.isNumAndLetter = function isNumAndLetter(str) {
          var re = /^[A-Za-z0-9]+$/;

          if (!re.test(str)) {
            return false;
          }

          return true;
        };

        return NumberUtil;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/OctreeScens.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Vec3, Node, UITransform, Size, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Node = module.Node;
      UITransform = module.UITransform;
      Size = module.Size;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "201d8JWym5COa/v4acGjeGX", "OctreeScens", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var temp_V3_1 = new Vec3();
      var OctreeScens = exports('OctreeScens', (_dec = ccclass('OctreeScens'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(OctreeScens, _Component);

        function OctreeScens() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.cellX = 10;
          _this.cellY = 10;
          _this.cellWidth = 0;
          _this.cellHeight = 0;
          _this.mapWidth = 11000;
          _this.mapHeight = 7000;
          return _this;
        }

        var _proto = OctreeScens.prototype;

        _proto.onLoad = function onLoad() {
          this.initTree();
        };

        _proto.addNode = function addNode(root, x, y) {
          var new1 = new Node();
          new1.name = Math.floor(x) + "-" + Math.floor(y);
          new1.parent = root;
          var nx = x + this.cellWidth / 2;
          var ny = y + this.cellHeight / 2;
          var ui = new1.addComponent(UITransform);
          ui.setContentSize(new Size(this.cellWidth, this.cellHeight)); //new1.setPosition(new Vec3(nx, ny, 0));

          new1.setPosition(Vec3.ZERO);
          return new1;
        };

        _proto.initTree = function initTree() {
          this.cellHeight = this.mapHeight / this.cellY;
          this.cellWidth = this.mapWidth / this.cellX;
          var hh = this.mapHeight / 2;
          var hw = this.mapWidth / 2;

          for (var indexY = this.cellY - 1; indexY >= 0; indexY--) {
            var offsetY = indexY * this.cellHeight - hh;

            for (var indexX = 0; indexX < this.cellX; indexX++) {
              var offsetX = indexX * this.cellWidth - hw;
              this.addNode(this.node, offsetX, offsetY);
            }
          } // for (let indexY = 0; indexY <this.cellY; indexY++) {
          //     let offsetY = indexY * this.cellHeight - hh;
          //     for (let indexX = 0; indexX < this.cellX; indexX++) {
          //         let offsetX = indexX * this.cellWidth - hw;
          //         this.addNode(this.node, offsetX, offsetY);
          //     }
          // }

        };

        _proto.getAnchor = function getAnchor(index) {
          var c = this.node.children;
          if (c.length <= 0) return null;
          if (index < 0 || index >= c.length) return c[0];
          return c[index];
        };

        _proto.getNodeAnchor = function getNodeAnchor(node) {
          var pos = node.position;
          var ut = node.getComponent(UITransform);
          var cs = ut.contentSize;
          var x = cs.width - cs.width * ut.anchorX;
          var y = cs.height - cs.height * ut.anchorY;
          return {
            x: pos.x,
            y: pos.y - y
          }; //return {x:pos.x,y:pos.y};
        };

        _proto.sortNode = function sortNode(anchor) {
          var _this2 = this;

          var c = anchor.children;
          if (c.length < 1) return;
          var tempArray = [];
          c.forEach(function (item) {
            tempArray.push(item);
          });
          tempArray.sort(function (a, b) {
            var apos = _this2.getNodeAnchor(a);

            var bpos = _this2.getNodeAnchor(b);

            var yd = Math.abs(apos.y - bpos.y);

            if (yd > 1) {
              if (apos.y >= bpos.y) return -1;else return 1;
            } else {
              if (apos.x >= bpos.x) return -1;else return 1;
            }
          });

          for (var index = 0; index < tempArray.length; index++) {
            var animalnode = tempArray[index];
            animalnode.setSiblingIndex(index);
          }
        };

        _proto.getAnchorIndex = function getAnchorIndex(node) {
          //this.node.getComponent(UITransform).convertToNodeSpaceAR(node.worldPosition,temp_V3_1);
          temp_V3_1.set(node.position);
          var hh = this.mapHeight / 2;
          var hw = this.mapWidth / 2;
          var nx = Math.floor((temp_V3_1.x + hw) / this.cellWidth);
          var ny = Math.floor((hh - temp_V3_1.y) / this.cellHeight);
          return ny * this.cellX + nx;
        };

        _proto.insertNodenoSort = function insertNodenoSort(node) {
          var anchorNode = this.getAnchor(this.getAnchorIndex(node));
          node.parent = anchorNode;
        };

        _proto.moveNode = function moveNode(node) {
          var anchorNode = this.getAnchor(this.getAnchorIndex(node));

          if (anchorNode == node.parent) {
            this.sortNode(anchorNode);
          } else {
            node.parent = anchorNode;
            this.sortNode(anchorNode);
          }
        };

        _proto.insertNode = function insertNode(node) {
          var anchorNode = this.getAnchor(this.getAnchorIndex(node)); //let wp = node.worldPosition;

          node.parent = anchorNode; //node.setWorldPosition(wp);

          this.sortNode(anchorNode);
        };

        _proto.insertNode1 = function insertNode1(node) {
          var anchorNode = this.getAnchor(this.getAnchorIndex(node));
          var wp = node.worldPosition;
          node.parent = anchorNode;
          node.setWorldPosition(wp);
          this.sortNode(anchorNode); //console.log("insert=",anchorNode.name,"  node=",node.name);
        };

        _proto.getVisitRect = function getVisitRect(node) {
          this.node.getComponent(UITransform).convertToNodeSpaceAR(node.worldPosition, temp_V3_1);
          var hh = this.mapHeight / 2;
          var hw = this.mapWidth / 2;
          var nx = Math.floor((temp_V3_1.x + hw) / this.cellWidth);
          var ny = Math.floor((hh - temp_V3_1.y) / this.cellHeight);
          var sx = nx - 2;
          var ex = nx + 2;
          var sy = ny - 2;
          var ey = ny + 2;
          if (sx < 0) sx = 0;
          if (ex > 9) ex = 9;
          if (sy < 0) sy = 0;
          if (ey > 9) ey = 9;
          return {
            sx: sx,
            sy: sy,
            ex: ex,
            ey: ey
          };
        };

        _proto.testVisitRect = function testVisitRect(vr, x, y) {
          if (x >= vr.sx && x <= vr.ex && y >= vr.sy && y <= vr.ey) return true;
          return false;
        };

        _proto.checkVisit = function checkVisit(node) {
          return; //从场外进入的动画会无法进行
        };

        return OctreeScens;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/opera.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, cclegacy;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0977fTwGWlGVq2+TYLSp5rf", "opera", undefined);

      var ConnectToOpera = exports('default', /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var _ethereum;

          var provider;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  provider = null;

                  if (!(typeof ((_ethereum = window.ethereum) == null ? void 0 : _ethereum.isOpera) !== "undefined")) {
                    _context.next = 13;
                    break;
                  }

                  provider = window.ethereum;
                  _context.prev = 3;
                  _context.next = 6;
                  return provider.request({
                    method: "eth_requestAccounts"
                  });

                case 6:
                  _context.next = 11;
                  break;

                case 8:
                  _context.prev = 8;
                  _context.t0 = _context["catch"](3);
                  throw new Error("User Rejected");

                case 11:
                  _context.next = 14;
                  break;

                case 13:
                  throw new Error("Opera not found");

                case 14:
                  return _context.abrupt("return", provider);

                case 15:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[3, 8]]);
        }));

        return function ConnectToOpera() {
          return _ref.apply(this, arguments);
        };
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/OperaleDef.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b2a89sVeNlHerzYZYBIq2zd", "OperaleDef", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var OperaleDef = exports('OperaleDef', function OperaleDef() {});
      OperaleDef.UNDEF = "UNDEF";
      OperaleDef.NONE = "NONE";
      OperaleDef.SHOWTIP = "SHOWTIP";
      OperaleDef.UNABLELOCK = "UNABLELOCK";
      OperaleDef.UNLOCK = "UNLOCK";
      OperaleDef.UNLOCKPASTURE = "UNLOCKPASTURE";
      OperaleDef.UPGRADE = "UPGRADE";
      OperaleDef.UPGRADEPASTURE = "UPGRADEPASTURE";
      OperaleDef.UPGRADETROUGH = "UPGRADETROUGH";
      OperaleDef.SOWING = "SOWING";
      OperaleDef.WEEDING = "WEEDING";
      OperaleDef.HARVEST = "HARVEST";
      OperaleDef.WATERING = "WATERING";
      OperaleDef.ERADICATE = "ERADICATE";
      OperaleDef.DIG = "DIG";
      OperaleDef.CLEANING = "CLEANING";
      OperaleDef.FUMIGATE = "FUMIGATE";
      OperaleDef.REMEDY = "REMEDY";
      OperaleDef.GROWER = "GROWER";
      OperaleDef.MOVEMAP = "MOVEMAP";
      OperaleDef.SHOWINFO = "SHOWINFO";
      OperaleDef.OPENVIP = "OPENVIP";
      OperaleDef.OPENMAIN = "OPENMAIN";
      OperaleDef.CANBREED = "CANBREED";
      OperaleDef.COLLECT = "COLLECT";
      OperaleDef.CLEARDIE = "CLEARDIE";
      OperaleDef.STEALPLANT = "STEALPLANT";
      OperaleDef.STEALANIMAL = "STEALANIMAL";
      var OperaleData = exports('OperaleData', {
        UNDEF: {
          icon: "",
          image: "",
          drag: false,
          tip: false,
          btn: false,
          fruit: false
        },
        NONE: {
          icon: "",
          image: "",
          drag: false,
          tip: false,
          btn: false,
          fruit: false
        },
        SHOWTIP: {
          icon: "",
          image: "",
          drag: false,
          tip: false,
          btn: false,
          fruit: false
        },
        UNABLELOCK: {
          icon: "suo",
          image: "suo",
          drag: false,
          tip: false,
          btn: false,
          fruit: false
        },
        //可以解锁
        UNLOCK: {
          icon: "suo",
          image: "suo",
          drag: false,
          tip: false,
          btn: true
        },
        //可以解锁
        UNLOCKPASTURE: {
          icon: "suo",
          image: "suo",
          drag: false,
          tip: false,
          btn: true,
          fruit: false
        },
        //可以解锁
        UPGRADE: {
          icon: "dt_5",
          image: "dt_5",
          drag: false,
          tip: "LandIUpgradeTip",
          btn: false,
          fruit: false
        },
        //可以升级
        UPGRADEPASTURE: {
          icon: "dt_5",
          image: "dt_5",
          drag: false,
          tip: "PastureUpgradeTip",
          btn: false,
          fruit: false
        },
        //可以升级
        UPGRADETROUGH: {
          icon: "dt_5",
          image: "dt_5",
          drag: false,
          tip: "PastureUpgradeTip",
          btn: false,
          fruit: false
        },
        //可以升级
        SOWING: {
          icon: "",
          image: "",
          drag: true,
          tip: "LandInfoTip",
          btn: true,
          fruit: false
        },
        //可以播种
        WEEDING: {
          icon: "tieqiao",
          image: "tieqiao",
          drag: true,
          tip: false,
          btn: true,
          fruit: false
        },
        //可以除草
        HARVEST: {
          icon: "dt_4",
          image: "dt_4",
          drag: true,
          tip: false,
          btn: true,
          fruit: false
        },
        //可以收获
        WATERING: {
          icon: "14",
          image: "10",
          drag: true,
          tip: false,
          btn: true,
          fruit: false
        },
        //可以灌水
        ERADICATE: {
          icon: "13",
          image: "12",
          drag: true,
          tip: false,
          btn: true,
          fruit: false
        },
        //可以除虫
        DIG: {
          icon: "15",
          image: "15",
          drag: true,
          tip: false,
          btn: true,
          fruit: false
        },
        //可以松土 
        CLEANING: {
          icon: "3",
          image: "2",
          drag: true,
          tip: false,
          btn: true,
          fruit: true
        },
        //可以清扫
        FUMIGATE: {
          icon: "4",
          image: "5",
          drag: true,
          tip: false,
          btn: true,
          fruit: true
        },
        //可以驱蚊
        REMEDY: {
          icon: "1",
          image: "1",
          drag: true,
          tip: false,
          btn: true,
          fruit: true
        },
        //可以治疗
        GROWER: {
          icon: "",
          image: "",
          drag: false,
          tip: false,
          btn: true,
          fruit: false
        },
        //升长中
        MOVEMAP: {
          icon: "",
          image: "",
          drag: true,
          tip: false,
          btn: true,
          fruit: false
        },
        //移动地图
        SHOWINFO: {
          icon: "",
          image: "",
          drag: false,
          tip: false,
          btn: true,
          fruit: false
        },
        //移动地图
        OPENVIP: {
          icon: "",
          image: "",
          drag: false,
          tip: false,
          btn: true,
          fruit: false
        },
        //移动地图
        OPENMAIN: {
          icon: "",
          image: "",
          drag: false,
          tip: false,
          btn: true,
          fruit: false
        },
        //移动地图
        CANBREED: {
          icon: "",
          image: "",
          drag: true,
          tip: false,
          btn: true,
          fruit: false
        },
        //buy动物
        COLLECT: {
          icon: "dt_4",
          image: "dt_4",
          drag: true,
          tip: false,
          btn: true,
          fruit: true
        },
        //可以收集动物产出 //fruit拾取到每个动物
        CLEARDIE: {
          icon: "tieqiao",
          image: "tieqiao",
          drag: true,
          tip: false,
          btn: true,
          fruit: true
        },
        //
        STEALPLANT: {
          icon: "tou_01",
          image: "tou_01",
          drag: true,
          tip: false,
          btn: true,
          fruit: false
        },
        //可以收获
        STEALANIMAL: {
          icon: "tou_01",
          image: "tou_01",
          drag: true,
          tip: false,
          btn: true,
          fruit: true
        } //可以收集动物产出 //fruit拾取到每个动物

      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/operateBtnCtl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TaskManager.ts', './OperaleDef.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _extends, _createClass, cclegacy, _decorator, Vec3, Sprite, UITransform, resources, SpriteFrame, tween, Component, TaskManager, OperaleData;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _extends = module.extends;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      resources = module.resources;
      SpriteFrame = module.SpriteFrame;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      TaskManager = module.TaskManager;
    }, function (module) {
      OperaleData = module.OperaleData;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "70109m0Z6VPj4JGQzbRHsF+", "operateBtnCtl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var temp_V3 = new Vec3();
      var operateBtnCtl = exports('operateBtnCtl', (_dec = ccclass('operateBtnCtl'), _dec2 = property(Sprite), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(operateBtnCtl, _Component);

        function operateBtnCtl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "icon", _descriptor, _assertThisInitialized(_this));

          _this._mode = "";
          _this._data = null;
          _this._follow = null;
          _this._type = 0;
          _this._HeightOffset = 100;
          _this._action = null;
          return _this;
        }

        var _proto = operateBtnCtl.prototype;

        _proto.onLoad = function onLoad() {
          this.node.active = false;
          this._action = null;
        };

        _proto.getOffset = function getOffset(target, type) {
          var cs = target.getComponent(UITransform).contentSize;

          if (type == 1) {
            return {
              x: -cs.width / 2,
              y: cs.height / 2
            };
          } else if (type == 2) {
            return {
              x: -cs.width / 2,
              y: -cs.height / 2
            };
          } else if (type == 3) {
            return {
              x: cs.width / 2,
              y: cs.height / 2
            };
          } else if (type == 4) {
            return {
              x: cs.width / 2,
              y: -cs.height / 2
            };
          }

          return {
            x: 0,
            y: 0
          };
        };

        _proto.popBtn = function popBtn(target, mode, data) {
          var _this2 = this;

          var self = this;
          this._mode = mode;
          this._data = _extends({}, data);
          var operaledata = OperaleData[mode];
          if (!operaledata || !operaledata.image || operaledata.image == "") return;
          this.node.setScale(1, 1, 1);

          if (data.follow) {
            this._follow = data.follow;
            this._type = data.followtype;

            this._follow.getWorldPosition(temp_V3);

            temp_V3.y += this._HeightOffset;
            this._HeightOffset = 100;
            if (data.select && data.select.node && data.select.node.name == "pasture") ;
            this.node.setWorldPosition(temp_V3);
          } else {
            target.getWorldPosition(temp_V3);
            temp_V3.y += this._HeightOffset;
            this.node.setWorldPosition(temp_V3);
          }

          if (this._action) {
            this._action.stop();

            this._action = null;
          }

          this.node.active = true;
          this.node.setScale(0.2, 0.2, 0.2);
          var iconname = "icon/" + operaledata.image + "/spriteFrame";
          console.log("obtn=>", iconname);
          resources.load(iconname, SpriteFrame, function (error, sprite) {
            if (sprite) {
              if (!self || !self.icon || !self.icon.isValid) return;
              self.icon.spriteFrame = sprite;
              _this2._action = tween(self.node).to(0.1, {
                scale: new Vec3(1, 1, 1)
              }).call(function () {
                self._action = null;
                var info = self.operaledata;

                if (info && info.select) {
                  TaskManager.getInstance().onShowOperaBtn(info.select, _this2.operalemode);
                }
              }).start();
            }

            if (error) console.log(error);
          });
        };

        _proto.pushBtn = function pushBtn() {
          this._follow = null;
          this.node.active = false;

          if (this._action) {
            this._action.stop();

            this._action = null;
          }
        };

        _proto.update = function update(deltaTime) {
          if (!this._action && this.node.active && this._follow) {
            this._follow.getWorldPosition(temp_V3);

            temp_V3.y += this._HeightOffset;
            this.node.setWorldPosition(temp_V3);
          }
        };

        _createClass(operateBtnCtl, [{
          key: "operalemode",
          get: function get() {
            return this._mode;
          },
          set: function set(val) {
            this._mode = val;
          }
        }, {
          key: "operaledata",
          get: function get() {
            return this._data;
          },
          set: function set(val) {
            this._data = val;
          }
        }]);

        return operateBtnCtl;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "icon", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PanelContent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstLanguage.ts', './ConfigFile.ts', './MessageManager.ts', './WebSocketMgr.ts', './NodeHelp.ts', './Pool.ts', './UIHelp.ts', './BagUIItemTip.ts', './UINoticePropItem.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Node, Sprite, instantiate, ScrollView, assetManager, SpriteFrame, Texture2D, UITransform, Label, RichText, sys, Component, ConstLanguage, ConfigFile, MessageManager, WebSocketMgr, NodeHelp, PoolOnce, UIHelp, BagUIItemTip, UINoticePropItem;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      Sprite = module.Sprite;
      instantiate = module.instantiate;
      ScrollView = module.ScrollView;
      assetManager = module.assetManager;
      SpriteFrame = module.SpriteFrame;
      Texture2D = module.Texture2D;
      UITransform = module.UITransform;
      Label = module.Label;
      RichText = module.RichText;
      sys = module.sys;
      Component = module.Component;
    }, function (module) {
      ConstLanguage = module.ConstLanguage;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }, function (module) {
      UINoticePropItem = module.UINoticePropItem;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "38ab3JKvDZNarliIGxlEwqd", "PanelContent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PanelContent = exports('PanelContent', (_dec = ccclass('PanelContent'), _dec2 = property({
        type: Prefab,
        displayName: "prop模板"
      }), _dec3 = property({
        type: Node,
        displayName: "内容text"
      }), _dec4 = property({
        type: Sprite,
        displayName: "活动图片"
      }), _dec5 = property({
        type: Node,
        displayName: "可领取道具挂载节点"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PanelContent, _Component);

        function PanelContent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "propitem", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labelContent", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "img", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Props", _descriptor4, _assertThisInitialized(_this));

          _this.Pool = new PoolOnce(10, function () {
            return instantiate(_this.propitem);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          _this.nowItem = null;
          return _this;
        }

        var _proto = PanelContent.prototype;

        _proto.setShow = function setShow(Item) {
          var _this2 = this;

          NodeHelp.getchildlable(this.node, "ScrollViewText", ScrollView, function (comp, ndoe) {
            comp.scrollToTop();
          }); //关闭上一次的显示

          if (this.nowItem) {
            this.nowItem.closeBGClick();
          }

          this.nowItem = Item; //初始化

          while (this.Props.children.length >= 1) {
            var cmp = this.Props.children[0].getComponent(UINoticePropItem);
            cmp.id = null;
            cmp.UIpanel = null;
            this.Pool.put(this.Props.children[0]);
          }

          var data = this.nowItem.mailInfo;
          this.onRead(data.ID); //图片显示

          if (data.Pic) {
            this.img.node.active = true;
            var self = this;
            assetManager.loadRemote(data.Pic, {
              ext: '.png'
            }, function (err, imageAsset) {
              if (err) {
                console.log(err);
                return;
              }

              var spriteFrame = new SpriteFrame();
              var texture = new Texture2D();
              texture.image = imageAsset;
              spriteFrame.texture = texture;
              self.img.spriteFrame = spriteFrame;
              var scale = NodeHelp.setScopeLimitation(self.img.node.getComponent(UITransform), 481, 348);
              self.img.node.setScale(scale, scale);
            });
          } else {
            this.img.node.active = false;
          } //标题显示


          var MailTitle = "";

          switch (data.MailTitleType) {
            case "string":
              {
                MailTitle = data.MailTitle;
                break;
              }

            case "i18n":
              {
                MailTitle += ConfigFile.findLanguage(Number(data.MailTitle));
                break;
              }
          }

          if (MailTitle && MailTitle.length) {
            var text = MailTitle;

            if (data.MailTitleParam && data.MailTitleParam.length && data.MailTitleParam.length % 2 == 0) {
              for (var index = 0; index < data.MailTitleParam.length; index += 2) {
                var Type = data.MailTitleParam[index];
                var param = data.MailTitleParam[index + 1];

                switch (Type) {
                  case "string":
                    {
                      text = text.format(param);
                      break;
                    }

                  case "i18n":
                    {
                      text = text.format(ConfigFile.findLanguage(Number(param)));
                      break;
                    }
                }
              }
            }

            NodeHelp.getchildlable(this.node, "LabelTitle", Label, function (comp) {
              comp.string = text;
            });
          } else {
            NodeHelp.getchildlable(this.node, "LabelTitle", Label, function (comp) {
              comp.string = "";
            });
          } //标题显示


          var MailContent = "";

          switch (data.MailContentType) {
            case "string":
              {
                MailContent = data.MailContent;
                break;
              }

            case "i18n":
              {
                MailContent += ConfigFile.findLanguage(Number(data.MailContent));
                break;
              }
          }

          if (MailContent && MailContent.length) {
            this.labelContent.active = true;
            var _text = MailContent;

            if (data.MailContentParam && data.MailContentParam.length && data.MailContentParam.length % 2 == 0) {
              for (var _index = 0; _index < data.MailContentParam.length; _index += 2) {
                var _Type = data.MailContentParam[_index];
                var _param = data.MailContentParam[_index + 1];

                switch (_Type) {
                  case "string":
                    {
                      _text = _text.formati(_param);
                      break;
                    }

                  case "i18n":
                    {
                      _text = _text.formati(ConfigFile.findLanguage(Number(_param)));
                      break;
                    }
                }
              }
            }

            this.labelContent.getComponent(RichText).string = "<color=#81411e>" + _text + "</color>";
          } else {
            this.labelContent.active = false;
          } //道具显示


          if (data.Items && data.Items.length > 0) {
            this.Props.active = true;
            data.Items.forEach(function (v) {
              var cofig = ConfigFile.getItemData(v.ItemModeId);
              var number = v.ItemCount;

              if (cofig) {
                var node = _this2.Pool.get();

                _this2.Props.addChild(node);

                NodeHelp.loadIcon("propIcon/itemicon", cofig.ItemRes.toString(), function (res) {
                  if (node) NodeHelp.getchildlable(node, "Icon", Sprite, function (comp) {
                    comp.spriteFrame = res;
                    var scale = NodeHelp.setScopeLimitation(comp.node.getComponent(UITransform), 70, 70);
                    comp.node.setScale(scale, scale);
                  });
                });
                NodeHelp.getchildlable(node, "Label", Label, function (comp) {
                  comp.string = number + "";
                });
                node.getComponent(UINoticePropItem).id = v.ItemModeId;
                node.getComponent(UINoticePropItem).num = number;
                node.getComponent(UINoticePropItem).UIpanel = _this2.node;
              }
            });
          } else {
            this.Props.active = false;
          } //按钮显示


          if (data.Items && data.Items.length > 0 || data.JumpURL) {
            NodeHelp.getchildlable(this.node, "Buttons", null, function (comp, node) {
              node.active = true;

              if (data.Items && data.Items.length) {
                if (data.MailReceiveState == 0) {
                  NodeHelp.getchildlable(node, "ButtonGet", null, function (comp, node) {
                    node.active = true;
                  });
                  NodeHelp.getchildlable(node, "ButtonGet", Label, function (comp, node) {
                    comp.string = ConfigFile.findLanguage(ConstLanguage.NOTICE_PANEL_CONTENT2);
                  });
                  NodeHelp.getchildlable(node, "ButtonHave", null, function (comp, node) {
                    node.active = false;
                  });
                } else {
                  NodeHelp.getchildlable(node, "ButtonGet", null, function (comp, node) {
                    node.active = false;
                  });
                  NodeHelp.getchildlable(node, "ButtonHave", null, function (comp, node) {
                    node.active = true;
                  });
                  NodeHelp.getchildlable(node, "ButtonHave", Label, function (comp) {
                    comp.string = ConfigFile.findLanguage(ConstLanguage.NOTICE_PANEL_CONTENT3);
                  });
                }
              } else {
                NodeHelp.getchildlable(node, "ButtonGet", null, function (comp, node) {
                  node.active = false;
                });
                NodeHelp.getchildlable(node, "ButtonHave", null, function (comp, node) {
                  node.active = false;
                });
              }

              if (data.JumpURL) {
                NodeHelp.getchildlable(node, "ButtonGo", null, function (comp, node) {
                  node.active = true;
                });
                NodeHelp.getchildlable(node, "ButtonGo", Label, function (comp, node) {
                  comp.string = ConfigFile.findLanguage(ConstLanguage.NOTICE_PANEL_CONTENT1);
                });
              } else NodeHelp.getchildlable(node, "ButtonGo", null, function (comp, node) {
                node.active = false;
              });
            });
          } else {
            NodeHelp.getchildlable(this.node, "Buttons", null, function (comp, node) {
              node.active = false;
            });
          }
        };

        _proto.onClickGet = function onClickGet(event) {
          BagUIItemTip.getInstance().closeTip();
          var data = {
            ID: []
          };
          data.ID.push(this.nowItem.mailInfo.ID);
          UIHelp.openLoadingTA();
          WebSocketMgr.send(MessageManager.Net.FarmMailReceiveRequest, data);
        };

        _proto.onClickGo = function onClickGo(event) {
          BagUIItemTip.getInstance().closeTip();
          sys.openURL(this.nowItem.mailInfo.JumpURL);
        };

        _proto.onDisable = function onDisable() {
          BagUIItemTip.getInstance().closeTip();

          while (this.Props.children.length > 1) {
            this.Pool.put(this.Props.children[0]);
          }

          this.Pool.clear();
        };

        _proto.onRead = function onRead(id) {
          var data = {
            ID: []
          };
          data.ID.push(id);
          WebSocketMgr.send(MessageManager.Net.FarmMailReadRequest, data);
        };

        return PanelContent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "propitem", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "labelContent", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "img", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "Props", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/pasture.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './OperaleDef.ts', './ConfigFile.ts', './GameAllData.ts', './MessageManager.ts', './EventManager.ts', './producer.ts', './GameManager.ts', './MainGame.ts', './AnimalCtl.ts', './UIHelp.ts', './TaskManager.ts', './RoleCtl.ts', './TipManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, _createClass, cclegacy, Vec3, Vec2, _decorator, Sprite, Node, SpriteFrame, math, resources, instantiate, UITransform, Size, tween, OperaleDef, ConfigFile, Configname, GameAllData, MessageManager, EventManager, producer, GameManager, MainGame, mapCellColNum, AnimalCtl, UIHelp, TaskManager, ERRORTYPE, RoleCtl, TipManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      Vec2 = module.Vec2;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      math = module.math;
      resources = module.resources;
      instantiate = module.instantiate;
      UITransform = module.UITransform;
      Size = module.Size;
      tween = module.tween;
    }, function (module) {
      OperaleDef = module.OperaleDef;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      MainGame = module.MainGame;
    }, function (module) {
      mapCellColNum = module.mapCellColNum;
      AnimalCtl = module.AnimalCtl;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      TaskManager = module.TaskManager;
      ERRORTYPE = module.ERRORTYPE;
    }, function (module) {
      RoleCtl = module.RoleCtl;
    }, function (module) {
      TipManager = module.TipManager;
    }],
    execute: function () {
      exports('CELLSTATE', void 0);

      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14;

      cclegacy._RF.push({}, "6f6eehsFkVI47fVPeGskwDw", "pasture", undefined); //wdight = -210 210  420   7
      //60 60
      //7*4;


      var cell = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0];
      var dirData = [{
        x: -1,
        y: -1
      }, //左下
      {
        x: -1,
        y: 1
      }, //左上
      {
        x: 1,
        y: -1
      }, //右下
      {
        x: 1,
        y: 1
      } //右上
      ];

      var _temp_V3 = new Vec3();

      var _temp_V2_1 = new Vec2();

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CELLSTATE;

      (function (CELLSTATE) {
        CELLSTATE[CELLSTATE["DONTCAN"] = 0] = "DONTCAN";
        CELLSTATE[CELLSTATE["CANWALK"] = 1] = "CANWALK";
      })(CELLSTATE || (CELLSTATE = exports('CELLSTATE', {})));

      var AnimalState = [0, 3080, 3081, 3082];
      var pasture = exports('pasture', (_dec = ccclass('pasture'), _dec2 = property(Sprite), _dec3 = property(Sprite), _dec4 = property(Sprite), _dec5 = property(Node), _dec6 = property([SpriteFrame]), _dec7 = property([SpriteFrame]), _dec8 = property(Sprite), _dec9 = property(Node), _dec10 = property(Node), _dec11 = property(Node), _dec12 = property(Sprite), _dec13 = property(Node), _dec14 = property(Node), _dec15 = property([SpriteFrame]), _dec(_class = (_class2 = /*#__PURE__*/function (_producer) {
        _inheritsLoose(pasture, _producer);

        function pasture() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _producer.call.apply(_producer, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "wall1", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "wall2", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "build", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Layer", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "UPIcon", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "DownIcon", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lock", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "effNode", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ZeffNode", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "chuizi", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Select", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "BuildPick", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Collider", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "barnlevel", _descriptor14, _assertThisInitialized(_this));

          _this.mapMask = [];
          _this.FoodGroove = 0;
          _this._Idletime = 0;
          _this._Idletime2 = 0;
          _this._AnimalInfo = {};
          _this._idCache = {};
          _this.breedCount = 0;
          _this.lastTime = 0;
          _this.AITime = 1000;
          return _this;
        }

        var _proto = pasture.prototype;

        _proto.getType = function getType() {
          return "pasture";
        };

        _proto.getMaxLevel = function getMaxLevel() {
          var data = this.getPastueAll(); //let LandConfig = ConfigFile.getInstance().config.get(Configname.TFenceInfo);

          return data.length;
        };

        _proto.isMaxLevel = function isMaxLevel() {
          var game = GameManager.getInstance().getGame(MainGame);
          var cnt = game.getPastureCnt(this.level + 1) + 1;
          var configdata = ConfigFile.getPastureInfo(cnt, this.level + 1);
          var fenceData = ConfigFile.getFenceInfoNew(this.level + 1);

          if (!configdata || !fenceData) {
            // if(!configdata.NeedItem|| configdata.NeedItem=="" || configdata.show) return true;
            return true;
          }

          return false; //return this.level >= this.getMaxLevel();
        };

        _proto.resetMapMask = function resetMapMask() {
          for (var index = 0; index < cell.length; index++) {
            this.mapMask[index] = 1;
          }
        };

        _proto.getMaskIndex = function getMaskIndex(x, y) {
          var a = y * mapCellColNum + x;
          if (a < 0) a = 0;
          if (a >= cell.length) a = cell.length - 1;
          return a;
        };

        _proto.setMapMask = function setMapMask(index, state) {
          if (index < 0) return;
          if (index >= cell.length) return;
          this.mapMask[index] = state;
        };

        _proto.getXYfromIndex = function getXYfromIndex(socket) {
          var y = Math.floor(socket / mapCellColNum);
          var x = Math.floor(socket % mapCellColNum);
          return {
            x: x,
            y: y
          };
        };

        _proto.testCell = function testCell(socket) {
          if (socket < 0) return false;
          if (socket >= this.mapMask.length) return false;
          return this.mapMask[socket] == 1 && cell[socket] == 1;
        };

        _proto.CanWallk = function CanWallk(x, y) {
          return this.testCell(y * mapCellColNum + x);
        };

        _proto.getIdleCell = function getIdleCell() {
          var start = math.randomRangeInt(0, 30);

          for (var index = start; index < start + cell.length; index++) {
            var socket = Math.floor(index % cell.length);
            if (this.testCell(socket)) return socket;
          }

          return 0;
        };

        _proto.rebuildMapMask = function rebuildMapMask() {
          var _this2 = this;

          this.resetMapMask();
          var keys = Object.keys(this._AnimalInfo);
          keys.forEach(function (item) {
            var animal = _this2._AnimalInfo[item];
            _this2.mapMask[animal.getMaskIndex()] = 1;
          });
        };

        _proto.resetData = function resetData(data) {
          this.ReleaseAnimal();
          this.resetMapMask();
          this.ZeffNode.removeAllChildren();
          this.level = 0;
          this.breedCount = 0;
          this.wall1.spriteFrame = this.UPIcon[0];
          this.wall2.spriteFrame = this.DownIcon[0];
          this.build.spriteFrame = this.barnlevel[0];
          this.state = OperaleDef.UNABLELOCK; //还不能解锁

          this.lock.node.active = false;
        };

        _proto.testAnimal = function testAnimal(animal) {
          for (var index in this._AnimalInfo) {
            if (this._AnimalInfo[index] == animal) return true;
          }

          return false;
        };

        _proto.getAnimal = function getAnimal(index) {
          if (this.getAnimalNum() < 1) return null;

          for (var _index in this._idCache) {
            if (this._idCache[_index] != 0) return this._idCache[_index];
          }

          return null;
        };

        _proto.initData = function initData(data) {
          this.onPastureResponse(data);
        };

        _proto.pickEnable = function pickEnable(show) {
          if (show) {
            if (this.state == OperaleDef.CANBREED) {
              this.build.grayscale = true;
              this.wall1.grayscale = true;
              this.wall2.grayscale = true;
            }
          } else {
            this.build.grayscale = false;
            this.wall1.grayscale = false;
            this.wall2.grayscale = false;
          }
        };

        _proto.upAnimalLayer = function upAnimalLayer() {
          var tempArray = [];
          var keys = Object.keys(this._AnimalInfo);
          if (keys.length <= 0) return;

          for (var index in this._AnimalInfo) {
            var animalnode = this._AnimalInfo[index];
            if (!animalnode) continue;
            tempArray.push(animalnode);
          }

          if (tempArray.length <= 0) return;
          tempArray.sort(function (a, b) {
            var apos = a.node.worldPosition;
            var bpos = b.node.worldPosition;
            var yd = Math.abs(apos.y - bpos.y);

            if (yd > 10) {
              if (apos.y >= bpos.y) return -1;else return 1;
            } else {
              if (apos.x >= bpos.x) return -1;else return 1;
            }
          });

          for (var _index2 = 0; _index2 < tempArray.length; _index2++) {
            var _animalnode = tempArray[_index2]; //let old = animalnode.node.getSiblingIndex();

            _animalnode.setlayerIndex(_index2); //console.log("id=>",animalnode.socketID," ti=>",index,"  si=>",old);

          }
        };

        _proto.loadAnimal = function loadAnimal(data, id) {
          var _this3 = this;

          var self = this;
          var animal = this._AnimalInfo[id];

          if (animal === undefined) {
            this._AnimalInfo[id] = null;
            this._idCache[id] = data.AnimalModeId;
            var animalModeId = 101; //data.AnimalModeId;

            resources.load("animal/" + animalModeId + "_1", function (error, res) {
              if (error) {
                console.log("loadanimal error=>", error);
              }

              if (res) {
                var animalnode = instantiate(res);
                var script = animalnode.getComponent(AnimalCtl);
                var cellindex = self.getIdleCell();

                var _self$getXYfromIndex = self.getXYfromIndex(cellindex),
                    x = _self$getXYfromIndex.x,
                    y = _self$getXYfromIndex.y;

                script.initAnimal(_this3, id, data);
                _this3._AnimalInfo[id] = script;
                animalnode.parent = _this3.Layer;
                script.setPos(x, y); //console.log("setPos x=>", x, " y=", y);

                _this3.setMapMask(cellindex, CELLSTATE.DONTCAN);
              }
            });
          } else {
            if (animal != null) animal.dataChange(data);
          }
        };

        _proto.ReleaseAnimal = function ReleaseAnimal() {
          for (var key in this._AnimalInfo) {
            var item = this._AnimalInfo[key];
            item && item.release();
          }

          this._idCache = {};
          this._AnimalInfo = {};
        };

        _proto.getAnimalDirtyState = function getAnimalDirtyState() {
          var ret = false;

          for (var key in this._AnimalInfo) {
            var item = this._AnimalInfo[key];
            if (!item) continue;
            if (item.dirty) ret = true;
            item.dirty = false;
          }

          return ret;
        };

        _proto.setAnimalUpdateState = function setAnimalUpdateState(value) {
          for (var key in this._AnimalInfo) {
            var item = this._AnimalInfo[key];
            item && item.setUpdateState(value);
          }
        };

        _proto.checkClearAnimal = function checkClearAnimal() {
          for (var key in this._AnimalInfo) {
            var item = this._AnimalInfo[key];

            if (item && item.updateState == false) {
              var oldPos = item.getMaskIndex();
              this.setMapMask(oldPos, CELLSTATE.CANWALK);
              item.release(); //这里可以放个动画

              delete this._AnimalInfo[key];
              this._idCache[key] = 0;
            }
          }
        };

        _proto.getAnimalNum = function getAnimalNum() {
          return Object.keys(this._AnimalInfo).length;
        };

        _proto.getGrooveNum = function getGrooveNum() {
          return this.breedCount;
        };

        _proto.canGroove = function canGroove() {
          if (this.getAnimalNum() >= this.getGrooveNum()) return false;
          return true;
        };

        _proto.onbackProcess = function onbackProcess(id) {
          if (this.ID == id) {
            if (this.state == OperaleDef.UNABLELOCK || this.state == OperaleDef.UNLOCKPASTURE) {
              this.state = OperaleDef.UNLOCKPASTURE;
              this.lock.node.active = true;
              this.build.spriteFrame = null;
              this.showChuizi();
            }
          }
        };

        _proto.pastureCanUpgrade = function pastureCanUpgrade() {
          if (this.state != OperaleDef.CANBREED) return false;
          if (!this.getVipCanUpgrade()) return false;
          if (this.level >= this.getMaxLevel()) return false;
          var needmoney = this.getUpgradeNeedItem();
          var id = this.getUpgradeNeedItemType();
          if (GameAllData.getTotalConch(id) < needmoney) return false;
          return true;
        };

        _proto.syncChuiziPosition = function syncChuiziPosition() {
          if (!this.chuizi) return;
          var game = GameManager.getInstance().getGame(MainGame);
          var scale = game.node.scale;
          var pos;
          var fh;

          if (this.state == OperaleDef.UNLOCKPASTURE) {
            pos = this.lock.node.getWorldPosition();
            fh = this.lock.node.getComponent(UITransform).contentSize.height * scale.x / 4;
            pos.y += fh;
          } else {
            pos = this.build.node.getWorldPosition();
            fh = this.build.node.getComponent(UITransform).contentSize.height * scale.x;
            pos.y += fh;
          }

          this.chuizi.setWorldPosition(pos);
        };

        _proto.showChuizi = function showChuizi() {
          if (this.pastureCanUpgrade() || this.state == OperaleDef.UNLOCKPASTURE && this.checkCanUnlock(1)) {
            this.chuizi.active = true;
            this.syncChuiziPosition();
          } else {
            this.chuizi.active = false;
          }
        };

        _proto.setBuildSize = function setBuildSize(index) {
          if (index == 0) {
            this.BuildPick.getComponent(UITransform).setContentSize(new Size(260, 300));
          } else if (index == 1) {
            this.BuildPick.getComponent(UITransform).setContentSize(new Size(260, 300));
          } else if (index == 2) {
            this.BuildPick.getComponent(UITransform).setContentSize(new Size(410, 370));
          } else if (index == 3) {
            this.BuildPick.getComponent(UITransform).setContentSize(new Size(410, 370));
          } else if (index == 4) {
            this.BuildPick.getComponent(UITransform).setContentSize(new Size(490, 450));
          } else {
            this.BuildPick.getComponent(UITransform).setContentSize(new Size(500, 490));
          }
        };

        _proto.onPastureResponse = function onPastureResponse(data) {
          this.ID = data.PastureModeId;
          var old = this.level;
          this.level = data.Grade;
          var oldbreed = this.breedCount;
          this.breedCount = data.BreedCount;
          var index = data.Grade;
          if (index >= this.UPIcon.length) index = this.UPIcon.length - 1;else if (index < 0) index = 0;
          this.wall1.spriteFrame = this.UPIcon[index];
          this.wall2.spriteFrame = this.DownIcon[index];
          index = data.Grade;
          if (index >= this.barnlevel.length) index = this.barnlevel.length - 1;else if (index < 0) index = 0;
          this.build.spriteFrame = this.barnlevel[index];
          this.setBuildSize(index);
          var oldstate = this.state; //转换土地状态

          if (Object.keys(data.Animal).length <= 0) {
            this.ReleaseAnimal();
            this.state = OperaleDef.CANBREED;
            this._Idletime = UIHelp.getTimeMask();
            this._Idletime2 = UIHelp.getTimeMask();
          } else {
            this.setAnimalUpdateState(false);

            for (var pp in data.Animal) {
              var animal = data.Animal[pp];
              this.loadAnimal(animal, pp);
            }

            this.checkClearAnimal();
            this.pickEnable(false);
          }

          if (data.Grade <= 0) {
            this.state = OperaleDef.UNABLELOCK; //还不能解锁
          } else {
            this.state = OperaleDef.CANBREED;

            if (oldstate == OperaleDef.UNLOCKPASTURE) {
              this.activeBuild(1, null);
            }
          }

          if (this.state == OperaleDef.UNLOCKPASTURE) {
            this.lock.node.active = true;
            this.build.spriteFrame = null;
          } else {
            this.lock.node.active = false;
          }

          this.ZeffNode.removeAllChildren();
          this.showChuizi();
          var ni = GameManager.getInstance().getGame(MainGame);

          if (ni) {
            if (old != this.level || oldbreed != this.breedCount) {
              EventManager.getInstance().trigger(MessageManager.Custom.UserDataChange, {});
            }
          }
        };

        _proto.layerAnalysis = function layerAnalysis() {
          var mainGame = GameManager.getInstance().getGame(MainGame);
          mainGame.scensTree.insertNode1(this.node.parent);
        };

        _proto.setSelectState = function setSelectState(show) {
          _producer.prototype.setSelectState.call(this, show);

          this.Select.node.active = show;
        };

        _proto.syncScale = function syncScale() {
          var game = GameManager.getInstance().getGame(MainGame);
          var scale = game.node.scale;
          var sx = 2.0 - scale.x;

          if (this.chuizi) {
            this.chuizi.setScale(sx, sx, sx);
            this.syncChuiziPosition();
          }
        };

        _proto.start = function start() {
          this.Select.node.active = false;
          this.layerAnalysis();
          this.resetMapMask();
          EventManager.getInstance().add(MessageManager.Custom.ScaleChange, this, this.syncScale);
        };

        _proto.moveTo = function moveTo(animal) {
          var oldPos = animal.getMaskIndex();
          var x = animal.x;
          var y = animal.y;
          var start = math.randomRangeInt(0, 8);

          for (var index = start; index < start + dirData.length; index++) {
            var dir = Math.floor(index % dirData.length);
            var dd = dirData[dir];
            var tx = x + dd.x;
            var ty = y + dd.y;

            if (this.CanWallk(tx, ty)) {
              var newPos = this.getMaskIndex(tx, ty);
              this.setMapMask(newPos, CELLSTATE.DONTCAN);
              this.setMapMask(oldPos, CELLSTATE.CANWALK);
              animal.moveTo(dir, dd.x, dd.y);
              break;
            }
          }
        };

        _proto.eat = function eat(animal) {
          animal.eat();
        };

        _proto.actionAnimal = function actionAnimal(animal) {
          this.moveTo(animal);
          return true; // if (math.random() < 0.2) {
          //     this.eat(animal);
          //     return true;
          // } else {
          //     this.moveTo(animal);
          //     return true;
          // }
          // return true;
        };

        _proto.isUnLock = function isUnLock() {
          if (this.state == OperaleDef.UNABLELOCK) return false;
          if (this.state == OperaleDef.UNLOCKPASTURE) return false;
          return true;
        };

        _proto.update = function update(deltaTime) {
          if (this.state == OperaleDef.CANBREED && this.getAnimalNum() < 1 && UIHelp.getTimeDiff(this._Idletime) > 3000) {
            this._Idletime = UIHelp.getTimeMask();

            if (this.ZeffNode.children.length < 1) {
              _producer.prototype.playEffect.call(this, this.ZeffNode, "zEffect");
            }
          }

          this.resetRequest();

          for (var key in this._AnimalInfo) {
            var script = this._AnimalInfo[key];

            if (script && script.isIdle()) {
              if (UIHelp.getTimeDiff(script.lastAiTime) > script.AITime) {
                //  if (UIHelp.getTimeDiff(script.lastAiTime) > 1000) {
                script.lastAiTime = UIHelp.getTimeMask();
                if (!this.actionAnimal(script)) break;
              }
            }
          }

          if (this.getAnimalDirtyState()) {
            this.upAnimalLayer();
          }
        };

        _proto.checkCanUnlock = function checkCanUnlock(level) {
          var configdata = this.getPastureInfo(level);
          if (!configdata) return false;
          return GameAllData.checkConditionArray(configdata.PastureUnlock);
        };

        _proto.getVipCanUpgrade = function getVipCanUpgrade() {
          var fenceinfo = ConfigFile.getFenceInfo(this.level);
          if (!fenceinfo) return false;
          return GameAllData.checkConditionArray(fenceinfo.FenceUnlock);
        };

        _proto.canOperale = function canOperale(mode, data, show) {
          if (mode == OperaleDef.NONE) return false;
          if (mode == OperaleDef.UNABLELOCK) return false;
          var retValue = undefined;
          TaskManager.getInstance().asErrorType = ERRORTYPE.ET_NONE;
          TaskManager.getInstance().asOperaArgs = {};
          TaskManager.getInstance().asOperaArgs["mode"] = mode;
          TaskManager.getInstance().asOperaArgs["select"] = this;

          if (mode == OperaleDef.UPGRADETROUGH) {
            var aa = this.getCurGrooveItem();
            var type = this.getGrooveItemType(); // let cur = GameAllData.getTotalConch();

            var cur = GameAllData.getCurrencyNumByType(type);

            if (cur >= aa) {
              retValue = true;
            } else {
              producer.MessageBox(10000, type, null);
              TaskManager.getInstance().asErrorType = ERRORTYPE.ET_SOCKET;
            }
          }

          if (mode == OperaleDef.UPGRADEPASTURE) {
            var needMoney = this.getUpgradeNeedItem();
            var needType = this.getUpgradeNeedItemType(); // let curMoney = GameAllData.getTotalConch();//

            var curMoney = GameAllData.getCurrencyNumByType(needType);

            if (curMoney >= needMoney) {
              retValue = true;
            } else {
              TaskManager.getInstance().asErrorType = ERRORTYPE.ET_MONERY;
              producer.MessageBox(10000, needType, null);
            }
          }

          if (mode == OperaleDef.UNLOCKPASTURE) {
            if (this.checkCanUnlock(1)) retValue = true;else retValue = false;
          }

          if (mode == OperaleDef.CANBREED) {
            TaskManager.getInstance().asOperaArgs["seedId"] = data.seedid;

            if (Object.keys(this._AnimalInfo).length < this.breedCount && _producer.prototype.canOperale.call(this, mode, data, show)) {
              retValue = this.checkMoney(mode, data, show);
            } else {
              retValue = false;
            }

            if (!this.canGroove()) {
              this.pickEnable(true);
            }
          }

          if (mode == OperaleDef.STEALANIMAL && this.state == OperaleDef.CANBREED) {
            retValue = this.checkSteal(mode, data, show);
          }

          if (retValue == undefined && _producer.prototype.canOperale.call(this, mode, data, show)) {
            retValue = true;
          }

          TaskManager.getInstance().asOperaArgs["asErrorType"] = TaskManager.getInstance().asErrorType;
          TaskManager.getInstance().onActionState(mode, data, retValue, TaskManager.getInstance().asOperaArgs);
          return retValue;
        };

        _proto.getPastueAll = function getPastueAll() {
          var _this4 = this;

          var PastureConfig = ConfigFile.getInstance().config.get(Configname.TPastureInfo);
          var data = PastureConfig.filter(function (item) {
            return _this4.ID == item.PastureId;
          });
          return data;
        };

        _proto.getPastureInfo = function getPastureInfo(level) {
          var pi = ConfigFile.getPastureInfo(this.ID, level);
          if (pi) return pi;
          var data = this.getPastueAll();
          return data[data.length - 1];
        };

        _proto.getUnlockNeedItem = function getUnlockNeedItem(level) {
          var configdata = this.getPastureInfo(level); //NeedItem

          if (!configdata) return 0;
          var m1 = ConfigFile.getLimitInfo(configdata.PastureUnlockConsume);
          return m1.val;
        };

        _proto.getUpgradeNeedItem = function getUpgradeNeedItem() {
          var game = GameManager.getInstance().getGame(MainGame);
          var cnt = game.getPastureCnt(this.level + 1) + 1; //if(cnt<1) cnt = 1;

          var configdata = ConfigFile.getPastureInfo(cnt, this.level);
          if (!configdata) return 0;
          var m1 = ConfigFile.getLimitInfo(configdata.NeedItem);
          return m1.val;
        };

        _proto.getUpgradeNeedItemType = function getUpgradeNeedItemType() {
          var game = GameManager.getInstance().getGame(MainGame);
          var cnt = game.getPastureCnt(this.level + 1) + 1; //if(cnt<1) cnt = 1;

          var configdata = ConfigFile.getPastureInfo(cnt, this.level);
          if (!configdata) return 0;
          var m1 = ConfigFile.getLimitInfo(configdata.NeedItem);
          return m1.id;
        } //解锁食槽花费
        ;

        _proto.getGrooveItem = function getGrooveItem(level) {
          var game = GameManager.getInstance().getGame(MainGame);
          var cnt = game.getPastureGrooveCnt(this.breedCount + 1) + 1;
          var configdata = ConfigFile.getPastureInfo(cnt, level); //NeedItem

          if (!configdata) return 0;
          var m1 = ConfigFile.getLimitInfo(configdata.GrooveItem);
          return m1.val;
        } //解锁食槽花费
        ;

        _proto.getGrooveItemType = function getGrooveItemType() {
          var level = this.breedCount;
          var game = GameManager.getInstance().getGame(MainGame);
          var cnt = game.getPastureGrooveCnt(this.breedCount + 1) + 1;
          var configdata = ConfigFile.getPastureInfo(cnt, level); //NeedItem

          if (!configdata) return 0;
          var m1 = ConfigFile.getLimitInfo(configdata.GrooveItem);
          return m1.id;
        };

        _proto.getGrooveMaxCnt = function getGrooveMaxCnt() {
          var data = this.getPastueAll();
          var configdata = data[data.length - 1];
          return configdata.FoodGroove;
        };

        _proto.getCurGrooveItem = function getCurGrooveItem() {
          return this.getGrooveItem(this.breedCount);
        };

        _proto.getUnLockText = function getUnLockText(level) {
          var configdata = this.getPastureInfo(level); //FarmUnlock

          if (!configdata || !configdata.PastureUnlock) return "检查一下牧场配置表";
          var cond = GameAllData.getConditionArray(configdata.PastureUnlock);
          var msg = producer.getMessageText(configdata.PastureUnlockTxt); // let rankNeed = "1";
          // if (cond.length > 1) {
          //     let duketable = ConfigFile.getInstance().config.get(Configname.TDukeInfo);
          //     let curDuke = duketable.find(item => {
          //         return item.DukeLevel == cond[1].val;
          //     })
          //     if(curDuke) rankNeed = producer.getMessageText(curDuke.DukeName);
          // }

          msg = msg.format(cond[0].val, cond[1].val);
          return msg;
        };

        _proto.checkSteal = function checkSteal(mode, data, show) {
          if (mode == OperaleDef.STEALANIMAL) {
            var UserData = GameAllData.FarmUserResponse;
            var animal = data.animal;
            TaskManager.getInstance().asOperaArgs["animal"] = animal;
            var maxnum = ConfigFile.getGlobalInfoByGlobalId(22).IntValue;
            var minnum = ConfigFile.getGlobalInfoByGlobalId(20).IntValue;
            var lv = ConfigFile.getLimitInfo(ConfigFile.getGlobalInfoByGlobalId(100).Text);
            var rec = animal.StealMap[UserData.Id];

            if (rec >= maxnum) {
              show && producer.MessageBox(7008, null, null);
              TaskManager.getInstance().asErrorType = ERRORTYPE.ET_STEAL;
              return false;
            }

            if (UserData.VipLevel < lv.val) {
              show && producer.MessageBoxArg1(7005, lv.val, null, null);
              TaskManager.getInstance().asErrorType = ERRORTYPE.ET_VIP;
              return false;
            }

            if (animal.Count <= minnum && animal.Count > 0) {
              show && producer.MessageBox(7006, null, null);
              TaskManager.getInstance().asErrorType = ERRORTYPE.ET_STEALCOUNT;
              return false;
            }
          }

          return true;
        };

        _proto.checkAction = function checkAction(mode, data) {
          if (this.state == OperaleDef.UNLOCKPASTURE) {
            this.showUnLock();
          } else if (this.state == OperaleDef.UNABLELOCK) {
            this.showUnableLock();
          } else if (mode == OperaleDef.CANBREED) {
            if (this.state == OperaleDef.UNLOCKPASTURE || this.state == OperaleDef.UNABLELOCK) {
              producer.MessageBox(3034, null, null);
            } else if (Object.keys(this._AnimalInfo).length >= this.breedCount) {
              producer.MessageBox(3033, null, function (data) {
                EventManager.getInstance().trigger(MessageManager.Custom.SelectSeedHide, "");
              });
            }
          }
        };

        _proto.checkMoney = function checkMoney(mode, data, show) {
          var seedid = data.seedid;
          TaskManager.getInstance().asOperaArgs["seedId"] = data.seedid;
          var animal = ConfigFile.getAnimalFromModeId(seedid);
          var config = ConfigFile.getItemData(animal.AnimalCubId);
          var m1 = ConfigFile.getLimitInfo(config.ItemPrice);
          var haveItem = GameAllData.getStoreItemByModeId(animal.AnimalCubId);

          if (!haveItem || haveItem.ItemCount < 1) {
            if (m1.val > GameAllData.getTotalConch(m1.id)) {
              if (show) {
                producer.MessageBox(mode == OperaleDef.CANBREED ? 10005 : 10000, -2, function (data) {
                  EventManager.getInstance().trigger(MessageManager.Custom.SelectSeedHide, "");
                });
              }

              TaskManager.getInstance().asErrorType = ERRORTYPE.ET_MONERY;
              return false;
            }
          } //不满足要求


          if (!animal) {
            console.log("mode=>", mode, " seedid==>", seedid, "  data=>", data);
            return false;
          }

          var isLock = !GameAllData.checkConditionArray(animal.AnimalUnlock);

          if (this.level < animal.NeedLevel || isLock) {
            if (show) {
              var textTemple = producer.getMessageText(3070);
              var showInfo = {};
              showInfo["tip"] = "ProducerTip";
              showInfo["name"] = producer.getMessageText(config.Name);
              showInfo["text"] = textTemple.format(animal.NeedLevel.toString());
              this.showTip(showInfo, this.state);
              EventManager.getInstance().trigger(MessageManager.Custom.SelectSeedHide, "");
            }

            TaskManager.getInstance().asErrorType = ERRORTYPE.ET_LEVEL;
            return false;
          }

          var needitem = ConfigFile.getItemData(animal.AnimalConsumeId);
          var bagitem = GameAllData.getStoreItemByModeId(animal.AnimalConsumeId);

          if (!bagitem || bagitem.ItemCount < 1) {
            if (show) {
              producer.MessageBoxArg1(3093, producer.getMessageText(needitem.Name), null, function (data) {
                EventManager.getInstance().trigger(MessageManager.Custom.SelectSeedHide, "");
              });
            }

            TaskManager.getInstance().asErrorType = ERRORTYPE.ET_ITEM;
            return false;
          } //


          return true;
        };

        _proto.getTimeText = function getTimeText(BotanyTime) {
          var timearray = BotanyTime.split(",");
          var totalTime = parseInt(timearray[0]) + parseInt(timearray[1]);
          return producer.getTimeFormat(totalTime);
        };

        _proto.getStateName = function getStateName(id) {
          return producer.getMessageText(AnimalState[id]);
        };

        _proto.pickAnimalAll = function pickAnimalAll(uipos) {
          var select = [];

          for (var key in this._AnimalInfo) {
            var item = this._AnimalInfo[key];
            if (!item) continue;

            if (UIHelp.TestUIPoint(uipos, item.pickBG)) {
              select.push(item);
            } else if (item.YieldNode.active && UIHelp.TestUIPoint(uipos, item.YieldNode.children[1])) {
              select.push(item);
            }
          }

          return select;
        };

        _proto.pickAnimal = function pickAnimal(uipos) {
          var select = this.pickAnimalAll(uipos);

          if (select.length > 0) {
            //优选
            var s = select[0];
            var dist = 9999999;

            for (var _iterator = _createForOfIteratorHelperLoose(select), _step; !(_step = _iterator()).done;) {
              var value = _step.value;
              value.node.getWorldPosition(_temp_V3);

              _temp_V2_1.set(_temp_V3.x, _temp_V3.y);

              var d = Vec2.distance(uipos, _temp_V2_1);

              if (d < dist) {
                dist = d;
                s = value;
              }
            }

            console.log("pick id=", s.socketID, "  pos=", s.getMaskIndex());
            return s;
          }

          return null;
        };

        _proto.getUpgradeTip = function getUpgradeTip() {
          var showInfo = {};
          var fenceinfo = ConfigFile.getFenceInfo(this.level);
          if (!fenceinfo) return;
          var n = producer.getMessageText(fenceinfo.FenceName);
          showInfo["text"] = producer.getMessageText(fenceinfo.FenceTxt);
          showInfo["name"] = n + "<color=#58FA00>" + "(LV." + this.level + ")" + "</color>";
          showInfo["money"] = this.getUpgradeNeedItem();
          showInfo["tip"] = "PastureUpgradeTip";
          showInfo["select"] = this;
          showInfo["mode"] = this.state;
          showInfo["follow"] = this.build.node;
          return showInfo;
        };

        _proto.showUpgradeTip = function showUpgradeTip() {
          var game = GameManager.getInstance().getGame(MainGame);

          if (game && game.clickPastureLock) {
            return;
          }

          this.showTip(this.getUpgradeTip(), this.state);
          EventManager.getInstance().trigger(MessageManager.Custom.ShowToolsView, {
            unit: this,
            mode: this.state,
            show: true
          });
        };

        _proto.getAnimalTip = function getAnimalTip(animal) {
          var showInfo = {};
          var animalInfo = ConfigFile.getAnimalFromModeId(animal.animalModeId);
          var itemInfo = ConfigFile.getItemData(animalInfo.AnimalCubId);
          var husbandItem = ConfigFile.getItemData(animalInfo.AnimalHusbandId);
          var husbandItemName = producer.getMessageText(husbandItem.Name);
          showInfo["state"] = this.getStateName(animal.State);
          showInfo["StateIndex"] = animal.State;
          showInfo["name"] = producer.getMessageText(itemInfo.Name); //showInfo["lv"] = "LV." + this.level;

          var fenceinfo = ConfigFile.getFenceInfo(this.level);
          showInfo["color"] = producer.getMessageText(fenceinfo.FenceName);
          var localTime = UIHelp.getTimeMask() / 1000;

          if (animal.State > 1) {
            var infotemple = producer.getMessageText(3092);
            var fruitCnt = ConfigFile.getGlobalInfoByGlobalId(2).IntValue;
            var offsettime = animal.NextStateTime - producer.getServerTimeDiff(localTime);
            var ot1 = animal.CanGetTime - producer.getServerTimeDiff(localTime);
            if (offsettime <= 0) offsettime = 0;

            if (animal.HungerState == 1) {
              var infotemple1 = producer.getMessageText(3094);
              var offsettime1 = animal.HungerDeadTime - producer.getServerTimeDiff(localTime);
              if (offsettime1 <= 0) offsettime1 = 0;
              showInfo["text"] = infotemple1.format(producer.getMessageText(itemInfo.Name), producer.getTimeFormat(offsettime1));
            } else {
              showInfo["text"] = infotemple.format(producer.getTimeFormat(offsettime), producer.getTimeFormat(ot1), husbandItemName, fruitCnt);
            }

            var temple1 = producer.getMessageText(3101);
            showInfo["v1"] = temple1.format(animal.Get.toString(), (animal.Total - animal.Get).toString());
          } else {
            var _infotemple = producer.getMessageText(3090);

            var _offsettime = animal.NextStateTime - producer.getServerTimeDiff(localTime);

            var _ot = animal.CanGetTime - producer.getServerTimeDiff(localTime);

            if (_offsettime <= 0) _offsettime = 0;

            if (animal.HungerState == 1) {
              var _infotemple2 = producer.getMessageText(3094);

              var _offsettime2 = animal.HungerDeadTime - producer.getServerTimeDiff(localTime);

              if (_offsettime2 <= 0) _offsettime2 = 0;
              showInfo["text"] = _infotemple2.format(producer.getMessageText(itemInfo.Name), producer.getTimeFormat(_offsettime2));
            } else {
              showInfo["text"] = _infotemple.format(producer.getTimeFormat(_offsettime), producer.getTimeFormat(_ot), husbandItemName);
            }

            var _temple = producer.getMessageText(3100);

            showInfo["v1"] = _temple.format(animal.Total.toString());
          }

          var unitinfo = producer.getMessageText(3041);
          showInfo["consumeTime"] = producer.getTimeFormat(animalInfo.AnimalConsumeTime) + unitinfo;
          showInfo["consumeId"] = animalInfo.AnimalConsumeId;
          showInfo["tip"] = "AnimalInfoTip";
          showInfo["select"] = this;
          showInfo["follow"] = animal.node;
          showInfo["animal"] = animal;
          showInfo["mode"] = this.state;
          return showInfo;
        };

        _proto.showAnimalTip = function showAnimalTip(animal) {
          this.showTip(this.getAnimalTip(animal), this.state, animal);
        };

        _proto.showUnLock = function showUnLock() {
          var showInfo = {};
          showInfo["text"] = this.getUnLockText(1);
          showInfo["money"] = this.getUnlockNeedItem(1);
          showInfo["tip"] = "UnlockTip";
          showInfo["name"] = producer.getMessageText(3040); //producer.getMessageText(fenceinfo.FenceName);

          this.showTip(showInfo, this.state);
        };

        _proto.showUnableLock = function showUnableLock() {
          var showInfo = {};
          showInfo["tip"] = "ProducerTip";
          showInfo["name"] = producer.getMessageText(3040); // "荒地";

          showInfo["text"] = this.getUnLockText(1);
          this.showTip(showInfo, this.state);
        };

        _proto.showVisitUnLock = function showVisitUnLock() {
          var showInfo = {};
          showInfo["text"] = producer.getMessageText(2165);
          showInfo["tip"] = "ProducerTip";
          showInfo["name"] = producer.getMessageText(3040); //producer.getMessageText(fenceinfo.FenceName);

          this.showTip(showInfo, this.state);
        };

        _proto.getAnimationLayer = function getAnimationLayer() {
          var mainGame = GameManager.getInstance().getGame(MainGame);
          var layer3Node = mainGame.layer1.getChildByName("l1-3");
          return layer3Node;
        };

        _proto.activeBuild = function activeBuild(level, cb) {
          var height = this.build.node.getComponent(UITransform).contentSize.height;
          var mainGame = GameManager.getInstance().getGame(MainGame);
          var sc = mainGame.node.scale;
          height = height * sc.x;
          var index = level;
          if (index >= this.barnlevel.length) index = this.barnlevel.length - 1;else if (index < 0) index = 0;
          this.build.spriteFrame = this.barnlevel[index];
          this.build.node.active = true;
          var pos2 = this.node.getWorldPosition(new Vec3());
          pos2.y += height / 2; // self.playEffectPos(pos2, "house_level_up", null);

          this.build.node.setScale(0.9, 0.9, 0.9);
          tween(this.build.node).to(0.2, {
            scale: new Vec3(1.05, 1.05, 1.05)
          }).to(0.10, {
            scale: new Vec3(0.95, 0.95, 0.95)
          }).to(0.10, {
            scale: new Vec3(1.0, 1.0, 1.0)
          }).call(function () {
            cb && cb();
          }).start();
        } //播放烟花特效
        ;

        _proto.playlevelUpEff = function playlevelUpEff() {
          var height = this.build.node.getComponent(UITransform).contentSize.height;
          var mainGame = GameManager.getInstance().getGame(MainGame);
          var sc = mainGame.node.scale;
          height = height * sc.x;
          var self = this;
          var pos2 = this.node.getWorldPosition(new Vec3());
          pos2.y += height / 2;
          self.playEffectPos(pos2, "house_level_up", null);
        } //播放食槽解锁特效
        ;

        _proto.playFireworksEff = function playFireworksEff() {
          var _this5 = this;

          var height = this.build.node.getComponent(UITransform).contentSize.height;
          var mainGame = GameManager.getInstance().getGame(MainGame);
          var sc = mainGame.node.scale;
          height = height * sc.x;
          var self = this;
          var pos2 = this.node.getWorldPosition(new Vec3());
          pos2.y += height / 2;
          self.playEffectPos(pos2, "food_level_up", function () {
            var game = GameManager.getInstance().getGame(MainGame);

            if (game) {
              game.clickPastureLock = true;
            }

            _this5.scheduleOnce(function () {
              if (game) {
                game.clickPastureLock = false;
              } // this.showUpgradeTip();

            }, 3);
          });
        } //播放解锁特效
        ;

        _proto.playUnlockEff = function playUnlockEff() {
          var height = this.node.getComponent(UITransform).contentSize.height;
          var mainGame = GameManager.getInstance().getGame(MainGame);
          var sc = mainGame.node.scale;
          height = height * sc.x;
          var self = this;
          var pos2 = this.node.getWorldPosition(new Vec3());
          pos2.y += height / 2;
          self.playEffectPos(pos2, "houseExpand", null);
        };

        _proto.popBuild = function popBuild(level, cb) {
          var height = this.build.node.getComponent(UITransform).contentSize.height;
          var mainGame = GameManager.getInstance().getGame(MainGame);
          var sc = mainGame.node.scale;
          height = height * sc.x;
          var index = level;
          if (index >= this.barnlevel.length) index = this.barnlevel.length - 1;else if (index < 0) index = 0;
          this.build.spriteFrame = this.barnlevel[index];
          this.build.node.active = true;
          this.build.node.setPosition(new Vec3(0, -height, 0));
          tween(this.build.node).to(1.0, {
            position: new Vec3(0, 0, 0)
          }).call(function () {
            cb && cb();
          }).start();
        };

        _proto.pushBuild = function pushBuild(cb) {
          var height = this.build.node.getComponent(UITransform).contentSize.height;
          var mainGame = GameManager.getInstance().getGame(MainGame);
          var sc = mainGame.node.scale;
          var self = this;
          height = height * sc.x;
          this.build.node.setPosition(new Vec3(0, 0, 0));
          tween(this.build.node).to(1.0, {
            position: new Vec3(0, -height, 0)
          }).call(function () {
            cb && cb();
            self.build.node.active = false;
          }).start();
        };

        _proto.clickEdge = function clickEdge(uipos) {
          var collder = this.Collider.children;

          if (UIHelp.polygonHitTest(uipos, collder[0])) {
            return true;
          } else if (UIHelp.polygonHitTest(uipos, collder[1])) {
            return true;
          } else if (UIHelp.polygonHitTest(uipos, collder[2])) {
            return true;
          } else if (UIHelp.polygonHitTest(uipos, collder[3])) {
            return true;
          } else if (UIHelp.TestUIPoint(uipos, this.BuildPick)) {
            return true;
          }

          return false;
        };

        _proto.playAnimalAni = function playAnimalAni(target, xoffset, cb) {
          var _this6 = this;

          if (!target || !this.testAnimal(target)) return;
          if (target.isAnimationLock()) return;
          target.setAnimationLock(true);
          var pos1 = target.node.getWorldPosition(new Vec3());
          pos1.x += xoffset;
          var pnode = this.getAnimationLayer();
          this.closeGameTip();
          EventManager.getInstance().trigger(MessageManager.Custom.ShowToolsView, {
            show: false
          });
          var roleSex = GameAllData.FarmUserResponse.Sex;
          var name = "animal/man";
          if (roleSex == 1) name = "animal/woman";
          resources.load(name, function (error, res) {
            if (res) {
              var man = instantiate(res);
              man.parent = pnode;
              man.setWorldPosition(pos1); //self.pushBuild(null);

              man.getComponent(RoleCtl).init(3, 3, {
                select: _this6
              }, function (data) {
                console.log("动作完成");
                cb && cb(data); // target.setAnimationLock(false);
              });
            }
          });
        };

        _proto.playRoleAni = function playRoleAni(target, xoffset, cb) {
          var _this7 = this;

          if (this.isAnimationLock()) return;
          var self = this;
          this.setAnimationLock(true); // let pos2 = this.node.getWorldPosition(new Vec3());

          var pos1 = target.getWorldPosition(new Vec3());
          pos1.x += xoffset;
          var pnode = this.getAnimationLayer();
          this.closeGameTip();
          EventManager.getInstance().trigger(MessageManager.Custom.ShowToolsView, {
            show: false
          });
          var roleSex = GameAllData.FarmUserResponse.Sex;
          var name = "animal/man";
          if (roleSex == 1) name = "animal/woman";
          resources.load(name, function (error, res) {
            if (res) {
              var man = instantiate(res);
              man.parent = pnode;
              man.setWorldPosition(pos1); //self.pushBuild(null);

              man.getComponent(RoleCtl).init(3, 3, {
                select: _this7
              }, function (data) {
                console.log("动作完成");
                cb && cb(data);
                self.setAnimationLock(false);
              });
            }
          });
        };

        _proto.onClick = function onClick(uipos) {
          if (this.isAnimationLock()) return;

          if (UIHelp.getTimeDiff(TaskManager.getInstance().clickLastTime) < 500) {
            return;
          }

          TaskManager.getInstance().clickLastTime = UIHelp.getTimeMask();
          var touchEdge = this.clickEdge(uipos);

          if (this.state == OperaleDef.UNLOCKPASTURE) {
            // if(touchEdge) super.onClick(uipos);
            _producer.prototype.onClick.call(this, uipos);

            if (!this.checkCanUnlock(1)) {
              if (!GameAllData.visitState) {
                this.showUnLock();
              } else {
                this.showVisitUnLock();
              }
            } else {
              if (!GameAllData.visitState) {
                var showinfo = {
                  select: this
                };
                this.showBtn(showinfo, this.state, true);
              } else {
                this.showVisitUnLock();
              }
            }
          } else if (this.state == OperaleDef.UPGRADEPASTURE) {
            if (touchEdge) _producer.prototype.onClick.call(this, uipos);
            var showInfo = {};
            var fenceinfo = ConfigFile.getFenceInfo(this.level);
            var n = producer.getMessageText(fenceinfo.FenceName);
            showInfo["text"] = producer.getMessageText(fenceinfo.FenceTxt);
            showInfo["name"] = n + "(LV." + this.level + ")";
            showInfo["money"] = this.getUpgradeNeedItem();
            this.showTip(showInfo, this.state);
          } else if (this.state == OperaleDef.CANBREED) {
            var pickanimal = this.pickAnimal(uipos);

            if (!pickanimal) {
              console.log("没有选中动物");
              if (touchEdge) _producer.prototype.onClick.call(this, uipos);

              if (!GameAllData.visitState) {
                if (touchEdge) this.showUpgradeTip();
              }
            } else {
              //死亡
              console.log("选中动物");
              TaskManager.getInstance().onClickAnimal(pickanimal, uipos);

              if (pickanimal.State == 3) {
                //要铲除
                if (!GameAllData.visitState) {
                  var _showinfo = {
                    select: this,
                    follow: pickanimal.node
                  };
                  this.showBtn(_showinfo, OperaleDef.CLEARDIE, true);
                }
              } else if (pickanimal.UnusualState == 0 && pickanimal.Count == 0) {
                this.showAnimalTip(pickanimal);
              } else if (pickanimal.Count > 0) {
                if (!GameAllData.visitState) {
                  var _showinfo2 = {
                    select: this,
                    follow: pickanimal.node
                  };
                  this.showBtn(_showinfo2, OperaleDef.COLLECT, true);
                } else {
                  if (this.checkSteal(OperaleDef.STEALANIMAL, {
                    animal: pickanimal
                  }, false)) {
                    var _showinfo3 = {
                      select: this,
                      follow: pickanimal.node
                    };
                    this.showBtn(_showinfo3, OperaleDef.STEALANIMAL, true);
                  } else if (pickanimal.UnusualState > 0) {
                    EventManager.getInstance().trigger(MessageManager.Custom.ShowExceptionView, {
                      unit: this,
                      mode: OperaleDef.WEEDING,
                      show: true
                    });
                  } else {
                    this.checkSteal(OperaleDef.STEALANIMAL, {
                      animal: pickanimal
                    }, true);
                  }
                } //要收取

              } else if (pickanimal.UnusualState > 0) {
                //要处理异常
                EventManager.getInstance().trigger(MessageManager.Custom.ShowExceptionView, {
                  unit: this,
                  mode: OperaleDef.WEEDING,
                  show: true
                });
              }
            }
          } else if (this.state == OperaleDef.UNABLELOCK) {
            if (touchEdge) _producer.prototype.onClick.call(this, uipos); //super.onClick(uipos);

            var mg = GameManager.getInstance().getGame(MainGame);
            var canunlock = mg.getCanUnlockFameland();

            if (!GameAllData.visitState) {
              if (!canunlock) this.showUnableLock();else {
                var _showInfo = {};
                _showInfo["tip"] = "ProducerTip";
                _showInfo["select"] = this;
                _showInfo["mode"] = this.state;
                _showInfo["text"] = producer.getMessageText(2121); // "荒地";

                _showInfo["name"] = producer.getMessageText(3040); // "荒地";

                this.showTip(_showInfo, this.state);
              }
            } else {
              this.showVisitUnLock();
            } //this.showUnableLock();

          } else {
            if (touchEdge) _producer.prototype.onClick.call(this, uipos);
            var _showInfo2 = {};
            _showInfo2["tip"] = "ProducerTip";

            var _fenceinfo = ConfigFile.getFenceInfo(this.level);

            var _n = producer.getMessageText(_fenceinfo.FenceName);

            _showInfo2["text"] = producer.getMessageText(_fenceinfo.FenceTxt);
            _showInfo2["money"] = this.getUnlockNeedItem(this.level);
            _showInfo2["name"] = _n + "(LV." + this.level + ")";
            this.showTip(_showInfo2, this.state);
          }
        };

        _proto.chuZiClick = function chuZiClick() {
          var _this8 = this;

          if (GameAllData.visitState) {
            return;
          }

          if (this.state == OperaleDef.UNLOCKPASTURE) {
            var pi = ConfigFile.getPastureInfo(this.ID, this.level ? this.level : 1);
            var unlockConsume = pi.PastureUnlockConsume.split(",");
            var currencyType = unlockConsume[0];
            var currencyNum = unlockConsume[1];
            TipManager.ChoiceBox(ConfigFile.findLanguage(3231, currencyType).format(currencyNum), null, function () {
              var curCurrencyNum = GameAllData.getCurrencyNumByType(currencyType);

              if (curCurrencyNum < currencyNum) {
                // TipManager.ChickBox(ConfigFile.findLanguage(111033, currencyType))
                TipManager.ChickBoxNew(111033, currencyType);
              } else {
                var mg = GameManager.getInstance().getGame(MainGame);
                if (!mg.isNetOk()) return;
                mg.sendToNet(MessageManager.Net.FarmPastureUnlockRequest, {
                  PastureModeId: _this8.ID
                });
              }
            });
          } else {
            var game = GameManager.getInstance().getGame(MainGame);
            game.mapAlignmentToNodeCenter(this.node.getChildByName("select"), true, 0.5);
            this.showUpgradeTip();
          }
        };

        _proto.resetRequest = function resetRequest() {
          if (UIHelp.getTimeDiff(this._Idletime2) > 3000) {
            this._Idletime2 = UIHelp.getTimeMask();
            var game = GameManager.getInstance().getGame(MainGame);

            if (!game) {
              return;
            }

            if (this.state == OperaleDef.CANBREED) //可以养殖了
              {
                game.FarmLandBreedMap.set(this.getID(), false);
              } else if (this.state == OperaleDef.COLLECT) //可以收集动物产出
              {
                game.FarmLandAnimalActionMap.set(this.getID(), false);
              } else if (this.state == OperaleDef.CLEARDIE) //清理死亡动物
              ;
          }
        };

        _createClass(pasture, [{
          key: "state",
          get: function get() {
            return this.getState();
          },
          set: function set(val) {
            this.setState(val);
          }
        }, {
          key: "ID",
          get: function get() {
            return this.getID();
          },
          set: function set(val) {
            this.setID(val);
          }
        }, {
          key: "level",
          get: function get() {
            return this.getLevel();
          },
          set: function set(val) {
            this.setLevel(val);
          }
        }]);

        return pasture;
      }(producer), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "wall1", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "wall2", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "build", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "Layer", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "UPIcon", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "DownIcon", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "lock", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "effNode", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "ZeffNode", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "chuizi", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "Select", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "BuildPick", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "Collider", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "barnlevel", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PastureUpgradeTip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './MessageManager.ts', './EventManager.ts', './ConfigFile.ts', './producer.ts', './GameAllData.ts', './UpdrageCostTip.ts', './OperaleDef.ts', './TipManager.ts', './BaseUI.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, RichText, Label, Node, Sprite, MessageManager, EventManager, ConfigFile, producer, GameAllData, UpdrageCostTip, OperaleDef, TipManager, BaseUI;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      RichText = module.RichText;
      Label = module.Label;
      Node = module.Node;
      Sprite = module.Sprite;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      UpdrageCostTip = module.UpdrageCostTip;
    }, function (module) {
      OperaleDef = module.OperaleDef;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      BaseUI = module.BaseUI;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;

      cclegacy._RF.push({}, "0805eJLeUNBkIbAhQvkvY79", "PastureUpgradeTip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var temp_v3 = new Vec3();
      var PastureUpgradeTip = exports('PastureUpgradeTip', (_dec = ccclass('PastureUpgradeTip'), _dec2 = property(RichText), _dec3 = property(Label), _dec4 = property(RichText), _dec5 = property(Label), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(UpdrageCostTip), _dec10 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(PastureUpgradeTip, _BaseUI);

        function PastureUpgradeTip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "producerName", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "upgrade", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Text", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "grooveText", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Btn", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "BranBtn", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sp", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "costTipo", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Bar1", _descriptor9, _assertThisInitialized(_this));

          _this.groove = 0;
          _this.animalNum = 0;
          _this.curState = -1;
          _this.StateTime = 0;
          _this._cbData = null;
          return _this;
        }

        var _proto = PastureUpgradeTip.prototype;

        _proto.start = function start() {
          // EventManager.getInstance().add(MessageManager.Custom.TOUCHSTART, this, this.onBeginTouch);
          // EventManager.getInstance().add(MessageManager.Custom.TOUCHMOVE, this, this.onMoveTouch);
          // EventManager.getInstance().add(MessageManager.Custom.TOUCHEND, this, this.onStopTouch);
          // this.curState = 0;
          // EventManager.getInstance().add(MessageManager.Custom.ScaleChange, this, this.onScaleChange);
          EventManager.getInstance().add(MessageManager.Custom.UserDataChange, this, this.onDataChange);
        };

        _proto.onScaleChange = function onScaleChange() {// if (this.curState == 2) {
          //     let game: MainGame = GameManager.getInstance().getGame(MainGame) as MainGame;
          //     if(!game._MapAction &&game.targetScale == game.scale && game.scale != 0.6) {
          //         game.closeTip();
          //     }
          // }
        } // update(delay:number){
        //     if (this.curState == 0) {
        //         let game: MainGame = GameManager.getInstance().getGame(MainGame) as MainGame;
        //         if (!game._MapAction) {
        //            // game.scale = 0.7;
        //             //game.targetScale = 0.6;
        //             this.curState = 1;
        //         }
        //     }else if(this.curState == 1){
        //         let game: MainGame = GameManager.getInstance().getGame(MainGame) as MainGame;
        //         if(game.targetScale == game.scale){
        //             this.curState = 2;
        //         }
        //     }
        //     if(!this.isAnimation && this.follow){
        //         let game =  GameManager.getInstance().getGame(MainGame) as MainGame;
        //         let scale = game.node.scale;
        //         let sx = scale.x+0.75;
        //         this.follow.getWorldPosition(temp_v3);
        //         let myHeight = this.node.getComponent(UITransform).contentSize.height/2;
        //         let height = this.follow.getComponent(UITransform).contentSize.height/2-myHeight;
        //         temp_v3.y+=(height*sx);
        //         this.node.setWorldPosition(temp_v3);
        //     }
        // }
        ;

        _proto.onDataChange = function onDataChange() {
          var select = this._cbData.select;

          if (select) {
            var showInfo = select.getUpgradeTip();
            this.updateText(showInfo);
          }
        };

        _proto.updateText = function updateText(arg) {
          this.producerName.string = arg.name;
          this.Text.string = arg.text; //this.upgrade.string = producer.getMessageText(3123);

          producer.replaceDefaultColor(this.upgrade, producer.getMessageText(3123));
          this.animalNum = this._cbData.select.getAnimalNum();
          this.groove = this._cbData.select.getGrooveNum();
          var select = this._cbData.select;
          this.grooveText.string = this.animalNum + "/" + this.groove;

          if (this._cbData.select.isMaxLevel()) {
            this.Btn.active = false;
          } else {
            this.Btn.active = true;
            var spriteall = this.Btn.getComponentsInChildren(Sprite);

            if (!this.cahUpgrade()) {
              spriteall.forEach(function (item) {
                return item.grayscale = true;
              });
            } else {
              spriteall.forEach(function (item) {
                return item.grayscale = false;
              });
            }
          }
        };

        _proto.initUI = function initUI(arg) {
          // this.popHeight = 10;
          // super.initUI(arg);
          this._cbData = arg;
          this.costTipo.node.active = false;
          this.Bar1.active = true;
          this.updateText(arg);
        };

        _proto.onBtn = function onBtn() {
          var selectpasture = this._cbData.select;
          var aa = selectpasture.getUpgradeNeedItem();
          var bb = selectpasture.getUpgradeNeedItemType();

          if (selectpasture.getVipCanUpgrade()) {
            var temple = producer.getMessageText(2019, bb); //let temple = producer.getMessageText(2019).iconformat(EnumDefine.CurrencyType.Conch);
            //let temple = "本次升级需要%s贝壳币,是否升级";

            var text = temple.format(aa.toString());
            TipManager.autoTip(4, 2019, text, null, function () {
              var arg = {
                show: false,
                select: selectpasture,
                operaleID: OperaleDef.UPGRADEPASTURE
              };
              EventManager.getInstance().trigger(MessageManager.Custom.OpenHand, arg);
            });
          } else {
            this.tipNeed();
          }
        };

        _proto.onBran = function onBran() {
          var selectpasture = this._cbData.select;
          var aa = selectpasture.getCurGrooveItem();
          var bb = selectpasture.getGrooveItemType();
          var maxCnt = selectpasture.getGrooveMaxCnt();

          if (this.groove >= maxCnt) {
            TipManager.TipFromCode(3035);
          } else {
            var temple = producer.getMessageText(3030, bb); //  "本次升级需要%s贝壳币,是否升级";

            var text = temple.format(selectpasture.getGrooveNum().toString(), aa.toString());
            TipManager.autoTip(4, 3030, text, null, function () {
              var arg = {
                show: false,
                select: selectpasture,
                operaleID: OperaleDef.UPGRADETROUGH
              };
              EventManager.getInstance().trigger(MessageManager.Custom.OpenHand, arg);
            });
          }
        };

        _proto.cahUpgrade = function cahUpgrade() {
          var select = this._cbData.select;
          if (!select.getVipCanUpgrade()) return false;
          var needmoney = select.getUpgradeNeedItem();
          var needmoneyType = select.getUpgradeNeedItemType();
          if (GameAllData.getCurrencyNumByType(needmoneyType) < needmoney) return false;
          return true;
        };

        _proto.getNeedItem = function getNeedItem(id, level) {
          var configdata = ConfigFile.getPastureInfo(id, level);
          var m1 = ConfigFile.getLimitInfo(configdata.NeedItem);
          return m1.val;
        };

        _proto.getNeedItemType = function getNeedItemType(id, level) {
          var configdata = ConfigFile.getPastureInfo(id, level);
          var m1 = ConfigFile.getLimitInfo(configdata.NeedItem);
          return m1.id;
        };

        _proto.tipNeed = function tipNeed() {
          var a = this._cbData.select;
          var fenceinfo = ConfigFile.getFenceInfo(a.level);
          var n = producer.getMessageText(fenceinfo.FenceName);
          var condInfo = GameAllData.getConditionArray(fenceinfo.FenceUnlock);
          var text = producer.getMessageText(fenceinfo.FenceUnlockTxt);
          text = text.format(condInfo[0].val, condInfo[1].val);
          var money = this.getNeedItem(a.ID, a.level);
          var name = n + "(LV." + a.level + ")";
          var arg = {
            name: name,
            text: text,
            money: money
          };
          var id = this.getNeedItemType(a.ID, a.level);
          this.Bar1.active = false;
          this.costTipo.node.active = true;
          this.costTipo.initUI(arg, id);
        } // public testClick(uipos: Vec2) {
        //     if (UIHelp.TestUIPoint(uipos, this.sp)) {
        //         return true;
        //     } 
        //     if (UIHelp.TestUIPoint(uipos, this.Btn)) {
        //         return true;
        //     }
        //     if (UIHelp.TestUIPoint(uipos, this.BranBtn)) {
        //         return true;
        //     }
        //     return false;
        // }
        // onBeginTouch(event) {
        //     let uipos = event.touch.getUILocation();
        //     if (this.Btn.active && UIHelp.TestUIPoint(uipos, this.Btn)) {
        //       this.onBtn();
        //     } else if (this.BranBtn.active && UIHelp.TestUIPoint(uipos, this.BranBtn)) {
        //        this.onBran();
        //     }else{
        //         event.preventSwallow = true;
        //     }
        // }
        ;

        _proto.onMoveTouch = function onMoveTouch(event) {};

        _proto.onStopTouch = function onStopTouch(event) {};

        return PastureUpgradeTip;
      }(BaseUI), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "producerName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "upgrade", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "Text", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "grooveText", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "Btn", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "BranBtn", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "sp", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "costTipo", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "Bar1", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PerformancePlayerItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Sprite, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Sprite = module.Sprite;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "27afdQ8VlxHm4NOyt7L0DMH", "PerformancePlayerItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PerformancePlayerItem = exports('PerformancePlayerItem', (_dec = ccclass('PerformancePlayerItem'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Sprite), _dec6 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PerformancePlayerItem, _Component);

        function PerformancePlayerItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "labSn", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labId", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labVip", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sprVipBg", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labPerformance", _descriptor5, _assertThisInitialized(_this));

          _this.VipLevel = 0;
          _this.UserId = 0;
          _this.Performance = 0;
          return _this;
        }

        var _proto = PerformancePlayerItem.prototype;

        _proto.start = function start() {};

        return PerformancePlayerItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "labSn", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "labId", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labVip", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "sprVipBg", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "labPerformance", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PerformanceView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstValue.ts', './EnumDefine.ts', './ConfigFile.ts', './EventManager.ts', './MessageManager.ts', './UIManager.ts', './WebSocketMgr.ts', './DateUtil.ts', './NodeHelp.ts', './NumberUtil.ts', './TweenHelp.ts', './UIHelp.ts', './BasePanel.ts', './PerformancePlayerItem.ts', './CashOutView.ts', './InvitationCodeView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, Button, Toggle, ScrollView, Prefab, view, sys, Widget, instantiate, LabelOutline, Color, ConstValue, EnumDefine, ConfigFile, EventManager, MessageManager, UIManager, WebSocketMgr, DateUtil, NodeHelp, NumberUtil, TweenHelper, ETweenType, UIHelp, BasePanel, PerformancePlayerItem, CashOutView, InvitationCodeView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Button = module.Button;
      Toggle = module.Toggle;
      ScrollView = module.ScrollView;
      Prefab = module.Prefab;
      view = module.view;
      sys = module.sys;
      Widget = module.Widget;
      instantiate = module.instantiate;
      LabelOutline = module.LabelOutline;
      Color = module.Color;
    }, function (module) {
      ConstValue = module.ConstValue;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      DateUtil = module.DateUtil;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }, function (module) {
      TweenHelper = module.TweenHelper;
      ETweenType = module.ETweenType;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      BasePanel = module.BasePanel;
    }, function (module) {
      PerformancePlayerItem = module.PerformancePlayerItem;
    }, function (module) {
      CashOutView = module.CashOutView;
    }, function (module) {
      InvitationCodeView = module.InvitationCodeView;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _class3;

      cclegacy._RF.push({}, "208c4faZ1VBjojkX33KMGY/", "PerformanceView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PerformanceView = exports('PerformanceView', (_dec = ccclass('PerformanceView'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Label), _dec8 = property(Label), _dec9 = property(Label), _dec10 = property(Node), _dec11 = property(Label), _dec12 = property(Label), _dec13 = property(Node), _dec14 = property(Button), _dec15 = property(Button), _dec16 = property(Toggle), _dec17 = property(Toggle), _dec18 = property(Node), _dec19 = property(Node), _dec20 = property(Node), _dec21 = property(ScrollView), _dec22 = property(ScrollView), _dec23 = property(Prefab), _dec24 = property(Node), _dec25 = property(Node), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(PerformanceView, _BasePanel);

        function PerformanceView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;
          _this.sheet = 1;
          _this.Team = 1;
          _this.nowPage = 0;
          _this.achievementData = null;
          _this.achievementListData = null;
          _this.TeamCountData = null;
          _this.chickIndex = 0;
          _this.ischick = false;
          _this.sublabSnNum = 0;

          _initializerDefineProperty(_this, "labFamilyMember", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labFamilyMemberNum", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labMyTeam", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labMyTeamNum", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labDirectly", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labDirectlyNum", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labResidualCommission", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labResidualCommissionNum", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "residualCommission", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "LabelWaite", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labAgencyLevelNum", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnCashOut", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnInvite", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnAgencyRule", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnDirectly", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnTeam", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodDirectly", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodSubordinate", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodCommission", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labSettleDesc", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrPlayerList", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pfbPerformancePlayerItem", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "panel", _descriptor23, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodTip", _descriptor24, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = PerformanceView.prototype;

        _proto.onLoad = function onLoad() {
          EventManager.getInstance().add(MessageManager.Net.FarmFamilyTeamCountResponse, this, this.onFarmFamilyTeamCountResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmFamilyTeamAchievementCountResponse, this, this.onFarmFamilyTeamAchievementCountResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmFamilyTeamAchievementListResponse, this, this.onFarmFamilyTeamAchievementListResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmCommissionsGetResponse, this, this.onFarmCommissionsGetResponse);
          this.setTextShow();
        };

        _proto.onEnable = function onEnable() {
          this.scrPlayerList.node.on(ScrollView.EventType.SCROLL_TO_BOTTOM, this.scrollViewShow, this);
        };

        _proto.onDisable = function onDisable() {
          this.scrPlayerList.node.off(ScrollView.EventType.SCROLL_TO_BOTTOM, this.scrollViewShow, this);
        };

        _proto.onDestroy = function onDestroy() {
          EventManager.getInstance().remove(MessageManager.Net.FarmFamilyTeamCountResponse, this, this.onFarmFamilyTeamCountResponse);
          EventManager.getInstance().remove(MessageManager.Net.FarmFamilyTeamAchievementCountResponse, this, this.onFarmFamilyTeamAchievementCountResponse);
          EventManager.getInstance().remove(MessageManager.Net.FarmFamilyTeamAchievementListResponse, this, this.onFarmFamilyTeamAchievementListResponse);
          EventManager.getInstance().remove(MessageManager.Net.FarmCommissionsGetResponse, this, this.onFarmCommissionsGetResponse);
        };

        _proto.start = function start() {
          this.onClickedToday();
          WebSocketMgr.send(MessageManager.Net.FarmFamilyTeamCountRequest);
          WebSocketMgr.send(MessageManager.Net.FarmFamilyTeamAchievementCountRequest); // TweenHelper.default(this.node.getChildByName("Panel"), ETweenType.Jelly)
          // TweenHelper.getTween(this.node.getChildByName("SpriteSplash").getComponent(UIOpacity), "open", (_tween) => {
          //     let sartOpacity = 0
          //     let opacity = 150
          //     _tween
          //         .to(0, { opacity: sartOpacity })
          //         .to(0.1, { opacity: opacity })
          // }).start()

          this.setSafe();
        };

        _proto.setSafe = function setSafe() {
          var visibleSize = view.getVisibleSize();
          var safeArea = sys.getSafeAreaRect();
          NodeHelp.getchildlable(this.node, "Sheet", Widget, function (comp, node) {
            comp.left = safeArea.x - comp.left <= 0 ? comp.left : safeArea.x - comp.left;
            comp.updateAlignment();
          });
        };

        _proto.onClickedClose = function onClickedClose(anction) {
          if (anction === void 0) {
            anction = true;
          }

          _BasePanel.prototype.onClickedClose.call(this, anction); //this.node.getChildByName("SpriteSplash").getComponent(UIOpacity).opacity = 0

        };

        _proto.setTextShow = function setTextShow() {
          // NodeHelp.getchildlable(this.panel, "labTitle", Label, (comp) => {
          //     comp.string = ConfigFile.findLanguage(7017)
          // })
          this.labFamilyMember.string = ConfigFile.findLanguage(7020);
          this.labMyTeam.string = ConfigFile.findLanguage(7021);
          this.labDirectly.string = ConfigFile.findLanguage(7022);
          this.labResidualCommission.string = ConfigFile.findLanguage(7023);
          NodeHelp.getchildlable(this.btnCashOut, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(7039);
          });
          NodeHelp.getchildlable(this.node.getChildByName("Sheet"), "btnToday", Toggle, function (comp) {
            NodeHelp.getchildlable(comp.node, "Checkmark", Label, function (comp_2) {
              comp_2.string = ConfigFile.findLanguage(7028);
            });
            NodeHelp.getchildlable(comp.node, "Label", Label, function (comp_3) {
              comp_3.string = ConfigFile.findLanguage(7028);
            });
          });
          NodeHelp.getchildlable(this.node.getChildByName("Sheet"), "btnTotal", Toggle, function (comp) {
            NodeHelp.getchildlable(comp.node, "Checkmark", Label, function (comp_2) {
              comp_2.string = ConfigFile.findLanguage(7029);
            });
            NodeHelp.getchildlable(comp.node, "Label", Label, function (comp_3) {
              comp_3.string = ConfigFile.findLanguage(7029);
            });
          });
          NodeHelp.getchildlable(this.panel.getChildByName("ToggContPerformance"), "btnDirectly", null, function (comp, node) {
            NodeHelp.getchildlable(node, "Label", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(7015);
            });
            NodeHelp.getchildlable(node, "Checkmark", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(7015);
            });
          });
          NodeHelp.getchildlable(this.panel.getChildByName("ToggContPerformance"), "btnTeam", null, function (comp, node) {
            NodeHelp.getchildlable(node, "Label", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(7025);
            });
            NodeHelp.getchildlable(node, "Checkmark", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(7025);
            });
          });
          NodeHelp.getchildlable(this.panel.getChildByName("PerformanceList"), "btnVip", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(7014);
          });
          NodeHelp.getchildlable(this.panel.getChildByName("PerformanceList"), "btnPerformance", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(7017);
          });
          NodeHelp.getchildlable(this.panel.getChildByName("PerformanceInfo"), "Directly", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(7030);
          });
          NodeHelp.getchildlable(this.panel.getChildByName("PerformanceInfo"), "Subordinate", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(7031);
          });
          NodeHelp.getchildlable(this.panel.getChildByName("PerformanceInfo"), "Commission", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(7032);
          });
          NodeHelp.getchildlable(this.panel.getChildByName("PerformanceInfo"), "labSettleDesc", Label, function (comp) {
            var taxRate = ConfigFile.getGlobalInfo(151);
            comp.string = ConfigFile.findLanguage(7033).format(0);
            if (taxRate && taxRate.IntValue) comp.string = ConfigFile.findLanguage(7033).format(taxRate.IntValue + "");
          });
          NodeHelp.getchildlable(this.panel.getChildByName("PerformanceInfo"), "btnInvite", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(7027);
          });
          NodeHelp.getchildlable(this.panel, "nodTip", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(9013);
          });
        };

        _proto.onClickedCashOut = function onClickedCashOut() {
          var _this2 = this;

          UIManager.getInstance().openUI(CashOutView, 13, function (ui, args) {
            ui.residualCommissionNum = Number(_this2.labResidualCommissionNum.string);
          });
        };

        _proto.onClickedInvite = function onClickedInvite() {
          UIManager.getInstance().openUI(InvitationCodeView, 13, function (ui, args) {});
        };

        _proto.onClickedAgencyRule = function onClickedAgencyRule() {
          if (this.nodTip.active) {
            this.nodTip.active = false;
            return;
          }

          this.nodTip.active = true;
          TweenHelper["default"](this.nodTip, ETweenType.Jelly);
        };

        _proto.onClickedToday = function onClickedToday() {
          this.sheet = 1;
          this.onClickedDirectly();
          this.updateAchievement();
        };

        _proto.onClickedTotal = function onClickedTotal() {
          this.sheet = 2;
          this.onClickedDirectly();
          this.updateAchievement();
        };

        _proto.onClickedDirectly = function onClickedDirectly() {
          this.btnDirectly.isChecked = true;
          this.Team = 1;
          this.nowPage = 1;
          WebSocketMgr.send(MessageManager.Net.FarmFamilyTeamAchievementListRequest, {
            Type: this.Team,
            Type2: this.sheet,
            Page: 1
          });
        };

        _proto.onClickedTeam = function onClickedTeam() {
          this.btnTeam.isChecked = true;
          this.Team = 2;
          this.nowPage = 1;
          WebSocketMgr.send(MessageManager.Net.FarmFamilyTeamAchievementListRequest, {
            Type: this.Team,
            Type2: this.sheet,
            Page: 1
          });
        };

        _proto.onClickedId = function onClickedId() {
          this.getitemsDataUsSort("UserId", 1);
        };

        _proto.onClickedVip = function onClickedVip() {
          this.getitemsDataUsSort("VipLevel", 2);
        };

        _proto.onClickedPerformance = function onClickedPerformance() {
          this.getitemsDataUsSort("Performance", 3);
        }
        /**
         * 
         * @param sort 排序类型
         * @param node 取排序表的节点
         * @param chickIndex 按键编号
         */
        ;

        _proto.getitemsDataUsSort = function getitemsDataUsSort(sort, chickIndex) {
          if (this.chickIndex == chickIndex) this.ischick = !this.ischick;else this.chickIndex = chickIndex;
          var arr = [];
          if (this.scrPlayerList.content.children.length < 1) return;else this.scrPlayerList.content.children.forEach(function (v) {
            arr.push(v.getComponent("PerformancePlayerItem"));
          });
          this.bubbleSort(arr, sort, this.ischick);
        }
        /**
         * 
         * @param arr 排序用的表
         * @param sort 排序类型
         * @param isup 上下排序
         */
        ;

        _proto.bubbleSort = function bubbleSort(arr, sort, isup) {
          var i = arr.length,
              j;
          var tempExchangVal;
          if (isup) while (i > 0) {
            for (j = 0; j < i - 1; j++) {
              if (arr[j][sort] < arr[j + 1][sort]) {
                tempExchangVal = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = tempExchangVal;
              }
            }

            i--;
          } else {
            while (i > 0) {
              for (j = 0; j < i - 1; j++) {
                if (arr[j][sort] > arr[j + 1][sort]) {
                  tempExchangVal = arr[j];
                  arr[j] = arr[j + 1];
                  arr[j + 1] = tempExchangVal;
                }
              }

              i--;
            }
          }

          for (var _i = 0; _i < arr.length; _i++) {
            arr[_i].node.setSiblingIndex(_i);
          }
        };

        _proto.onFarmFamilyTeamCountResponse = function onFarmFamilyTeamCountResponse(data) {
          this.TeamCountData = data;
          this.labFamilyMemberNum.string = ConfigFile.findLanguage(7038).format(data.FamilyPeopleCount1);
          this.labMyTeamNum.string = ConfigFile.findLanguage(7038).format(data.FamilyPeopleCount2);
          this.labDirectlyNum.string = ConfigFile.findLanguage(7038).format(data.FamilyPeopleCount3);
          this.labResidualCommissionNum.string = data.CommissionAll || 0;
          this.labAgencyLevelNum.string = ConfigFile.findLanguage(7026).format(data.AgentLevel);
          this.labSettleDesc.content.getComponent(Label).string = ConfigFile.findLanguage(7033).format(data.SendTime);
          var localTime = UIHelp.getTimeMask() / 1000;
          var servertime = DateUtil.getServerTimeDiff(localTime);
          var targetDate = new Date(servertime);
          var hours = targetDate.getHours();

          if (data.SendTime > hours) {
            this.LabelWaite.string = ConfigFile.findLanguage(7044);
            this.LabelWaite.node.active = true;
            this.residualCommission.active = false;
          } else {
            this.LabelWaite.node.active = false;
            this.residualCommission.active = true;
          }
        };

        _proto.onFarmFamilyTeamAchievementCountResponse = function onFarmFamilyTeamAchievementCountResponse(data) {
          var _this3 = this;

          this.achievementData = data;
          this.updateAchievement();
          NodeHelp.getchildlable(this.panel, "nodTip", Label, function (comp) {
            var level = _this3.TeamCountData.AgentLevel || 0; //let baseAgentLevel =this.TeamCountData.BaseAgentLevel || 0

            var brokerage = 0;
            var config = ConfigFile.getBrokerInfoByBrokerId(level);
            if (config) brokerage = config.BrokerageCoefficient;
            var allperformance = _this3.achievementData.FamilyAchievementCount1 + _this3.achievementData.FamilyAchievementCount2;
            allperformance = NumberUtil.numberFormat(allperformance, ConstValue.DECIMAL_PLACES_NUM); // allperformance = Number(allperformance);

            var nowBrokerage = ConfigFile.getBrokerageByPerformance(_this3.achievementData.FamilyAchievementCount1 + _this3.achievementData.FamilyAchievementCount2);
            brokerage = nowBrokerage > brokerage ? brokerage : nowBrokerage;

            if (ConfigFile.getBrokerageIsMax(level)) {
              comp.string = ConfigFile.findLanguage(9017).format(level, _this3.TeamCountData.BaseAgentLevel, brokerage / 100, _this3.TeamCountData.BaseRadio / 100, _this3.TeamCountData.FamilyPeopleCount2, allperformance);
            } else {
              var nextLevel = level + 1 > 10 ? 10 : level + 1;
              var nextconfig = ConfigFile.getBrokerInfoByBrokerId(nextLevel);
              var needPeople = nextconfig.NeedInviteNum - _this3.TeamCountData.FamilyPeopleCount2;
              var needRecharge = nextconfig.NeedRecharge - _this3.achievementData.FamilyTeamRecharge;
              needPeople = needPeople <= 0 ? 0 : needPeople;
              needRecharge = needRecharge <= 0 ? 0 : needRecharge;
              comp.string = ConfigFile.findLanguage(9013).format(level, _this3.TeamCountData.BaseAgentLevel, brokerage / 100, //5
              _this3.TeamCountData.BaseRadio / 100, //6
              _this3.TeamCountData.FamilyPeopleCount2, //3
              allperformance, //4
              nextLevel, needPeople, needRecharge);
            }
          });
        };

        _proto.scrollViewShow = function scrollViewShow() {
          var totalCount = this.TeamCountData.FamilyPeopleCount3;

          if (this.Team == 2) {
            totalCount = this.TeamCountData.FamilyPeopleCount2;
          }

          var maxPage = Math.ceil(totalCount / 20);

          if (this.nowPage >= maxPage) {
            return;
          }

          this.nowPage++;
          WebSocketMgr.send(MessageManager.Net.FarmFamilyTeamAchievementListRequest, {
            Type: this.Team,
            Type2: this.sheet,
            Page: this.nowPage
          });
        };

        _proto.onFarmFamilyTeamAchievementListResponse = function onFarmFamilyTeamAchievementListResponse(data) {
          var _this4 = this;

          this.achievementListData = data;

          if (data.Type != this.Team || data.Type2 != this.sheet) {
            return;
          }

          if (data.Page == 1) {
            this.sublabSnNum = 0;
            this.scrPlayerList.stopAutoScroll();
            this.scrPlayerList.scrollToTop();
            this.scrPlayerList.content.removeAllChildren();
          }

          data.Data.forEach(function (v, i) {
            var nodPerformancePlayerItem = instantiate(_this4.pfbPerformancePlayerItem);
            nodPerformancePlayerItem.parent = _this4.scrPlayerList.content;
            var srtPerformancePlayerItem = nodPerformancePlayerItem.getComponent(PerformancePlayerItem);
            srtPerformancePlayerItem.VipLevel = v.VipLevel;
            srtPerformancePlayerItem.UserId = v.UserId;
            srtPerformancePlayerItem.labSn.string = i + 1 + (data.Page - 1) * 20 - _this4.sublabSnNum + "";
            srtPerformancePlayerItem.labId.string = v.UserId;
            srtPerformancePlayerItem.labVip.string = "VIP" + v.VipLevel;
            var iconNum = 0;

            if (v.VipLevel != iconNum) {
              if (v.VipLevel % 2 == 1) iconNum = v.VipLevel;else iconNum = v.VipLevel - 1;
            }

            var img = EnumDefine.vipIconUrl.vipSmall.format(iconNum);
            NodeHelp.loadImage(srtPerformancePlayerItem.sprVipBg, img);
            srtPerformancePlayerItem.labVip.node.getComponent(LabelOutline).color = new Color().fromHEX(EnumDefine.vipColor["color" + iconNum]);

            if (1 == _this4.sheet) {
              srtPerformancePlayerItem.labPerformance.string = v.AchievementToday;
              srtPerformancePlayerItem.Performance = v.AchievementToday;
            } else {
              srtPerformancePlayerItem.labPerformance.string = v.Achievement;
              srtPerformancePlayerItem.Performance = v.Achievement;
            }
          });

          if (data.Data || data.Data.length > 0) {
            this.sublabSnNum += 20 - data.Data.length;
          }
        };

        _proto.onFarmCommissionsGetResponse = function onFarmCommissionsGetResponse(data) {
          this.labResidualCommissionNum.string = data.Commission || 0;
        };

        _proto.updateAchievement = function updateAchievement() {
          if (!this.achievementData) {
            return;
          }

          var labDirectlyPerformanceNum = this.nodDirectly.getChildByName("labPerformanceNum").getComponent(Label);
          var labSubordinatePerformanceNum = this.nodSubordinate.getChildByName("labPerformanceNum").getComponent(Label);
          var labCommissionPerformanceNum = this.nodCommission.getChildByName("labPerformanceNum").getComponent(Label);

          if (1 == this.sheet) {
            //今日
            labDirectlyPerformanceNum.string = this.achievementData.FamilyAchievementCount1;
            labSubordinatePerformanceNum.string = this.achievementData.FamilyAchievementCount2;
            labCommissionPerformanceNum.string = this.achievementData.FamilyAchievementCount3;
          } else {
            //汇总
            labDirectlyPerformanceNum.string = this.achievementData.FamilyAchievementCount4;
            labSubordinatePerformanceNum.string = this.achievementData.FamilyAchievementCount5;
            labCommissionPerformanceNum.string = this.achievementData.FamilyAchievementCount6;
          }

          NodeHelp.setLayout(this.nodDirectly, 12, labDirectlyPerformanceNum.string);
          NodeHelp.setLayout(this.nodSubordinate, 12, labSubordinatePerformanceNum.string);
          NodeHelp.setLayout(this.nodCommission, 12, labCommissionPerformanceNum.string);
        };

        return PerformanceView;
      }(BasePanel), _class3.className = "PerformanceView", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "labFamilyMember", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "labFamilyMemberNum", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labMyTeam", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "labMyTeamNum", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "labDirectly", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "labDirectlyNum", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "labResidualCommission", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "labResidualCommissionNum", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "residualCommission", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "LabelWaite", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "labAgencyLevelNum", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "btnCashOut", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "btnInvite", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "btnAgencyRule", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "btnDirectly", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "btnTeam", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "nodDirectly", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "nodSubordinate", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "nodCommission", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "labSettleDesc", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "scrPlayerList", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "pfbPerformancePlayerItem", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "panel", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "nodTip", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PhoneBinding.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AreaCodeConfig.ts', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './TipManager.ts', './UIManager.ts', './HttpMgr.ts', './NodeHelp.ts', './NumberUtil.ts', './SetsafetyCodeBanding.ts', './SetSecondaryUI.ts', './AreaCodeItem.ts', './SetSecondaryUIEntity.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, EditBox, Node, Toggle, ScrollView, Label, Prefab, Button, instantiate, Vec3, AreaCodeConfig, ConfigFile, GameAllData, EventManager, MessageManager, TipManager, UIManager, HttpMgr, NodeHelp, NumberUtil, SetsafetyCodeBanding, SetSecondaryUI, AreaCodeItem, SetSecondaryUIEntity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      EditBox = module.EditBox;
      Node = module.Node;
      Toggle = module.Toggle;
      ScrollView = module.ScrollView;
      Label = module.Label;
      Prefab = module.Prefab;
      Button = module.Button;
      instantiate = module.instantiate;
      Vec3 = module.Vec3;
    }, function (module) {
      AreaCodeConfig = module.AreaCodeConfig;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      HttpMgr = module.HttpMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }, function (module) {
      SetsafetyCodeBanding = module.SetsafetyCodeBanding;
    }, function (module) {
      SetSecondaryUI = module.SetSecondaryUI;
    }, function (module) {
      AreaCodeItem = module.AreaCodeItem;
    }, function (module) {
      SetSecondaryUIEntity = module.SetSecondaryUIEntity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25;

      cclegacy._RF.push({}, "41316Mj9ThHQ6cGlNysJ50S", "PhoneBinding", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PhoneBinding = exports('PhoneBinding', (_dec = ccclass('PhoneBinding'), _dec2 = property(EditBox), _dec3 = property(EditBox), _dec4 = property(EditBox), _dec5 = property(EditBox), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(Node), _dec10 = property(Node), _dec11 = property(Node), _dec12 = property(Toggle), _dec13 = property(Toggle), _dec14 = property(ScrollView), _dec15 = property(Label), _dec16 = property(EditBox), _dec17 = property(EditBox), _dec18 = property(Prefab), _dec19 = property(EditBox), _dec20 = property(Button), _dec21 = property(Button), _dec22 = property(Label), _dec23 = property(Label), _dec24 = property(Label), _dec25 = property(Button), _dec26 = property(EditBox), _dec(_class = (_class2 = /*#__PURE__*/function (_SetSecondaryUIEntity) {
        _inheritsLoose(PhoneBinding, _SetSecondaryUIEntity);

        function PhoneBinding() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SetSecondaryUIEntity.call.apply(_SetSecondaryUIEntity, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "editBoxPhoneNum", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "editBoxPhoneMa", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "editBoxEmailNum", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "editBoxEmailMa", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "phone", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "email", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "change", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "oldMa", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "changePhoneNode", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "changeMailNode", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mailToggle", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "phoneToggle", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrAllAreaCode", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labAreaCode", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "edtPhoneNum", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "searchEditBox", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pfbAreaCodeItem", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "edtVerificationCode", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnGet", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnGetEmail", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "LabelPhone", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "LabelEmail", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "LabelShow", _descriptor23, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnGetMaOld", _descriptor24, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "editBoxOldMa", _descriptor25, _assertThisInitialized(_this));

          _this.type = 0;
          return _this;
        }

        var _proto = PhoneBinding.prototype;

        _proto.init = function init() {
          _SetSecondaryUIEntity.prototype.init.call(this);

          this.type = this.subType;
          this.setShow();
          this.checkChangePhoneAndEmailBtn();
          EventManager.getInstance().add(MessageManager.Custom.SelectedAreaCode, this, this.onSelectedAreaCode); // this.node.on(Input.EventType.TOUCH_START, this.closeAreaCode, this)
        };

        _proto.removeEvent = function removeEvent() {
          EventManager.getInstance().removeAll(this);
        };

        _proto.setShow = function setShow() {
          if (GameAllData.isBandingPhone && GameAllData.isBandingEmail) {
            this.type = 0;
          } else if (this.type == 1 && GameAllData.isBandingPhone) {
            this.type = 0;
          } else if (this.type == 2 && GameAllData.isBandingEmail) {
            this.type = 0;
          }

          var titleId = 8006;

          if (this.type == 0) {
            this.change.active = true;
            this.phone.active = false;
            this.email.active = false;
            NodeHelp.getchildlable(this.change, "LabelPhone", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(8007) + ":";
            });

            if (GameAllData.isBandingPhone) {
              NodeHelp.getchildlable(this.change, "LabelPhoneNum", Label, function (comp) {
                comp.string = GameAllData.bandPhone;
                comp.string = comp.string.replace(comp.string.substring(6, comp.string.length), "********"); // let phone = GameAllData.bandPhone;
                // phone = phone.replace(phone.substring(6,phone.length), "********")
                // comp.string = ConfigFile.findLanguage(8059).format(phone);

                comp.node.active = true;
              });
              NodeHelp.getchildlable(this.change, "Button", Button, function (comp) {
                NodeHelp.getchildlable(comp.node, "Label", Label, function (comp) {
                  comp.string = ConfigFile.findLanguage(8029);
                });
                comp.node.active = true;
              });
              NodeHelp.getchildlable(this.change, "BtnPhone", Button, function (comp) {
                comp.node.active = false;
              });
            } else {
              NodeHelp.getchildlable(this.change, "LabelPhoneNum", Label, function (comp) {
                comp.node.active = false;
              });
              NodeHelp.getchildlable(this.change, "Button", Button, function (comp) {
                comp.node.active = false;
              });
              NodeHelp.getchildlable(this.change, "BtnPhone", Button, function (comp) {
                NodeHelp.getchildlable(comp.node, "Label", Label, function (comp) {
                  comp.string = ConfigFile.findLanguage(8009);
                });
                comp.node.active = true;
              });
            }

            NodeHelp.getchildlable(this.change, "LabelEmail", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(8008) + ":";
            });

            if (GameAllData.isBandingEmail) {
              NodeHelp.getchildlable(this.change, "LabelEmailNum", Label, function (comp) {
                comp.string = GameAllData.bandEmail;
                comp.string = comp.string.replace(comp.string.substring(6, comp.string.length), "********"); // let email = GameAllData.bandEmail;
                // email = email.replace(email.substring(6,email.length), "********")
                // comp.string = ConfigFile.findLanguage(8059).format(email);

                comp.node.active = true;
              });
              NodeHelp.getchildlable(this.change, "ButtonEm", Button, function (comp) {
                comp.node.active = true;
                NodeHelp.getchildlable(comp.node, "Label", Label, function (comp) {
                  comp.string = ConfigFile.findLanguage(8030);
                });
              });
              NodeHelp.getchildlable(this.change, "BtnEmail", Button, function (comp) {
                comp.node.active = false;
              });
            } else {
              NodeHelp.getchildlable(this.change, "LabelEmailNum", Label, function (comp) {
                comp.node.active = false;
              });
              NodeHelp.getchildlable(this.change, "ButtonEm", Button, function (comp) {
                comp.node.active = false;
              });
              NodeHelp.getchildlable(this.change, "BtnEmail", Button, function (comp) {
                NodeHelp.getchildlable(comp.node, "Label", Label, function (comp) {
                  comp.string = ConfigFile.findLanguage(8010);
                });
                comp.node.active = true;
              });
            }
          } else if (this.type == 1) //手机
            {
              this.initAllAreaCode();
              titleId = 8007;
              this.change.active = false;
              this.phone.active = true;
              this.email.active = false;
              this.editBoxPhoneNum.placeholder = ConfigFile.findLanguage(120001);
              this.editBoxPhoneMa.placeholder = ConfigFile.findLanguage(120002);
              NodeHelp.getchildlable(this.phone, "LabPhone", Label, function (comp) {
                comp.string = ConfigFile.findLanguage(120011);
              });
              NodeHelp.getchildlable(this.phone, "LabelMa", Label, function (comp) {
                comp.string = ConfigFile.findLanguage(8032);
              });
              NodeHelp.getchildlable(this.phone, "maButton", Button, function (comp) {
                NodeHelp.getchildlable(comp.node, "Label", Label, function (comp) {
                  comp.string = ConfigFile.findLanguage(8014);
                });
              });
              NodeHelp.getchildlable(this.phone, "bangButton", Button, function (comp) {
                NodeHelp.getchildlable(comp.node, "Label", Label, function (comp) {
                  comp.string = ConfigFile.findLanguage(8015);
                });
              });
            } else if (this.type == 2) //邮箱
            {
              titleId = 8008;
              this.change.active = false;
              this.phone.active = false;
              this.email.active = true;
              this.editBoxEmailNum.placeholder = ConfigFile.findLanguage(8021);
              this.editBoxEmailMa.placeholder = ConfigFile.findLanguage(8013);
              NodeHelp.getchildlable(this.email, "LabelEmail", Label, function (comp) {
                comp.string = ConfigFile.findLanguage(8008);
              });
              NodeHelp.getchildlable(this.email, "LabelMa", Label, function (comp) {
                comp.string = ConfigFile.findLanguage(8014);
              });
              NodeHelp.getchildlable(this.email, "maButton", Button, function (comp) {
                NodeHelp.getchildlable(comp.node, "Label", Label, function (comp) {
                  comp.string = ConfigFile.findLanguage(8014);
                });
              });
              NodeHelp.getchildlable(this.email, "bangButton", Button, function (comp) {
                NodeHelp.getchildlable(comp.node, "Label", Label, function (comp) {
                  comp.string = ConfigFile.findLanguage(8015);
                });
              });
            }

          NodeHelp.getchildlable(this.node, "LabelTitle", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(titleId);
          });
          this.LabelPhone.string = ConfigFile.findLanguage(8007);
          this.LabelEmail.string = ConfigFile.findLanguage(8008);
          this.editBoxOldMa.placeholder = ConfigFile.findLanguage(8013); // this.btnGetMaOld.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(8014);

          NodeHelp.getchildlable(this.change, "phone", null, function (comp, node) {
            NodeHelp.getchildlable(node, "LabelPhone", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(8007);
            });
          });
          NodeHelp.getchildlable(this.change, "email", null, function (comp, node) {
            NodeHelp.getchildlable(node, "LabelEmail", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(8008);
            });
          });
          this.checkOldMa();
        } //发送邮箱验证码
        ;

        _proto.sendEmailMa = function sendEmailMa() {
          var _this2 = this;

          if (!NumberUtil.isEamil(this.editBoxEmailNum.string)) {
            TipManager.ChickBox(ConfigFile.findLanguage(8022));
            return;
          }

          this.btnGetEmail.interactable = false;
          var cdTime = 60;

          var func = function func() {
            cdTime--;

            if (cdTime < 1) {
              _this2.btnGetEmail.interactable = true;
              _this2.btnGetEmail.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(8014);

              _this2.unschedule(func);

              return;
            }

            _this2.btnGetEmail.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120014).format(cdTime);
          };

          this.schedule(func, 1);

          if (this.oldMa.active && GameAllData.isBandingPhone) //重置邮箱绑定手机
            {
              var url = GameAllData.httpServerUrl + "user/verification/email";
              HttpMgr.post(url, {
                email: this.editBoxEmailNum.string,
                language_id: GameAllData.languageId,
                type: "resetPhone"
              }, function (data) {
                if (0 != data.code) {
                  TipManager.ChickBox(ConfigFile.findLanguage(data.code));
                  return;
                }
              });
            } else {
            var _url = GameAllData.httpServerUrl + "user/verification/email";

            HttpMgr.post(_url, {
              email: this.editBoxEmailNum.string,
              language_id: GameAllData.languageId,
              type: "bindEmail"
            }, function (data) {
              if (0 != data.code) {
                TipManager.ChickBox(ConfigFile.findLanguage(data.code));
                return;
              }
            });
          }
        } //发送手机验证码
        ;

        _proto.sendPhoneMa = function sendPhoneMa() {
          var _this3 = this;

          if (this.edtPhoneNum.string == "") {
            TipManager.ChickBox(ConfigFile.findLanguage(8012));
            return;
          }

          this.btnGet.interactable = false;
          var cdTime = 60;

          var func = function func() {
            cdTime--;

            if (cdTime < 1) {
              _this3.btnGet.interactable = true;
              _this3.btnGet.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(8014);

              _this3.unschedule(func);

              return;
            }

            _this3.btnGet.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120014).format(cdTime);
          };

          this.schedule(func, 1);

          if (this.oldMa.active && GameAllData.isBandingEmail) //重置手机绑定邮箱
            {
              var url = GameAllData.httpServerUrl + "user/verification/auth";
              HttpMgr.post(url, {
                mobile_prefix: this.labAreaCode.string,
                mobile: this.edtPhoneNum.string,
                language_id: GameAllData.languageId,
                type: "resetEmail"
              }, function (data) {
                if (0 != data.code) {
                  TipManager.ChickBox(ConfigFile.findLanguage(data.code));
                  return;
                }
              });
            } else {
            var _url2 = GameAllData.httpServerUrl + "user/verification/auth";

            HttpMgr.post(_url2, {
              mobile_prefix: this.labAreaCode.string,
              mobile: this.edtPhoneNum.string,
              language_id: GameAllData.languageId,
              type: "bindPhone"
            }, function (data) {
              if (0 != data.code) {
                TipManager.ChickBox(ConfigFile.findLanguage(data.code));
                return;
              }
            });
          }
        } //绑定 邮箱
        ;

        _proto.bandingEmail = function bandingEmail() {
          var _this4 = this;

          if (this.editBoxEmailNum.string == "") {
            TipManager.ChickBox(ConfigFile.findLanguage(8022));
            return;
          }

          if (this.editBoxEmailMa.string == "") {
            TipManager.ChickBox(ConfigFile.findLanguage(8013));
            return;
          }

          if (this.oldMa.active && GameAllData.isBandingPhone) //重置手机绑定邮箱
            {
              if (this.editBoxOldMa.string == "") {
                TipManager.ChickBox(ConfigFile.findLanguage(8013));
                return;
              }

              var url = GameAllData.httpServerUrl + "user/bind/email";
              HttpMgr.post(url, {
                email: this.editBoxEmailNum.string,
                code: this.editBoxEmailMa.string,
                old_code: this.editBoxOldMa.string,
                type: "resetPhone"
              }, function (data) {
                if (0 != data.code) {
                  TipManager.ChickBox(ConfigFile.findLanguage(data.code));
                  return;
                }

                GameAllData.bandEmail = _this4.editBoxEmailNum.string;
                UIManager.getInstance().closeUI(SetSecondaryUI);
                TipManager.ChickBox(ConfigFile.findLanguage(8027));
              });
            } else {
            var _url3 = GameAllData.httpServerUrl + "user/bind/email";

            HttpMgr.post(_url3, {
              email: this.editBoxEmailNum.string,
              code: this.editBoxEmailMa.string,
              type: "bindEmail"
            }, function (data) {
              if (0 != data.code) {
                TipManager.ChickBox(ConfigFile.findLanguage(data.code));
                return;
              }

              GameAllData.bandEmail = _this4.editBoxEmailNum.string;
              UIManager.getInstance().closeUI(SetSecondaryUI);
              TipManager.ChickBox(ConfigFile.findLanguage(8027));
            });
          }
        } //绑定 手机号
        ;

        _proto.bandingPhone = function bandingPhone() {
          var _this5 = this;

          if (this.edtPhoneNum.string == "") {
            TipManager.ChickBox(ConfigFile.findLanguage(8012));
            return;
          }

          if (this.edtVerificationCode.string == "") {
            TipManager.ChickBox(ConfigFile.findLanguage(8013));
            return;
          }

          if (this.oldMa.active && GameAllData.isBandingEmail) //重置邮箱绑定手机
            {
              if (this.editBoxOldMa.string == "") {
                TipManager.ChickBox(ConfigFile.findLanguage(8013));
                return;
              }

              var url = GameAllData.httpServerUrl + "user/bind/phone";
              HttpMgr.post(url, {
                mobile_prefix: this.labAreaCode.string,
                mobile: this.edtPhoneNum.string,
                code: this.edtVerificationCode.string,
                old_code: this.editBoxOldMa.string,
                language_id: GameAllData.languageId,
                type: "resetEmail"
              }, function (data) {
                if (0 != data.code) {
                  TipManager.ChickBox(ConfigFile.findLanguage(data.code));
                  return;
                }

                GameAllData.bandPhone = _this5.labAreaCode.string + _this5.edtPhoneNum.string;
                GameAllData.bandPhoneAreaCode = _this5.labAreaCode.string;
                UIManager.getInstance().closeUI(SetSecondaryUI);
                TipManager.ChickBox(ConfigFile.findLanguage(8027));
              });
            } else {
            var _url4 = GameAllData.httpServerUrl + "user/bind/phone";

            HttpMgr.post(_url4, {
              mobile_prefix: this.labAreaCode.string,
              mobile: this.edtPhoneNum.string,
              code: this.edtVerificationCode.string,
              language_id: GameAllData.languageId,
              type: "bindPhone"
            }, function (data) {
              if (0 != data.code) {
                TipManager.ChickBox(ConfigFile.findLanguage(data.code));
                return;
              }

              GameAllData.bandPhone = _this5.labAreaCode.string + _this5.edtPhoneNum.string;
              GameAllData.bandPhoneAreaCode = _this5.labAreaCode.string;
              UIManager.getInstance().closeUI(SetSecondaryUI);
              TipManager.ChickBox(ConfigFile.findLanguage(8027));
            });
          }
        } //国家区号设置为选中的
        ;

        _proto.onSelectedAreaCode = function onSelectedAreaCode(data) {
          if (!this.labAreaCode) {
            return;
          }

          this.labAreaCode.string = data;
          this.scrAllAreaCode.node.active = false;
        };

        _proto.onClickAreaDropDown = function onClickAreaDropDown() {
          if (this.scrAllAreaCode.node.active) {
            this.scrAllAreaCode.node.active = false;
          } else {
            this.scrAllAreaCode.node.active = true;
          }
        };

        _proto.closeAreaCode = function closeAreaCode() {
          if (this.scrAllAreaCode.node.active) {
            this.scrAllAreaCode.node.active = false;
          }
        };

        _proto.onEditEndedPhoneNum = function onEditEndedPhoneNum() {
          if (!NumberUtil.checkInt(this.edtPhoneNum.string) || Number(this.edtPhoneNum.string) <= 0) {
            this.edtPhoneNum.string = "";
            return;
          }
        };

        _proto.onEditEndedVerificationCode = function onEditEndedVerificationCode() {
          if (!NumberUtil.checkInt(this.edtVerificationCode.string) || Number(this.edtVerificationCode.string) <= 0) {
            this.edtVerificationCode.string = "";
            return;
          }
        } // private onEditEndedEmailNum() {
        //     if (!NumberUtil.checkInt(this.editBoxEmailNum.string) || Number(this.editBoxEmailNum.string) <= 0) {
        //         this.editBoxEmailNum.string = "";
        //         return;
        //     }
        // }
        ;

        _proto.onEditEndedEmailCode = function onEditEndedEmailCode() {
          if (!NumberUtil.checkInt(this.editBoxEmailMa.string) || Number(this.editBoxEmailMa.string) <= 0) {
            this.editBoxEmailMa.string = "";
            return;
          }
        };

        _proto.onEmailInput = function onEmailInput() {} // 初始化默认和所有国家区号
        ;

        _proto.initAllAreaCode = function initAllAreaCode() {
          var _this6 = this;

          this.scrAllAreaCode.content.removeAllChildren();
          AreaCodeConfig.sort(function (a, b) {
            return Number(a.codeNumber) - Number(b.codeNumber);
          });
          this.searchEditBox.placeholder = ConfigFile.findLanguage(8018);
          var areaCode = AreaCodeConfig.find(function (v) {
            return GameAllData.languageId === v.language_id;
          });
          this.labAreaCode.string = "+" + (areaCode ? areaCode.codeNumber : AreaCodeConfig[0].codeNumber);
          AreaCodeConfig.forEach(function (v) {
            var nodAreaCodeItem = instantiate(_this6.pfbAreaCodeItem);
            nodAreaCodeItem.parent = _this6.scrAllAreaCode.content;
            var srtAreaCodeItem = nodAreaCodeItem.getComponent(AreaCodeItem);
            srtAreaCodeItem.data = v;
          });
        };

        _proto.onInputChange = function onInputChange() {
          var _this7 = this;

          var str = this.searchEditBox.string;

          if (str != "") {
            this.scrAllAreaCode.content.removeAllChildren();

            if (Number(str)) {
              AreaCodeConfig.forEach(function (v) {
                var phoneNum = Number(v.codeNumber.substr(0, str.length));

                if (phoneNum == Number(str)) {
                  var nodAreaCodeItem = instantiate(_this7.pfbAreaCodeItem);
                  nodAreaCodeItem.parent = _this7.scrAllAreaCode.content;
                  var srtAreaCodeItem = nodAreaCodeItem.getComponent(AreaCodeItem);
                  srtAreaCodeItem.data = v;
                }
              });
            } else {
              AreaCodeConfig.forEach(function (v) {
                // if(v.Countryname.toLowerCase()==str.toLowerCase()) {
                //     this.onFind(str)
                // }
                var countStr = v.Countryname.substr(0, str.length);

                if (countStr.toLowerCase() == str.toLowerCase()) {
                  // this.onFind(str)
                  var nodAreaCodeItem = instantiate(_this7.pfbAreaCodeItem);
                  nodAreaCodeItem.parent = _this7.scrAllAreaCode.content;
                  var srtAreaCodeItem = nodAreaCodeItem.getComponent(AreaCodeItem);
                  srtAreaCodeItem.data = v;
                }
              });
            }
          } else {
            this.initAllAreaCode();
          }
        };

        _proto.clickBandPhone = function clickBandPhone() {
          this.type = this.subType = 1;
          this.setShow();
        };

        _proto.clickBandEmail = function clickBandEmail() {
          this.type = this.subType = 2;
          this.setShow();
        };

        _proto.changePhone = function changePhone() {
          UIManager.getInstance().openUI(SetsafetyCodeBanding, 15, function (ui, args) {
            ui.type = 1;
          }, undefined, null);
          UIManager.getInstance().closeUI(SetSecondaryUI);
        };

        _proto.changeEmail = function changeEmail() {
          UIManager.getInstance().openUI(SetsafetyCodeBanding, 15, function (ui, args) {
            ui.type = 2;
          }, undefined, null);
          UIManager.getInstance().closeUI(SetSecondaryUI);
        } //检测改绑按钮
        ;

        _proto.checkChangePhoneAndEmailBtn = function checkChangePhoneAndEmailBtn() {
          if (GameAllData.isBandingPhone) {
            this.changePhoneNode.active = true;
            this.changeMailNode.active = false;
            this.mailToggle.isChecked = false;
            this.phoneToggle.isChecked = true;
          } else if (GameAllData.isBandingEmail) {
            this.changePhoneNode.active = false;
            this.changeMailNode.active = true;
            this.mailToggle.isChecked = true;
            this.phoneToggle.isChecked = false;
          } else ;
        };

        _proto.onClickChangePhone = function onClickChangePhone() {
          var _this8 = this;

          if (this.phoneToggle.isChecked) {
            return;
          }

          if (GameAllData.isBandingEmail) {
            var mesStr = ConfigFile.findLanguage(8068);
            TipManager.ChoiceBox(mesStr, function () {
              _this8.mailToggle.isChecked = true;
              _this8.phoneToggle.isChecked = false;
            }, function () {
              _this8.changePhoneNode.active = true;
              _this8.changeMailNode.active = false;
            });
          } else {
            this.changePhoneNode.active = true;
            this.changeMailNode.active = false;
          }
        };

        _proto.onClickChangeEmail = function onClickChangeEmail() {
          var _this9 = this;

          if (this.mailToggle.isChecked) {
            return;
          }

          if (GameAllData.isBandingPhone) {
            var mesStr = ConfigFile.findLanguage(8067);
            TipManager.ChoiceBox(mesStr, function () {
              _this9.mailToggle.isChecked = false;
              _this9.phoneToggle.isChecked = true;
            }, function () {
              _this9.changePhoneNode.active = false;
              _this9.changeMailNode.active = true;
            });
          } else {
            this.changePhoneNode.active = false;
            this.changeMailNode.active = true;
          }
        };

        _proto.checkOldMa = function checkOldMa() {
          var _this10 = this;

          this.oldMa.active = false;
          var maStr = "";
          var LabelMaOldId;

          if (this.phone.active && GameAllData.isBandingEmail) //手机
            {
              this.oldMa.active = true;
              var phone = GameAllData.bandEmail;
              maStr = phone.replace(phone.substring(6, phone.length), "********");
              this.phone.position = new Vec3(0, -136, 0);
              LabelMaOldId = 8034;
              NodeHelp.getchildlable(this.oldMa, "maButtonOld", Label, function (comp) {
                comp.string = ConfigFile.findLanguage(8014);

                if (GameAllData.bandPhoneEmailTimeOld > 0) {
                  _this10.btnGetMaOld.interactable = false;
                  var phoneTime = Math.ceil(GameAllData.bandPhoneEmailTimeOld);
                  var cdTime = phoneTime;
                  comp.string = ConfigFile.findLanguage(120014).format(cdTime);

                  var func = function func() {
                    cdTime--;

                    if (cdTime < 1) {
                      _this10.btnGetMaOld.interactable = true;
                      GameAllData.bandPhoneEmailTimeOld = 0;
                      comp.string = ConfigFile.findLanguage(120006);

                      _this10.unschedule(func);

                      return;
                    }

                    comp.string = ConfigFile.findLanguage(120014).format(cdTime);
                  };

                  _this10.schedule(func, 1);
                } else {
                  _this10.btnGetMaOld.interactable = true;
                }
              });
            } else if (this.email.active && GameAllData.isBandingPhone) {
            this.oldMa.active = true;
            var _phone = GameAllData.bandPhone;
            maStr = _phone.replace(_phone.substring(6, _phone.length), "********");
            this.email.position = new Vec3(0, -136, 0);
            LabelMaOldId = 8032;
            NodeHelp.getchildlable(this.oldMa, "maButtonOld", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(8014);

              if (GameAllData.bandEmailPhoneTimeOld > 0) {
                _this10.btnGetMaOld.interactable = false;
                var phoneTime = Math.ceil(GameAllData.bandEmailPhoneTimeOld);
                var cdTime = phoneTime;
                comp.string = ConfigFile.findLanguage(120014).format(cdTime);

                var func = function func() {
                  cdTime--;

                  if (cdTime < 1) {
                    _this10.btnGetMaOld.interactable = true;
                    GameAllData.bandEmailPhoneTimeOld = 0;
                    comp.string = ConfigFile.findLanguage(120006);

                    _this10.unschedule(func);

                    return;
                  }

                  comp.string = ConfigFile.findLanguage(120014).format(cdTime);
                };

                _this10.schedule(func, 1);
              } else {
                _this10.btnGetMaOld.interactable = true;
              }
            });
          } else {
            this.phone.position = new Vec3(0, -80, 0);
            this.email.position = new Vec3(0, -80, 0);
            return;
          }

          this.LabelShow.string = ConfigFile.findLanguage(8059).format(maStr);
          NodeHelp.getchildlable(this.oldMa, "LabelMaOld", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(LabelMaOldId);
          });
        } //发送已绑定的验证码
        ;

        _proto.sendMaOld = function sendMaOld() {
          var _this11 = this;

          this.btnGetMaOld.interactable = true;
          var cdTime = 60;

          if (!this.phone.active) //重置邮箱绑定手机
            {
              GameAllData.bandPhoneEmailTimeOld = 60;

              var func = function func() {
                cdTime--;
                GameAllData.bandPhoneEmailTimeOld = cdTime;

                if (cdTime < 1) {
                  GameAllData.bandPhoneEmailTimeOld = 0;
                  _this11.btnGetMaOld.interactable = true;
                  _this11.btnGetMaOld.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(8014);

                  _this11.unschedule(func);

                  return;
                }

                _this11.btnGetMaOld.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120014).format(cdTime);
              };

              this.schedule(func, 1);
              var url = GameAllData.httpServerUrl + "user/email/code";
              HttpMgr.post(url, {
                type: "resetOldEmail"
              }, function (data) {
                if (0 != data.code) {
                  TipManager.ChickBox(ConfigFile.findLanguage(data.code));
                  return;
                }
                let phone = GameAllData.bandPhone;
                phone = phone.replace(phone.substring(6,phone.length), "********")
                this.LabelShow.string = ConfigFile.findLanguage(8059).format(phone);

              });
            } else if (this.email.active) //重置手机绑定邮箱
            {
              GameAllData.bandEmailPhoneTimeOld = 60;

              var _func = function _func() {
                cdTime--;
                GameAllData.bandEmailPhoneTimeOld = cdTime;

                if (cdTime < 1) {
                  GameAllData.bandEmailPhoneTimeOld = 0;
                  _this11.btnGetMaOld.interactable = true;
                  _this11.btnGetMaOld.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(8014);

                  _this11.unschedule(_func);

                  return;
                }

                _this11.btnGetMaOld.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120014).format(cdTime);
              };

              this.schedule(_func, 1);

              var _url5 = GameAllData.httpServerUrl + "user/phone/code";

              HttpMgr.post(_url5, {
                type: "resetOldPhone"
              }, function (data) {
                if (0 != data.code) {
                  TipManager.ChickBox(ConfigFile.findLanguage(data.code));
                  return;
                } // let phone = GameAllData.bandPhone;
                // phone = phone.replace(phone.substring(6,phone.length), "********")
                // this.LabelShow.string = ConfigFile.findLanguage(8059).format(phone);

              });
            }
        };

        return PhoneBinding;
      }(SetSecondaryUIEntity), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "editBoxPhoneNum", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "editBoxPhoneMa", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "editBoxEmailNum", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "editBoxEmailMa", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "phone", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "email", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "change", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "oldMa", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "changePhoneNode", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "changeMailNode", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "mailToggle", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "phoneToggle", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "scrAllAreaCode", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "labAreaCode", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "edtPhoneNum", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "searchEditBox", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "pfbAreaCodeItem", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "edtVerificationCode", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "btnGet", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "btnGetEmail", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "LabelPhone", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "LabelEmail", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "LabelShow", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "btnGetMaOld", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "editBoxOldMa", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/plantCtl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, _createClass, cclegacy, _decorator, Sprite, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "1afc6GKgYZDSIGFzuTJTdVl", "plantCtl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var plantCtl = exports('plantCtl', (_dec = ccclass('plantCtl'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(plantCtl, _Component);

        function plantCtl() {
          return _Component.apply(this, arguments) || this;
        }

        _createClass(plantCtl, [{
          key: "fade",
          get: function get() {
            var sp = this.node.getComponent(Sprite);
            var value2 = sp.material.getProperty("addHueFade"); //let value1 = sp.material.getProperty("ColorFade");
            //if(!value1) value1 = 1;

            return 1;
          },
          set: function set(value) {
            var sp = this.node.getComponent(Sprite); // if(old) sp.material.setProperty("ColorFade",value);
          }
        }]);

        return plantCtl;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PlatformCbUtil.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstValue.ts', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './TipManager.ts', './WebSocketMgr.ts', './PlatformUtil.ts'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, _createForOfIteratorHelperLoose, cclegacy, log, sys, ConstValue, ConfigFile, GameAllData, EventManager, MessageManager, TipManager, WebSocketMgr, PlatformUtil;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
      sys = module.sys;
    }, function (module) {
      ConstValue = module.ConstValue;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      PlatformUtil = module.PlatformUtil;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e2449Am54VMhoeuwSIvVXIa", "PlatformCbUtil", undefined);

      var PlatformCbUtil = exports('PlatformCbUtil', /*#__PURE__*/function () {
        function PlatformCbUtil() {}

        PlatformCbUtil.loginError = function loginError(msg) {
          // TipManager.ChickBox("登录失败，请检查网络以及是否安装相关平台应用和服务！msg--->" + msg);
          TipManager.TipFromCode(7205);
        };

        PlatformCbUtil.loginComplete = function loginComplete(thirdPartyName, userId) {
          var data = {
            thirdPartyName: thirdPartyName,
            userId: userId
          };
          EventManager.getInstance().trigger(MessageManager.Custom.ThirdPartyLoginSuccess, data);
        };

        PlatformCbUtil.loginCancel = function loginCancel() {
          TipManager.autoTip(5, 120016, "");
        };

        PlatformCbUtil.getOpenInstallData = /*#__PURE__*/function () {
          var _getOpenInstallData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data, type) {
            var testText, f, Pointdata, paramsData, paramsList, _iterator, _step, param, i, name, str, _data, _f, _Pointdata, _f2, _Pointdata2, jsonData, params, base64, b64Params, strParams, jsonParams;

            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    GameAllData.operatorId = ConstValue.OPERATOR_ID.toString();
                    GameAllData.channelId = ConstValue.CHANNEL_ID.toString();
                    GameAllData.languageId = ConstValue.LANGUAGE.toString();

                    if (data) {
                      _context.next = 35;
                      break;
                    }

                    console.log("OpenInstall 掉绑了");

                    if (!(!sys.isBrowser && PlatformCbUtil.testNum < 2)) {
                      _context.next = 33;
                      break;
                    }

                    _context.next = 8;
                    return PlatformUtil.readClipboardText();

                  case 8:
                    testText = _context.sent; //打点

                    f = "-";

                    if (sys.Platform.IOS === sys.platform) {
                      f = "_";
                    }

                    Pointdata = "type" + f + 1;
                    Pointdata += ">>" + "data" + f + testText;
                    console.log("Pointdata---->>>>", Pointdata);
                    PlatformUtil.buriedPoint("countBindData", Pointdata, -1);
                    console.log("testTexttestText---->>>>:", testText);

                    if (!(testText && testText != "")) {
                      _context.next = 28;
                      break;
                    }

                    PlatformCbUtil.testNum++;
                    console.log("testTexttestText222222222222---->>>>:", testText);
                    paramsData = {
                      s: null,
                      i: null,
                      time: null,
                      t: null,
                      token: null,
                      webscoket: null,
                      tcpscoket: null,
                      params: null
                    };
                    paramsList = testText && testText.split("&");

                    for (_iterator = _createForOfIteratorHelperLoose(paramsList); !(_step = _iterator()).done;) {
                      param = _step.value;
                      i = param.indexOf("=");

                      if (i != -1) {
                        name = param.slice(0, i);
                        str = param.slice(i + 1);
                        paramsData[name] = str;
                      }
                    }

                    _data = null;
                    if (paramsData.params) _data = JSON.stringify({
                      params: paramsData.params
                    });
                    PlatformCbUtil.getOpenInstallData(_data, 1);
                    return _context.abrupt("return");

                  case 28:
                    //打点
                    _f = "-";

                    if (sys.Platform.IOS === sys.platform) {
                      _f = "_";
                    }

                    _Pointdata = "type" + _f + 3;
                    _Pointdata += ">>" + "data" + _f + "operatorId___" + ConstValue.OPERATOR_ID.toString() + "channelId___" + ConstValue.CHANNEL_ID.toString() + "languageId___" + ConstValue.OPERATOR_ID.toString();
                    PlatformUtil.buriedPoint("countBindData", _Pointdata, -1);

                  case 33:
                    EventManager.getInstance().trigger(MessageManager.Custom.StartLaunchLogic);
                    return _context.abrupt("return");

                  case 35:
                    _context.prev = 35; //打点

                    if (!type) {
                      _f2 = "-";

                      if (sys.Platform.IOS === sys.platform) {
                        _f2 = "_";
                      }

                      _Pointdata2 = "type" + _f2 + 2;
                      _Pointdata2 += ">>" + "data" + _f2 + data;
                      PlatformUtil.buriedPoint("countBindData", _Pointdata2, -1);
                    }

                    jsonData = JSON.parse(data);
                    GameAllData.jsonData = jsonData;
                    params = jsonData.params;

                    if (params) {
                      _context.next = 43;
                      break;
                    }

                    EventManager.getInstance().trigger(MessageManager.Custom.StartLaunchLogic);
                    return _context.abrupt("return");

                  case 43:
                    base64 = new window["Base64"]();
                    b64Params = decodeURIComponent(params);
                    strParams = base64.decode(b64Params);
                    jsonParams = JSON.parse(strParams);
                    GameAllData.operatorId = (jsonParams.operater_id || ConstValue.OPERATOR_ID).toString();
                    GameAllData.channelId = (jsonParams.agent_id || ConstValue.CHANNEL_ID).toString();
                    GameAllData.languageId = (jsonParams.language_id || ConstValue.LANGUAGE).toString();
                    GameAllData.invitationCode = jsonParams.invite;
                    GameAllData.inviterId = jsonParams.inviter_id;
                    GameAllData.paramsUrl = jsonParams.url;
                    console.log("getOpenInstallData--->", JSON.stringify(jsonParams));
                    EventManager.getInstance().trigger(MessageManager.Custom.StartLaunchLogic);
                    _context.next = 62;
                    break;

                  case 57:
                    _context.prev = 57;
                    _context.t0 = _context["catch"](35);
                    log("'params is not JSON'");
                    EventManager.getInstance().trigger(MessageManager.Custom.StartLaunchLogic);
                    return _context.abrupt("return");

                  case 62:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, null, [[35, 57]]);
          }));

          function getOpenInstallData(_x, _x2) {
            return _getOpenInstallData.apply(this, arguments);
          }

          return getOpenInstallData;
        }();

        PlatformCbUtil.getFCMTokenComplete = function getFCMTokenComplete(token) {
          console.log("getFCMTokenComplete--->", token);
          WebSocketMgr.send(MessageManager.Net.FarmCloudMessageRequest, {
            Firebase: token
          });
        };

        PlatformCbUtil.shareCallBack = function shareCallBack(data) {
          if (PlatformUtil.ShareId > 0) {
            var config = ConfigFile.getTConditionInfoByConditionId(PlatformUtil.ShareId);

            if (!config) {
              console.log("UIGameTaskItemTip----->notHaveConfig");
              return;
            }

            if (config.Other) {
              WebSocketMgr.send(MessageManager.Net.FarmTaskShareSuccessRequest, {
                Type: config.Other
              });
              PlatformUtil.ShareId = 0;
            }
          }
        };

        PlatformCbUtil.shareFaildCallBack = function shareFaildCallBack() {
          TipManager.TipFromCode(7205);
        };

        return PlatformCbUtil;
      }());
      PlatformCbUtil.testNum = 0;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PlatformManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BasicPlatform.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, _decorator, BasicPlatform;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      BasicPlatform = module.BasicPlatform;
    }],
    execute: function () {
      var _class, _class2;

      cclegacy._RF.push({}, "280fePU3BhAvYJ/LVNj5oKV", "PlatformManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PlatformManager = exports('PlatformManager', ccclass(_class = (_class2 = /*#__PURE__*/function () {
        PlatformManager.getInstance = function getInstance() {
          if (this.instance == null) {
            this.instance = new PlatformManager();
          }

          return this.instance;
        };

        function PlatformManager() {
          this._platform = null;
          this._id = 0;
          this.Platform = new BasicPlatform();
        }

        _createClass(PlatformManager, [{
          key: "ID",
          get: function get() {
            return this._id;
          }
        }, {
          key: "Platform",
          get: function get() {
            return this._platform;
          },
          set: function set(p) {
            this._platform = p;
          }
        }]);

        return PlatformManager;
      }(), _class2.instance = void 0, _class2)) || _class);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PlatformUtil.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstValue.ts', './GameAllData.ts', './PlatformCbUtil.ts'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, _createForOfIteratorHelperLoose, cclegacy, sys, ConstValue, GameAllData, PlatformCbUtil;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
    }, function (module) {
      ConstValue = module.ConstValue;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      PlatformCbUtil = module.PlatformCbUtil;
    }],
    execute: function () {
      cclegacy._RF.push({}, "48e06YNsY9Ep5mXJKBhiejg", "PlatformUtil", undefined);

      var AppClassName = "";

      if (sys.Platform.IOS === sys.platform) {
        AppClassName = "AppDelegate";
      } else if (sys.Platform.ANDROID === sys.platform) {
        AppClassName = "com/cocos/game/AppActivity";
      }

      var PlatformUtil = exports('PlatformUtil', /*#__PURE__*/function () {
        function PlatformUtil() {} //t_condition_s

        /**@description 初始化运营信息 */


        PlatformUtil.initOperationInfo = /*#__PURE__*/function () {
          var _initOperationInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var paramsData, text, otherParams, paramsList, _iterator, _step, param, i, name, str, data;

            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (sys.isBrowser) {
                      paramsData = {
                        s: null,
                        i: null,
                        time: null,
                        t: null,
                        token: null,
                        webscoket: null,
                        tcpscoket: null,
                        params: null
                      };
                      text = window.location.href;

                      if (text.includes("?") && !text.includes("undefined")) {
                        otherParams = text.split("?")[1];
                        paramsList = otherParams && otherParams.split("&");

                        for (_iterator = _createForOfIteratorHelperLoose(paramsList); !(_step = _iterator()).done;) {
                          param = _step.value;
                          i = param.indexOf("=");

                          if (i != -1) {
                            name = param.slice(0, i);
                            str = param.slice(i + 1);
                            paramsData[name] = str;
                          }
                        }
                      }

                      data = null;
                      if (paramsData.params) data = JSON.stringify({
                        params: paramsData.params
                      });
                      PlatformCbUtil.getOpenInstallData(data);
                    } else if (sys.Platform.IOS === sys.platform) {
                      jsb.reflection.callStaticMethod(AppClassName, "getOpenInstallData");
                    } else if (sys.Platform.ANDROID === sys.platform) {
                      jsb.reflection.callStaticMethod(AppClassName, "getOpenInstallData", "()V");
                    }

                  case 1:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          function initOperationInfo() {
            return _initOperationInfo.apply(this, arguments);
          }

          return initOperationInfo;
        }()
        /**@description 拷贝文本到剪贴板 */
        ;

        PlatformUtil.writeClipboardText = function writeClipboardText(text) {
          var isSucceeded = false;

          if (sys.isBrowser) {
            // navigator.clipboard.writeText(text);
            var textArea = document.createElement("textarea");
            textArea.style.background = 'transparent';
            textArea.value = text;
            document.body.appendChild(textArea);
            textArea.select();

            try {
              isSucceeded = document.execCommand('copy');
              document.body.removeChild(textArea);
            } catch (err) {}
          } else if (sys.Platform.IOS === sys.platform) {
            isSucceeded = jsb.reflection.callStaticMethod(AppClassName, "writeClipboardText:", text);
          } else if (sys.Platform.ANDROID === sys.platform) {
            isSucceeded = jsb.reflection.callStaticMethod(AppClassName, "writeClipboardText", "(Ljava/lang/String;)Z", text);
          }

          return isSucceeded;
        }
        /**@description 读取剪贴板内容 */
        ;

        PlatformUtil.readClipboardText = /*#__PURE__*/function () {
          var _readClipboardText = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var text;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    text = null;

                    if (!sys.isBrowser) {
                      _context2.next = 8;
                      break;
                    }

                    if (!(navigator && navigator.clipboard && document.hasFocus())) {
                      _context2.next = 6;
                      break;
                    }

                    _context2.next = 5;
                    return navigator.clipboard.readText();

                  case 5:
                    text = _context2.sent;

                  case 6:
                    _context2.next = 9;
                    break;

                  case 8:
                    if (sys.Platform.IOS === sys.platform) {
                      text = jsb.reflection.callStaticMethod(AppClassName, "readClipboardText");
                    } else if (sys.Platform.ANDROID === sys.platform) {
                      text = jsb.reflection.callStaticMethod(AppClassName, "readClipboardText", "()Ljava/lang/String;");
                    }

                  case 9:
                    console.log("readClipboardText------>>>>:" + text);
                    return _context2.abrupt("return", text);

                  case 11:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));

          function readClipboardText() {
            return _readClipboardText.apply(this, arguments);
          }

          return readClipboardText;
        }()
        /**@description 获取APP的versionName */
        ;

        PlatformUtil.getVersionName = function getVersionName() {
          console.log('getVersionName start');
          var versionName = "1.0.0";

          if (sys.Platform.IOS === sys.platform) {
            versionName = jsb.reflection.callStaticMethod(AppClassName, "getAPPVersionName");
          } else if (sys.Platform.ANDROID === sys.platform) {
            versionName = jsb.reflection.callStaticMethod(AppClassName, "getAPPVersionName", "()Ljava/lang/String;");
          }

          console.log('getVersionName', versionName);
          return versionName;
        }
        /**@description 获取APP的versionCode */
        ;

        PlatformUtil.getVersionCode = function getVersionCode() {
          console.log('getVersionCode start');
          var versionCode = "1";

          if (sys.Platform.IOS === sys.platform) {
            versionCode = jsb.reflection.callStaticMethod(AppClassName, "getAPPVersionCode");
          } else if (sys.Platform.ANDROID === sys.platform) {
            versionCode = jsb.reflection.callStaticMethod(AppClassName, "getAPPVersionCode", "()I");
          }

          console.log('getVersionCode', versionCode);
          return versionCode;
        }
        /**@description 获取manifest的version */
        ;

        PlatformUtil.getManifestVersion = function getManifestVersion(localManifest) {
          if (sys.isBrowser) {
            if (localManifest && localManifest._file) {
              var content = JSON.parse(localManifest._file);

              if (content && content.version) {
                return content.version;
              }
            }

            return ConstValue.WEB_VERSION;
          } else {
            if (jsb) {
              var manifestUrl = localManifest.nativeUrl;
              var manifestUrltemp = ConstValue.PROJECT_MANIFEST_FILE;

              if (jsb.fileUtils.isFileExist(manifestUrltemp)) {
                var _content = jsb.fileUtils.getStringFromFile(manifestUrltemp);

                var manifest = JSON.parse(_content);
                console.log('获取热更新的manifest版本号=', manifest.version);
                return manifest.version;
              } else {
                if (jsb.fileUtils.isFileExist(manifestUrl)) {
                  var _content2 = jsb.fileUtils.getStringFromFile(manifestUrl);

                  var _manifest = JSON.parse(_content2);

                  console.log('获取本地的manifest版本号=', _manifest.version);
                  return _manifest.version;
                }
              }
            }

            return ConstValue.WEB_VERSION;
          }
        }
        /**@description 用第三方账号登录(使用的mobSDK) */
        ;

        PlatformUtil.loginThirdParty = function loginThirdParty(name) {
          console.log("AppClassName-++++-->", name);

          if (sys.isBrowser) {
            if (window["loginGoogle"]) {
              window["loginGoogle"](function (data) {
                console.log("browser loginThirdParty--->", data.code);
              });
            }
          } else if (sys.Platform.IOS === sys.platform) {
            jsb.reflection.callStaticMethod(AppClassName, "loginThirdParty:", name);
          } else if (sys.Platform.ANDROID === sys.platform) {
            jsb.reflection.callStaticMethod(AppClassName, "loginThirdParty", "(Ljava/lang/String;)V", name);
          }
        }
        /**@description 分享 */
        ;

        PlatformUtil.share = function share(name) {
          var url = "";
          var strOperatorId = "?operater_id=%s&".format(GameAllData.operatorId);
          var strInvitationCode = "invite=%s&".format(GameAllData.FarmUserResponse.InvitationCode); //这个是自己的邀请码(千万不要弄成上级的了)

          var strChannelId = "agent_id=%s&".format(GameAllData.channelId);
          var strLanguageId = "language_id=%s".format(GameAllData.languageId);
          url = ConstValue.OPERATOR_URL + strOperatorId + strInvitationCode + strChannelId + strLanguageId;

          if (sys.isBrowser) {
            if (window["loginGoogle"]) {
              window["loginGoogle"](function (data) {
                console.log("browser loginThirdParty--->", data.code);
              });
            }
          } else if (sys.Platform.IOS === sys.platform) {
            jsb.reflection.callStaticMethod(AppClassName, "share:", url);
          } else if (sys.Platform.ANDROID === sys.platform) {
            jsb.reflection.callStaticMethod(AppClassName, "shareDemo", "(Ljava/lang/String;Ljava/lang/String;)V", name, url);
          }
        }
        /**@description 分享(使用的mobSDK) */
        ;

        PlatformUtil.loginThirdPartyNew = function loginThirdPartyNew(name) {
          console.log("AppClassName-++++-->", name);

          if (sys.isBrowser) {
            if (window["loginGoogle"]) {
              window["loginGoogle"](function (data) {
                console.log("browser loginThirdParty--->", data.code);
              });
            }
          } else if (sys.Platform.IOS === sys.platform) {
            jsb.reflection.callStaticMethod(AppClassName, "loginThirdPartyNew:", name);
          } else if (sys.Platform.ANDROID === sys.platform) {
            jsb.reflection.callStaticMethod(AppClassName, "loginThirdPartyNew", "(Ljava/lang/String;)V", name);
          } // jsb.reflection.callStaticMethod(AppClassName, "sendFileByOtherApp", "(Ljava/lang/String;)V", name);

        }
        /**@description 用MetaMask账号登录 */
        ;

        PlatformUtil.loginMetaMask = function loginMetaMask() {
          if (sys.isBrowser) ;else if (sys.Platform.IOS === sys.platform) ;else if (sys.Platform.ANDROID === sys.platform) ;
        };

        PlatformUtil.registerJiGuangAlias = function registerJiGuangAlias(sequence, name) {
          if (sys.isBrowser) {
            return;
          } else if (sys.Platform.IOS === sys.platform) {
            jsb.reflection.callStaticMethod(AppClassName, "registerJiGuangAlias:", name);
          } else if (sys.Platform.ANDROID === sys.platform) {
            jsb.reflection.callStaticMethod(AppClassName, "registerJiGuangAlias", "(Ljava/lang/String;)V", name);
          }
        };

        PlatformUtil.setJiGuangChannel = function setJiGuangChannel(name) {
          if (sys.isBrowser) {
            return;
          } else if (sys.Platform.IOS === sys.platform) {
            jsb.reflection.callStaticMethod(AppClassName, "setJiGuangChannel:", name);
          } else if (sys.Platform.ANDROID === sys.platform) {
            jsb.reflection.callStaticMethod(AppClassName, "setJiGuangChannel", "(Ljava/lang/String;)V", name);
          }
        };

        PlatformUtil.getJiGuangRegisterID = function getJiGuangRegisterID() {
          if (sys.isBrowser) {
            return "";
          } else if (sys.Platform.IOS === sys.platform) {
            return jsb.reflection.callStaticMethod(AppClassName, "getJiGuangRegisterID");
          } else if (sys.Platform.ANDROID === sys.platform) {
            return jsb.reflection.callStaticMethod(AppClassName, "getJiGuangRegisterID", "()Ljava/lang/String;");
          }
        };

        PlatformUtil.getFCMToken = function getFCMToken() {
          if (sys.isBrowser) {
            return "";
          } else if (sys.Platform.IOS === sys.platform) {
            return jsb.reflection.callStaticMethod(AppClassName, "getFCMToken");
          } else if (sys.Platform.ANDROID === sys.platform) {
            return jsb.reflection.callStaticMethod(AppClassName, "getFCMToken", "()V");
          }

          return "";
        }
        /**@description 获取分享对应的包名 */
        ;

        PlatformUtil.AndroidShareNameByID = function AndroidShareNameByID(id) {
          var str = "";

          switch (id) {
            case 30000:
              //飞机
              str = "org.telegram.messenger";
              break;

            case 30001:
              //whatsapp
              str = "com.whatsapp";
              break;

            case 30002:
              //youtube
              str = "com.google.android.youtube";
              break;

            case 30003:
              //facebook
              str = "com.facebook.katana";
              break;

            case 30004:
              //Tik Tok
              str = "com.zhiliaoapp.musically";
              break;

            case 30005:
              //instagram
              str = "com.instagram.android";
              break;

            case 30006:
              //twitter
              str = "com.twitter.android";
              break;
          }

          return str;
        }
        /**@description 获取分享SDK名 */
        ;

        PlatformUtil.AndroidShareSDKNameByID = function AndroidShareSDKNameByID(id) {
          var str = "";

          switch (id) {
            case 30000:
              //飞机
              str = "Telegram";
              break;

            case 30001:
              //whatsapp
              str = "Whatsapp";
              break;

            case 30002:
              //youtube
              str = "YouTube";
              break;

            case 30003:
              //facebook
              str = "Facebook";
              break;

            case 30004:
              //Tik Tok
              str = "Tiktok";
              break;

            case 30005:
              //instagram
              str = "Instagram";
              break;

            case 30006:
              //twitter
              str = "Twitter";
              break;
          }

          return str;
        }
        /**@description 获取分享对应的Icon */
        ;

        PlatformUtil.ShareIconByID = function ShareIconByID(id) {
          var number = 2033;

          switch (id) {
            case 30000:
              //飞机
              number = 2033;
              break;

            case 30001:
              //whatsapp
              number = 2034;
              break;

            case 30002:
              //youtube
              number = 2035;
              break;

            case 30003:
              //facebook
              number = 2036;
              break;

            case 30004:
              //Tik Tok
              number = 2037;
              break;

            case 30005:
              //instagram
              number = 2038;
              break;

            case 30006:
              //twitter
              number = 2039;
              break;
          }

          return number;
        } //友盟打点
        ;

        PlatformUtil.buriedPoint = function buriedPoint(name, data, du) {
          console.log("name----%s,data-----%s,du-----%i", name, data, du);

          if (sys.isBrowser) {
            return;
          } else if (sys.Platform.IOS === sys.platform) {
            jsb.reflection.callStaticMethod(AppClassName, "buriedPoint:pData:pDU:", name, data, du);
          } else if (sys.Platform.ANDROID === sys.platform) {
            jsb.reflection.callStaticMethod(AppClassName, "buriedPoint", "(Ljava/lang/String;Ljava/lang/String;I)V", name, data, du);
          }
        } //盾获得ip与端口
        ;

        PlatformUtil.getLocalPort = function getLocalPort(url) {
          if (sys.isBrowser) {
            return url;
          } else if (sys.Platform.IOS === sys.platform) {
            return url;
          } else if (sys.Platform.ANDROID === sys.platform) {
            return url;
          }

          return url;
        } //美洽打开客服界面
        ;

        PlatformUtil.meiqiaOpen = function meiqiaOpen(id, data) {
          var token = "";
          var eid = "";

          switch (Number(GameAllData.operatorId)) {
            case 3:
              token = "174c9c9d777817debab184c7499868b6";
              eid = "c58a7fc110bc88e9bed82612d4a35741";
              break;

            case 7:
              token = "a484cb774ba0f51927a8547611f15213";
              eid = "3aa8ed0d04c588daf1f624fb50d6ed9c";
              break;

            default:
              token = "a484cb774ba0f51927a8547611f15213";
              eid = "3aa8ed0d04c588daf1f624fb50d6ed9c";
          }

          if (sys.isBrowser) {
            var maqia = new window["Meiqia"]();
            maqia.MeiqiaGet(eid);
            maqia.MeiqiaSetAssign(token, false);
            maqia.MeiqiaSetId(id);
            maqia.MeiqiaSetdata(data);
            maqia.MeiqiaInit();
            maqia.MeiqiaOpenPanel();
          } else if (sys.Platform.IOS === sys.platform || sys.Platform.ANDROID === sys.platform) {
            var haveData = "{";
            var datas = data.split(">>");

            for (var i = 0; i < datas.length; i++) {
              var mapdata = datas[i].split("-");
              haveData += "\"" + mapdata[0] + "\"" + ":" + "\"" + mapdata[1] + "\"";

              if (i < datas.length - 1) {
                haveData += ",";
              }
            }

            haveData += "}";
            sys.openURL("https://chatlink.mstatik.com/widget/standalone.html?" + "eid=" + eid + "&language=en" + "&languageLocal=true" + "&clientid=" + id + "&fallback=2" + "&groupid=" + token + "&metadata=" + haveData);
          } // } else if (sys.Platform.ANDROID === sys.platform) {
          //     jsb.reflection.callStaticMethod(AppClassName, "meiqiaOpen", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V",id,data,token,null);
          // }

        };

        return PlatformUtil;
      }());
      PlatformUtil.ShareId = 0;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PlayBackGrund.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AudioManager.ts', './NumberUtil.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCString, Component, AudioManager, NumberUtil;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCString = module.CCString;
      Component = module.Component;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "886dfFVae9FLIJKMvZLd1aW", "PlayBackGrund", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PlayBackGrund = exports('PlayBackGrund', (_dec = ccclass('PlayBackGrund'), _dec2 = property({
        type: [CCString],
        displayName: "音乐地址"
      }), _dec3 = property({
        displayName: "打开时播放"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PlayBackGrund, _Component);

        function PlayBackGrund() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "backgrund", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "onLoadplay", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = PlayBackGrund.prototype;

        _proto.onLoad = function onLoad() {
          if (this.onLoadplay) {
            if (this.backgrund.length > 1) {
              var index = NumberUtil.minToMax(0, this.backgrund.length - 1);
              this.playMusic(index);
            }
          }
        };

        _proto.playMusic = function playMusic(index) {
          AudioManager.getInstance().playMusic(this.backgrund[index], false, index);
        };

        _proto.onDestroy = function onDestroy() {};

        return PlayBackGrund;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "backgrund", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "onLoadplay", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PlayButtonSound.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AudioManager.ts', './TweenHelp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, EventHandler, Button, Toggle, EditBox, Component, AudioManager, TweenHelper, ETweenType;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      EventHandler = module.EventHandler;
      Button = module.Button;
      Toggle = module.Toggle;
      EditBox = module.EditBox;
      Component = module.Component;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      TweenHelper = module.TweenHelper;
      ETweenType = module.ETweenType;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "54956nHNNxNcrp2P/05zo25", "PlayButtonSound", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PlayButtonSound = exports('PlayButtonSound', (_dec = ccclass('PlayButtonSound'), _dec2 = property({
        displayName: "音乐地址"
      }), _dec3 = property({
        displayName: "音效添加到点击事件"
      }), _dec4 = property({
        displayName: "播放特效到点击事件"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PlayButtonSound, _Component);

        function PlayButtonSound() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "backgrund", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "addNewEvent", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "playEffect", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = PlayButtonSound.prototype;

        _proto.onLoad = function onLoad() {
          if (this.addNewEvent) this.addNewEventInComp("play");
          if (this.playEffect) this.addNewEventInComp("onPlayEffect");
        };

        _proto.play = function play() {
          AudioManager.getInstance().playSound(this.backgrund, false);
        };

        _proto.onPlayEffect = function onPlayEffect() {
          TweenHelper["default"](this.node, ETweenType.Jelly);
        };

        _proto.addNewEventInComp = function addNewEventInComp(handler) {
          var clickEventHandler = new EventHandler();
          clickEventHandler.target = this.node; // 这个 node 节点是你的事件处理代码组件所属的节点

          clickEventHandler.component = 'PlayButtonSound'; // 这个是脚本类名

          clickEventHandler.handler = handler;
          var but = this.node.getComponent(Button);
          var toggle = this.node.getComponent(Toggle);
          var ebox = this.node.getComponent(EditBox);

          if (but) {
            but.clickEvents.push(clickEventHandler);
          } else if (ebox) {
            ebox.editingDidBegan.push(clickEventHandler);
          } else if (toggle) {
            toggle.clickEvents.push(clickEventHandler);
          }
        };

        return PlayButtonSound;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "backgrund", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "addNewEvent", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "playEffect", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PlaySliderSound.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AudioManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, AudioManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      AudioManager = module.AudioManager;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "c8e44wRZPZDYpno26xpdlid", "PlaySliderSound", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PlaySliderSound = exports('PlaySliderSound', (_dec = ccclass('PlaySliderSound'), _dec2 = property({
        displayName: "音乐地址"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PlaySliderSound, _Component);

        function PlaySliderSound() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "backgrund", _descriptor, _assertThisInitialized(_this));

          _this.nowNum = 0;
          return _this;
        }

        var _proto = PlaySliderSound.prototype;

        _proto.playSound = function playSound(num) {
          var addNum = Math.abs(this.nowNum - num);
          this.nowNum = num;

          if (addNum != 0) {
            AudioManager.getInstance().playSound(this.backgrund, false, 0.5);
            return true;
          }

          return false;
        };

        _proto.setnowNum = function setnowNum(num) {
          this.nowNum = num;
        };

        _proto.playSoundNow = function playSoundNow() {
          AudioManager.getInstance().playSound(this.backgrund, false, 0.5);
        };

        return PlaySliderSound;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "backgrund", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "Sound_huakuai";
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Pool.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _createForOfIteratorHelperLoose, cclegacy;

  return {
    setters: [function (module) {
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e4d41eiU4xKWKyxZirTulBt", "Pool", undefined);
      /**单个池子 */


      var PoolOnce = exports('PoolOnce', /*#__PURE__*/function () {
        function PoolOnce(maxCount, onObj, onClear, onDestroy) {
          this.maxCount = 10;
          this.onObj = null;
          this.onClear = null;
          this.onDestroy = null;
          this.data = [];
          this.maxCount = maxCount;
          this.onObj = onObj;
          this.onClear = onClear;
          this.onDestroy = onDestroy;
        }

        var _proto = PoolOnce.prototype;

        _proto.get = function get() {
          var data = this.data.pop();
          if (!data) data = this.onObj();
          this.onClear(data);
          return data;
        };

        _proto.put = function put(data) {
          this.onClear(data);
          var length = this.data.length;

          if (length > this.maxCount) {
            var destroyValue = this.data.shift();

            if (destroyValue) {
              this.onClear(destroyValue);
              if (this.onDestroy) this.onDestroy(destroyValue);
            }

            this.put(data);
          } else this.data[length] = data;
        };

        _proto.clear = function clear() {
          for (var _iterator = _createForOfIteratorHelperLoose(this.data), _step; !(_step = _iterator()).done;) {
            var _data = _step.value;
            this.onClear(_data);
            if (this.onDestroy) this.onDestroy(_data);
          }

          this.data.length = 0;
        };

        _proto.size = function size() {
          return this.data.length;
        };

        return PoolOnce;
      }());
      /**多池子 */

      var Pool = exports('Pool', /*#__PURE__*/function () {
        function Pool(maxCount, onObj, onClear, onDestroy) {
          this.maxCount = 10;
          this.onObj = null;
          this.onClear = null;
          this.onDestroy = null;
          this.datas = new Map();
          this.maxCount = maxCount;
          this.onObj = onObj;
          this.onClear = onClear;
          this.onDestroy = onDestroy;
        }

        var _proto2 = Pool.prototype;

        _proto2.get = function get(url) {
          return this.pool(url).get();
        };

        _proto2.put = function put(data) {
          return this.pool(data.poolLoadUrl).put(data);
        };

        _proto2.clear = function clear() {
          this.datas.forEach(function (pool, k) {
            return pool.clear();
          });
          this.datas.clear();
        };

        _proto2.size = function size() {
          var count = 0;
          this.datas.forEach(function (pool) {
            count += pool.size();
          });
          return count;
        };

        _proto2.pool = function pool(url) {
          var _this = this;

          var data = this.datas.get(url);

          if (!data) {
            data = new PoolOnce(this.maxCount, function () {
              var obj = _this.onObj(url);

              obj.poolLoadUrl = url;
              return obj;
            }, function (_data) {
              return _this.onClear(_data, url);
            }, this.onDestroy ? function (_data) {
              return _this.onDestroy(_data, url);
            } : null); // 默认池子

            this.datas.set(url || "pool", data);
          }

          return data;
        };

        return Pool;
      }());
      /**池子数组 */

      var PoolArray = exports('PoolArray', /*#__PURE__*/function () {
        function PoolArray(pool) {
          this.data = [];
          this.pool = null;
          this.pool = pool;
        }

        var _proto3 = PoolArray.prototype;

        _proto3.clear = function clear() {
          for (var _iterator2 = _createForOfIteratorHelperLoose(this.data), _step2; !(_step2 = _iterator2()).done;) {
            var _data = _step2.value;
            this.pool.put(_data);
          }

          this.data.length = 0;
        };

        _proto3.add = function add() {
          var data = this.pool.get();
          this.data[this.data.length] = data;
          return data;
        };

        _proto3.size = function size() {
          return this.data.length;
        };

        _proto3.get = function get(index) {
          return this.data[index];
        };

        return PoolArray;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/portis.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, cclegacy;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0e494FVhrRP8KqiRgRmHKvw", "portis", undefined);

      var ConnectToPortis = exports('default', function ConnectToPortis(Portis, opts) {
        return new Promise( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
          var id, network, config, pt;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!(opts && opts.id)) {
                    _context.next = 17;
                    break;
                  }

                  _context.prev = 1;
                  id = opts.id;
                  network = opts.network || "mainnet";
                  config = opts.config;
                  pt = new Portis(id, network, config);
                  _context.next = 8;
                  return pt.provider.enable();

                case 8:
                  pt.provider._portis = pt;
                  resolve(pt.provider);
                  _context.next = 15;
                  break;

                case 12:
                  _context.prev = 12;
                  _context.t0 = _context["catch"](1);
                  return _context.abrupt("return", reject(_context.t0));

                case 15:
                  _context.next = 18;
                  break;

                case 17:
                  return _context.abrupt("return", reject(new Error("Missing Portis Id")));

                case 18:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[1, 12]]);
        })));
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/producer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './OperaleDef.ts', './ConfigFile.ts', './MessageManager.ts', './EventManager.ts', './NumberUtil.ts', './TaskManager.ts', './GameManager.ts', './MainGame.ts', './UIHelp.ts', './TipManager.ts', './ConstValue.ts', './GameAllData.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, resources, instantiate, tween, Vec3, Sprite, Color, Component, OperaleDef, ConfigFile, Configname, MessageManager, EventManager, NumberUtil, TaskManager, GameManager, MainGame, UIHelp, TipManager, ConstValue, GameAllData;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      resources = module.resources;
      instantiate = module.instantiate;
      tween = module.tween;
      Vec3 = module.Vec3;
      Sprite = module.Sprite;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      OperaleDef = module.OperaleDef;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }, function (module) {
      TaskManager = module.TaskManager;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      MainGame = module.MainGame;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      ConstValue = module.ConstValue;
    }, function (module) {
      GameAllData = module.GameAllData;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "24fd1f0grpBVKQrIVySH0ch", "producer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var producer = exports('producer', (_dec = ccclass('producer'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(producer, _Component);

        function producer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._modeid = 0;
          _this._level = 0;
          _this._state = OperaleDef.NONE;
          _this._wait = false;
          _this._select = false;
          _this._aniLock = false;
          _this._lockTime = 0;
          return _this;
        }

        var _proto = producer.prototype;

        _proto.initData = function initData(data) {};

        _proto.getType = function getType() {
          return "";
        };

        _proto.getID = function getID() {
          return this._modeid;
        };

        _proto.getState = function getState() {
          return this._state;
        };

        _proto.getLevel = function getLevel() {
          return this._level;
        };

        _proto.setID = function setID(value) {
          this._modeid = value;
        };

        _proto.setState = function setState(value) {
          this._state = value;
        };

        _proto.setLevel = function setLevel(value) {
          this._level = value;
        };

        _proto.canOperale = function canOperale(mode, data, show) {
          if (this._wait) return false;
          if (mode === this._state) return true;
          return false;
        };

        _proto.playEffect = function playEffect(target, name) {
          resources.load("prefabs/game/" + name, function (error, res) {
            if (res) {
              var e = instantiate(res);
              e.parent = target;
            }

            if (error) {
              console.log("加载效果 ==>", error);
            }
          });
        };

        _proto.playEffectNode = function playEffectNode(target, name, cb) {
          var mg = GameManager.getInstance().getGame(MainGame);
          mg.playEffect(target, name, cb);
        };

        _proto.playEffectPos = function playEffectPos(Pos, name, cb) {
          var mg = GameManager.getInstance().getGame(MainGame);
          mg.playEffectPos(Pos, name, cb);
        };

        _proto.isAnimationLock = function isAnimationLock() {
          if (this._aniLock && UIHelp.getTimeDiff(this._lockTime) < 4000) {
            return true;
          }

          return false;
        };

        _proto.setAnimationLock = function setAnimationLock(value) {
          if (value) {
            this._aniLock = true;
          } else {
            this._aniLock = false;
          }

          this._lockTime = UIHelp.getTimeMask();
        };

        _proto.resetData = function resetData(data) {};

        _proto.getMaxLevel = function getMaxLevel() {
          return 5;
        };

        _proto.isMaxLevel = function isMaxLevel() {
          return false;
        };

        _proto.pickEnable = function pickEnable(show) {};

        _proto.elasticEffect = function elasticEffect() {
          this.node.setScale(0.9, 0.9, 0.9);
          tween(this.node).to(0.2, {
            scale: new Vec3(1.05, 1.05, 1.05)
          }).to(0.10, {
            scale: new Vec3(0.95, 0.95, 0.95)
          }).to(0.10, {
            scale: new Vec3(1.0, 1.0, 1.0)
          }).start(); // this.node.setScale(0.9,0.9,0.9);
          // tween(this.node)
          // .to(0.15, { scale: new Vec3(1.0, 1.0, 1.0)}, {easing: "elasticInOut"})
          // //.to(0.1, { scale: new Vec3(1.0, 1.0, 1.0) })
          // .start();
        };

        _proto.getFarmInfo = function getFarmInfo(level) {
          var LandId = this.getID();
          var fi = ConfigFile.getFarmInfo(this.getID(), level);
          if (fi) return fi;
          var FarmConfig = ConfigFile.getInstance().config.get(Configname.TFarmInfo);
          if (!FarmConfig) return null;
          var data = FarmConfig.filter(function (item) {
            return LandId == item.LandId;
          });
          return data[data.length - 1];
        };

        _proto.greyEffect = function greyEffect(show) {
          var sp = this.node.getComponentsInChildren(Sprite);
          sp.forEach(function (item) {
            item.grayscale = show;
          });
        };

        _proto.closeGameTip = function closeGameTip() {
          var game = GameManager.getInstance().getGame(MainGame);
          game.closeTipOrBtn();
        };

        _proto.showTip = function showTip(info, state, animal) {
          if (!this || !this.node || !info) {
            return;
          }

          var game = GameManager.getInstance().getGame(MainGame);
          var td = game.getTipData();

          if (td) {
            if (animal) {
              if (td.animal && td.animal == animal && td.mode == state && game.getTipName() == info.tip) return;
            } else {
              if (td.select == this && td.mode == state && game.getTipName() == info.tip) return;
            }
          }

          var arg = {};
          arg["select"] = this;
          arg["mode"] = state;
          if (!info.mode) info.mode = state;
          if (!info.select) info.select = this;
          if (!info.follow) info.follow = this.node;
          arg["Info"] = info;
          arg["follow"] = this.node;
          EventManager.getInstance().trigger(MessageManager.Custom.ShowFarmTip, arg);
        };

        _proto.showBtn = function showBtn(info, mode, show) {
          if (!this || !this.node || !info) {
            return;
          }

          var arg = {};
          arg["select"] = this.node;
          arg["show"] = show;
          arg["id"] = mode;
          if (!info.select) info.select = this;
          if (!info.follow) info.follow = this.node;
          if (!info.mode) info.mode = mode;
          arg["data"] = info;
          EventManager.getInstance().trigger(MessageManager.Custom.OpenOperaleBtn, arg);
        };

        producer.getMessageText = function getMessageText(id, type) {
          var msg = "";
          if (type) msg = ConfigFile.findLanguage(id, type); // ConfigFile.getItemName(id);
          else msg = ConfigFile.findLanguage(id); // ConfigFile.getItemName(id);

          return msg;
        };

        producer.labelCtlCommand = function labelCtlCommand(l, ctl, val) {
          if (!l) return;

          if (ctl == "color") {
            l.color = new Color().fromHEX(val);
          } else if (ctl == "b") {
            l.isBold = true;
          } else if (ctl == "i") {
            l.isItalic = true;
          } else if (ctl == "u") {
            l.isUnderline = true;
          }
        };

        producer.replaceDefaultColor = function replaceDefaultColor(l, text) {
          if (!l) return;
          if (!text) return;
          var index = text.indexOf("<color=#");

          if (index < 0) {
            l.string = text;
          } else {
            var outText = "";
            var ctl = [];
            var a = text.split("<");
            a.forEach(function (item) {
              var index = item.indexOf(">");

              if (index > 0) {
                var body = item.substring(index + 1);
                var command = item.substring(0, index);
                ctl.push(command);
                outText += body;
              }
            });
            l.string = outText;
            ctl.forEach(function (item) {
              if (item[0] == '/') return;
              var index = item.indexOf("=");

              if (index > 0) {
                var body = item.substring(index + 1);
                var command = item.substring(0, index);
                producer.labelCtlCommand(l, command, body);
              } else {
                producer.labelCtlCommand(l, item, "");
              }
            });
          }
        };

        producer.AddDefaultColor = function AddDefaultColor(text) {
          if (!text) return ""; // let index = text.indexOf("<color=#");
          // if (index < 0) {
          //     return "<color=#A7521F>" + text + "</color>";
          // }

          return text;
        };

        producer.getServerTimeDiff = function getServerTimeDiff(localTime) {
          var heart = GameAllData.GameHeartResponse;
          if (!heart) return 0;
          return heart.time + localTime;
        } // public static getServerTimeDiff(localTime: number) {
        //     let heart = GameAllData.GameHeartResponse;
        //     if (!heart) return 0;
        //     let date = new Date((heart.time + localTime) * 1000); 
        //     var timezone = GameAllData.severTimeZoneDiff;// 服务器时区与UTC的差值
        //     var offset_GMT = date.getTimezoneOffset(); // 本地时间和格林威治的时间差，单位为分钟
        //     var nowDate = date.getTime(); // 本地时间距 1970 年 1 月 1 日午夜（GMT 时间）之间的毫秒数
        //     var targetDate = new Date(nowDate + offset_GMT * 60 * 1000 + timezone * 1000);
        //     return targetDate.getTime();
        // }
        ;

        producer.MessageBox = function MessageBox(Code, data, cb) {
          //let text1 = producer.getMessageText(Code).iconformat(data);
          var text1 = producer.getMessageText(Code, data); //text1 = producer.AddDefaultColor(text1);

          TipManager.autoTip(3, Code, text1, cb); //
          // UIManager.getInstance().openUI(MessageBox, 99, (ui, arg) => {
          //     ui.initUI(text1, data, cb);
          // }, null, null);

          return false;
        };

        producer.MessageBoxArg1 = function MessageBoxArg1(Code, arg, data, cb) {
          var text1 = producer.getMessageText(Code);
          text1 = text1.format(arg); //text1 = producer.AddDefaultColor(text1);

          TipManager.autoTip(3, Code, text1, cb); //
          // UIManager.getInstance().openUI(MessageBox, 99, (ui, arg) => {
          //     ui.initUI(text1, data, cb);
          // }, null, null);

          return false;
        };

        producer.getDateTime = function getDateTime(time) {
          if (ConstValue.LANGUAGE == "zh_cn") {
            return time.getFullYear().toString() + "/" + (time.getMonth() + 1).toString() + "/" + time.getDate();
          } else {
            return (time.getMonth() + 1).toString() + "/" + time.getDate() + "/" + time.getFullYear().toString();
          } //let dayt = producer.getMessageText(106015);
          //return dayt.format(time.getFullYear().toString(),time.getMonth()+1,time.getDate());

        };

        producer.getTimeFormat = function getTimeFormat(totaltime) {
          var timedata = NumberUtil.time_split(totaltime);
          var dayt = producer.getMessageText(107001);
          var hourt = producer.getMessageText(107002);
          var mintt = producer.getMessageText(107003);
          var sect = producer.getMessageText(107004);
          var temple = "";
          var len = 0;

          if (timedata.day > 0) {
            temple = dayt.format(timedata.day);
            len++;
          }

          if (timedata.hour > 0) {
            temple += hourt.format(timedata.hour);
            len++;
          }

          if (timedata.min > 0 && len < 2) {
            temple += mintt.format(timedata.min);
            len++;
          }

          if (timedata.sec > 0 && len < 2) {
            temple += sect.format(timedata.sec);
            len++;
          }

          if (len < 1) {
            temple += sect.format(0);
          }

          return temple;
        };

        _proto.getUpgradeNeedItem = function getUpgradeNeedItem() {};

        _proto.getUpgradeNeedItemType = function getUpgradeNeedItemType() {};

        _proto.getNeedItemType = function getNeedItemType() {};

        _proto.getVipCanUpgrade = function getVipCanUpgrade() {
          return true;
        };

        _proto.checkCanUnlock = function checkCanUnlock(level) {
          return true;
        };

        _proto.setSelectState = function setSelectState(show) {
          this._select = show;
        };

        _proto.getSelectState = function getSelectState(show) {
          return this._select;
        };

        _proto.getTipText = function getTipText(mode) {
          return {
            text: "aaaaaa",
            name: ""
          };
        };

        _proto.onClick = function onClick(uipos) {
          TaskManager.getInstance().onClickProducer(this, uipos);
          this.elasticEffect();
        };

        _proto.checkSteal = function checkSteal(mode, data, show) {};

        _proto.checkAction = function checkAction(mode, data) {};

        _proto.checkMoney = function checkMoney(mode, data, show) {};

        _proto.getWorldPosition = function getWorldPosition(temp_V3_1) {
          return this.node.getWorldPosition(temp_V3_1);
        };

        return producer;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/producerTip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './producer.ts', './BaseTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, producer, BaseTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      BaseTip = module.BaseTip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "11febGBhABDw5av7xPjSrge", "producerTip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var producerTip = exports('producerTip', (_dec = ccclass('producerTip'), _dec2 = property(Label), _dec3 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseTip) {
        _inheritsLoose(producerTip, _BaseTip);

        function producerTip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseTip.call.apply(_BaseTip, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "producerName", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Text", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = producerTip.prototype;

        _proto.initUI = function initUI(arg) {
          this.popHeight = 100;

          _BaseTip.prototype.initUI.call(this, arg);

          this._cbData = arg; //this.producerName.string = arg.name;

          producer.replaceDefaultColor(this.producerName, arg.name);
          this.Text.string = arg.text;
        };

        return producerTip;
      }(BaseTip), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "producerName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Text", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PropItemTip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, UITransform, resources, instantiate, RichText, v3, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      resources = module.resources;
      instantiate = module.instantiate;
      RichText = module.RichText;
      v3 = module.v3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "c3d1f3SwE5KTqImsGqpuLMy", "PropItemTip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PropItemTip = exports('PropItemTip', (_dec = ccclass('PropItem'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PropItemTip, _Component);

        function PropItemTip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.tip = null;
          _this.tag = null;
          return _this;
        }

        PropItemTip.getInstance = function getInstance() {
          if (this.instance == null) {
            this.instance = new PropItemTip();
          }

          return this.instance;
        };

        var _proto = PropItemTip.prototype;

        _proto.openTip = function openTip(parentNode, name, Text, tag) {
          var _this2 = this;

          if (!tag.node || !tag.node.worldPosition) {
            return;
          }

          this.tag = tag;
          var tagPos = parentNode.getComponent(UITransform).convertToNodeSpaceAR(tag.node.worldPosition);
          var tagSizeW = tag.node.getComponent(UITransform).width;
          var parentSizeW = parentNode.getComponent(UITransform).width;
          if (!this.tip) resources.load("prefabs/ui/item/UINotice/PropItemTip", function (completedCount, totalCount, item) {}, function (error, prefab) {
            if (error) {
              console.log(error);
              return;
            }

            _this2.tip = instantiate(prefab);
            parentNode.addChild(_this2.tip);
            _this2.tip.getChildByName("LabelName").getComponent(RichText).string = "<color=#813F2A>" + name + "</color>";
            _this2.tip.getChildByName("LabelText").getComponent(RichText).string = "<color=#813F2A>" + Text + "</color>";
            var positionX = tagPos.x > 0 ? tagPos.x - tagSizeW / 2 - _this2.tip.getComponent(UITransform).width / 2 : tagPos.x + tagSizeW / 2 + _this2.tip.getComponent(UITransform).width / 2;

            _this2.tip.setPosition(v3(positionX, tagPos.y, tagPos.z));

            if (tagPos.x <= 0) {
              _this2.tip.getChildByName("bg").setScale(v3(1, 1, 1));

              _this2.tip.getChildByName("LabelText").setPosition(v3(11, -20, 0));
            } else {
              _this2.tip.getChildByName("bg").setScale(v3(-1, 1, 1));

              _this2.tip.getChildByName("LabelText").setPosition(v3(-6, -20, 0));
            }
          });else {
            //this.tip.parent=null
            parentNode.addChild(this.tip);
            this.tip.active = true;
            this.tip.getChildByName("LabelName").getComponent(RichText).string = "<color=#813F2A>" + name + "</color>";
            this.tip.getChildByName("LabelText").getComponent(RichText).string = "<color=#813F2A>" + Text + "</color>";
            var positionX = tagPos.x > 0 ? tagPos.x - tagSizeW / 2 - this.tip.getComponent(UITransform).width / 2 : tagPos.x + tagSizeW / 2 + this.tip.getComponent(UITransform).width / 2;
            this.tip.setPosition(v3(positionX, tagPos.y, tagPos.z));

            if (tagPos.x <= 0) {
              this.tip.getChildByName("bg").setScale(v3(1, 1, 1));
              this.tip.getChildByName("LabelText").setPosition(v3(11, -20, 0));
            } else {
              this.tip.getChildByName("bg").setScale(v3(-1, 1, 1));
              this.tip.getChildByName("LabelText").setPosition(v3(-6, -20, 0));
            }
          }
        };

        _proto.closeTip = function closeTip() {
          if (this.tip) this.tip.active = false;
        };

        _proto.tipDestroy = function tipDestroy() {
          if (this.tip) {
            this.tip.destroy();
            this.tip = null;
          }
        };

        return PropItemTip;
      }(Component), _class2.instance = void 0, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Provider.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      exports('Provider', Provider);

      cclegacy._RF.push({}, "f060ejKuDlPZZlaTLYO1K4Y", "Provider", undefined);

      function Provider(props) {// const {
        //   name,
        //   logo,
        //   description,
        //   themeColors,
        //   onClick,
        //   ...otherProps
        // } = props;
        // return (
        //   <SProviderWrapper
        //     themeColors={themeColors}
        //     className={PROVIDER_WRAPPER_CLASSNAME}
        //     onClick={onClick}
        //     {...otherProps}
        //   >
        //     <SProviderContainer
        //       themeColors={themeColors}
        //       className={PROVIDER_CONTAINER_CLASSNAME}
        //     >
        //       <SIcon className={PROVIDER_ICON_CLASSNAME}>
        //         <img src={logo} alt={name} />
        //       </SIcon>
        //       <SName themeColors={themeColors} className={PROVIDER_NAME_CLASSNAME}>
        //         {name}
        //       </SName>
        //       <SDescription
        //         themeColors={themeColors}
        //         className={PROVIDER_DESCRIPTION_CLASSNAME}
        //       >
        //         {description}
        //       </SDescription>
        //     </SProviderContainer>
        //   </SProviderWrapper>
        // );
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/providers.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './index5.ts', './keys.ts', './events.ts', './utils.ts', './local.ts', './events2.ts', './index2.ts', './index6.ts'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, _extends, cclegacy, CACHED_PROVIDER_KEY, INJECTED_PROVIDER_ID, ERROR_EVENT, CONNECT_EVENT, SELECT_EVENT, findMatchingRequiredOptions, filterMatches, isMobile, getProviderDescription, getInjectedProvider, getProviderInfoById, removeLocal, setLocal, getLocal, EventController, index, FALLBACK;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
      _extends = module.extends;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      CACHED_PROVIDER_KEY = module.CACHED_PROVIDER_KEY;
      INJECTED_PROVIDER_ID = module.INJECTED_PROVIDER_ID;
    }, function (module) {
      ERROR_EVENT = module.ERROR_EVENT;
      CONNECT_EVENT = module.CONNECT_EVENT;
      SELECT_EVENT = module.SELECT_EVENT;
    }, function (module) {
      findMatchingRequiredOptions = module.findMatchingRequiredOptions;
      filterMatches = module.filterMatches;
      isMobile = module.isMobile;
      getProviderDescription = module.getProviderDescription;
      getInjectedProvider = module.getInjectedProvider;
      getProviderInfoById = module.getProviderInfoById;
    }, function (module) {
      removeLocal = module.removeLocal;
      setLocal = module.setLocal;
      getLocal = module.getLocal;
    }, function (module) {
      EventController = module.EventController;
    }, function (module) {
      index = module;
    }, function (module) {
      FALLBACK = module.FALLBACK;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2e83cny72NNuaBya6aAUVA/", "providers", undefined);

      var ProviderController = exports('ProviderController', /*#__PURE__*/function () {
        function ProviderController(_opts) {
          var _this = this;

          this.cachedProvider = "";
          this.shouldCacheProvider = false;
          this.disableInjectedProvider = false;
          this.eventController = new EventController();
          this.injectedProvider = null;
          this.providers = [];
          this.providerOptions = void 0;
          this.network = "";

          this.getUserOptions = function () {
            var mobile = isMobile();

            var defaultProviderList = _this.providers.map(function (_ref) {
              var id = _ref.id;
              return id;
            });

            var displayInjected = !!_this.injectedProvider && !_this.disableInjectedProvider;
            var onlyInjected = displayInjected && mobile;
            var providerList = [];

            if (onlyInjected) {
              providerList.push(INJECTED_PROVIDER_ID);
            } else {
              if (displayInjected) {
                providerList.push(INJECTED_PROVIDER_ID);
              }

              defaultProviderList.forEach(function (id) {
                if (id !== INJECTED_PROVIDER_ID) {
                  var _result = _this.shouldDisplayProvider(id);

                  if (_result) {
                    providerList.push(id);
                  }
                }
              });
            }

            var userOptions = [];
            providerList.forEach(function (id) {
              var provider = _this.getProvider(id);

              if (typeof provider !== "undefined") {
                var _id = provider.id,
                    name = provider.name,
                    logo = provider.logo,
                    connector = provider.connector;
                userOptions.push({
                  id: _id,
                  name: name,
                  logo: logo,
                  description: getProviderDescription(provider),
                  onClick: function onClick() {
                    return _this.connectTo(_id, connector);
                  }
                });
              }
            });
            return userOptions;
          };

          this.connectTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(id, connector) {
            var _providerPackage, providerOptions, _opts2, provider;

            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.prev = 0;

                    _this.eventController.trigger(SELECT_EVENT, id);

                    _providerPackage = _this.getProviderOption(id, "package");
                    providerOptions = _this.getProviderOption(id, "options");
                    _opts2 = _extends({
                      network: _this.network || undefined
                    }, providerOptions);
                    _context.next = 7;
                    return connector(_providerPackage, _opts2);

                  case 7:
                    provider = _context.sent;

                    _this.eventController.trigger(CONNECT_EVENT, provider);

                    if (_this.shouldCacheProvider && _this.cachedProvider !== id) {
                      _this.setCachedProvider(id);
                    }

                    _context.next = 15;
                    break;

                  case 12:
                    _context.prev = 12;
                    _context.t0 = _context["catch"](0);

                    _this.eventController.trigger(ERROR_EVENT, _context.t0);

                  case 15:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, null, [[0, 12]]);
          }));
          this.cachedProvider = getLocal(CACHED_PROVIDER_KEY) || "";
          this.disableInjectedProvider = _opts.disableInjectedProvider;
          this.shouldCacheProvider = _opts.cacheProvider;
          this.providerOptions = _opts.providerOptions;
          this.network = _opts.network;
          this.injectedProvider = getInjectedProvider();
          this.providers = Object.keys(index).map(function (id) {
            var providerInfo;

            if (id === INJECTED_PROVIDER_ID) {
              providerInfo = _this.injectedProvider || FALLBACK;
            } else {
              providerInfo = getProviderInfoById(id);
            } // parse custom display options


            if (_this.providerOptions[id]) {
              var options = _this.providerOptions[id];

              if (typeof options.display !== "undefined") {
                providerInfo = _extends({}, providerInfo, _this.providerOptions[id].display);
              }
            }

            return _extends({}, providerInfo, {
              connector: index[id],
              "package": providerInfo["package"]
            });
          }); // parse custom providers

          Object.keys(this.providerOptions).filter(function (key) {
            return key.startsWith("custom-");
          }).map(function (id) {
            if (id && _this.providerOptions[id]) {
              var options = _this.providerOptions[id];

              if (typeof options.display !== "undefined" && typeof options.connector !== "undefined") {
                _this.providers.push(_extends({}, FALLBACK, {
                  id: id
                }, options.display, {
                  connector: options.connector
                }));
              }
            }
          });
        }

        var _proto = ProviderController.prototype;

        _proto.shouldDisplayProvider = function shouldDisplayProvider(id) {
          var provider = this.getProvider(id);

          if (typeof provider !== "undefined") {
            var providerPackageOptions = this.providerOptions[id];

            if (providerPackageOptions) {
              var isProvided = !!providerPackageOptions["package"];

              if (isProvided) {
                var requiredOptions = provider["package"] ? provider["package"].required : undefined;

                if (requiredOptions && requiredOptions.length) {
                  var providedOptions = providerPackageOptions.options;

                  if (providedOptions && Object.keys(providedOptions).length) {
                    var matches = findMatchingRequiredOptions(requiredOptions, providedOptions);

                    if (requiredOptions.length === matches.length) {
                      return true;
                    }
                  }
                } else {
                  return true;
                }
              }
            }
          }

          return false;
        };

        _proto.getProvider = function getProvider(id) {
          return filterMatches(this.providers, function (x) {
            return x.id === id;
          }, undefined);
        };

        _proto.getProviderOption = function getProviderOption(id, key) {
          return this.providerOptions && this.providerOptions[id] && this.providerOptions[id][key] ? this.providerOptions[id][key] : {};
        };

        _proto.clearCachedProvider = function clearCachedProvider() {
          this.cachedProvider = "";
          removeLocal(CACHED_PROVIDER_KEY);
        };

        _proto.setCachedProvider = function setCachedProvider(id) {
          this.cachedProvider = id;
          setLocal(CACHED_PROVIDER_KEY, id);
        };

        _proto.connectToCachedProvider = /*#__PURE__*/function () {
          var _connectToCachedProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var provider;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    provider = this.getProvider(this.cachedProvider);

                    if (!(typeof provider !== "undefined")) {
                      _context2.next = 4;
                      break;
                    }

                    _context2.next = 4;
                    return this.connectTo(provider.id, provider.connector);

                  case 4:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function connectToCachedProvider() {
            return _connectToCachedProvider.apply(this, arguments);
          }

          return connectToCachedProvider;
        }();

        _proto.on = function on(event, callback) {
          var _this2 = this;

          this.eventController.on({
            event: event,
            callback: callback
          });
          return function () {
            return _this2.eventController.off({
              event: event,
              callback: callback
            });
          };
        };

        _proto.off = function off(event, callback) {
          this.eventController.off({
            event: event,
            callback: callback
          });
        };

        return ProviderController;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Recharge.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstLanguage.ts', './ConfigFile.ts', './NodeHelp.ts', './SetSecondaryUIEntity.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, ConstLanguage, ConfigFile, NodeHelp, SetSecondaryUIEntity;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      ConstLanguage = module.ConstLanguage;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      SetSecondaryUIEntity = module.SetSecondaryUIEntity;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "04142euDRdLlr6pI6V+nM+w", "Recharge", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Recharge = exports('Recharge', (_dec = ccclass('Recharge'), _dec(_class = /*#__PURE__*/function (_SetSecondaryUIEntity) {
        _inheritsLoose(Recharge, _SetSecondaryUIEntity);

        function Recharge() {
          return _SetSecondaryUIEntity.apply(this, arguments) || this;
        }

        var _proto = Recharge.prototype;

        _proto.init = function init() {
          _SetSecondaryUIEntity.prototype.init.call(this);

          this.setShow();
        };

        _proto.setShow = function setShow() {
          NodeHelp.getchildlable(this.node, "LabelTitle", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.Set_PANEL_BUTTON3);
          });
        };

        return Recharge;
      }(SetSecondaryUIEntity)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RechargeItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './NodeHelp.ts', './ExchangeRecodItem.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, ConfigFile, NodeHelp, ExchangeRecodItem;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      ExchangeRecodItem = module.ExchangeRecodItem;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "1173aUmJK1MO65v0cjsw/gw", "RechargeItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var RechargeItem = exports('RechargeItem', (_dec = ccclass('RechargeItem'), _dec(_class = /*#__PURE__*/function (_ExchangeRecodItem) {
        _inheritsLoose(RechargeItem, _ExchangeRecodItem);

        function RechargeItem() {
          return _ExchangeRecodItem.apply(this, arguments) || this;
        }

        var _proto = RechargeItem.prototype;

        _proto.init = function init(data, index) {
          var _this = this;

          _ExchangeRecodItem.prototype.init.call(this, data, index);

          if ((index + 1) % 2 == 0) {
            this.node.getChildByName("bg_2").active = true;
          }

          NodeHelp.getchildlable(this.node, "orderID", Label, function (comp) {
            comp.string = _this.data.order_id;
          });
          NodeHelp.getchildlable(this.node, "currencyType", Label, function (comp) {
            var currencyData = ConfigFile.getItemData(_this.data.currency_type);
            var currencyName = ConfigFile.findLanguage(currencyData.Name);
            comp.string = currencyName;
          });
          NodeHelp.getchildlable(this.node, "currency", Label, function (comp) {
            comp.string = _this.data.currency;
          });
          NodeHelp.getchildlable(this.node, "rechargeTime", Label, function (comp) {
            //时间显示
            var date = new Date(_this.data.recharge_time * 1000);
            var year = date.getFullYear() + "";
            var month = date.getMonth() + 1 + "";
            var day = date.getDate() + "";
            var hours = date.getHours() < 10 ? "0" + date.getHours() : date.getHours() + "";
            var minutes = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes() + "";
            var seconds = date.getSeconds() < 10 ? "0" + date.getSeconds() : date.getSeconds() + "";
            comp.string = month + "/" + day + "/" + year + " " + hours + ":" + minutes + ":" + seconds;
          });
          NodeHelp.getchildlable(this.node, "toTime", Label, function (comp) {
            //时间显示
            var date = new Date(_this.data.to_time * 1000);
            var year = date.getFullYear() + "";
            var month = date.getMonth() + 1 + "";
            var day = date.getDate() + "";
            var hours = date.getHours() < 10 ? "0" + date.getHours() : date.getHours() + "";
            var minutes = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes() + "";
            var seconds = date.getSeconds() < 10 ? "0" + date.getSeconds() : date.getSeconds() + "";
            comp.string = month + "/" + day + "/" + year + " " + hours + ":" + minutes + ":" + seconds;
          });
          NodeHelp.getchildlable(this.node, "status", Label, function (comp) {
            //0 待处理 1 锁定 2 待发货 3 已发货 4 不通过 5 失败（退回游戏币） 6 罚没
            var str = "";

            switch (_this.data.status) {
              case 0:
                {
                  str = ConfigFile.findLanguage(120451);
                  break;
                }

              case 1:
                {
                  str = ConfigFile.findLanguage(120452);
                  break;
                }

              case 2:
                {
                  str = ConfigFile.findLanguage(120453);
                  break;
                }

              case 3:
                {
                  str = ConfigFile.findLanguage(120454);
                  break;
                }

              case 4:
                {
                  str = ConfigFile.findLanguage(120455);
                  break;
                }

              case 5:
                {
                  str = ConfigFile.findLanguage(120456);
                  break;
                }

              case 6:
                {
                  str = ConfigFile.findLanguage(120457);
                  break;
                }
            }

            comp.string = str;
          });
        };

        return RechargeItem;
      }(ExchangeRecodItem)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RechargeView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumDefine.ts', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './TipManager.ts', './UIManager.ts', './HttpMgr.ts', './CommonUtil.ts', './NodeHelp.ts', './NumberUtil.ts', './PlatformUtil.ts', './BasePanel.ts', './UIConchExchangeRecod.ts', './UIDescription.ts', './UIWallet.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Button, SpriteFrame, ToggleContainer, Graphics, Label, EditBox, ScrollView, Color, EnumDefine, ConfigFile, GameAllData, EventManager, MessageManager, TipManager, UIManager, HttpMgr, CommonUtil, NodeHelp, NumberUtil, PlatformUtil, BasePanel, UIConchExchangeRecod, UIDescription, UIWallet;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Button = module.Button;
      SpriteFrame = module.SpriteFrame;
      ToggleContainer = module.ToggleContainer;
      Graphics = module.Graphics;
      Label = module.Label;
      EditBox = module.EditBox;
      ScrollView = module.ScrollView;
      Color = module.Color;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      HttpMgr = module.HttpMgr;
    }, function (module) {
      CommonUtil = module.CommonUtil;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }, function (module) {
      PlatformUtil = module.PlatformUtil;
    }, function (module) {
      BasePanel = module.BasePanel;
    }, function (module) {
      UIConchExchangeRecod = module.UIConchExchangeRecod;
    }, function (module) {
      UIDescription = module.UIDescription;
    }, function (module) {
      UIWallet = module.UIWallet;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _class3;

      cclegacy._RF.push({}, "eba5cpmUUlDGL1BqjzOSWjB", "RechargeView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var RechargeView = exports('RechargeView', (_dec = ccclass('RechargeView'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(Node), _dec10 = property(Node), _dec11 = property(Node), _dec12 = property(Button), _dec13 = property(Node), _dec14 = property(SpriteFrame), _dec15 = property(SpriteFrame), _dec16 = property(ToggleContainer), _dec17 = property(Graphics), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(RechargeView, _BasePanel);

        function RechargeView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "nodUSDT", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodMode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodCurrencyType", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodMainnet", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodAddress2", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodAddress3", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodMoney1", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodMoney2", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodMoney3", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodMoney4", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnSubmit", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodQRCode", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sprfSheetSelectOn", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sprfSheetSelectOff", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "toggleTab", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spGraphics", _descriptor16, _assertThisInitialized(_this));

          _this.mode = 1;
          _this._RechangeData = null;
          _this._CashData = null;
          _this.rechargeAddress = "";
          _this.netIndex = 1;
          _this.minVip = 0;
          return _this;
        }

        var _proto = RechargeView.prototype;

        _proto.onLoad = function onLoad() {
          this.getAddressList(1, 20);
          this.getBaseInfo();
          this.getCashChannel();
          EventManager.getInstance().add(MessageManager.Net.FarmCurrencyChangeResponse, this, this.onFarmCurrencyChangeResponse);
        };

        _proto.onDestroy = function onDestroy() {
          EventManager.getInstance().remove(MessageManager.Net.FarmCurrencyChangeResponse, this, this.onFarmCurrencyChangeResponse);
        };

        _proto.onFarmCurrencyChangeResponse = function onFarmCurrencyChangeResponse() {
          this.cleanEidt();
        };

        _proto.cleanEidt = function cleanEidt() {
          var _this2 = this;

          console.warn("cleanEdit=====>");
          this.scheduleOnce(function () {
            window["recharge"] = _this2;
            window["xxx"] = _this2.nodMoney2.children[2].getComponent(Label);
            _this2.nodMoney1.children[2].getComponent(EditBox).string = "";
            _this2.nodMoney3.children[2].getComponent(EditBox).string = "";
            _this2.nodMoney2.children[2].getComponent(Label).string = ""; //    this.nodMoney2.children[2].getComponent(EditBox).string = ""
          });
        };

        _proto.start = function start() {
          if (this.mode == 1) {
            this.toggleTab.toggleItems[0].setIsCheckedWithoutNotify(true);
            this.toggleTab.toggleItems[1].setIsCheckedWithoutNotify(false);
          } else {
            this.toggleTab.toggleItems[0].setIsCheckedWithoutNotify(false);
            this.toggleTab.toggleItems[1].setIsCheckedWithoutNotify(true);
          }

          EventManager.getInstance().add(MessageManager.Custom.UPDATEADDRESS, this, this.onUpdateAddress);
          EventManager.getInstance().add(MessageManager.Custom.SELECTADDRESS, this, this.onSelectAddress);
          this.setItemTitle();
          this.setTabMode(this.mode);
          this.elasticEffect(this.node, null);
        };

        _proto.onUpdateAddress = function onUpdateAddress() {
          this.getAddressList(1, 20);
        };

        _proto.onSelectAddress = function onSelectAddress() {
          this.setSelect();
        };

        _proto.setSelect = function setSelect() {
          var _this3 = this;

          if (!GameAllData.addressData) return;

          if (!this.nodAddress3) {
            return;
          }

          var useAddress = null;
          var target = GameAllData.addressData.filter(function (item) {
            return item.network_type == _this3.netIndex;
          });

          if (GameAllData.selectAddress) {
            useAddress = target.find(function (item) {
              return item.address == GameAllData.selectAddress;
            });
          }

          if (!useAddress) {
            if (target.length > 0) useAddress = target[0];
          }

          if (useAddress) {
            this.nodAddress3.children[2].getComponent(ScrollView).content.getComponent(Label).string = useAddress.address;
          } else {
            this.nodAddress3.children[2].getComponent(ScrollView).content.getComponent(Label).string = "";
          }
        };

        _proto.getAddressList = function getAddressList(page, size) {
          var _this4 = this;

          var self = this;
          HttpMgr.post(GameAllData.httpServerUrl + "cashAdress/list", {
            page: page,
            size: size
          }, function (data) {
            try {
              if (data.data && data.data.items) {
                GameAllData.addressData = data.data.items;
                self.setSelect();
              } else {
                GameAllData.addressData = [];
                _this4.nodAddress3.children[2].getComponent(ScrollView).content.getComponent(Label).string = "";
                console.log("getAddressList 没有数据");
              }
            } catch (error) {
              console.log("getAddressList ==>", error);
            }
          });
        };

        _proto.onRechargeAddress = function onRechargeAddress(data) {
          if (!data) return;
          if (!data.address) return;
          this.rechargeAddress = data.address;

          if (this.rechargeAddress.length > 3 && this.rechargeAddress.length < 44) {
            this.spGraphics.clear();
            CommonUtil.createQRcode(this.rechargeAddress, this.spGraphics);
          }

          if (this._RechangeData) this.updateRechangeData();
          if (this._CashData) this.updateCashData();
        };

        _proto.getRechangeAddress = function getRechangeAddress() {
          var _this5 = this;

          var UserData = GameAllData.FarmUserResponse;
          if (!this._RechangeData) return;

          var selectNet = this._RechangeData.find(function (item) {
            return item.type == _this5.netIndex;
          });

          if (selectNet) {
            HttpMgr.post(GameAllData.httpServerUrl + "recharge/address", {
              user_id: UserData.Id,
              payment_id: selectNet.id,
              operater_id: selectNet.operater_id
            }, function (data) {
              if (data.Code && data.Code != 0) {
                console.log(data.data);
              } else {
                try {
                  _this5.onRechargeAddress(data.data);
                } catch (error) {
                  console.log("getRechangeAddress ==>", error);
                }
              }
            });
          } else {
            this.rechargeAddress = "";
            console.log("没有这个网络配置");
          }
        };

        _proto.getBaseInfo = function getBaseInfo() {
          var _this6 = this;

          var self = this;
          HttpMgr.post(GameAllData.httpServerUrl + "order/getPayChannel", {
            operater_id: GameAllData.operatorId
          }, function (data) {
            try {
              self._RechangeData = data.data;
              if (_this6.rechargeAddress == "") self.getRechangeAddress();else self.updateRechangeData();
            } catch (error) {
              console.log("getPayChannel ==>", error);
            }
          });
        };

        _proto.getCashChannel = function getCashChannel() {
          var _this7 = this;

          var self = this;
          HttpMgr.post(GameAllData.httpServerUrl + "order/getCashChannel", {
            operater_id: GameAllData.operatorId
          }, function (data) {
            try {
              if (data.code != 0 && data.code != 200) {
                console.log("获取配置失败");
                return;
              }

              self._CashData = data.data;
              if (_this7.rechargeAddress == "") self.getRechangeAddress();
              self.updateCashData();
            } catch (error) {
              console.log("getCashChannel ==>", error);
            }
          });
        };

        _proto.submitCash = function submitCash(currency, address) {
          var _this8 = this;

          var userData = GameAllData.FarmUserResponse;

          var selectNet = this._CashData.find(function (item) {
            return item.type == _this8.netIndex;
          });

          if (selectNet) {
            // if(!GameAllData.isMeetTheConditionsByGlobalId(290))
            // {
            //     return;
            // }
            if (GameAllData.isMeetTheConditionsByGlobalId(290) != "") {
              TipManager.ChickBox(GameAllData.isMeetTheConditionsByGlobalId(290));
              return;
            }

            TipManager.SafeCodeInputBox(function () {
              HttpMgr.post(GameAllData.httpServerUrl + "order/cash", {
                user_id: userData.Id,
                operater_id: selectNet.operater_id,
                payment_id: selectNet.id,
                currency: currency,
                currency_type: -1,
                address: address,
                google_code: GameAllData.bandSafeCode
              }, function (data) {
                if (data.code == 200 || data.code == 0) {
                  console.log("成功");
                  TipManager.autoTip(3, 120331, ConfigFile.findLanguage(120331));
                } else {
                  if (data.code == 8047) {
                    TipManager.ChickBoxNew(8047);
                  } else {
                    TipManager.autoTip(3, 120332, ConfigFile.findLanguage(data.code));
                  }
                }
              });
            });
          } else {
            console.log("没有相应的渠道");
            TipManager.autoTip(3, 120332, ConfigFile.findLanguage(120332));
          }
        };

        _proto.onSwitchMainNet = function onSwitchMainNet(t1) {
          var oldIndex = this.netIndex;

          if (t1.node.name == "Toggle1") {
            this.netIndex = 1;
            this.setSelect();
          } else {
            this.netIndex = 2;
            this.setSelect();
          }

          if (oldIndex != this.netIndex) {
            this.getRechangeAddress();

            if (this.mode == 1) {
              this._RechangeData = null;
              this.getBaseInfo();
            } else {
              this._CashData = null;
              this.getCashChannel();
            }
          }
        };

        _proto.updateRechangeData = function updateRechangeData() {
          var _this9 = this;

          var usdt = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.USDT);

          var selectNet = this._RechangeData.find(function (item) {
            return item.type == _this9.netIndex;
          });

          this.nodUSDT.children[0].getComponent(Label).string = ConfigFile.findLanguage(120302).format(usdt);
          this.nodCurrencyType.children[4].getComponent(Label).string = ConfigFile.findLanguage(120319).format(selectNet.rate);
          this.nodAddress2.children[2].getComponent(ScrollView).content.getComponent(Label).string = this.rechargeAddress;
          this.nodMoney1.children[4].getComponent(Label).string = ConfigFile.findLanguage(120320).format(selectNet.min_money.toString(), selectNet.max_money.toString());
          this.nodMoney1.children[2].getComponent(EditBox).string = "" + selectNet.min_money;
          this.nodMoney4.children[2].getComponent(Label).string = "" + selectNet.min_money * selectNet.rate;
        };

        _proto.updateCashData = function updateCashData() {
          var _this10 = this;

          if (!this._CashData) return;

          var selectNet = this._CashData.find(function (item) {
            return item.type == _this10.netIndex;
          });

          this.setSelect();

          if (selectNet) {
            this.nodMoney3.children[4].getComponent(Label).string = ConfigFile.findLanguage(120321).format(selectNet.min_money.toString(), selectNet.max_money.toString());
            this.nodMoney3.children[2].getComponent(EditBox).string = "" + selectNet.min_money;
            var premium = this.getPremium(selectNet.min_money);
            this.nodMoney3.children[3].children[2].getComponent(Label).string = "" + premium + "%";
            this.nodMoney2.children[2].getComponent(Label).string = "" + selectNet.min_money;
            this.minVip = selectNet.min_vip;
          } else {
            this.nodMoney3.children[4].getComponent(Label).string = ConfigFile.findLanguage(120321).format("0", "0");
            this.nodMoney3.children[2].getComponent(EditBox).string = "" + 0;
            this.nodMoney3.children[3].children[2].getComponent(Label).string = "0%";
            this.nodMoney2.children[2].getComponent(Label).string = "" + 0;
            this.minVip = 0;
          }
        };

        _proto.setLabelEdge = function setLabelEdge(text, show) {
          if (show) {
            text.getComponent(Label).color = new Color("#FFFFFF");
          } else {
            text.getComponent(Label).color = new Color("#57a9c2");
          }
        };

        _proto.setItemTitle = function setItemTitle() {
          var usdt = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.USDT);
          this.nodUSDT.children[0].getComponent(Label).string = ConfigFile.findLanguage(120302).format(usdt);
          this.nodMode.children[0].getComponent(Label).string = ConfigFile.findLanguage(120303);
          this.nodMode.children[1].getComponent(Label).string = ConfigFile.findLanguage(120317);
          this.nodMode.children[2].getComponent(Label).string = ConfigFile.findLanguage(120318);
          this.nodCurrencyType.children[0].getComponent(Label).string = ConfigFile.findLanguage(120304);
          this.nodCurrencyType.children[4].getComponent(Label).string = ConfigFile.findLanguage(120319).format(0);
          this.nodMainnet.children[0].getComponent(Label).string = ConfigFile.findLanguage(120305);
          this.nodAddress2.children[0].getComponent(Label).string = ConfigFile.findLanguage(120307);
          this.nodAddress3.children[0].getComponent(Label).string = ConfigFile.findLanguage(120311);
          this.nodAddress2.children[3].getComponent(Label).string = ConfigFile.findLanguage(120315);
          this.nodAddress3.children[3].getComponent(Label).string = ConfigFile.findLanguage(120316);
          this.nodMoney1.children[0].getComponent(Label).string = ConfigFile.findLanguage(120309);
          this.nodMoney1.children[3].children[1].getComponent(Label).string = ConfigFile.findLanguage(120313);
          this.nodMoney1.children[4].getComponent(Label).string = ConfigFile.findLanguage(120320).format(0, 0);
          this.nodMoney2.children[0].getComponent(Label).string = ConfigFile.findLanguage(120312);
          this.nodMoney2.children[3].getComponent(Label).string = ConfigFile.findLanguage(120322);
          this.nodMoney3.children[0].getComponent(Label).string = ConfigFile.findLanguage(120328);
          this.nodMoney3.children[3].children[1].getComponent(Label).string = ConfigFile.findLanguage(120313);
          this.nodMoney3.children[4].getComponent(Label).string = ConfigFile.findLanguage(120321).format(0, 0);
          this.nodMoney4.children[0].getComponent(Label).string = ConfigFile.findLanguage(120310);
          this.btnSubmit.node.children[0].getComponent(Label).string = ConfigFile.findLanguage(120323);
          var t1 = this.toggleTab.node.children[2];
          var t2 = this.toggleTab.node.children[3];
          t1.getComponent(Label).string = ConfigFile.findLanguage(120300);
          t2.getComponent(Label).string = ConfigFile.findLanguage(120301);
          NodeHelp.getchildlable(this.node, "history", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(106043);
          });
        } // onInputChange(){
        //     let m = Number(this.nodMoney3.children[2].getComponent(EditBox).string);
        // }
        ;

        _proto.onClickedRecharge = function onClickedRecharge() {};

        _proto.setTabMode = function setTabMode(mode) {
          this.mode = mode;

          if (mode == 1) {
            this.nodAddress3.active = false;
            this.nodAddress2.active = true;
            this.nodMoney1.active = false;
            this.nodMoney2.active = false;
            this.nodMoney3.active = false;
            this.nodMoney4.active = false;
            this.nodQRCode.active = true;
            var t1 = this.toggleTab.node.children[2];
            var t2 = this.toggleTab.node.children[3];
            this.setLabelEdge(t1, true);
            this.setLabelEdge(t2, false);
            this.btnSubmit.node.active = false;
          } else {
            this.nodAddress3.active = true;
            this.nodAddress2.active = false;
            this.nodMoney1.active = false;
            this.nodMoney2.active = true;
            this.nodMoney3.active = true;
            this.nodMoney4.active = false;
            this.nodQRCode.active = false;
            var _t = this.toggleTab.node.children[2];
            var _t2 = this.toggleTab.node.children[3];
            this.setLabelEdge(_t, false);
            this.setLabelEdge(_t2, true);
            this.btnSubmit.node.active = true;
          }
        } //预计获得：
        ;

        _proto.onClickedWithdrawal = function onClickedWithdrawal(focus) {
          if (focus.node.name == "Toggle1") {
            this.setTabMode(1);
          } else {
            this.setTabMode(2);
          }
        };

        _proto.onClickedSubmit = function onClickedSubmit() {
          var _this11 = this;

          if (!this._CashData) return;

          var selectNet = this._CashData.find(function (item) {
            return item.type == _this11.netIndex;
          });

          if (selectNet) {
            if (selectNet.min_vip > GameAllData.FarmUserResponse.VipLevel) {
              TipManager.autoTip(3, 120334, ConfigFile.findLanguage(120334).format(selectNet.min_vip));
              return;
            }

            var m = Number(this.nodMoney3.children[2].getComponent(EditBox).string);

            if (m < selectNet.min_money || m > selectNet.max_money) {
              if (m < selectNet.min_money) {
                TipManager.autoTip(3, 120330, ConfigFile.findLanguage(120330));
              } else {
                TipManager.autoTip(3, 120329, ConfigFile.findLanguage(120329));
              }

              console.log("超出了提现范围");
            } else {
              var selectAddress = this.nodAddress3.children[2].getComponent(ScrollView).content.getComponent(Label).string;
              this.submitCash(m, selectAddress);
            }
          } else {
            TipManager.autoTip(3, 120332, ConfigFile.findLanguage(120332));
            console.log("没有相应的渠道");
          }
        };

        _proto.onCopyAddress = function onCopyAddress() {
          if (PlatformUtil.writeClipboardText(this.rechargeAddress)) TipManager.TipFromCode(7203);
        };

        _proto.onClickSelectAddress = function onClickSelectAddress() {
          UIManager.getInstance().openUI(UIWallet, 14, function (ui, args) {});
        };

        _proto.onClickedHelp = function onClickedHelp() {
          var self = this;
          UIManager.getInstance().openUI(UIDescription, 14, function (ui, args) {
            ui.initUI(self.mode);
          });
        };

        _proto.onEditTextChangedWithdrawalAmount = function onEditTextChangedWithdrawalAmount() {
          this.onEditEndedWithdrawalAmount();
        };

        _proto.onEditEndedWithdrawalAmount = function onEditEndedWithdrawalAmount() {
          var _this12 = this;

          var edtMoney = this.nodMoney3.children[2].getComponent(EditBox);
          var labMoneyEA = this.nodMoney2.children[2].getComponent(Label);

          if (!NumberUtil.checkFloat(edtMoney.string)) {
            edtMoney.string = "";
            labMoneyEA.string = "";
            return;
          }

          if (this._CashData) {
            var selectNet = this._CashData.find(function (item) {
              return item.type == _this12.netIndex;
            });

            if (selectNet) {
              var charge = JSON.parse(selectNet.service_charge);

              if (charge) {
                var max = charge[charge.length - 1].max_amount;

                if (Number(edtMoney.string) > max) {
                  this.nodMoney3.children[2].getComponent(EditBox).string = max;
                }
              }
            }
          }

          var premium = this.getPremium(Number(edtMoney.string));
          var handlingFee = this.nodMoney3.children[3].children[2].getComponent(Label);
          handlingFee.string = premium + "%";
          var estimatedAmount = (Number(edtMoney.string) - Number(edtMoney.string) * Number(premium) / 100).toString();
          labMoneyEA.string = estimatedAmount;
        };

        _proto.onHistory = function onHistory() {
          var _this13 = this;

          UIManager.getInstance().openUI(UIConchExchangeRecod, 14, function (ui, args) {
            if (_this13.mode == 1) ui.setlistShow("ToggleRecharge");else ui.setlistShow("ToggleCashOut");
          });
        };

        _proto.getPremium = function getPremium(moneyNum) {
          var _this14 = this;

          var premium = "0";

          if (this._CashData) {
            var selectNet = this._CashData.find(function (item) {
              return item.type == _this14.netIndex;
            });

            if (selectNet) {
              var charge = JSON.parse(selectNet.service_charge);

              if (!charge) {
                return premium;
              }

              if (selectNet.service_type == 0) {
                premium = "" + charge[0].fee;
              } else {
                var fee = null;
                charge.forEach(function (v) {
                  if (moneyNum >= v.min_amount && moneyNum <= v.max_amount || moneyNum >= v.max_amount) fee = v.fee;
                });
                if (fee) premium = "" + fee;
              }
            }
          }

          return premium;
        };

        return RechargeView;
      }(BasePanel), _class3.className = "RechargeView", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nodUSDT", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "nodMode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nodCurrencyType", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "nodMainnet", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "nodAddress2", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "nodAddress3", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "nodMoney1", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "nodMoney2", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "nodMoney3", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "nodMoney4", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "btnSubmit", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "nodQRCode", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "sprfSheetSelectOn", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "sprfSheetSelectOff", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "toggleTab", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "spGraphics", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/redDot.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventManager.ts', './MessageManager.ts', './redDotManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Animation, Component, EventManager, MessageManager, redDotManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      redDotManager = module.redDotManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "bd904knALhDqKFIW1xUkL6h", "redDot", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var redDot = exports('redDot', (_dec = ccclass('redDot'), _dec2 = property(""), _dec3 = property(""), _dec4 = property(""), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(redDot, _Component);

        function redDot() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "uiName", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "redName", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Change", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = redDot.prototype;

        _proto.onLoad = function onLoad() {
          EventManager.getInstance().add(MessageManager.Custom.RedDotChange, this, this.onRedChange);
          this.onRedChange();
        };

        _proto.onDestroy = function onDestroy() {
          EventManager.getInstance().remove(MessageManager.Custom.RedDotChange, this, this.onRedChange);
        };

        _proto.setName = function setName(uiName, redName) {
          this.uiName = uiName;
          this.redName = redName;
          this.onRedChange();
        };

        _proto.onRedChange = function onRedChange() {
          if (!this.Change) return;

          if (this.uiName && (this.redName || Number(this.redName) == 0) && redDotManager.getRead(this.uiName, this.redName)) {
            this.node.active = true;
            this.node.getComponent(Animation).play();
          } else {
            this.node.active = false;
            this.node.getComponent(Animation).stop();
          }
        };

        return redDot;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "uiName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "redName", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "Change", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/redDotManager.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "b8508labTVHRJs1HpPYP8+K", "redDotManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var redDotManager = exports('redDotManager', (_dec = ccclass('redDotManager'), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function redDotManager() {}
        /**
         * 
         * @param uiName 红点所在的功能名
         * @param redName 红点绑定的具体显示名
         * @param Read 显示
         */


        redDotManager.setRead = function setRead(uiName, redName, Read) {
          if (!this.redDotMap.has(uiName)) {
            this.redDotMap.set(uiName, new Map());
          }

          this.redDotMap.get(uiName).set(redName, Read);
        };

        redDotManager.getRead = function getRead(uiName, redName) {
          var map = this.redDotMap.get(uiName);
          if (!map) return false;
          return map.get(redName);
        };

        return redDotManager;
      }(), _class2.redDotMap = new Map(), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/removeSelfCtl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Animation, sp, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      sp = module.sp;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "629efBoy1BDgZPsjTnilV3I", "removeSelfCtl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var removeSelfCtl = exports('removeSelfCtl', (_dec = ccclass('removeSelfCtl'), _dec2 = property(Animation), _dec3 = property({
        type: sp.Skeleton
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(removeSelfCtl, _Component);

        function removeSelfCtl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "animCtrl", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "loop", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spineAni", _descriptor3, _assertThisInitialized(_this));

          _this._cb = null;
          _this._data = null;
          return _this;
        }

        var _proto = removeSelfCtl.prototype;

        _proto.start = function start() {
          if (this.animCtrl) this.animCtrl.on("finished", this.onfinish, this);

          if (this.spineAni) {
            this.spineAni.setCompleteListener(this.onSpingComplete.bind(this));
            this.spineAni.animation = 'animation'; // 

            this.spineAni.loop = true; // 是否循环
          }
        };

        _proto.initUI = function initUI(data, cb) {
          this._data = data;
          this._cb = cb;
        };

        _proto.onDestroy = function onDestroy() {//this._cb&&this._cb(this._data);
        };

        _proto.onSpingComplete = function onSpingComplete(trackEntry) {
          if (this.loop) {
            if (this.spineAni) this.spineAni.animation = 'animation';
          } else {
            this._cb && this._cb(this._data);
            this.node.destroy();
          }
        };

        _proto.onfinish = function onfinish(type, state) {
          if (this.loop) {
            if (this.animCtrl) this.animCtrl.play();
          } else {
            // this.node.parent = null;
            this._cb && this._cb(this._data);
            this.node.destroy();
          } //console.log("removeSelfCtl finish");

        };

        return removeSelfCtl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "animCtrl", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "loop", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "spineAni", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ResourceManager.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, resources, NodePool, instantiate;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      resources = module.resources;
      NodePool = module.NodePool;
      instantiate = module.instantiate;
    }],
    execute: function () {
      cclegacy._RF.push({}, "feac1S9PSRKQIIf8GeWVe3W", "ResourceManager", undefined);

      var ResourceManager = exports('ResourceManager', /*#__PURE__*/function () {
        function ResourceManager() {
          this._prefab_pool = {};
        }

        ResourceManager.getInstance = function getInstance() {
          if (this.instance == null) {
            this.instance = new ResourceManager();
          }

          return this.instance;
        };

        var _proto = ResourceManager.prototype;

        _proto.clearResToPool = function clearResToPool(resName) {
          var pool = this._prefab_pool[resName];
          if (pool == null) return;
          pool.clear();
          delete this._prefab_pool[resName]; //assetManager.releaseAsset(resName);
        };

        _proto.putResToPool = function putResToPool(resName, node) {
          var pool = this._prefab_pool[resName];
          if (pool != undefined) pool.put(node);
          node.setParent(null);
        };

        _proto.loadResFromPool = function loadResFromPool(resname, complete) {
          var _this = this;

          var pool = this._prefab_pool[resname];

          if (pool == null || pool.size() <= 0) {
            resources.load(resname, function (errors, resources) {
              if (!!errors) {
                console.log("loadOne error " + errors.message);
              } else {
                if (pool == null) {
                  //pool = [];
                  //this._prefab_pool[resname] = pool;
                  pool = new NodePool();
                  _this._prefab_pool[resname] = pool;
                }

                var _resnode = instantiate(resources);

                if (complete) complete(_resnode, false);
              }
            });
            return;
          }

          var resnode = pool.get();
          if (complete) complete(resnode, true);
        } //加载指定类型
        ;

        _proto.loadType = function loadType(modules, mt, iterator, complete) {
          iterator || (iterator = function iterator() {});
          complete || (complete = function complete() {});
          resources.load(modules, mt, function (count, total, result) {
            iterator(result, count, total);
          }, function (errors, resources) {
            if (complete) complete(errors, resources);
          });
        };

        _proto.load = function load(modules, iterator, complete) {
          iterator || (iterator = function iterator() {});
          complete || (complete = function complete() {});
          resources.load(modules, function (count, total, result) {
            iterator(result, count, total);
          }, function (errors, resources) {
            if (!!errors) {
              console.log(errors.message);
            }

            if (complete) complete(errors, resources);
          });
        } //检查并加载指定的模块
        ;

        _proto.checkLoad = function checkLoad(modules, iterator, callback) {
          !callback && (callback = iterator, iterator = null);
          this.load(modules, iterator, callback);
        };

        _proto.checkLoadType = function checkLoadType(modules, mt, iterator, callback) {
          !callback && (callback = iterator, iterator = null);
          this.loadType(modules, mt, iterator, callback);
        };

        return ResourceManager;
      }());
      ResourceManager.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RoleCtl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "2b884z2HWdJ8JHO6Un4BydR", "RoleCtl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var RoleCtl = exports('RoleCtl', (_dec = ccclass('RoleCtl'), _dec2 = property({
        type: sp.Skeleton
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RoleCtl, _Component);

        function RoleCtl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "loop", _descriptor, _assertThisInitialized(_this));

          _this._data = null;
          _this._cb = null;
          _this.activeId = 0;
          _this.direction = 0;

          _initializerDefineProperty(_this, "spineAni", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = RoleCtl.prototype;

        _proto.onLoad = function onLoad() {
          if (this.spineAni) {
            this.spineAni.setCompleteListener(this.onSpingComplete.bind(this));
            this.spineAni.animation = 'c'; // 

            this.spineAni.loop = true; // 是否循环
          }
        };

        _proto.init = function init(activeId, direction, data, cb) {
          this._cb = cb;
          this._data = data;
          this.activeId = activeId;
          this.direction = direction;
        };

        _proto.onSpingComplete = function onSpingComplete(trackEntry) {
          if (this.loop) {
            if (this.spineAni) this.spineAni.animation = 'c';
          } else {
            this._cb && this._cb(this._data);
            this.node.destroy();
          }
        };

        _proto.start = function start() {
          var name = this.activeId + "-" + this.direction;
        };

        _proto.onStop = function onStop(type, state) {
          this._cb && this._cb(this._data);
          this.node.parent = null;
        };

        return RoleCtl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "loop", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spineAni", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RoleInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventManager.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, EventManager;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      EventManager = module.EventManager;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d5a53w3WG1MJ56RGOPbRwiV", "RoleInfo", undefined);

      var RoleInfo = exports('RoleInfo', /*#__PURE__*/function () {
        function RoleInfo(prefix) {
          this._storageKey = "RI";
          this._curLevel = 0;
          this._curGold = 0;
          this._curKey = 0;
          this._Acc = "";
          this._Psw = "";
          this._task = {};
          this.StorageKey = prefix + this._storageKey;
        }

        var _proto = RoleInfo.prototype;

        _proto.UpdateRoleInfo = function UpdateRoleInfo(data) {
          EventManager.getInstance().trigger("UPDATEINFO", {
            mode: 2
          });
        };

        _createClass(RoleInfo, [{
          key: "StorageKey",
          get: function get() {
            return this._storageKey;
          },
          set: function set(value) {
            this._storageKey = value;
          }
        }, {
          key: "Task",
          get: function get() {
            return this._task;
          },
          set: function set(value) {
            this._task = value;
            this.UpdateRoleInfo(null);
          }
        }, {
          key: "level",
          get: function get() {
            if (this._curLevel < 0 || this._curLevel > 15) this._curLevel = 0;
            return this._curLevel;
          },
          set: function set(value) {
            this._curLevel = value;
            if (this._curLevel > 15) this._curLevel = 0;
            this.UpdateRoleInfo(null);
          }
        }, {
          key: "gold",
          get: function get() {
            return this._curGold;
          },
          set: function set(value) {
            this._curGold = value;
            this.UpdateRoleInfo(null);
          }
        }, {
          key: "key",
          get: function get() {
            return this._curKey;
          },
          set: function set(value) {
            this._curKey = value;
            this.UpdateRoleInfo(null);
          }
        }, {
          key: "Account",
          get: function get() {
            return this._Acc;
          },
          set: function set(value) {
            this._Acc = value;
            this.UpdateRoleInfo(null);
          }
        }, {
          key: "Password",
          get: function get() {
            return this._Psw;
          },
          set: function set(value) {
            this._Psw = value;
            this.UpdateRoleInfo(null);
          }
        }]);

        return RoleInfo;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SafeCodeInputBox.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './GameAllData.ts', './TipManager.ts', './UIManager.ts', './BaseUI.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, EditBox, Toggle, ConfigFile, GameAllData, TipManager, UIManager, BaseUI;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      EditBox = module.EditBox;
      Toggle = module.Toggle;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      BaseUI = module.BaseUI;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _class3;

      cclegacy._RF.push({}, "4f025OHCqhOg6l9fGAs3Yfy", "SafeCodeInputBox", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SafeCodeInputBox = exports('SafeCodeInputBox', (_dec = ccclass('SafeCodeInputBox'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(EditBox), _dec7 = property(Toggle), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(SafeCodeInputBox, _BaseUI);

        function SafeCodeInputBox() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "titleLabel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labelY", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "LabelMa", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "LabelSure", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "EditBox", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Toggle", _descriptor6, _assertThisInitialized(_this));

          _this.confirmCb = null;
          return _this;
        }

        var _proto = SafeCodeInputBox.prototype;

        _proto.start = function start() {
          this.initLabStr();
        };

        _proto.initLabStr = function initLabStr() {
          this.labelY.string = ConfigFile.findLanguage(114001);
          this.titleLabel.string = ConfigFile.findLanguage(8005);
          this.LabelMa.string = ConfigFile.findLanguage(8035);
          this.LabelSure.string = ConfigFile.findLanguage(8049);
          this.EditBox.string = "";
        };

        _proto.onChickConfirmCb = function onChickConfirmCb() {
          //测试者账号 
          if (GameAllData.IsAccountTypeIsTest) {
            TipManager.ChickBox(ConfigFile.findLanguage(8046));
            return;
          }

          if (this.EditBox.string == GameAllData.bandSafeCode) {
            if (this.confirmCb) this.confirmCb();

            if (this.Toggle.isChecked) {
              GameAllData.isSafeCodeTips = !GameAllData.isSafeCodeTips;
            }

            this.onClose();
          } else {
            TipManager.ChickBox(ConfigFile.findLanguage(8046));
          }
        };

        _proto.onToggle = function onToggle() {};

        _proto.onClose = function onClose() {
          UIManager.getInstance().closeUI(SafeCodeInputBox);
        };

        return SafeCodeInputBox;
      }(BaseUI), _class3.className = "SafeCodeInputBox", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "titleLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "labelY", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "LabelMa", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "LabelSure", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "EditBox", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "Toggle", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SafetyCode.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './UIManager.ts', './NodeHelp.ts', './SetSecondaryUI.ts', './SetSecondaryUIEntity.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, ConfigFile, UIManager, NodeHelp, SetSecondaryUI, SetSecondaryUIEntity;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      SetSecondaryUI = module.SetSecondaryUI;
    }, function (module) {
      SetSecondaryUIEntity = module.SetSecondaryUIEntity;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "c9340dBRDxMjqvPXaRUdzwJ", "SafetyCode", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SafetyCode = exports('SafetyCode', (_dec = ccclass('SafetyCode'), _dec(_class = /*#__PURE__*/function (_SetSecondaryUIEntity) {
        _inheritsLoose(SafetyCode, _SetSecondaryUIEntity);

        function SafetyCode() {
          return _SetSecondaryUIEntity.apply(this, arguments) || this;
        }

        var _proto = SafetyCode.prototype;

        _proto.init = function init() {
          _SetSecondaryUIEntity.prototype.init.call(this);

          this.setShow();
        };

        _proto.setShow = function setShow() {
          NodeHelp.getchildlable(this.node, "LabelTitle", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8005);
          });
          NodeHelp.getchildlable(this.node, "LabelPhone", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8007);
          });
          NodeHelp.getchildlable(this.node, "LabelEmail", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8008);
          });
          NodeHelp.getchildlable(this.node, "phoneBtnLab", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8009);
          });
          NodeHelp.getchildlable(this.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8010);
          });
        };

        _proto.bandPhone = function bandPhone() {
          var ui = UIManager.getInstance().getUI(SetSecondaryUI);

          if (ui) {
            ui.setPanel(5, 1);
          }
        };

        _proto.bandEmail = function bandEmail() {
          var ui = UIManager.getInstance().getUI(SetSecondaryUI);

          if (ui) {
            ui.setPanel(5, 2);
          }
        };

        return SafetyCode;
      }(SetSecondaryUIEntity)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ScrollNum.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './NodeHelp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Label, UIOpacity, tween, Vec3, Component, ConfigFile, NodeHelp;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      UIOpacity = module.UIOpacity;
      tween = module.tween;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "afc0bi3AKdHAJYWfnW2WT9a", "ScrollNum", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ScrollNum = exports('ScrollNum', (_dec = ccclass('ScrollNum'), _dec2 = property(Sprite), _dec3 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ScrollNum, _Component);

        function ScrollNum() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "sp", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "text", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = ScrollNum.prototype;

        _proto.start = function start() {};

        _proto.initUI = function initUI(number, modeID) {
          var self = this;
          this.text.string = "" + number;
          var opacity = this.node.getComponent(UIOpacity);
          var itemdata = ConfigFile.getItemData(modeID);

          if (itemdata) {
            NodeHelp.loadIcon("propIcon/itemicon", modeID.toString(), function (res) {
              self.sp.spriteFrame = res;
            });
          }

          opacity.opacity = 0;
          tween(opacity).to(1, {
            opacity: 255
          }).to(1, {
            opacity: 0
          }).start();
          tween(this.node).by(2.5, {
            position: new Vec3(0, 200, 0)
          }).removeSelf().start();
        };

        return ScrollNum;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sp", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "text", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ScrollText.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "39706rNVAlNTpXVOAIrq78g", "ScrollText", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ScrollText = exports('ScrollText', (_dec = ccclass('ScrollText'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ScrollText, _Component);

        function ScrollText() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = ScrollText.prototype;

        _proto.onLoad = function onLoad() {};

        _proto.onEnable = function onEnable() {};

        _proto.onDisable = function onDisable() {};

        _proto.start = function start() {};

        _proto.update = function update(deltaTime) {};

        return ScrollText;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SeedInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './BaseTip.ts', './producer.ts', './GameAllData.ts', './EnumDefine.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Color, ConfigFile, BaseTip, producer, GameAllData, EnumDefine;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Color = module.Color;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      BaseTip = module.BaseTip;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "f8ccaTLJ85DcYdAF7QG0723", "SeedInfo", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SeedInfo = exports('SeedInfo', (_dec = ccclass('SeedInfo'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseTip) {
        _inheritsLoose(SeedInfo, _BaseTip);

        function SeedInfo() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseTip.call.apply(_BaseTip, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "Name", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Money", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Time", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "MoneyTitle", _descriptor4, _assertThisInitialized(_this));

          _this.itemConfig = null;
          _this.type = "";
          return _this;
        }

        var _proto = SeedInfo.prototype;

        _proto.showBotany = function showBotany() {
          //this.MoneyTitle.string = producer.getMessageText(10001);
          producer.replaceDefaultColor(this.MoneyTitle, producer.getMessageText(10001)); //this.Name.string = producer.getMessageText(this.itemConfig.Name);

          producer.replaceDefaultColor(this.Name, producer.getMessageText(this.itemConfig.Name));
          var botany = ConfigFile.getBotanyFromSeedId(this.itemConfig.ItemId);
          var timearray = botany.BotanyTime.split(",");
          var totalTime = parseInt(timearray[0]) + parseInt(timearray[1]);
          this.Time.string = producer.getTimeFormat(totalTime);
          var m = ConfigFile.getLimitInfo(this.itemConfig.ItemPrice);
          var curMoney = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.PEARL);
          this.Money.string = m.val.toString();

          if (curMoney >= m.val) {
            this.Money.color = new Color(193, 125, 60, 255);
          } else {
            this.Money.color = new Color(255, 0, 0, 255);
          }
        };

        _proto.showAnimal = function showAnimal() {
          //this.MoneyTitle.string = producer.getMessageText(10001);
          producer.replaceDefaultColor(this.MoneyTitle, producer.getMessageText(10001)); //this.Name.string = producer.getMessageText(this.itemConfig.Name);

          producer.replaceDefaultColor(this.Name, producer.getMessageText(this.itemConfig.Name));
          var animal = ConfigFile.getAnimalFromCubId(this.itemConfig.ItemId);
          var timearray = animal.AnimalTime.split(",");
          var totalTime = parseInt(timearray[0]) + parseInt(timearray[1]);
          this.Time.string = producer.getTimeFormat(totalTime);
          var m = ConfigFile.getLimitInfo(this.itemConfig.ItemPrice);
          var curMoney = GameAllData.getTotalConch(m.id);
          this.Money.string = m.val.toString();

          if (curMoney >= m.val) {
            this.Money.color = new Color(193, 125, 60, 255);
          } else {
            this.Money.color = new Color(255, 0, 0, 255);
          }
        };

        _proto.initUI = function initUI(arg) {
          this.popHeight = 100;
          this.type = arg.type;
          this._cbData = arg.item;
          this.itemConfig = arg.config;

          _BaseTip.prototype.initUI.call(this, arg);

          if (this.type == "pasture") {
            this.showAnimal();
          } else {
            this.showBotany();
          }
        };

        return SeedInfo;
      }(BaseTip), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Name", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Money", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "Time", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "MoneyTitle", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SeedItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './GameAllData.ts', './NodeHelp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Sprite, Label, Component, ConfigFile, GameAllData, NodeHelp;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "aff8cZ64dhO04hZAReIwWXI", "SeedItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SeedItem = exports('SeedItem', (_dec = ccclass('SeedItem'), _dec2 = property(Sprite), _dec3 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SeedItem, _Component);

        function SeedItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "sprIcon", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "NumText", _descriptor2, _assertThisInitialized(_this));

          _this.Config = null;
          _this.touchStart = null;
          _this.lastTime = 0;
          _this.isLock = false;
          _this.itemtype = "";
          _this.useSelect = null;
          _this._grayscale = false;
          return _this;
        }

        var _proto = SeedItem.prototype;

        _proto.start = function start() {};

        _proto.setSelect = function setSelect(value) {
          if (value) this.sprIcon.material.setProperty("outerOutlineFade", 1.0);else this.sprIcon.material.setProperty("outerOutlineFade", 0.0);
        };

        _proto.init = function init(Config, type, select) {
          var _this2 = this;

          this.Config = Config;

          if (!this.Config) {
            console.log("没有找到这个种子");
          }

          this.itemtype = type;
          this.useSelect = select;
          var BagItem = GameAllData.getStoreItemByModeId(this.Config.ItemId);

          if (BagItem) {
            this.NumText.string = "" + BagItem.ItemCount;
          } else {
            this.NumText.string = "";
          }

          if (this.itemtype == "botany") {
            var botany = ConfigFile.getBotanyFromSeedId(this.Config.ItemId);
            this.isLock = !GameAllData.checkConditionArray(botany.BotanyUnlock);
            if (!this.isLock) this.isLock = this.useSelect.level < botany.NeedLevel; //!GameAllData.checkConditionArray(botany.BotanyUnlock);
          } else {
            var animal = ConfigFile.getAnimalFromCubId(this.Config.ItemId);
            this.isLock = !GameAllData.checkConditionArray(animal.AnimalUnlock);
            if (!this.isLock) this.isLock = this.useSelect.level < animal.NeedLevel; //!GameAllData.checkConditionArray(animal.AnimalUnlock);
          }

          NodeHelp.loadIcon("propIcon/itemicon", Config.ItemRes.toString(), function (res) {
            _this2.sprIcon.spriteFrame = res;
            if (_this2.isLock) _this2.grayscale = true;else _this2.grayscale = false;

            _this2.setSelect(false);
          });
        };

        _createClass(SeedItem, [{
          key: "grayscale",
          set: function set(val) {
            this._grayscale = val;

            if (this._grayscale) {
              this.sprIcon.material.setProperty("HsvSaturation", 0.0);
            } else {
              this.sprIcon.material.setProperty("HsvSaturation", 1.0);
            }
          }
        }]);

        return SeedItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sprIcon", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "NumText", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/seedUnlockTip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './BaseTip.ts', './GameAllData.ts', './producer.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, ConfigFile, BaseTip, GameAllData, producer;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      BaseTip = module.BaseTip;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      producer = module.producer;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "2ea9eKKjzpBR6qDhYRF49Ox", "seedUnlockTip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var seedUnlockTip = exports('seedUnlockTip', (_dec = ccclass('seedUnlockTip'), _dec2 = property(Label), _dec3 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseTip) {
        _inheritsLoose(seedUnlockTip, _BaseTip);

        function seedUnlockTip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseTip.call.apply(_BaseTip, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "Name", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Text", _descriptor2, _assertThisInitialized(_this));

          _this.itemConfig = null;
          _this.type = "";
          return _this;
        }

        var _proto = seedUnlockTip.prototype;

        _proto.showBotany = function showBotany() {
          var msgData = producer.getMessageText(this.itemConfig.Name);
          var botany = ConfigFile.getBotanyFromSeedId(this.itemConfig.ItemId);
          var isLock = !GameAllData.checkConditionArray(botany.BotanyUnlock); //this.Level.string = "LV." + botany.Level;

          if (msgData) producer.replaceDefaultColor(this.Name, msgData); //this.Name.string = msgData;//+ "LV."+botany.Level;
          else this.Name.string = "检查messageTable";

          if (isLock) {
            var temple = producer.getMessageText(botany.BotanyUnlockTxt);
            var cond = GameAllData.getConditionArray(botany.BotanyUnlock);

            if (cond.length == 1) {
              this.Text.string = temple.format(cond[0].val);
            } else if (cond.length > 1) {
              this.Text.string = temple.format(cond[0].val, cond[1].val);
            }
          } else {
            var _temple = producer.getMessageText(botany.NeedLevelTxt);

            this.Text.string = _temple.format(botany.NeedLevel);
          }
        };

        _proto.showAnimal = function showAnimal() {
          var msgData = producer.getMessageText(this.itemConfig.Name);
          var animal = ConfigFile.getAnimalFromCubId(this.itemConfig.ItemId);
          var isLock = !GameAllData.checkConditionArray(animal.AnimalUnlock); //this.Level.string = "LV." + animal.NeedLevel;

          if (msgData) producer.replaceDefaultColor(this.Name, msgData); //this.Name.string = msgData;// + "LV."+animal.NeedLevel;
          else this.Name.string = "检查messageTable";

          if (isLock) {
            var textTemple = producer.getMessageText(animal.AnimalUnlockTxt);
            var cond = GameAllData.getConditionArray(animal.AnimalUnlock);

            if (cond.length == 1) {
              this.Text.string = textTemple.format(cond[0].val);
            } else if (cond.length > 1) {
              this.Text.string = textTemple.format(cond[0].val, cond[1].val);
            }
          } else {
            //let temple = ConfigFile.findLanguage(ConstLanguage.SEED_UNLOCK_LIMIT4);
            var _textTemple = producer.getMessageText(3070);

            this.Text.string = _textTemple.format(animal.NeedLevel.toString());
          }
        };

        _proto.initUI = function initUI(arg) {
          this.popHeight = 100;
          this._cbData = arg.item;
          this.type = arg.type;
          this.itemConfig = arg.config;

          _BaseTip.prototype.initUI.call(this, arg);

          if (this.type == "pasture") {
            this.showAnimal();
          } else {
            this.showBotany();
          }
        };

        return seedUnlockTip;
      }(BaseTip), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Name", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Text", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SeedView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './GameAllData.ts', './SeedItem.ts', './EventManager.ts', './MessageManager.ts', './OperaleDef.ts', './BaseUI.ts', './BaseTip.ts', './UIHelp.ts', './GameManager.ts', './MainGame.ts', './UIManager.ts', './UIGame.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, Vec3, ScrollView, Prefab, Node, Vec2, Input, UITransform, resources, instantiate, Size, ConfigFile, Configname, GameAllData, SeedItem, EventManager, MessageManager, OperaleDef, BaseUI, BaseTip, UIHelp, GameManager, MainGame, UIManager, UIGame;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      ScrollView = module.ScrollView;
      Prefab = module.Prefab;
      Node = module.Node;
      Vec2 = module.Vec2;
      Input = module.Input;
      UITransform = module.UITransform;
      resources = module.resources;
      instantiate = module.instantiate;
      Size = module.Size;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      SeedItem = module.SeedItem;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      OperaleDef = module.OperaleDef;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      BaseTip = module.BaseTip;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      MainGame = module.MainGame;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      UIGame = module.UIGame;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _class3;

      cclegacy._RF.push({}, "c26c6aSC5FAmYbXZI0TghFI", "SeedView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var temp_V3_1 = new Vec3();
      var temp_V3_2 = new Vec3();
      var SeedView = exports('SeedView', (_dec = ccclass('SeedView'), _dec2 = property(ScrollView), _dec3 = property(Prefab), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(SeedView, _BaseUI);

        function SeedView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "sv", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "itemPrefab", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "leftNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rightNode", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tipDlg", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "BG", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "RectNode", _descriptor7, _assertThisInitialized(_this));

          _this.firstPos = new Vec2();
          _this.useSelect = null;
          _this.selectItem = null;
          _this.mode = OperaleDef.NONE;
          _this.type = "";
          _this.firstPickItem = null;
          _this.clickItem = null;
          return _this;
        }

        var _proto = SeedView.prototype;

        _proto.start = function start() {
          EventManager.getInstance().add(MessageManager.Custom.UseItem, this, this.onUseItem);
          EventManager.getInstance().add(MessageManager.Custom.ShowSeedTip, this, this.onShowSeedTip);
          EventManager.getInstance().add(MessageManager.Custom.HideSeedTip, this, this.onHideSeedTip); // EventManager.getInstance().add(MessageManager.Custom.UserDataChange, this, this.onDataChange);

          EventManager.getInstance().add(MessageManager.Custom.SelectSeedHide, this, this.onHideSelect);
          EventManager.getInstance().add(MessageManager.Net.FarmPastureUpgradeResponse, this, this.onDataChange);
          EventManager.getInstance().add(MessageManager.Net.FarmLandUpgradeResponse, this, this.onDataChange);
          EventManager.getInstance().add(MessageManager.Net.FarmLandPlantResponse, this, this.onDataChange);
          this.BG.on(Input.EventType.TOUCH_START, this.onBeginTouch1.bind(this));
          this.BG.on(Input.EventType.TOUCH_END, this.onEndTouch1.bind(this));
          this.BG.on(Input.EventType.TOUCH_CANCEL, this.onCancellTouch1.bind(this));
          this.BG.on(Input.EventType.TOUCH_MOVE, this.onMoveTouch1.bind(this));
          this.sv.content.on(Node.EventType.TRANSFORM_CHANGED, this.onContentMove, this);
        };

        _proto.onDestroy = function onDestroy() {
          _BaseUI.prototype.onDestroy.call(this);
        };

        _proto.initUI = function initUI(select, mode) {
          if (!select) {
            console.log("没有选中建筑就打开了");
          }

          this.useSelect = select;
          this.mode = mode;
          this.selectItem = null;
          this.firstPickItem = null;
          this.type = this.useSelect.getType();
          this.updateData();
          this.sv.scrollToLeft(0);
          this.sv.scrollToRight(1);
        };

        _proto.onDataChange = function onDataChange(data) {
          if (this.node.active) this.updateData();
        };

        _proto.onContentMove = function onContentMove(type) {
          if (type & Node.TransformBit.POSITION) {
            this.onChangeLeftRightState();
            this.onCheckTipDlgMove();
          }
        };

        _proto.onLeft = function onLeft() {
          //temp_V3_1
          var size1 = this.sv.content.getComponent(UITransform).contentSize;
          this.sv.content.getPosition(temp_V3_1); //if(temp_V3_1.x)
        };

        _proto.onRight = function onRight() {};

        _proto.getGetSeedID = function getGetSeedID() {
          if (!this.firstPickItem) return 0;
          return this.getSeedID(this.firstPickItem.Config.ItemId);
        };

        _proto.onCheckTipDlgMove = function onCheckTipDlgMove() {
          if (this.tipDlg.active && this.tipDlg.children.length > 0) {
            var seedtip = this.tipDlg.children[0].getComponent(BaseTip)._cbData;

            this.sv.content.getWorldPosition(temp_V3_2);
            seedtip.node.getWorldPosition(temp_V3_1);
            this.tipDlg.setWorldPosition(temp_V3_1);
            var cs = this.node.getComponent(UITransform).contentSize;
            var halfWidth = cs.width / 2;
            var offset = temp_V3_1.x - temp_V3_2.x;
            if (offset < -halfWidth) this.closeTip();else if (offset > halfWidth) this.closeTip();
          }
        };

        _proto.onChangeLeftRightState = function onChangeLeftRightState() {
          this.sv.content.getPosition(temp_V3_1);
          var ts = this.sv.content.getComponent(UITransform).contentSize;
          var cs = this.node.getComponent(UITransform).contentSize;
          var halfWidth = cs.width / 2;
          var startX = temp_V3_1.x;
          var endX = temp_V3_1.x + ts.width;
          if (startX < -halfWidth) this.leftNode.active = false;else this.leftNode.active = false;
          if (endX > halfWidth) this.rightNode.active = false;else this.rightNode.active = false;
        };

        _proto.openTip = function openTip(name, data, pos) {
          this.tipDlg.active = true;
          resources.load("prefabs/ui/item/" + name, function (error, prefab) {
            if (error) {
              console.log(error);
              return;
            }

            var dlg = instantiate(prefab);
            var ui = UIManager.getInstance().getUI(UIGame);

            if (ui) {
              dlg.parent = ui.tipsNode;
              ui.tipsNode.setWorldPosition(pos);
              ui.tipsNode.active = true;
            } // dlg.parent = self.tipDlg;
            // this.tipDlg.setWorldPosition(pos);
            // this.tipDlg.active = true;


            dlg.getComponent(BaseTip).initUI(data);
          });
        };

        _proto.closeTip = function closeTip() {
          if (this.tipDlg.active) {
            this.tipDlg.active = false;
            this.tipDlg.removeAllChildren();
          }

          var ui = UIManager.getInstance().getUI(UIGame);

          if (ui && ui.tipsNode) {
            ui.tipsNode.active = false;
            ui.tipsNode.removeAllChildren();
          }
        };

        _proto.onHideSeedTip = function onHideSeedTip(Data) {
          this.closeTip();
        };

        _proto.onShowSeedTip = function onShowSeedTip(Data) {
          var seed = Data.item;
          this.closeTip();
          var game = GameManager.getInstance().getGame(MainGame);
          game.closeTipOrBtn();
          seed.node.getWorldPosition(temp_V3_1);

          if (seed.isLock) {
            this.openTip("SeedUnlockTip", Data, temp_V3_1);
          } else {
            if (this.type == "pasture") {
              this.openTip("CubInfo", Data, temp_V3_1);
            } else this.openTip("SeedInfo", Data, temp_V3_1);

            this.selectItem = Data.item;
          }
        };

        _proto.getOperaleID = function getOperaleID() {
          return this.useSelect.getType() == "pasture" ? OperaleDef.CANBREED : OperaleDef.SOWING;
        };

        _proto.getSeedID = function getSeedID(ItemID) {
          if (this.useSelect.getType() == "pasture") {
            var animal = ConfigFile.getAnimalFromCubId(ItemID);
            return animal.AnimalId;
          } else {
            var botany = ConfigFile.getBotanyFromByItemId(ItemID);
            return botany.BotanyId;
          }
        };

        _proto.onUseItem = function onUseItem(Data) {
          if (!this.node.active) return;
          this.closeTip();
          var arg = {
            show: true,
            operaleID: this.getOperaleID(),
            Pos: Data.Pos,
            itemId: Data.config.ItemId,
            seedID: this.getSeedID(Data.config.ItemId),
            select: this.useSelect
          };

          if (Data.mode == 1) {
            //点击出现提示
            EventManager.getInstance().trigger(MessageManager.Custom.ShowToolsView, {
              show: false
            });
            EventManager.getInstance().trigger(MessageManager.Custom.OpenHand, arg);
            EventManager.getInstance().trigger(MessageManager.Custom.ShowLandEnable, {
              seedID: Data.config.ItemId,
              type: this.type,
              show: true
            });
          }
        };

        _proto.updateData = function updateData() {
          //农场和牧场分开处理
          if (!this.useSelect) return;

          if (this.useSelect.getType() == "pasture") {
            this.updateDataAnimal();
          } else if (this.useSelect.getType() == "fameland") {
            this.updateDataBotany();
          }
        };

        _proto.sort = function sort(a1) {
          a1.sort(function (a, b) {
            if (a.level > b.level) return 1;else if (a.level < b.level) return -1;else if (a.ItemId > b.ItemId) return 1;else return -1; // return a.level - b.level;
          });
        };

        _proto.updateDataAnimal = function updateDataAnimal() {
          var _this2 = this;

          this.sv.content.removeAllChildren();
          var seedItem; //成员

          var itemDatas = ConfigFile.getInstance().config.get(Configname.TAnimalInfo);
          if (!itemDatas || itemDatas.length <= 0) return;
          var lockArray = [];
          var unlockArray = [];
          var defWeidth = 0;

          for (var _iterator = _createForOfIteratorHelperLoose(itemDatas), _step; !(_step = _iterator()).done;) {
            var itemData = _step.value;
            var animal = itemData;

            if (!animal.Show) {
              continue;
            }

            var isLock = true;
            if (animal.AnimalUnlock) isLock = !GameAllData.checkConditionArray(animal.AnimalUnlock);
            if (!isLock) isLock = this.useSelect.level < animal.NeedLevel;
            var itemConfig = ConfigFile.getItemData(animal.AnimalCubId);

            if (this.checkSuperHave(itemConfig)) {
              if (isLock) lockArray.push(itemConfig);else unlockArray.push(itemConfig);
            }
          }

          this.sort(unlockArray);
          this.sort(lockArray);
          unlockArray.forEach(function (config) {
            var item = instantiate(_this2.itemPrefab);
            var posX = _this2.sv.content.children.length;

            _this2.sv.content.addChild(item);

            if (defWeidth <= 1) {
              defWeidth = item.getComponent(UITransform).contentSize.width + 10;
            }

            posX = posX * defWeidth;
            item.setPosition(posX + defWeidth / 2, 0, 0);
            seedItem = item.getComponent(SeedItem);
            seedItem.init(config, "animal", _this2.useSelect);
          });

          if (lockArray.length > 0) {
            var item = instantiate(this.itemPrefab);
            var _posX = this.sv.content.children.length;
            this.sv.content.addChild(item);

            if (defWeidth <= 1) {
              defWeidth = item.getComponent(UITransform).contentSize.width + 10;
            }

            _posX = _posX * defWeidth;
            item.setPosition(_posX + defWeidth / 2, 0, 0);
            item.getComponent(SeedItem).init(lockArray[0], "animal", this.useSelect);
          }

          var posX = this.sv.content.children.length * defWeidth;
          var size1 = this.sv.content.getComponent(UITransform).contentSize;
          var n = new Size(posX + 100, size1.height);
          this.sv.content.getComponent(UITransform).contentSize = n;
          this.onChangeLeftRightState(); // this.sv.scrollToLeft(0)
          // this.sv.scrollToRight(1)

          if (seedItem) {
            this.scheduleOnce(function () {
              _this2.setSelect(seedItem);
            });
          }
        };

        _proto.checkSuperHave = function checkSuperHave(itemConfig) {
          if (itemConfig.Type == 5 || itemConfig.Type == 6) {
            var item = GameAllData.getStoreItemByModeId(itemConfig.ItemId);
            if (item) return true;else return false;
          } else {
            return true;
          }
        };

        _proto.updateDataBotany = function updateDataBotany() {
          var _this3 = this;

          var seedItem; //成员

          this.sv.content.removeAllChildren();
          var itemDatas = ConfigFile.getInstance().config.get(Configname.TBotanyInfo);
          var lockArray = [];
          var unlockArray = [];
          var defWeidth = 0;

          for (var _iterator2 = _createForOfIteratorHelperLoose(itemDatas), _step2; !(_step2 = _iterator2()).done;) {
            var itemData = _step2.value; //need_level

            var botany = itemData;

            if (!botany.Show) {
              continue;
            }

            var isLock = !GameAllData.checkConditionArray(botany.BotanyUnlock);
            if (!isLock) isLock = this.useSelect.level < botany.NeedLevel;
            var itemConfig = ConfigFile.getItemData(itemData.BotanySeedId);

            if (itemConfig) {
              if (this.checkSuperHave(itemConfig)) {
                if (isLock) lockArray.push(itemConfig);else unlockArray.push(itemConfig);
              }
            } else {
              console.log("植物seedID没有对应的物品设置==>", itemData.BotanySeedId);
            }
          }

          this.sort(unlockArray);
          this.sort(lockArray);
          unlockArray.forEach(function (config) {
            var item = instantiate(_this3.itemPrefab);
            var posX = _this3.sv.content.children.length;

            _this3.sv.content.addChild(item);

            if (defWeidth <= 1) {
              defWeidth = item.getComponent(UITransform).contentSize.width + 10;
            }

            posX = posX * defWeidth;
            item.setPosition(posX + defWeidth / 2, 0, 0);
            seedItem = item.getComponent(SeedItem);
            seedItem.init(config, "botany", _this3.useSelect);
          });

          if (lockArray.length > 0) {
            var item = instantiate(this.itemPrefab);
            var _posX2 = this.sv.content.children.length;
            this.sv.content.addChild(item);

            if (defWeidth <= 1) {
              defWeidth = item.getComponent(UITransform).contentSize.width + 10;
            }

            _posX2 = _posX2 * defWeidth;
            item.setPosition(_posX2 + defWeidth / 2, 0, 0);
            item.getComponent(SeedItem).init(lockArray[0], "botany", this.useSelect);
          }

          console.warn("unLockArray====>", unlockArray);
          var posX = this.sv.content.children.length * defWeidth;
          var size1 = this.sv.content.getComponent(UITransform).contentSize;
          var n = new Size(posX + 100, size1.height);
          this.sv.content.getComponent(UITransform).contentSize = n;
          this.onChangeLeftRightState(); // this.sv.scrollToLeft(0)
          // this.sv.scrollToRight(1)

          if (seedItem) {
            this.scheduleOnce(function () {
              _this3.setSelect(seedItem);
            });
          }
        };

        _proto.PickNode = function PickNode(pos) {
          var cc = this.sv.content.children;

          for (var index = 0; index < cc.length; index++) {
            if (UIHelp.TestUIPoint(pos, cc[index])) {
              return cc[index].getComponent(SeedItem);
            }
          }
        };

        _proto.resetNodeSize = function resetNodeSize() {
          var cc = this.sv.content.children;

          for (var index = 0; index < cc.length; index++) {
            cc[index].setScale(new Vec3(1.0, 1.0, 1.0));
          }
        };

        _proto.onScroll = function onScroll(scrollview, eventType, customEventData) {};

        _proto.onHideSelect = function onHideSelect(data) {
          this.setSelect(null);
          this.firstPickItem = null;
          this.selectItem = null;
        };

        _proto.setSelect = function setSelect(item) {
          if (this.clickItem) this.clickItem.setSelect(false);
          this.clickItem = item;
          if (this.clickItem) this.clickItem.setSelect(true);
        };

        _proto.onBeginTouch1 = function onBeginTouch1(event) {
          var pos = event.touch.getUILocation();
          this.firstPos.set(pos);
          this.resetNodeSize();
          this.firstPickItem = this.PickNode(pos);
          this.firstPickItem && this.firstPickItem.node.setScale(new Vec3(1.2, 1.2, 1.2));
          event.preventSwallow = false;
        };

        _proto.onEndTouch1 = function onEndTouch1(event) {
          var endpos = event.touch.getUILocation();
          var s = this.PickNode(endpos);
          this.resetNodeSize();
          event.preventSwallow = true;

          if (this.firstPickItem === s && this.firstPickItem) {
            this.setSelect(this.firstPickItem);
            EventManager.getInstance().trigger(MessageManager.Custom.ShowSeedTip, {
              type: this.type,
              item: s,
              config: s.Config
            });
          }
        };

        _proto.onCancellTouch1 = function onCancellTouch1(event) {
          event.preventSwallow = true;
          this.resetNodeSize();
        };

        _proto.onMoveTouch1 = function onMoveTouch1(event) {
          var endpos = event.touch.getUILocation();

          if (Vec2.distance(this.firstPos, endpos) > 20) {
            this.onHideSeedTip("");
          }

          event.preventSwallow = true;

          if (!UIHelp.TestUIPoint(endpos, this.RectNode) && this.firstPickItem && !this.firstPickItem.isLock) {
            var h = this.RectNode.getComponent(UITransform).contentSize.height / 2;
            h += this.RectNode.worldPosition.y;

            if (endpos.y > h) {
              this.onUseItem({
                mode: 1,
                config: this.firstPickItem.Config,
                Pos: endpos
              });
            }
          }
        };

        return SeedView;
      }(BaseUI), _class3.className = "SeedView", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sv", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "itemPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "leftNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "rightNode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "tipDlg", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "BG", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "RectNode", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SelectRoleView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstLanguage.ts', './EnumDefine.ts', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './TipManager.ts', './UIManager.ts', './WebSocketMgr.ts', './NodeHelp.ts', './NumberUtil.ts', './PlatformUtil.ts', './TweenHelp.ts', './UIHelp.ts', './BaseUI.ts', './CutscenesView.ts', './LoadingView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, Vec3, _decorator, Node, Label, Button, Sprite, EditBox, SpriteFrame, v3, sys, UITransform, LabelOutline, Color, ConstLanguage, EnumDefine, ConfigFile, Configname, GameAllData, EventManager, MessageManager, TipManager, UIManager, WebSocketMgr, NodeHelp, NumberUtil, PlatformUtil, TweenHelper, UIHelp, BaseUI, CutscenesView, LoadingView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Button = module.Button;
      Sprite = module.Sprite;
      EditBox = module.EditBox;
      SpriteFrame = module.SpriteFrame;
      v3 = module.v3;
      sys = module.sys;
      UITransform = module.UITransform;
      LabelOutline = module.LabelOutline;
      Color = module.Color;
    }, function (module) {
      ConstLanguage = module.ConstLanguage;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }, function (module) {
      PlatformUtil = module.PlatformUtil;
    }, function (module) {
      TweenHelper = module.TweenHelper;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      CutscenesView = module.CutscenesView;
    }, function (module) {
      LoadingView = module.LoadingView;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _class3;

      cclegacy._RF.push({}, "b83a7Mz3v5IX6MFvWEa9FqD", "SelectRoleView", undefined);

      var btnStartGameP1 = new Vec3(196, -126, 0);
      var btnStartGameP2 = new Vec3(178, -164, 0);
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SelectRoleView = exports('SelectRoleView', (_dec = ccclass('SelectRoleView'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Label), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property([Button]), _dec8 = property(Label), _dec9 = property(Label), _dec10 = property(Button), _dec11 = property(Button), _dec12 = property(Sprite), _dec13 = property(EditBox), _dec14 = property(Button), _dec15 = property(Button), _dec16 = property(Button), _dec17 = property([SpriteFrame]), _dec18 = property([SpriteFrame]), _dec19 = property(Sprite), _dec20 = property(Label), _dec21 = property(Label), _dec22 = property(Label), _dec23 = property(Node), _dec24 = property(Node), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(SelectRoleView, _BaseUI);

        function SelectRoleView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;
          _this.data = null;
          _this.selectRoleId = 0;
          _this.selectRolePos = v3();
          _this.introduceRolePos = v3(-240, -42, 0);
          _this.nodSelectRole = null;

          _initializerDefineProperty(_this, "nodSelect", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodConfirm", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labTitle", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodRole", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodRoleIntroduce", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnRoleList", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labDescTitle", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labDesc", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnIntroduceBack", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnOk", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sprRole", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "edtManorName", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnDice", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnStartGame", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnConfirmBack", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sprfRoleIcon", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sprfHouseIcon", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sprHouse", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "houseName", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "vipname", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rankname", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "levelIcon", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "houseInfoBar", _descriptor23, _assertThisInitialized(_this));

          _this.sendlock = 0;
          return _this;
        }

        var _proto = SelectRoleView.prototype;

        _proto.onLoad = function onLoad() {
          EventManager.getInstance().add(MessageManager.Net.FarmSelectNewRoleResponse, this, this.onFarmSelectNewRoleResponse);
        };

        _proto.onDestroy = function onDestroy() {
          EventManager.getInstance().remove(MessageManager.Net.FarmSelectNewRoleResponse, this, this.onFarmSelectNewRoleResponse);
          TweenHelper.stop(this.btnStartGame.node);
        };

        _proto.start = function start() {
          //打点
          var f = "-";

          if (sys.Platform.IOS === sys.platform) {
            f = "_";
          }

          var Pointdata = "userID" + f + this.data.Id;
          PlatformUtil.buriedPoint("intoCreateRolePage", Pointdata, -1);

          if (0 == this.data.Sex) {
            NodeHelp.getchildlable(this.nodConfirm, "labTitle", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(120016);
            });
            this.nodSelect.active = true;
            this.nodConfirm.active = false;
            var config = ConfigFile.getGlobalInfoByGlobalId(170);
            var texts = config.Text.split(",");
            this.btnRoleList.forEach(function (v, i) {
              var name = ConfigFile.findLanguage(ConfigFile.getRoleInfoByRoleId(Number(texts[i])).RoleName);
              v.node.getChildByName("labName").getComponent(Label).string = name;
              v.node.getChildByName("sprSelected").active = false;
            });
          } else {
            this.nodSelect.active = false;
            this.nodConfirm.active = true;
            this.edtManorName.node.active = false;
            this.btnDice.node.active = false;
            this.btnConfirmBack.node.active = false;
            this.initConfirmRole(this.data.RoleModeId);
            NodeHelp.getchildlable(this.nodConfirm, "labTitle", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(120015);
            });
          }

          this.setText();
          this.setHouseInfo();
          this.btnStartGame.interactable = true;
        };

        _proto.setHouseInfo = function setHouseInfo() {
          var _this2 = this;

          var houseData = GameAllData.FarmHouseResponse;
          var userData = GameAllData.FarmUserResponse;

          if (houseData) {
            this.vipname.string = ConfigFile.findLanguage(ConstLanguage.VIP_EXPERIENCE_LEVEL)["format"]("" + userData.VipLevel);
            this.rankname.string = ConfigFile.findLanguage(108002);
            var index = houseData.HouseLevel;
            if (index >= this.sprfHouseIcon.length) index = this.sprfHouseIcon.length - 1;
            this.sprHouse.spriteFrame = this.sprfHouseIcon[index];
            var scale = NodeHelp.setScopeLimitation(this.sprHouse.node.getComponent(UITransform), 151, 201);
            this.sprHouse.node.setScale(scale, scale);
            var duketable = ConfigFile.getInstance().config.get(Configname.TDukeInfo);
            var curDuke = duketable.find(function (item) {
              return item.DukeLevel == userData.RankLevel;
            });
            if (curDuke) this.rankname.string = ConfigFile.findLanguage(curDuke.DukeName);else this.rankname.string = ""; //vip等级显示

            NodeHelp.getchildlable(this.levelIcon, "levelNum", Label, function (comp) {
              comp.string = "" + userData.VipLevel;
              var iconNum = 0;

              if (userData.VipLevel != iconNum) {
                if (userData.VipLevel % 2 == 1) iconNum = userData.VipLevel;else iconNum = userData.VipLevel - 1;
              }

              var img = EnumDefine.vipIconUrl.vipSmall["format"](iconNum);
              NodeHelp.loadImage(_this2.levelIcon.getComponent(Sprite), img);
              comp.node.getComponent(LabelOutline).color = new Color().fromHEX(EnumDefine.vipColor["color" + iconNum]);
            });
            var name = "myfarm";
            if (userData.NikiName && userData.NikiName != "") name = userData.NikiName;
            this.houseName.string = name;
          }

          if (!this.edtManorName.node.active) {
            setTimeout(function () {
              _this2.onHouseInfo();
            }, 0.2);
          }
        };

        _proto.onHouseInfo = function onHouseInfo() {
          this.houseInfoBar.active = true;
          this.btnStartGame.node.setPosition(btnStartGameP2);
        };

        _proto.offHouseInfo = function offHouseInfo() {
          this.houseInfoBar.active = false;
          this.btnStartGame.node.setPosition(btnStartGameP1);
        };

        _proto.setText = function setText() {
          NodeHelp.getchildlable(this.btnIntroduceBack.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(120053);
          });
          NodeHelp.getchildlable(this.btnOk.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(120054);
          });
          NodeHelp.getchildlable(this.btnStartGame.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(120052);
          });
          this.labTitle.string = ConfigFile.findLanguage(120010);
          this.labDescTitle.string = ConfigFile.findLanguage(120056);
          this.edtManorName.placeholder = ConfigFile.findLanguage(120057); // this.btnStartGame.node.setScale(0.9, 0.9, 0.9);
          // let embedTween = tween(this.btnStartGame.node)
          //     .to(0.2, { scale: new Vec3(1.05, 1.05, 1.05) })
          //     .to(0.10, { scale: new Vec3(0.95, 0.95, 0.95) })
          //     .to(0.10, { scale: new Vec3(1.0, 1.0, 1.0) })
          // tween(this.btnStartGame.node)
          //     .to(0.2, { scale: new Vec3(1.05, 1.05, 1.05) })
          //     .to(0.10, { scale: new Vec3(0.95, 0.95, 0.95) })
          //     .to(0.10, { scale: new Vec3(1.0, 1.0, 1.0) })
          //     .repeat(99999,embedTween)
          //     .start();

          TweenHelper.jellyRepeatForever(this.btnStartGame.node);
        };

        _proto.onClickedRole = function onClickedRole(event) {
          this.btnRoleList.forEach(function (v) {
            v.node.getChildByName("sprSelected").active = false;
            v.interactable = false;
          });
          var node = event.target;
          var config = ConfigFile.getGlobalInfoByGlobalId(170);
          var texts = config.Text.split(",");

          if ("btnRole0" == node.name) {
            this.selectRoleId = texts[0];
          } else {
            this.selectRoleId = texts[1];
          }

          this.nodSelectRole = node;
          node.getChildByName("sprSelected").active = true;
          this.selectRolePos = v3(node.position);
          node.position = this.introduceRolePos;
          node.parent = this.nodRoleIntroduce;
          var desc = ConfigFile.findLanguage(ConfigFile.getRoleInfoByRoleId(this.selectRoleId).RoleTxt);
          this.labDesc.string = desc;
          this.nodRole.active = false;
          this.nodRoleIntroduce.active = true;
        };

        _proto.onClickedBackToSelect = function onClickedBackToSelect() {
          this.nodRole.active = true;
          this.nodRoleIntroduce.active = false;
          this.nodSelectRole.position = this.selectRolePos;
          this.nodSelectRole.parent = this.nodRole;
          this.btnRoleList.forEach(function (v) {
            v.interactable = true;
          });
        };

        _proto.onClickedOk = function onClickedOk() {
          this.nodSelect.active = false;
          this.nodConfirm.active = true;
          this.btnConfirmBack.node.active = true;
          this.initConfirmRole(this.selectRoleId);
        };

        _proto.onClickedBackToIntroduce = function onClickedBackToIntroduce() {
          this.btnConfirmBack.node.active = false;
          this.nodSelect.active = true;
          this.nodConfirm.active = false;
        };

        _proto.onClickedStartGame = function onClickedStartGame() {
          if (this.edtManorName.node.active) {
            if (UIHelp.getTimeDiff(this.sendlock) < 500) return;

            if (this.edtManorName.string.length >= 4 && this.edtManorName.string.length <= 10) {
              this.sendlock = UIHelp.getTimeMask();
              WebSocketMgr.send(MessageManager.Net.FarmSelectNewRoleRequest, {
                RoleModeId: this.selectRoleId,
                RoleName: this.edtManorName.string
              });
              this.btnStartGame.interactable = false;
            } else {
              TipManager.TipFromCode(120050);
            }
          } else {
            this.startGame();
          }
        };

        _proto.inputString = function inputString() {
          var str = NumberUtil.stringRemoveChinese(this.edtManorName.string);
          this.edtManorName.string = str;
        };

        _proto.onClickedDice = function onClickedDice() {};

        _proto.onEditEndedManorName = function onEditEndedManorName() {};

        _proto.onFarmSelectNewRoleResponse = function onFarmSelectNewRoleResponse(data) {
          //EventManager.getInstance().remove(MessageManager.Net.FarmSelectNewRoleResponse, this, this.onFarmSelectNewRoleResponse);
          this.btnStartGame.interactable = true;

          if (3 == data.Code) {
            this.sendlock = 0;
            TipManager.autoTip(3, 120055, ConfigFile.findLanguage(120055));
            return;
          }

          if (0 != data.Code) {
            this.sendlock = 0;
            return;
          }

          var UserData = GameAllData.FarmUserResponse;
          UserData.NikiName = data.RoleName;
          UserData.Sex = data.Sex;
          UserData.RoleModeId = data.RoleModeId;
          this.startGame();
        };

        _proto.initConfirmRole = function initConfirmRole(roleId) {
          var config = ConfigFile.getRoleInfoByRoleId(roleId);

          if (!config) {
            console.error("没有找到角色");
            return;
          }

          var name = ConfigFile.findLanguage(config.RoleName);
          this.sprRole.node.getChildByName("labName").getComponent(Label).string = name;
          this.sprRole.node.getChildByName("sprIcon").getComponent(Sprite).spriteFrame = this.sprfRoleIcon[1 == config.RoleSex ? 0 : 1];
        };

        _proto.startGame = function startGame() {
          this.sendlock = UIHelp.getTimeMask();

          var func = function func() {
            EventManager.getInstance().trigger(MessageManager.Custom.StartGame);
            UIManager.getInstance().closeUI(SelectRoleView);
            UIManager.getInstance().closeUI(LoadingView);
          };

          UIManager.getInstance().openUI(CutscenesView, 20, function (ui, args) {
            ui.callEntry = func;
          }, null, null, true);
        };

        return SelectRoleView;
      }(BaseUI), _class3.className = "SelectRoleView", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nodSelect", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "nodConfirm", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labTitle", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "nodRole", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "nodRoleIntroduce", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "btnRoleList", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "labDescTitle", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "labDesc", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "btnIntroduceBack", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "btnOk", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "sprRole", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "edtManorName", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "btnDice", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "btnStartGame", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "btnConfirmBack", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "sprfRoleIcon", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "sprfHouseIcon", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "sprHouse", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "houseName", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "vipname", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "rankname", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "levelIcon", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "houseInfoBar", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sequence.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, cclegacy;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3aaecDE7kRAu4eqfca+zeXj", "sequence", undefined);

      var ConnectToSequence = exports('default', /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(sequence, opts) {
          var _window, _window$ethereum;

          var provider, wallet, connectDetails;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!((_window = window) != null && (_window$ethereum = _window.ethereum) != null && _window$ethereum.isSequence)) {
                    _context.next = 11;
                    break;
                  }

                  provider = window.ethereum;
                  _context.prev = 2;
                  _context.next = 5;
                  return provider.request({
                    method: 'eth_requestAccounts'
                  });

                case 5:
                  return _context.abrupt("return", provider);

                case 8:
                  _context.prev = 8;
                  _context.t0 = _context["catch"](2);
                  throw new Error("User Rejected");

                case 11:
                  wallet = new sequence.Wallet((opts == null ? void 0 : opts.defaultNetwork) || 'mainnet');

                  if (wallet.isConnected()) {
                    _context.next = 18;
                    break;
                  }

                  _context.next = 15;
                  return wallet.connect({
                    app: opts == null ? void 0 : opts.appName,
                    authorize: true
                  });

                case 15:
                  connectDetails = _context.sent;

                  if (connectDetails.connected) {
                    _context.next = 18;
                    break;
                  }

                  throw new Error("Failed to connect");

                case 18:
                  provider = wallet.getProvider();
                  provider.sequence = wallet;
                  return _context.abrupt("return", provider);

                case 21:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[2, 8]]);
        }));

        return function ConnectToSequence(_x, _x2) {
          return _ref.apply(this, arguments);
        };
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Sets.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './NumberUtil.ts'], function (exports) {
  'use strict';

  var _createClass, _createForOfIteratorHelperLoose, cclegacy, NumberUtil;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3ba96mvesJGzYniH+61fMC2", "Sets", undefined);
      /**
       * 数组的二次封装
       * 内置去重处理
       * @export
       * @class Sets
       * @template T
       */


      var Sets = exports('Sets', /*#__PURE__*/function () {
        Sets.forEach = function forEach(arr, cb, isLast) {
          if (isLast === void 0) {
            isLast = false;
          }

          if (isLast) {
            for (var i = arr.length - 1; i >= 0; i--) {
              if (cb(arr[i], i)) break;
            }
          } else {
            for (var _i = 0; _i < arr.length; _i++) {
              if (cb(arr[_i], _i)) break;
            }
          }
        }
        /**
         * 更新个数
         * @param curCount 
         * @param oldCount 
         * @param itemCb 
         */
        ;

        Sets.updateItemCount = function updateItemCount(curCount, oldCount, itemCb) {
          if (curCount < 0 || oldCount < 0) return;
          if (curCount == oldCount) return;
          var sub = curCount - oldCount;
          if (sub > 0) for (var i = 0; i < sub; i++) {
            itemCb(true);
          } else for (var _i2 = 0, length = Math.abs(sub); _i2 < length; _i2++) {
            itemCb(false);
          }
        };

        Sets.pop = function pop(arr, remove) {
          if (remove === void 0) {
            remove = false;
          }

          if (remove) return arr.pop();
          return arr[arr.length - 1];
        };

        Sets["delete"] = function _delete(arr, value) {
          if (value == undefined || value == null) return false;
          if (arr.length == 0) return false;
          var index = arr.indexOf(value);
          if (index == -1) return false;
          arr.splice(index, 1);
          return true;
        }
        /**
         * 冒泡排序
         * @param arr 
         * @param cb 
         */
        ;

        Sets.bubblingSort = function bubblingSort(arr, cb) {
          var size = arr.length;

          for (var i = 0; i < size - 1; i++) {
            for (var j = 0; j < size - 1 - i; j++) {
              if (cb(arr[j], arr[j + 1])) {
                var temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
              }
            }
          }
        };

        Sets.reverse = function reverse(arr) {
          for (var i = 0; i < arr.length / 2; i++) {
            var temp = arr[i];
            arr[i] = arr[arr.length - 1 - i];
            arr[arr.length - 1 - i] = temp;
          }

          return arr;
        };

        Sets.map = function map(arr, cb) {
          var set = [];

          for (var i = 0; i < arr.length; i++) {
            var data = cb(arr[i], i, arr);
            set.push(data);
          }

          return set;
        };

        Sets.has = function has(arr, value, stringCompare) {
          if (stringCompare === void 0) {
            stringCompare = false;
          }

          if (!arr) return false;
          if (arr.length == 0) return false;
          var index;
          if (stringCompare) index = this.map(arr, function (v) {
            return v.toString();
          }).indexOf(value.toString());else index = arr.indexOf(value);
          return index != -1;
        };

        Sets.add = function add(arr) {
          for (var i = 0; i < (arguments.length <= 1 ? 0 : arguments.length - 1); i++) {
            var _value = i + 1 < 1 || arguments.length <= i + 1 ? undefined : arguments[i + 1];

            if (this.has(arr, _value)) continue;
            arr.push(_value);
          }
        }
        /**
         * 随机一个自身的值
         * @param value 
         * @param exclude 排除
         */
        ;

        Sets.random = function random(value, exclude) {
          if (value.length == 0) return null; // 从排除的数据中查找

          if (exclude) {
            var values = [];

            for (var i = 0, l = value.length; i < l; i++) {
              if (!exclude(value[i], i)) values.push(value[i]);
            }

            return this.random(values);
          }

          return value[NumberUtil.zeroToMax(value.length)];
        }
        /**
        * 随机一个自身的值
        * @param value 
        * @param exclude 排除
        */
        ;

        Sets.randomOf = function randomOf(value, exclude) {
          if (value.length == 0) return null; // 从排除的数据中查找

          if (exclude) {
            var values = [];

            for (var i = 0, l = value.length; i < l; i++) {
              if (!exclude(value[i], i)) values.push(value[i]);
            }

            return this.randomOf(values);
          }

          return NumberUtil.zeroToMax(value.length);
        }
        /**获取值如index超出个数 则取最后一个 */
        ;

        Sets.getAt = function getAt(value, index) {
          index = NumberUtil.clampf(index, 0, value.length - 1);
          return value[index];
        }
        /**
         * 筛选 cb => true 的值 如没有 返回 null!
         * @param {(value: T, index: number) => boolean} cb
         * @returns {T}
         * @memberof Sets
         */
        ;

        Sets.filterValue = function filterValue(values, cb, isLast) {
          if (isLast === void 0) {
            isLast = false;
          }

          var idx = this.filterOf(values, cb, isLast);
          if (idx == -1) return null;
          return values[idx];
        }
        /**
         * 插入值
         * @param values 
         * @param insertIndex 
         * @param getIndex 
         */
        ;

        Sets.insert = function insert(values, value, index) {
          var back = values.splice(index);
          values.push(value);
          values.push.apply(values, back);
          return values;
        }
        /**
         * 筛选 cb => true 的索引
         * @param {(value: T, index: number) => boolean} cb
         * @returns {number}
         * @memberof Sets
         */
        ;

        Sets.filterOf = function filterOf(arr, cb, isLast) {
          if (isLast === void 0) {
            isLast = false;
          }

          if (isLast) {
            for (var i = arr.length - 1; i >= 0; i--) {
              if (arr[i] && cb(arr[i], i)) return i;
            }
          } else {
            for (var _i3 = 0; _i3 < arr.length; _i3++) {
              if (arr[_i3] && cb(arr[_i3], _i3)) return _i3;
            }
          }

          return -1;
        };

        Sets.filter = function filter(values, cb, out) {
          if (!out) out = [];

          for (var i = 0; i < values.length; i++) {
            if (values[i] && cb(values[i], i)) {
              out.push(values[i]);
            }
          }

          return out;
        };

        Sets.push = function push(values, _push) {
          if (Array.isArray(_push)) {
            for (var _iterator = _createForOfIteratorHelperLoose(_push), _step; !(_step = _iterator()).done;) {
              var _value2 = _step.value;
              values.push(_value2);
            }
          } else values.push(_push);

          return values;
        }
        /**
         * 从大到小 b-a
         * 从小到大 a-b
         * @param {(a: T, b: T) => number} cb
         * @returns {Sets<T>}
         * @memberof Sets
         */
        ;

        Sets.sort = function sort(values, cb) {
          return values.sort(cb);
        }
        /**
         * 打乱数组, 默认改变
         * @param {boolean} [isChangeOriginal=true] 是否改变原数组
         * @returns {any[]}
         */
        ;

        Sets.shuffle = function shuffle(arr, isChangeOriginal) {
          if (isChangeOriginal === void 0) {
            isChangeOriginal = true;
          }

          if (!isChangeOriginal) {
            var tmp = arr.concat();
            tmp.sort(function (a, b) {
              return Math.random() > .5 ? 1 : -1;
            });
            return tmp;
          } else {
            arr.sort(function (a, b) {
              return Math.random() > .5 ? 1 : -1;
            });
            return arr;
          }
        }
        /**
         * 随机取count个数据
         * @param vlaues 
         * @param count 
         */
        ;

        Sets.randomArray = function randomArray(values, count) {
          if (count === void 0) {
            count = 1;
          }

          var res = this.shuffle(values, false),
              arr = [];

          for (var i = 0; i < count; i++) {
            if (res[i]) arr.push(res[i]);
          }

          return arr;
        };
        /**
         * 
         * @param {boolean} [isRepeat=true] 去重
         * @param {...T[]} values
         * @memberof Sets
         */


        function Sets(isRepeat) {
          if (isRepeat === void 0) {
            isRepeat = true;
          }

          this.values = [];
          this.isRepeat = true;
          this.isRepeat = isRepeat;

          for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            values[_key - 1] = arguments[_key];
          }

          this.add.apply(this, values);
        }

        var _proto = Sets.prototype;

        _proto.indexOf = function indexOf(value) {
          return this.values.indexOf(value);
        };

        _proto.clear = function clear() {
          this.values.length = 0;
        };
        /**
         * 拿下标第一个的值 默认删除第一个
         * @param {boolean} [isOrign=true] 是否删除第一个
         * @returns {T}
         * @memberof Sets
         */


        _proto.shift = function shift(isOrign) {
          if (isOrign === void 0) {
            isOrign = true;
          }

          if (isOrign) return this.values.shift();else return this.values.concat()[0];
        };

        _proto.toString = function toString() {
          return this.values.toString();
        };

        _proto.forEach = function forEach(cb, isLast) {
          if (isLast === void 0) {
            isLast = false;
          }

          Sets.forEach(this.values, cb, isLast);
          return this;
        };

        _proto.add = function add() {
          for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            values[_key2] = arguments[_key2];
          }

          Sets.add.apply(Sets, [this.values].concat(values));
          return this;
        };

        _proto["delete"] = function _delete(value) {
          return Sets["delete"](this.values, value);
        };

        _proto.has = function has(value, stringCompare) {
          if (stringCompare === void 0) {
            stringCompare = false;
          }

          return Sets.has(this.values, value, stringCompare);
        };

        _proto.map = function map(cb) {
          return Sets.map(this.values, cb);
        };

        _proto.sort = function sort(cb) {
          Sets.sort(this.values, cb);
          return this;
        };

        _proto.filterOf = function filterOf(cb) {
          return Sets.filterOf(this.values, cb);
        };

        _proto.filterValue = function filterValue(cb) {
          return Sets.filterValue(this.values, cb);
        };

        _proto.filter = function filter(cb) {
          return Sets.filter(this.values, cb, []);
        };

        _createClass(Sets, [{
          key: "size",
          get: function get() {
            return this.values.length;
          }
        }]);

        return Sets;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SetsafetyCodeBanding.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AreaCodeConfig.ts', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './TipManager.ts', './UIManager.ts', './HttpMgr.ts', './NodeHelp.ts', './NumberUtil.ts', './BaseUI.ts', './AreaCodeItem.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, EditBox, Label, ScrollView, Prefab, Button, instantiate, AreaCodeConfig, ConfigFile, GameAllData, EventManager, MessageManager, TipManager, UIManager, HttpMgr, NodeHelp, NumberUtil, BaseUI, AreaCodeItem;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      EditBox = module.EditBox;
      Label = module.Label;
      ScrollView = module.ScrollView;
      Prefab = module.Prefab;
      Button = module.Button;
      instantiate = module.instantiate;
    }, function (module) {
      AreaCodeConfig = module.AreaCodeConfig;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      HttpMgr = module.HttpMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      AreaCodeItem = module.AreaCodeItem;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _class3;

      cclegacy._RF.push({}, "697d7zPiN5Mjox5jjs8BG7O", "SetsafetyCodeBanding", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SetsafetyCodeBanding = exports('SetsafetyCodeBanding', (_dec = ccclass('SetsafetyCodeBanding'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(EditBox), _dec6 = property(EditBox), _dec7 = property(EditBox), _dec8 = property(EditBox), _dec9 = property(EditBox), _dec10 = property(EditBox), _dec11 = property(Label), _dec12 = property(Label), _dec13 = property(ScrollView), _dec14 = property(EditBox), _dec15 = property(Prefab), _dec16 = property(Button), _dec17 = property(Button), _dec18 = property(Button), _dec19 = property(Button), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(SetsafetyCodeBanding, _BaseUI);

        function SetsafetyCodeBanding() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "panel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "phone", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "email", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "editBoxPhoneMaOld", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "editBoxPhoneNum", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "editBoxPhoneMa", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "editBoxEmailMaOld", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "editBoxEmailNum", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "editBoxEmailMa", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "LabelShow", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labAreaCode", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrAllAreaCode", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "searchEditBox", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pfbAreaCodeItem", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnPhoneGetOld", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnPhoneGet", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnEmailGetOld", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnEmailGet", _descriptor18, _assertThisInitialized(_this));

          _this.type = 1;
          return _this;
        }

        var _proto = SetsafetyCodeBanding.prototype;

        _proto.start = function start() {
          this.initLablanguages();
          EventManager.getInstance().add(MessageManager.Custom.SelectedAreaCode, this, this.onSelectedAreaCode); // this.node.on(Input.EventType.TOUCH_START, this.closeAreaCode, this)
        };

        _proto.onDestroy = function onDestroy() {
          EventManager.getInstance().remove(MessageManager.Custom.SelectedAreaCode, this, this.onSelectedAreaCode);
        };

        _proto.initLablanguages = function initLablanguages() {
          var _this2 = this;

          var titleId;

          if (this.type == 1) //手机
            {
              titleId = 8029;
              this.phone.active = true;
              this.email.active = false;
              this.initAllAreaCode(); // this.LabelShow.string = ConfigFile.findLanguage(8059) + GameAllData.bandPhone;
              // this.LabelShow.string = this.LabelShow.string.replace(this.LabelShow.string.substring(6,this.LabelShow.string.length), "********")

              var phone = GameAllData.bandPhone;
              phone = phone.replace(phone.substring(6, phone.length), "********");
              this.LabelShow.string = ConfigFile.findLanguage(8059).format(phone);
            } else //邮箱
            {
              titleId = 8030;
              this.phone.active = false;
              this.email.active = true; // this.LabelShow.string = ConfigFile.findLanguage(8059) + GameAllData.bandEmail;
              // this.LabelShow.string = this.LabelShow.string.replace(this.LabelShow.string.substring(6,this.LabelShow.string.length), "********")

              var email = GameAllData.bandEmail;
              email = email.replace(email.substring(6, email.length), "********");
              this.LabelShow.string = ConfigFile.findLanguage(8059).format(email);
            }

          NodeHelp.getchildlable(this.panel, "LabelTitle", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(titleId);
          });
          NodeHelp.getchildlable(this.phone, "LabPhone", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8058);
          });
          NodeHelp.getchildlable(this.phone, "LabelMaOld", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8032);
          });
          NodeHelp.getchildlable(this.phone, "LabelMa", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8056);
          });
          NodeHelp.getchildlable(this.phone, "maButtonOld", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8014);

            if (GameAllData.changePhoneTimeOld > 0) {
              _this2.btnPhoneGetOld.interactable = false;
              var phoneTime = Math.ceil(GameAllData.changePhoneTimeOld);
              var cdTime = phoneTime;
              comp.string = ConfigFile.findLanguage(120014).format(cdTime);

              var func = function func() {
                cdTime--;

                if (cdTime < 1) {
                  _this2.btnPhoneGetOld.interactable = true;
                  GameAllData.changePhoneTimeOld = 0;
                  comp.string = ConfigFile.findLanguage(120006);

                  _this2.unschedule(func);

                  return;
                }

                comp.string = ConfigFile.findLanguage(120014).format(cdTime);
              };

              _this2.schedule(func, 1);
            } else {
              _this2.btnPhoneGetOld.interactable = true;
            }
          });
          NodeHelp.getchildlable(this.phone, "maButton", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8014);

            if (GameAllData.changePhoneTime > 0) {
              _this2.btnPhoneGet.interactable = false;
              var phoneTime = Math.ceil(GameAllData.changePhoneTime);
              var cdTime = phoneTime;
              comp.string = ConfigFile.findLanguage(120014).format(cdTime);

              var func = function func() {
                cdTime--;

                if (cdTime < 1) {
                  _this2.btnPhoneGet.interactable = true;
                  GameAllData.changePhoneTime = 0;
                  comp.string = ConfigFile.findLanguage(120006);

                  _this2.unschedule(func);

                  return;
                }

                comp.string = ConfigFile.findLanguage(120014).format(cdTime);
              };

              _this2.schedule(func, 1);
            } else {
              _this2.btnPhoneGet.interactable = true;
            }
          });
          NodeHelp.getchildlable(this.phone, "bangButton", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8015);
          });
          NodeHelp.getchildlable(this.email, "LabelEmail", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8057);
          });
          NodeHelp.getchildlable(this.email, "LabelMa", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8056);
          });
          NodeHelp.getchildlable(this.email, "LabelEmailOld", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8034);
          });
          NodeHelp.getchildlable(this.email, "maButtonOld", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8014);

            if (GameAllData.changeEmailTimeOld > 0) {
              _this2.btnEmailGetOld.interactable = false;
              var phoneTime = Math.ceil(GameAllData.changeEmailTimeOld);
              var cdTime = phoneTime;
              comp.string = ConfigFile.findLanguage(120014).format(cdTime);

              var func = function func() {
                cdTime--;

                if (cdTime < 1) {
                  _this2.btnEmailGetOld.interactable = true;
                  GameAllData.changeEmailTimeOld = 0;
                  comp.string = ConfigFile.findLanguage(120006);

                  _this2.unschedule(func);

                  return;
                }

                comp.string = ConfigFile.findLanguage(120014).format(cdTime);
              };

              _this2.schedule(func, 1);
            } else {
              _this2.btnEmailGetOld.interactable = true;
            }
          });
          NodeHelp.getchildlable(this.email, "maButton", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8014);

            if (GameAllData.changeEmailTime > 0) {
              _this2.btnEmailGet.interactable = false;
              var phoneTime = Math.ceil(GameAllData.changeEmailTime);
              var cdTime = phoneTime;
              comp.string = ConfigFile.findLanguage(120014).format(cdTime);

              var func = function func() {
                cdTime--;

                if (cdTime < 1) {
                  _this2.btnEmailGet.interactable = true;
                  GameAllData.changeEmailTime = 0;
                  comp.string = ConfigFile.findLanguage(120006);

                  _this2.unschedule(func);

                  return;
                }

                comp.string = ConfigFile.findLanguage(120014).format(cdTime);
              };

              _this2.schedule(func, 1);
            } else {
              _this2.btnEmailGet.interactable = true;
            }
          });
          NodeHelp.getchildlable(this.email, "bangButton", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8015);
          });
          this.editBoxPhoneMaOld.placeholder = ConfigFile.findLanguage(8013);
          this.editBoxPhoneNum.placeholder = ConfigFile.findLanguage(8012);
          this.editBoxPhoneMa.placeholder = ConfigFile.findLanguage(8013);
          this.editBoxEmailMaOld.placeholder = ConfigFile.findLanguage(8013);
          this.editBoxEmailNum.placeholder = ConfigFile.findLanguage(8021);
          this.editBoxEmailMa.placeholder = ConfigFile.findLanguage(8013);
        };

        _proto.onEditEndedPhoneNumOld = function onEditEndedPhoneNumOld() {
          if (!NumberUtil.checkInt(this.editBoxPhoneMaOld.string) || Number(this.editBoxPhoneMaOld.string) <= 0) {
            this.editBoxPhoneMaOld.string = "";
            return;
          }
        };

        _proto.onEditEndedPhoneNum = function onEditEndedPhoneNum() {
          if (!NumberUtil.checkInt(this.editBoxPhoneNum.string) || Number(this.editBoxPhoneNum.string) <= 0) {
            this.editBoxPhoneNum.string = "";
            return;
          }
        };

        _proto.onEditEndedPhoneNumMa = function onEditEndedPhoneNumMa() {
          if (!NumberUtil.checkInt(this.editBoxPhoneMa.string) || Number(this.editBoxPhoneMa.string) <= 0) {
            this.editBoxPhoneMa.string = "";
            return;
          }
        };

        _proto.onEditEndedEmailNumOld = function onEditEndedEmailNumOld() {
          if (!NumberUtil.checkInt(this.editBoxEmailMaOld.string) || Number(this.editBoxEmailMaOld.string) <= 0) {
            this.editBoxEmailMaOld.string = "";
            return;
          }
        };

        _proto.onEditEndedEmailNum = function onEditEndedEmailNum() {
          if (!NumberUtil.checkInt(this.editBoxEmailNum.string) || Number(this.editBoxEmailNum.string) <= 0) {
            this.editBoxEmailNum.string = "";
            return;
          }
        };

        _proto.onEditEndedEmailNumMa = function onEditEndedEmailNumMa() {
          if (!NumberUtil.checkInt(this.editBoxEmailMa.string) || Number(this.editBoxEmailMa.string) <= 0) {
            this.editBoxEmailMa.string = "";
            return;
          }
        };

        _proto.onClose = function onClose() {
          UIManager.getInstance().closeUI(SetsafetyCodeBanding);
        } //发送已绑定的邮箱验证码
        ;

        _proto.sendEmailMaOld = function sendEmailMaOld() {
          var _this3 = this;

          if (GameAllData.bandEmail == "") {
            return;
          }

          this.btnEmailGetOld.interactable = false;
          var cdTime = 60;
          GameAllData.changeEmailTimeOld = 60;

          var func = function func() {
            cdTime--;
            GameAllData.changeEmailTimeOld = cdTime;

            if (cdTime < 1) {
              GameAllData.changeEmailTimeOld = 0;
              _this3.btnEmailGetOld.interactable = true;
              _this3.btnEmailGetOld.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(8014);

              _this3.unschedule(func);

              return;
            }

            _this3.btnEmailGetOld.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120014).format(cdTime);
          };

          this.schedule(func, 1);
          var url = GameAllData.httpServerUrl + "user/email/code";
          HttpMgr.post(url, {
            type: "resetOldEmail"
          }, function (data) {
            if (0 != data.code) {
              TipManager.ChickBox(ConfigFile.findLanguage(data.code));
              return;
            }

            var email = GameAllData.bandEmail;
            email = email.replace(email.substring(6, email.length), "********");
            _this3.LabelShow.string = ConfigFile.findLanguage(8059).format(email);
          });
        } //发送邮箱验证码
        ;

        _proto.sendEmailMa = function sendEmailMa() {
          var _this4 = this;

          if (this.editBoxEmailNum.string == "") {
            TipManager.ChickBox(ConfigFile.findLanguage(8021));
            return;
          }

          if (!NumberUtil.isEamil(this.editBoxEmailNum.string)) {
            TipManager.ChickBox(ConfigFile.findLanguage(8022));
            return;
          }

          this.btnEmailGet.interactable = false;
          var cdTime = 60;
          GameAllData.changeEmailTime = 60;

          var func = function func() {
            cdTime--;
            GameAllData.changeEmailTime = cdTime;

            if (cdTime < 1) {
              GameAllData.changeEmailTime = 0;
              _this4.btnEmailGet.interactable = true;
              _this4.btnEmailGet.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(8014);

              _this4.unschedule(func);

              return;
            }

            _this4.btnEmailGet.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120014).format(cdTime);
          };

          this.schedule(func, 1);
          var url = GameAllData.httpServerUrl + "user/verification/email";
          HttpMgr.post(url, {
            email: this.editBoxEmailNum.string,
            language_id: GameAllData.languageId,
            type: "resetEmail"
          }, function (data) {
            if (0 != data.code) {
              TipManager.ChickBox(ConfigFile.findLanguage(data.code));
              return;
            }
          });
        } //绑定 邮箱
        ;

        _proto.bandingEmail = function bandingEmail() {
          var _this5 = this;

          if (this.editBoxEmailNum.string == "") {
            TipManager.ChickBox(ConfigFile.findLanguage(8021));
            return;
          }

          if (!NumberUtil.isEamil(this.editBoxEmailNum.string)) {
            TipManager.ChickBox(ConfigFile.findLanguage(8022));
            return;
          }

          if (this.editBoxEmailMa.string == "") {
            TipManager.ChickBox(ConfigFile.findLanguage(8013));
            return;
          }

          var url = GameAllData.httpServerUrl + "user/bind/email";
          HttpMgr.post(url, {
            email: this.editBoxEmailNum.string,
            code: this.editBoxEmailMa.string,
            type: "resetEmail",
            old_code: this.editBoxEmailMaOld.string
          }, function (data) {
            if (0 != data.code) {
              TipManager.ChickBox(ConfigFile.findLanguage(data.code));
              return;
            }

            GameAllData.bandEmail = _this5.editBoxEmailNum.string;
            TipManager.ChickBox(ConfigFile.findLanguage(8027));
            UIManager.getInstance().closeUI(SetsafetyCodeBanding);
          });
        } //发送已绑定手机的验证码
        ;

        _proto.sendPhoneMaOld = function sendPhoneMaOld() {
          var _this6 = this;

          this.btnPhoneGetOld.interactable = false;
          var cdTime = 60;
          GameAllData.changePhoneTimeOld = 60;

          var func = function func() {
            cdTime--;
            GameAllData.changePhoneTimeOld = cdTime;

            if (cdTime < 1) {
              GameAllData.changePhoneTimeOld = 0;
              _this6.btnPhoneGetOld.interactable = true;
              _this6.btnPhoneGetOld.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(8014);

              _this6.unschedule(func);

              return;
            }

            _this6.btnPhoneGetOld.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120014).format(cdTime);
          };

          this.schedule(func, 1);
          var url = GameAllData.httpServerUrl + "user/phone/code";
          HttpMgr.post(url, {
            type: "resetOldPhone"
          }, function (data) {
            if (0 != data.code) {
              TipManager.ChickBox(ConfigFile.findLanguage(data.code));
              return;
            }

            var phone = GameAllData.bandPhone;
            phone = phone.replace(phone.substring(6, phone.length), "********");
            _this6.LabelShow.string = ConfigFile.findLanguage(8059).format(phone);
          });
        } //发送手机验证码
        ;

        _proto.sendPhoneMa = function sendPhoneMa() {
          var _this7 = this;

          if (this.editBoxPhoneNum.string == "") {
            TipManager.ChickBox(ConfigFile.findLanguage(8012));
            return;
          }

          this.btnPhoneGet.interactable = false;
          var cdTime = 60;
          GameAllData.changePhoneTime = 60;

          var func = function func() {
            cdTime--;
            GameAllData.changePhoneTime = cdTime;

            if (cdTime < 1) {
              GameAllData.changePhoneTime = 0;
              _this7.btnPhoneGet.interactable = true;
              _this7.btnPhoneGet.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(8014);

              _this7.unschedule(func);

              return;
            }

            _this7.btnPhoneGet.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120014).format(cdTime);
          };

          this.schedule(func, 1);
          var url = GameAllData.httpServerUrl + "user/verification/auth";
          HttpMgr.post(url, {
            mobile_prefix: this.labAreaCode.string,
            mobile: this.editBoxPhoneNum.string,
            language_id: GameAllData.languageId,
            type: "resetPhone"
          }, function (data) {
            if (0 != data.code) {
              TipManager.ChickBox(ConfigFile.findLanguage(data.code));
              return;
            }
          });
        } //绑定 手机号
        ;

        _proto.bandingPhone = function bandingPhone() {
          var _this8 = this;

          if (this.editBoxPhoneNum.string == "") {
            TipManager.ChickBox(ConfigFile.findLanguage(8012));
            return;
          }

          if (this.editBoxPhoneMa.string == "") {
            TipManager.ChickBox(ConfigFile.findLanguage(8013));
            return;
          }

          var url = GameAllData.httpServerUrl + "user/bind/phone";
          HttpMgr.post(url, {
            mobile_prefix: this.labAreaCode.string,
            mobile: this.editBoxPhoneNum.string,
            code: this.editBoxPhoneMa.string,
            language_id: GameAllData.languageId,
            type: "resetPhone",
            old_code: this.editBoxPhoneMaOld.string
          }, function (data) {
            if (0 != data.code) {
              TipManager.ChickBox(ConfigFile.findLanguage(data.code));
              return;
            }

            GameAllData.bandPhone = _this8.labAreaCode.string + _this8.editBoxPhoneNum.string;
            GameAllData.bandPhoneAreaCode = _this8.labAreaCode.string;
            TipManager.ChickBox(ConfigFile.findLanguage(8027));
            UIManager.getInstance().closeUI(SetsafetyCodeBanding);
          });
        } //国家区号设置为选中的
        ;

        _proto.onSelectedAreaCode = function onSelectedAreaCode(data) {
          this.labAreaCode.string = data;
          this.scrAllAreaCode.node.active = false;
        };

        _proto.onClickAreaDropDown = function onClickAreaDropDown() {
          if (this.scrAllAreaCode.node.active) {
            this.scrAllAreaCode.node.active = false;
          } else {
            this.scrAllAreaCode.node.active = true;
          }
        };

        _proto.closeAreaCode = function closeAreaCode() {
          if (this.scrAllAreaCode.node.active) {
            this.scrAllAreaCode.node.active = false;
          }
        } // 初始化默认和所有国家区号
        ;

        _proto.initAllAreaCode = function initAllAreaCode() {
          var _this9 = this;

          this.scrAllAreaCode.content.removeAllChildren();
          AreaCodeConfig.sort(function (a, b) {
            return Number(a.codeNumber) - Number(b.codeNumber);
          });
          this.searchEditBox.placeholder = ConfigFile.findLanguage(8018);
          var areaCode = AreaCodeConfig.find(function (v) {
            return GameAllData.languageId === v.language_id;
          });
          this.labAreaCode.string = "+" + (areaCode ? areaCode.codeNumber : AreaCodeConfig[0].codeNumber);
          AreaCodeConfig.forEach(function (v) {
            var nodAreaCodeItem = instantiate(_this9.pfbAreaCodeItem);
            nodAreaCodeItem.parent = _this9.scrAllAreaCode.content;
            var srtAreaCodeItem = nodAreaCodeItem.getComponent(AreaCodeItem);
            srtAreaCodeItem.data = v;
          });
        };

        _proto.onInputChange = function onInputChange() {
          var _this10 = this;

          var str = this.searchEditBox.string;

          if (str != "") {
            this.scrAllAreaCode.content.removeAllChildren();

            if (Number(str)) {
              AreaCodeConfig.forEach(function (v) {
                var phoneNum = Number(v.codeNumber.substr(0, str.length));

                if (phoneNum == Number(str)) {
                  var nodAreaCodeItem = instantiate(_this10.pfbAreaCodeItem);
                  nodAreaCodeItem.parent = _this10.scrAllAreaCode.content;
                  var srtAreaCodeItem = nodAreaCodeItem.getComponent(AreaCodeItem);
                  srtAreaCodeItem.data = v;
                }
              });
            } else {
              AreaCodeConfig.forEach(function (v) {
                // if(v.Countryname.toLowerCase()==str.toLowerCase()) {
                //     this.onFind(str)
                // }
                var countStr = v.Countryname.substr(0, str.length);

                if (countStr.toLowerCase() == str.toLowerCase()) {
                  // this.onFind(str)
                  var nodAreaCodeItem = instantiate(_this10.pfbAreaCodeItem);
                  nodAreaCodeItem.parent = _this10.scrAllAreaCode.content;
                  var srtAreaCodeItem = nodAreaCodeItem.getComponent(AreaCodeItem);
                  srtAreaCodeItem.data = v;
                }
              });
            }
          } else {
            this.initAllAreaCode();
          }
        };

        return SetsafetyCodeBanding;
      }(BaseUI), _class3.className = "SetsafetyCodeBanding", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "panel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "phone", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "email", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "editBoxPhoneMaOld", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "editBoxPhoneNum", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "editBoxPhoneMa", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "editBoxEmailMaOld", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "editBoxEmailNum", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "editBoxEmailMa", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "LabelShow", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "labAreaCode", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "scrAllAreaCode", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "searchEditBox", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "pfbAreaCodeItem", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "btnPhoneGetOld", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "btnPhoneGet", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "btnEmailGetOld", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "btnEmailGet", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SetSecondaryUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BasePanel.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, BasePanel;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
    }, function (module) {
      BasePanel = module.BasePanel;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _class3;

      cclegacy._RF.push({}, "8e24bO8YXFLw6anURHIcFgK", "SetSecondaryUI", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SetSecondaryUI = exports('SetSecondaryUI', (_dec = ccclass('SetSecondaryUI'), _dec2 = property({
        type: Node,
        displayName: "全部面板"
      }), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(SetSecondaryUI, _BasePanel);

        function SetSecondaryUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "allPanel", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SetSecondaryUI.prototype;

        _proto.setPanel = function setPanel(type, suType) {
          if (suType === void 0) {
            suType = 0;
          }

          this.allPanel.getComponent("SwitchChildrenCC").index = type;
          this.setTextShow(suType);
        };

        _proto.setTextShow = function setTextShow(suType) {
          if (suType === void 0) {
            suType = 0;
          }

          var index = this.allPanel.getComponent("SwitchChildrenCC").index;

          if (index == 5) {
            this.allPanel.children[index].getComponent("SetSecondaryUIEntity").subType = suType;
          }

          this.allPanel.children[index].getComponent("SetSecondaryUIEntity").init();
        };

        _proto.onDestroy = function onDestroy() {
          _BasePanel.prototype.destroy.call(this);
        };

        return SetSecondaryUI;
      }(BasePanel), _class3.className = "SetSecondaryUI", _class3), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "allPanel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SetSecondaryUIEntity.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "bd535TAMoBPU46ccDyImPv5", "SetSecondaryUIEntity", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SetSecondaryUIEntity = exports('SetSecondaryUIEntity', (_dec = ccclass('SetSecondaryUIEntity'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SetSecondaryUIEntity, _Component);

        function SetSecondaryUIEntity() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.subType = 0;
          return _this;
        }

        var _proto = SetSecondaryUIEntity.prototype;

        _proto.init = function init() {};

        _proto.removeEvent = function removeEvent() {};

        return SetSecondaryUIEntity;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SettingInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventManager.ts', './ListenerType.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, EventManager, ListenerType;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      ListenerType = module.ListenerType;
    }],
    execute: function () {
      exports('SIGNSTATUS', void 0);

      cclegacy._RF.push({}, "a72b5EiE3BBKbRk32+PUWjs", "SettingInfo", undefined);

      var SIGNSTATUS;

      (function (SIGNSTATUS) {
        SIGNSTATUS[SIGNSTATUS["SS_NONE"] = 0] = "SS_NONE";
        SIGNSTATUS[SIGNSTATUS["SS_ALREADY"] = 1] = "SS_ALREADY";
        SIGNSTATUS[SIGNSTATUS["SS_WANTING"] = 2] = "SS_WANTING";
        SIGNSTATUS[SIGNSTATUS["SS_CANNOT"] = 3] = "SS_CANNOT";
        SIGNSTATUS[SIGNSTATUS["SS_REPAIR"] = 4] = "SS_REPAIR";
      })(SIGNSTATUS || (SIGNSTATUS = exports('SIGNSTATUS', {})));

      var SettingInfo = exports('SettingInfo', /*#__PURE__*/function () {
        function SettingInfo(prefix) {
          this._storageKey = "SI";
          this._closeSound = false;
          this._closeMusic = false;
          this._volume = 0.8;
          this._PastureTipSet = true;
          this._FarmTipSet = true;
          this._BGNotice = true;
          this._ShellBuyTip = true;
          this.StorageKey = prefix + this._storageKey;
        }

        _createClass(SettingInfo, [{
          key: "StorageKey",
          get: function get() {
            return this._storageKey;
          },
          set: function set(value) {
            this._storageKey = value;
          }
          /**声效开关 */

        }, {
          key: "closeSound",
          get: function get() {
            return this._closeSound;
          },
          set: function set(value) {
            this._closeSound = value;
            EventManager.getInstance().trigger(ListenerType.UPDATEINFO, {
              mode: 3
            });
          }
          /**音乐开关 */

        }, {
          key: "closeMusic",
          get: function get() {
            return this._closeMusic;
          },
          set: function set(value) {
            this._closeMusic = value;
            EventManager.getInstance().trigger(ListenerType.UPDATEINFO, {
              mode: 3
            });
          }
          /**音乐大小*/

        }, {
          key: "volume",
          get: function get() {
            return this._volume;
          },
          set: function set(value) {
            this._volume = value;
            EventManager.getInstance().trigger(ListenerType.UPDATEINFO, {
              mode: 3
            });
          }
          /**牧场通知 */

        }, {
          key: "PastureTipSet",
          get: function get() {
            return this._PastureTipSet;
          },
          set: function set(value) {
            this._PastureTipSet = value;
            EventManager.getInstance().trigger(ListenerType.UPDATEINFO, {
              mode: 3
            });
          }
          /**农场通知 */

        }, {
          key: "FarmTipSet",
          get: function get() {
            return this._FarmTipSet;
          },
          set: function set(value) {
            this._FarmTipSet = value;
            EventManager.getInstance().trigger(ListenerType.UPDATEINFO, {
              mode: 3
            });
          }
          /**后台通知 */

        }, {
          key: "BGNotice",
          get: function get() {
            return this._BGNotice;
          },
          set: function set(value) {
            this._BGNotice = value;
            EventManager.getInstance().trigger(ListenerType.UPDATEINFO, {
              mode: 3
            });
          }
          /**贝壳币购买提示 */

        }, {
          key: "ShellBuyTip",
          get: function get() {
            return this._ShellBuyTip;
          },
          set: function set(value) {
            this._ShellBuyTip = value;
            EventManager.getInstance().trigger(ListenerType.UPDATEINFO, {
              mode: 3
            });
          }
        }]);

        return SettingInfo;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SetUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstLanguage.ts', './EnumDefine.ts', './ConfigFile.ts', './GameAllData.ts', './AudioManager.ts', './GameDataManager.ts', './TipManager.ts', './UIManager.ts', './NodeHelp.ts', './PlatformUtil.ts', './TweenHelp.ts', './BasePanel.ts', './GoogleVerifySetUI.ts', './RechargeView.ts', './SetSecondaryUI.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, Vec3, _decorator, Node, Asset, UIOpacity, Label, Toggle, UITransform, ConstLanguage, EnumDefine, ConfigFile, GameAllData, AudioManager, GameDataManager, TipManager, UIManager, NodeHelp, PlatformUtil, TweenHelper, ETweenType, BasePanel, GoogleVerifySetUI, RechargeView, SetSecondaryUI;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      _decorator = module._decorator;
      Node = module.Node;
      Asset = module.Asset;
      UIOpacity = module.UIOpacity;
      Label = module.Label;
      Toggle = module.Toggle;
      UITransform = module.UITransform;
    }, function (module) {
      ConstLanguage = module.ConstLanguage;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      GameDataManager = module.GameDataManager;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PlatformUtil = module.PlatformUtil;
    }, function (module) {
      TweenHelper = module.TweenHelper;
      ETweenType = module.ETweenType;
    }, function (module) {
      BasePanel = module.BasePanel;
    }, function (module) {
      GoogleVerifySetUI = module.GoogleVerifySetUI;
    }, function (module) {
      RechargeView = module.RechargeView;
    }, function (module) {
      SetSecondaryUI = module.SetSecondaryUI;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _class3;

      cclegacy._RF.push({}, "3256f4q+FhKCb/HzTP4Dprs", "SetUI", undefined);

      var v3_1 = new Vec3();
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SetUI = exports('SetUI', (_dec = ccclass('SetUI'), _dec2 = property({
        type: Node,
        displayName: "面板"
      }), _dec3 = property(Asset), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(SetUI, _BasePanel);

        function SetUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "panel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Manifest", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SetUI.prototype;

        _proto.start = function start() {
          this.setTextShow();
          this.setToggleShow();
          this.node.getComponent("PlayButtonSound").play();
          TweenHelper["default"](this.node.getChildByName("Panel"), ETweenType.Jelly);
          TweenHelper.getTween(this.node.getChildByName("Mask").getComponent(UIOpacity), "open", function (_tween) {
            var sartOpacity = 0;
            var opacity = 150;

            _tween.to(0, {
              opacity: sartOpacity
            }).to(0.1, {
              opacity: opacity
            });
          }).start();
        };

        _proto.onClickedClose = function onClickedClose(anction) {
          if (anction === void 0) {
            anction = true;
          }

          _BasePanel.prototype.onClickedClose.call(this, anction);

          this.node.getChildByName("Mask").getComponent(UIOpacity).opacity = 0;
        };

        _proto.setTextShow = function setTextShow() {
          var _this2 = this;

          NodeHelp.getchildlable(this.panel, "LabelTitle", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.Set_PANEL_TEXT1);
          });
          NodeHelp.getchildlable(this.panel, "ToggleShellBuyTip", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.Set_PANEL_TEXT3);
          });
          NodeHelp.getchildlable(this.panel, "ID", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.Set_PANEL_TEXT2);
          });
          NodeHelp.getchildlable(this.panel, "LabelID", Label, function (comp) {
            comp.string = GameAllData.FarmUserResponse.Id;
          });
          NodeHelp.getchildlable(this.panel, "ButtonCopy", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.Set_PANEL_BUTTON1);
          });
          NodeHelp.getchildlable(this.panel, "ButtonNotice", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.Set_PANEL_BUTTON2);
          });
          NodeHelp.getchildlable(this.panel, "ButtonnoRecharge", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.Set_PANEL_BUTTON3);
          });
          NodeHelp.getchildlable(this.panel, "ButtonAccount", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.Set_PANEL_BUTTON4);
          });
          NodeHelp.getchildlable(this.panel, "ButtonGiftCode", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.Set_PANEL_BUTTON5);
          });
          NodeHelp.getchildlable(this.panel, "ButtonSafety", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(8031);
          });
          NodeHelp.getchildlable(this.panel, "ButtonLanguage", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(109017);
          });
          NodeHelp.getchildlable(this.panel, "Version", Label, function (comp) {
            comp.string = "V" + PlatformUtil.getManifestVersion(_this2.Manifest);
          });
        };

        _proto.setToggleShow = function setToggleShow() {
          NodeHelp.getchildlable(this.panel, "ToggleShellBuyTip", Toggle, function (comp) {
            comp.isChecked = GameDataManager.getInstance().getGameData().settingInfo.ShellBuyTip;
          });
          NodeHelp.getchildlable(this.panel, "ToggleBGNotice", Toggle, function (comp) {
            comp.isChecked = GameDataManager.getInstance().getGameData().settingInfo.BGNotice;
          });
          NodeHelp.getchildlable(this.panel, "ToggleMusic", Toggle, function (comp) {
            comp.isChecked = GameDataManager.getInstance().getGameData().settingInfo.closeMusic;
          });
          NodeHelp.getchildlable(this.panel, "ToggleSound", Toggle, function (comp) {
            comp.isChecked = GameDataManager.getInstance().getGameData().settingInfo.closeSound;
          });
        };

        _proto.onButtonCopy = function onButtonCopy() {
          NodeHelp.getchildlable(this.panel, "LabelID", Label, function (comp) {
            if (PlatformUtil.writeClipboardText(String(comp.string))) TipManager.TipFromCode(7203);
          });
        };

        _proto.onButtonNotice = function onButtonNotice(event) {
          var node = event.target;
          this.openSetSecondaryUI(node, EnumDefine.SetSecondaryType.Notice);
        };

        _proto.onButtonnoRecharge = function onButtonnoRecharge(event) {
          UIManager.getInstance().openUI(RechargeView, 13, function (ui, args) {});
        };

        _proto.onButtonAccount = function onButtonAccount(event) {
          var node = event.target;
          this.openSetSecondaryUI(node, EnumDefine.SetSecondaryType.Account);
        };

        _proto.onButtonGiftCode = function onButtonGiftCode(event) {
          UIManager.getInstance().openUI(RechargeView, 13, function (ui, args) {
            ui.toggleTab.node.getChildByName("Toggle2").getComponent(Toggle).isChecked = true;
            ui.setTabMode(2);
          });
        };

        _proto.onButtonSafety = function onButtonSafety(event) {
          if (GameAllData.IsAccountTypeIsTest) {
            TipManager.SafeCodeInputBox(function () {});
            return;
          }

          if (GameAllData.isBandingPhone || GameAllData.isBandingEmail) {
            UIManager.getInstance().openUI(GoogleVerifySetUI, 12);
          } else {
            var node = event.target; // if(GameAllData.isBandingPhone || GameAllData.isBandingEmail)
            // {
            //     this.openSetSecondaryUI(node, 5)  
            // }else
            // {
            //     this.openSetSecondaryUI(node, EnumDefine.SetSecondaryType.SafetyCode) 
            // }

            this.openSetSecondaryUI(node, 5);
          } // UIManager.getInstance().openUI(GoogleVerifySetUI,9)

        };

        _proto.onButtonLanguage = function onButtonLanguage(event) {
          var node = event.target;
          this.openSetSecondaryUI(node, EnumDefine.SetSecondaryType.Language);
        };

        _proto.onToggleBGNotice = function onToggleBGNotice(event) {
          var Checked = event.target.getComponent(Toggle).isChecked;
          GameDataManager.getInstance().getGameData().settingInfo.BGNotice = Checked;
        };

        _proto.onToggleMusic = function onToggleMusic(event) {
          var Checked = event.target.getComponent(Toggle).isChecked;
          if (GameDataManager.getInstance().getGameData().settingInfo.closeMusic == Checked) return;else {
            GameDataManager.getInstance().getGameData().settingInfo.closeMusic = Checked;
            AudioManager.getInstance().updateMusic();
          }
        };

        _proto.onToggleSound = function onToggleSound(event) {
          var Checked = event.target.getComponent(Toggle).isChecked;
          GameDataManager.getInstance().getGameData().settingInfo.closeSound = Checked;
        };

        _proto.onToggleShellBuyTip = function onToggleShellBuyTip(event) {
          var Checked = event.target.getComponent(Toggle).isChecked;
          GameDataManager.getInstance().getGameData().settingInfo.ShellBuyTip = Checked;
        };

        _proto.openSetSecondaryUI = function openSetSecondaryUI(node, type) {
          node.getWorldPosition(v3_1);
          UIManager.getInstance().openUI(SetSecondaryUI, 12, function (ui, args) {
            ui.startPos = ui.node.parent.getComponent(UITransform).convertToNodeSpaceAR(v3_1);
            ui.setPanel(type);
          }, undefined, null);
        };

        return SetUI;
      }(BasePanel), _class3.className = "SetUI", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "panel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Manifest", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/setUILanguageItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './GameAllData.ts', './MessageManager.ts', './WebSocketMgr.ts', './NodeHelp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Component, ConfigFile, GameAllData, MessageManager, WebSocketMgr, NodeHelp;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "07fec3TBVdFEbvEh9OfTftd", "setUILanguageItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var setUILanguageItem = exports('setUILanguageItem', (_dec = ccclass('setUILanguageItem'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(setUILanguageItem, _Component);

        function setUILanguageItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "ToggleLanguage_1", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ToggleLanguage_2", _descriptor2, _assertThisInitialized(_this));

          _this.config_1 = null;
          _this.config_2 = null;
          _this.print = null;
          return _this;
        }

        var _proto = setUILanguageItem.prototype;

        _proto.init = function init(num, print) {
          var _this2 = this; //this.print.setToggleShow()


          this.print = print;
          var config = ConfigFile.getTLanguage();

          if (config[num * 2]) {
            this.ToggleLanguage_1.active = true;
            this.config_1 = config[num * 2];
            NodeHelp.getchildlable(this.ToggleLanguage_1, "Label", Label, function (comp) {
              comp.string = _this2.config_1.CountryName;
            });
            var language = GameAllData.languageId;

            if (this.config_1 && this.config_1.LanguageCountry == language) {
              this.ToggleLanguage_1.getChildByName("Checkmark").active = true;
            }
          } else {
            this.ToggleLanguage_1.active = false;
          }

          if (config[num * 2 + 1]) {
            this.ToggleLanguage_2.active = true;
            this.config_2 = config[num * 2 + 1];
            NodeHelp.getchildlable(this.ToggleLanguage_2, "Label", Label, function (comp) {
              comp.string = _this2.config_2.CountryName;
            });
            var _language = GameAllData.languageId;

            if (this.config_2 && this.config_2.LanguageCountry == _language) {
              this.ToggleLanguage_2.getChildByName("Checkmark").active = true;
            }
          } else {
            this.ToggleLanguage_2.active = false;
          }
        };

        _proto.setToggleChecked = function setToggleChecked() {
          this.ToggleLanguage_1.getChildByName("Checkmark").active = false;
          this.ToggleLanguage_2.getChildByName("Checkmark").active = false;
        };

        _proto.onClickedOne = function onClickedOne() {
          WebSocketMgr.send(MessageManager.Net.FarmChangeLanguageRequest, {
            Language: this.config_1.LanguageCountry
          });
          GameAllData.languageId = this.config_1.LanguageCountry;
          this.print.setToggleShow();
          this.ToggleLanguage_1.getChildByName("Checkmark").active = true;
        };

        _proto.onClickedTow = function onClickedTow() {
          WebSocketMgr.send(MessageManager.Net.FarmChangeLanguageRequest, {
            Language: this.config_2.LanguageCountry
          });
          GameAllData.languageId = this.config_2.LanguageCountry;
          this.print.setToggleShow();
          this.ToggleLanguage_2.getChildByName("Checkmark").active = true;
        };

        return setUILanguageItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "ToggleLanguage_1", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "ToggleLanguage_2", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StatueUnlockTip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseTip.ts', './GameManager.ts', './MainGame.ts', './producer.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, UITransform, BaseTip, GameManager, MainGame, producer;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      UITransform = module.UITransform;
    }, function (module) {
      BaseTip = module.BaseTip;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      MainGame = module.MainGame;
    }, function (module) {
      producer = module.producer;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "9108ezHE5dO25DxGifiFeHH", "StatueUnlockTip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var StatueUnlockTip = exports('StatueUnlockTip', (_dec = ccclass('StatueUnlockTip'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseTip) {
        _inheritsLoose(StatueUnlockTip, _BaseTip);

        function StatueUnlockTip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseTip.call.apply(_BaseTip, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "producerName", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lock", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Text", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "condition", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = StatueUnlockTip.prototype;

        _proto.initUI = function initUI(arg) {
          if (arg.select) {
            var helf = this.node.getComponent(UITransform).contentSize.height / 2;
            var s = GameManager.getInstance().getGame(MainGame).node.scale;
            this.popHeight = arg.select.node.getComponent(UITransform).contentSize.height * s.x / 2 + helf;
          } else this.popHeight = 100;

          _BaseTip.prototype.initUI.call(this, arg);

          this._cbData = arg;
          this.producerName.string = arg.name;
          producer.replaceDefaultColor(this.producerName, arg.name);
          this.Text.string = arg.text;
          producer.replaceDefaultColor(this.lock, arg.lock); //this.lock.string = arg.lock;

          if (arg.cond) this.condition.string = arg.cond;else this.condition.string = "";
        };

        _proto.update = function update(delay) {
          if (this._cbData.select) {
            var helf = this.node.getComponent(UITransform).contentSize.height / 2;
            var s = GameManager.getInstance().getGame(MainGame).node.scale;
            this.popHeight = this._cbData.select.node.getComponent(UITransform).contentSize.height * s.x / 2 + helf;
          }

          _BaseTip.prototype.update.call(this, delay);
        };

        return StatueUnlockTip;
      }(BaseTip), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "producerName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lock", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "Text", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "condition", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StorageUtil.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _extends, cclegacy, game, Game, log, sys;

  return {
    setters: [function (module) {
      _extends = module.extends;
    }, function (module) {
      cclegacy = module.cclegacy;
      game = module.game;
      Game = module.Game;
      log = module.log;
      sys = module.sys;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1d246l5wlFCco8hQ9em4ZaX", "StorageUtil", undefined);

      var StorageUtil = exports('StorageUtil', /*#__PURE__*/function () {
        function StorageUtil() {} // 只包含成员变量，不包含成员函数
        // 游戏数据引用
        // 需存储的已改变的数据
        // 数据存储同步间隔(单位毫秒)


        StorageUtil.register = function register() {
          var _this = this;

          game.on(Game.EVENT_HIDE, function () {
            // log("游戏隐藏======》")
            log("game onPause - StorageUtil");

            if (_this.intervalId) {
              clearTimeout(_this.intervalId);
              _this.intervalId = null;
            }
          });
          game.on(Game.EVENT_SHOW, function () {
            // WebSocketMgr.close(); 
            // log("游戏展示======》")
            log("game onResume - StorageUtil");
          });
        };

        StorageUtil.getAllLocalData = function getAllLocalData(gameData, callback) {
          var firstLoginKey = this.gameName + "_firstLogin";
          gameData[firstLoginKey] = false;

          for (var key in gameData) {
            if (typeof gameData[key] === "object") {
              this.pureDataCache[key] = _extends({}, gameData[key]);
            } else {
              this.pureDataCache[key] = gameData[key];
            }

            this.gameDataRef[key] = gameData[key];
          }

          var isFirstLogin = this.getLocalItem(firstLoginKey, true);

          if (!isFirstLogin) {
            for (var _key in this.pureDataCache) {
              var value = this.pureDataCache[_key];

              if (value && typeof value === "object") {
                for (var childKey in value) {
                  var localValue = this.getLocalItem(_key + childKey, value[childKey]);
                  this.pureDataCache[_key][childKey] = _extends({}, localValue);
                  gameData[_key][childKey] = localValue;
                }
              } else {
                var _localValue = this.getLocalItem(_key, value);

                this.pureDataCache[_key] = _localValue;
                gameData[_key] = _localValue;
              }
            }
          } else {
            this.setLocalItemImmediately(firstLoginKey, false);

            for (var _key2 in this.pureDataCache) {
              var _value = this.pureDataCache[_key2];

              if (_value && typeof _value === "object") {
                for (var _childKey in _value) {
                  if (_childKey === "_storageKey") {
                    continue;
                  }

                  this.setLocalItemImmediately(_key2 + _childKey, _value[_childKey]);
                }
              } else {
                this.setLocalItemImmediately(_key2, _value);
              }
            }
          }

          callback && callback(isFirstLogin);
        };

        StorageUtil.setLocalItemDefer = function setLocalItemDefer(key, value) {
          // 过滤掉函数字段并断开引用关系
          var cloneValue = _extends({}, value);

          this.pushChangedKey(key, cloneValue);
          this.pureDataCache[key] = cloneValue;
        };

        StorageUtil.setLocalItemImmediately = function setLocalItemImmediately(key, value) {
          this._setData(key, value);
        };

        StorageUtil.getLocalItem = function getLocalItem(key, defaultValue) {
          var value = this._getData(key, defaultValue);

          if (typeof defaultValue == 'boolean') {
            value = this._toBoolean(value, defaultValue);
          } else if (typeof defaultValue == 'number') {
            value = this._toNumber(value, defaultValue);
          } else if (typeof defaultValue == 'object') {
            value = this._toJSON(value, defaultValue);
          }

          return value;
        };

        StorageUtil.getGameDataItem = function getGameDataItem(key) {
          return this.gameDataRef[key];
        };

        StorageUtil.pushChangedKey = function pushChangedKey(key, value) {
          if (typeof value === "object") {
            for (var subKey in value) {
              if (subKey === "_storageKey") {
                continue;
              }

              if (subKey === "TYPES") {
                continue;
              }

              var subValue = value[subKey];

              if (this.pureDataCache[key]) {
                this.keyMap[key + subKey] = {
                  "key": key,
                  "subKey": subKey
                };

                this._syncLocalDataInterval();
              } else {
                this.keyMap[key + subKey] = {
                  "key": key,
                  "subKey": subKey
                };

                this._syncLocalDataInterval();
              }
            }
          } else {
            if (JSON.stringify(this.pureDataCache[key]) !== JSON.stringify(value)) {
              this.keyMap[key] = {
                "key": key,
                "subKey": null
              };

              this._syncLocalDataInterval();
            }
          }
        };

        StorageUtil._syncLocalDataInterval = function _syncLocalDataInterval() {
          var _this2 = this;

          if (!this.intervalId) {
            this.intervalId = setTimeout(function () {
              _this2.intervalId = null;

              _this2._syncLocalData();
            }, this.syncLocalDataInterval);
          }
        };

        StorageUtil._syncLocalData = function _syncLocalData() {
          for (var uniKey in this.keyMap) {
            var keysObj = this.keyMap[uniKey];
            var key = keysObj["key"];
            var subKey = keysObj["subKey"];

            if (!subKey) {
              this._setData(uniKey, this.gameDataRef[key]);
            } else {
              this._setData(uniKey, this.gameDataRef[key][subKey]);
            }
          }

          this.keyMap = {};
        };

        StorageUtil._setData = function _setData(key, value) {
          if (typeof value === "object") {
            value = JSON.stringify(value);
          } //PlatformManager.getInstance().Platform.setItem(key,value)


          sys.localStorage.setItem(key, value);
        };

        StorageUtil._getData = function _getData(key, defaultValue) {
          var ret = sys.localStorage.getItem(key); //let ret = PlatformManager.getInstance().Platform.getItem(key);

          if ((ret == null || ret === "null" || ret === "") && defaultValue != null) {
            console.log("key=", key, "value=", ret);
            ret = defaultValue;
          }

          return ret;
        };

        StorageUtil._toBoolean = function _toBoolean(src, def) {
          if (typeof src == 'boolean') {
            return src;
          } else if (src == null || src == "") {
            return def;
          } else if (src == "false") {
            return false;
          } else if (src == "true") {
            return true;
          }
        };

        StorageUtil._toNumber = function _toNumber(src, def) {
          var ret = Number(src);

          if (isNaN(ret)) {
            return def;
          } else {
            return ret;
          }
        };

        StorageUtil._toJSON = function _toJSON(src, def) {
          try {
            var ret = JSON.parse(src);

            if (typeof ret == 'object' && ret) {
              return ret;
            } else {
              return def;
            }
          } catch (e) {
            return def;
          }
        };

        return StorageUtil;
      }());
      StorageUtil.gameName = "EYEGame";
      StorageUtil.pureDataCache = {};
      StorageUtil.gameDataRef = {};
      StorageUtil.keyMap = {};
      StorageUtil.intervalId = null;
      StorageUtil.syncLocalDataInterval = 1000;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StringExtension.ts", ['cc'], function () {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "85c1bk+r3FHf5RqunqKCFt+", "StringExtension", undefined);

      String.prototype.format = function () {
        for (var _len = arguments.length, param = new Array(_len), _key = 0; _key < _len; _key++) {
          param[_key] = arguments[_key];
        } //将arguments转化为数组（ES5中并非严格的数组）


        var args = Array.prototype.slice.call(arguments);
        var count = 0; //通过正则替换%s

        return this.replace(/%s/g, function (s, i) {
          return args[count++];
        });
      };

      String.prototype.formati = function (str) {
        //通过正则替换%s
        return this.replace(/%s/i, str);
      };

      String.prototype.iconformat = function () {
        for (var _len2 = arguments.length, param = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          param[_key2] = arguments[_key2];
        } //将arguments转化为数组（ES5中并非严格的数组）


        var args = Array.prototype.slice.call(arguments);
        var count = 0; //通过正则替换%s

        return this.replace(/%i/g, function (s, i) {
          return args[count++];
        });
      };

      String.prototype.iformat = function () {
        for (var _len3 = arguments.length, param = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          param[_key3] = arguments[_key3];
        } //将arguments转化为数组（ES5中并非严格的数组）


        var args = Array.prototype.slice.call(arguments);
        return this.replace(/\[%i\]/g, args[0]);
      };

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SwitchChildrenCC.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './NumberUtil.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Component, NumberUtil;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "56aabPk+vhDXpx6fPjci8ZX", "SwitchChildrenCC", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var SwitchChildrenCC = exports('SwitchChildrenCC', (_dec = ccclass('SwitchChildrenCC'), _dec2 = property({
        displayName: "反向显示"
      }), _dec3 = property({
        step: 1,
        displayName: "显示索引"
      }), _dec4 = property({
        serializable: true
      }), _dec(_class = executeInEditMode(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SwitchChildrenCC, _Component);

        function SwitchChildrenCC() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.EventType = {
            CHANGE: "CHANGE"
          };
          _this.backupDescribe = "只显示一个子节点";

          _initializerDefineProperty(_this, "noIndex", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_index", _descriptor2, _assertThisInitialized(_this));

          _this.onEditorUpdateData = _this.updateChildren;
          return _this;
        }

        var _proto = SwitchChildrenCC.prototype;

        _proto.onEnable = function onEnable() {
          this.updateChildren();
        };

        _proto.setIndex = function setIndex(index) {
          if (typeof index == "string") index = Number(index);
          this.index = index;
        };

        _proto.updateChildren = function updateChildren() {
          for (var i = 0; i < this.node.children.length; i++) {
            this.node.children[i].active = this.noIndex ? i != this._index : i == this._index;
          }
        };

        _createClass(SwitchChildrenCC, [{
          key: "index",
          get: function get() {
            return this._index;
          },
          set: function set(vlaue) {
            if (vlaue == this._index) return;
            this._index = NumberUtil.clampf(vlaue, 0, this.node.children.length - 1);
            this.updateChildren(); //this.node.emit(this.EventType.CHANGE, this._index)
          }
        }]);

        return SwitchChildrenCC;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "noIndex", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "index", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "index"), _class2.prototype), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_index", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TalkUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './GameAllData.ts', './TaskManager.ts', './UIManager.ts', './producer.ts', './UIHelp.ts', './BaseUI.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, RichText, tween, Vec3, Input, ConfigFile, GameAllData, TaskManager, UIManager, producer, UIHelp, BaseUI;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      RichText = module.RichText;
      tween = module.tween;
      Vec3 = module.Vec3;
      Input = module.Input;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      TaskManager = module.TaskManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      BaseUI = module.BaseUI;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _class3;

      cclegacy._RF.push({}, "8ef12Bpv7ZGGIww5sQZ0nKx", "TalkUI", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TalkUI = exports('TalkUI', (_dec = ccclass('TalkUI'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Label), _dec6 = property(RichText), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(TalkUI, _BaseUI);

        function TalkUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "bg", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Hand", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Bar", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nameRole", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "text", _descriptor5, _assertThisInitialized(_this));

          _this.exitCb = null;
          _this._curTime = 0;
          _this._lastTime = 0;
          _this._talkData = null;
          _this._index = 0;
          _this._task = null;
          return _this;
        }

        var _proto = TalkUI.prototype;

        _proto.initUI = function initUI(task, args, cb) {
          var self = this;
          this._curTime = UIHelp.getTimeMask();
          this._task = task;
          this.exitCb = cb;
          this.Hand.active = false;
          this._talkData = task.talk.split(",");
          this._index = 0;
          var config = ConfigFile.getRoleInfoByRoleId(GameAllData.FarmUserResponse.RoleModeId);

          if (config) {
            this.nameRole.string = ConfigFile.findLanguage(config.RoleName);
          }

          this.Bar.setScale(0, 1, 1);
          tween(this.Bar).to(0.5, {
            scale: new Vec3(1, 1, 1)
          }).call(function () {
            self.next();
          }).start();
        };

        _proto.next = function next() {
          this._lastTime = UIHelp.getTimeMask();

          if (this._index >= this._talkData.length) {
            this.CloseUI();
          } else {
            var talkcode = this._talkData[this._index];
            this.text.string = "<color=#000000>" + producer.getMessageText(talkcode) + "</color>";
            this._index++;
          }
        };

        _proto.CloseUI = function CloseUI() {
          TaskManager.getInstance().onTalkEnd(this._task);
          UIManager.getInstance().closeUI(TalkUI);
        };

        _proto.onLoad = function onLoad() {
          this.bg.on(Input.EventType.TOUCH_START, this.onBeginTouch.bind(this));
        };

        _proto.onDestroy = function onDestroy() {
          this.exitCb && this.exitCb(this._task);

          _BaseUI.prototype.onDestroy.call(this);
        };

        _proto.start = function start() {};

        _proto.onBeginTouch = function onBeginTouch(event) {
          if (UIHelp.getTimeDiff(this._lastTime) > 50) {
            this._lastTime = UIHelp.getTimeMask();
            this.next();
          }
        };

        _proto.update = function update(deltaTime) {
          if (!this.Hand.active && UIHelp.getTimeDiff(this._curTime) > 2000) {
            this.Hand.active = true;
          }
        };

        return TalkUI;
      }(BaseUI), _class3.className = "TalkUI", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bg", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Hand", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "Bar", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "nameRole", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "text", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TaskConfig.ts", ['cc', './EnumDefine.ts', './ConfigFile.ts', './GameAllData.ts'], function (exports) {
  'use strict';

  var cclegacy, EnumDefine, Configname, propType;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      Configname = module.Configname;
    }, function (module) {
      propType = module.propType;
    }],
    execute: function () {
      cclegacy._RF.push({}, "5ac60CCphxNzJHDVtmXM0S2", "TaskConfig", undefined);

      var TaskConfig = exports('TaskConfig', [{
        id: 1001,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.ExperienceUI,
        uiData: propType.VIP,
        type: ""
      }, {
        id: 1002,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.ExperienceUI,
        uiData: propType.TITLE,
        type: ""
      }, {
        id: 1003,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.UIHouse,
        uiData: null,
        type: ""
      }, {
        id: 1005,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.ExperienceUI,
        uiData: propType.VIP,
        type: ""
      }, {
        id: 1006,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.PerformanceView,
        uiData: null,
        type: ""
      }, {
        id: 1007,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.PerformanceView,
        uiData: null,
        type: ""
      }, {
        id: 1008,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.PerformanceView,
        uiData: null,
        type: ""
      }, {
        id: 1009,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.PerformanceView,
        uiData: null,
        type: ""
      }, {
        id: 1010,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.PerformanceView,
        uiData: null,
        type: ""
      }, {
        id: 1011,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.FarmLand,
        uiData: 1,
        type: ""
      }, {
        id: 1012,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.Pasture,
        uiData: 1,
        type: ""
      }, {
        id: 2001,
        configName: Configname.TItemInfo,
        configIdName: "ItemId",
        configField: "Name",
        goUiName: EnumDefine.TaskFindType.MarketView,
        uiData: null,
        type: ""
      }, {
        id: 2002,
        configName: Configname.TItemInfo,
        configIdName: "ItemId",
        configField: "Name",
        goUiName: EnumDefine.TaskFindType.MarketView,
        uiData: null,
        type: ""
      }, {
        id: 2003,
        configName: Configname.TItemInfo,
        configIdName: "ItemId",
        configField: "Name",
        goUiName: EnumDefine.TaskFindType.MarketView,
        uiData: null,
        type: ""
      }, {
        id: 2004,
        configName: Configname.TItemInfo,
        configIdName: "ItemId",
        configField: "Name",
        goUiName: EnumDefine.TaskFindType.UIShop,
        uiData: null,
        type: ""
      }, {
        id: 2005,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.RechargeView,
        uiData: 1,
        type: ""
      }, {
        id: 2006,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.UIConchExchange,
        uiData: 2,
        type: ""
      }, {
        id: 2007,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.UIConchExchange,
        uiData: 1,
        type: ""
      }, {
        id: 2008,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.RechargeView,
        uiData: 2,
        type: ""
      }, {
        id: 2009,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.FamilyView,
        uiData: null,
        type: ""
      }, {
        id: 2010,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.FamilyView,
        uiData: null,
        type: ""
      }, {
        id: 2011,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.FamilyView,
        uiData: null,
        type: ""
      }, {
        id: 2012,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.FamilyView,
        uiData: null,
        type: ""
      }, {
        id: 2013,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.FamilyView,
        uiData: null,
        type: ""
      }, {
        id: 2014,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.FamilyView,
        uiData: null,
        type: ""
      }, {
        id: 2015,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.FamilyView,
        uiData: null,
        type: ""
      }, {
        id: 2016,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.FamilyView,
        uiData: null,
        type: ""
      }, {
        id: 2017,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.FamilyView,
        uiData: null,
        type: ""
      }, {
        id: 2018,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.FarmLand,
        uiData: 1,
        type: ""
      }, {
        id: 2019,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.FarmLand,
        uiData: 1,
        type: ""
      }, {
        id: 2020,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.FarmLand,
        uiData: 1,
        type: ""
      }, {
        id: 2021,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.Pasture,
        uiData: 1,
        type: ""
      }, {
        id: 2022,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.Pasture,
        uiData: 1,
        type: ""
      }, {
        id: 2023,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.Pasture,
        uiData: 1,
        type: ""
      }, {
        id: 2024,
        configName: Configname.TItemInfo,
        configIdName: "ItemId",
        configField: "Name",
        goUiName: EnumDefine.TaskFindType.FarmLand,
        uiData: 1,
        type: ""
      }, {
        id: 2025,
        configName: Configname.TItemInfo,
        configIdName: "ItemId",
        configField: "Name",
        goUiName: EnumDefine.TaskFindType.Pasture,
        uiData: 1,
        type: ""
      }, {
        id: 2026,
        configName: Configname.TItemInfo,
        configIdName: "ItemId",
        configField: "Name",
        goUiName: EnumDefine.TaskFindType.FarmLand,
        uiData: 1,
        type: ""
      }, {
        id: 2027,
        configName: Configname.TItemInfo,
        configIdName: "ItemId",
        configField: "Name",
        goUiName: EnumDefine.TaskFindType.Pasture,
        uiData: 1,
        type: ""
      }, {
        id: 2028,
        configName: Configname.TLandInfo,
        configIdName: "LandId",
        configField: "LandName",
        goUiName: EnumDefine.TaskFindType.FarmLand,
        uiData: 1,
        type: ""
      }, {
        id: 2029,
        configName: Configname.TFenceInfo,
        configIdName: "FenceId",
        configField: "FenceName",
        goUiName: EnumDefine.TaskFindType.Pasture,
        uiData: 1,
        type: ""
      }, {
        id: 2030,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.InvitationCodeView,
        uiData: null,
        type: ""
      }, {
        id: 2031,
        configName: Configname.TStatueInfo,
        configIdName: "Kind",
        configField: "StatueName",
        goUiName: EnumDefine.TaskFindType.Build,
        uiData: 4001,
        type: ""
      }, {
        id: 2033,
        configName: "",
        configIdName: "",
        configField: "",
        goUiName: EnumDefine.TaskFindType.TaskUI,
        uiData: "",
        type: ""
      }]);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TaskConfigGoManager.ts", ['cc', './EnumDefine.ts', './GameAllData.ts', './WebSocketMgr.ts', './MainGame.ts', './ExperienceUI.ts', './FamilyView.ts', './InvitationCodeView.ts', './MarketView.ts', './PerformanceView.ts', './RechargeView.ts', './UIConchExchange.ts', './UIGame.ts', './UIHouse.ts', './UIShop.ts', './GameManager.ts', './MessageManager.ts', './TaskManager.ts', './UIManager.ts'], function (exports) {
  'use strict';

  var cclegacy, _decorator, Toggle, resources, instantiate, EnumDefine, propType, WebSocketMgr, MainGame, ExperienceUI, FamilyView, InvitationCodeView, MarketView, PerformanceView, RechargeView, UIConchExchange, UIGame, UIHouse, UIShop, GameManager, MessageManager, TaskManager, UIManager;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Toggle = module.Toggle;
      resources = module.resources;
      instantiate = module.instantiate;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      propType = module.propType;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      MainGame = module.MainGame;
    }, function (module) {
      ExperienceUI = module.ExperienceUI;
    }, function (module) {
      FamilyView = module.FamilyView;
    }, function (module) {
      InvitationCodeView = module.InvitationCodeView;
    }, function (module) {
      MarketView = module.MarketView;
    }, function (module) {
      PerformanceView = module.PerformanceView;
    }, function (module) {
      RechargeView = module.RechargeView;
    }, function (module) {
      UIConchExchange = module.UIConchExchange;
    }, function (module) {
      UIGame = module.UIGame;
    }, function (module) {
      UIHouse = module.UIHouse;
    }, function (module) {
      UIShop = module.UIShop;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      TaskManager = module.TaskManager;
    }, function (module) {
      UIManager = module.UIManager;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "e4696q8KehFh4hszjEb3Zmw", "TaskConfigGoManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TaskConfigGoManager = exports('TaskConfigGoManager', (_dec = ccclass('TaskConfigGoManager'), _dec(_class = /*#__PURE__*/function () {
        function TaskConfigGoManager() {}

        TaskConfigGoManager.goUIByTaskFindType = function goUIByTaskFindType(info, uiData) {
          switch (info) {
            case EnumDefine.TaskFindType.Build:
              {
                var game = GameManager.getInstance().getGame(MainGame);
                var data = this.getClickTarget(EnumDefine.TaskFindType.Build, uiData);

                if (data.producer) {
                  game.mapAlignmentToNodeCenter(data.producer.node, true);
                  this.getJiantou(data.producer.node);
                }

                break;
              }

            case EnumDefine.TaskFindType.FarmLand:
              {
                var _game = GameManager.getInstance().getGame(MainGame);

                var _data = this.getClickTarget(EnumDefine.TaskFindType.FarmLand, uiData);

                if (_data.producer) {
                  _game.mapAlignmentToNodeCenter(_data.producer.node.parent, true);

                  this.getJiantou(_data.producer.node.parent);
                }

                break;
              }

            case EnumDefine.TaskFindType.Pasture:
              {
                var _game2 = GameManager.getInstance().getGame(MainGame);

                var _data2 = this.getClickTarget(EnumDefine.TaskFindType.Pasture, uiData);

                if (_data2.producer) {
                  _game2.mapAlignmentToNodeCenter(_data2.producer.node.parent, true);

                  this.getJiantou(_data2.producer.node.parent);
                }

                break;
              }

            case EnumDefine.TaskFindType.ExperienceUI:
              {
                var PropName = propType.VIP;
                if (uiData) PropName = uiData;
                UIManager.getInstance().openUI(ExperienceUI, 11, function (ui, args) {
                  ui.PropName = PropName;
                  TaskManager.getInstance().onWindowsOpen("ExpreienceUI+" + ui.PropName);
                }, undefined, null);
                break;
              }

            case EnumDefine.TaskFindType.FamilyView:
              {
                UIManager.getInstance().openUI(FamilyView, 11, function (ui, args) {}, undefined, null);
                break;
              }

            case EnumDefine.TaskFindType.InvitationCodeView:
              {
                UIManager.getInstance().openUI(InvitationCodeView, 12, function (ui, args) {});
                break;
              }

            case EnumDefine.TaskFindType.MarketView:
              {
                UIManager.getInstance().openUI(MarketView, 11, function (ui, args) {
                  WebSocketMgr.send(MessageManager.Net.FarmClientActionRequest, {
                    Action: 1
                  });
                }, undefined, null);
                break;
              }

            case EnumDefine.TaskFindType.PerformanceView:
              {
                UIManager.getInstance().openUI(PerformanceView, 12, function (ui, args) {});
                break;
              }

            case EnumDefine.TaskFindType.RechargeView:
              {
                if (uiData && uiData == 2) UIManager.getInstance().openUI(RechargeView, 13, function (ui, args) {
                  ui.toggleTab.node.getChildByName("Toggle2").getComponent(Toggle).isChecked = true;
                  ui.setTabMode(2);
                });else UIManager.getInstance().openUI(RechargeView, 13, function (ui, args) {});
                break;
              }

            case EnumDefine.TaskFindType.UIConchExchange:
              {
                var num = 1;
                if (uiData) num = uiData;
                UIManager.getInstance().openUI(UIConchExchange, 12, function (ui, args) {
                  ui.initUI(num);
                });
                break;
              }

            case EnumDefine.TaskFindType.UIHouse:
              {
                UIManager.getInstance().openUI(UIHouse, 99, function (ui, arg) {
                  ui.initUI();
                }, null, null);
                break;
              }

            case EnumDefine.TaskFindType.UIShop:
              {
                UIManager.getInstance().openUI(UIShop, 11, function (ui, args) {}, undefined, null);
                break;
              }
          }
        };

        TaskConfigGoManager.getClickTarget = function getClickTarget(Type, id) {
          var producer = null;
          var game = GameManager.getInstance().getGame(MainGame);

          if (Type == EnumDefine.TaskFindType.FarmLand) {
            producer = game.getFarmLandFromID(id);
          } else if (Type == EnumDefine.TaskFindType.Pasture) {
            producer = game.getPastureFromID(id);
          } else if (Type == EnumDefine.TaskFindType.Build) {
            producer = game.getBuildFromName(id);
          }

          return {
            Type: Type,
            producer: producer
          };
        };

        TaskConfigGoManager.getJiantou = function getJiantou(node) {
          resources.load("prefabs/game/jiantouAnimation", function (error, res) {
            if (res) {
              var wnd = UIManager.getInstance().getUI(UIGame);
              if (wnd.nodePoint.children.length >= 1) return;
              var jiantou = instantiate(res);
              jiantou.parent = wnd.nodePoint;
              jiantou.setWorldPosition(node.getWorldPosition());
              var comp = jiantou.getComponent("jiantouAnimation");
              comp.initUI({
                target: node
              });
              comp.setDestroy();
            }
          });
        };

        return TaskConfigGoManager;
      }()) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TaskManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventManager.ts', './GameManager.ts', './UIManager.ts', './MainGame.ts', './TalkUI.ts', './GameAllData.ts', './UIStory.ts', './MessageManager.ts', './WebSocketMgr.ts'], function (exports) {
  'use strict';

  var _extends, cclegacy, EventManager, GameManager, UIManager, MainGame, TalkUI, GameAllData, UIStory, MessageManager, WebSocketMgr;

  return {
    setters: [function (module) {
      _extends = module.extends;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      MainGame = module.MainGame;
    }, function (module) {
      TalkUI = module.TalkUI;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      UIStory = module.UIStory;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }],
    execute: function () {
      exports({
        ERRORTYPE: void 0,
        TaskState: void 0
      });

      cclegacy._RF.push({}, "37f30chOIxAz4CWEgKSlT98", "TaskManager", undefined);

      var TaskState;

      (function (TaskState) {
        TaskState[TaskState["TS_ACCESS"] = 1] = "TS_ACCESS";
        TaskState[TaskState["TS_PROPEL"] = 2] = "TS_PROPEL";
        TaskState[TaskState["TS_FINISH"] = 3] = "TS_FINISH";
        TaskState[TaskState["TS_FAIL"] = 4] = "TS_FAIL";
        TaskState[TaskState["TS_WAITEVENT"] = 5] = "TS_WAITEVENT";
      })(TaskState || (TaskState = exports('TaskState', {})));

      var ERRORTYPE; //target   farm = 农田 pasture = 牧场 build=建筑
      //unit   指target指向的建设单位
      //时间变化      time
      //数据变化      data
      //单位属性变化  unit
      //动物属性变化  animal
      //任务状态变化  taskfinish
      //游戏阶段     enterGame
      //操作状态  actionstate
      //网络返回事件 response
      //播放的故事
      //fameland 应为农田 farmland 这里是拼写错误

      (function (ERRORTYPE) {
        ERRORTYPE[ERRORTYPE["ET_NONE"] = 0] = "ET_NONE";
        ERRORTYPE[ERRORTYPE["ET_MONERY"] = 1] = "ET_MONERY";
        ERRORTYPE[ERRORTYPE["ET_VIP"] = 2] = "ET_VIP";
        ERRORTYPE[ERRORTYPE["ET_RANK"] = 3] = "ET_RANK";
        ERRORTYPE[ERRORTYPE["ET_SOCKET"] = 4] = "ET_SOCKET";
        ERRORTYPE[ERRORTYPE["ET_ITEM"] = 5] = "ET_ITEM";
        ERRORTYPE[ERRORTYPE["ET_STEALCOUNT"] = 6] = "ET_STEALCOUNT";
        ERRORTYPE[ERRORTYPE["ET_STEAL"] = 7] = "ET_STEAL";
        ERRORTYPE[ERRORTYPE["ET_LEVEL"] = 8] = "ET_LEVEL";
      })(ERRORTYPE || (ERRORTYPE = exports('ERRORTYPE', {})));

      var taskData = [{
        id: 1,
        active: "enterGame",
        activecond: "",
        target: "story,1",
        wndtype: 2,
        talk: "",
        preTask: "",
        signal: "",
        completion: "TALK,true",
        nextTask: -1
      }, {
        id: 2,
        active: "enterGame",
        activecond: "fameland,1,0",
        target: "story,2",
        wndtype: 2,
        talk: "",
        preTask: "",
        signal: "4",
        completion: "UNLOCK,any",
        nextTask: 0
      }, // { id: 3, active: "openWnd", activecond: "ExpreienceUI+vip", target: "story,3", wndtype: 2, talk: "", preTask: "", signal: "", completion: "UNLOCK,false", nextTask: 0 },
      {
        id: 4,
        active: "clickBuild",
        activecond: "fameland,1,0",
        target: "story,2",
        wndtype: 2,
        talk: "",
        preTask: "",
        signal: "2",
        completion: "UNLOCK,false",
        nextTask: 0
      }, {
        id: 5,
        active: "response",
        activecond: "fameland,1,LandUnlock,true",
        target: "story,4",
        wndtype: 2,
        talk: "",
        preTask: "",
        signal: "",
        completion: "UNLOCK,false",
        nextTask: 0
      } // { id: 6, active: "actionstate", activecond: "fameland,1,SOWING,false,1", target: "story,5", wndtype: 2, talk: "", preTask: "", signal: "", completion: "UNLOCK,false", nextTask: 0 },
      // { id: 7, active: "response", activecond: "fameland,1,LandPlant,true", target: "story,6", wndtype: 2, talk: "", preTask: "", signal: "", completion: "UNLOCK,false", nextTask: 0 },
      // { id: 8, active: "taskfinish", activecond: "task,7", target: "story,7", wndtype: 2, talk: "", preTask: "", signal: "", completion: "UNLOCK,false", nextTask: 0 },
      // { id: 9, active: "openWnd", activecond: "UIHouse", target: "story,8", wndtype: 2, talk: "", preTask: "", signal: "", completion: "UNLOCK,false", nextTask: 0 },
      // { id: 10, active: "taskfinish", activecond: "task,9", target: "story,9", wndtype: 2, talk: "", preTask: "", signal: "11,12", completion: "UNLOCK,false", nextTask: 0 },
      // { id: 11, active: "taskfinish", activecond: "task,10", target: "story,10", wndtype: 2, talk: "", preTask: "", signal: "12", completion: "UNLOCK,false", nextTask: 0 },
      // { id: 12, active: "clickBuild", activecond: "pasture,1,0", target: "story,10", wndtype: 2, talk: "", preTask: "", signal: "", completion: "UNLOCK,false", nextTask: 0 },
      // { id: 13, active: "openWnd", activecond: "ExpreienceUI+title", target: "story,11", wndtype: 2, talk: "", preTask: "", signal: "", completion: "UNLOCK,false", nextTask: 0 },
      // { id: 14, active: "clickBuild", activecond: "pasture,1,1,CANBREED", target: "story,12", wndtype: 2, talk: "", preTask: "", signal: "", completion: "UNLOCK,false", nextTask: 0 },
      // //没有钱
      // { id: 15, active: "actionstate", activecond: "pasture,1,CANBREED,false,1", target: "story,13", wndtype: 2, talk: "", preTask: "", signal: "", completion: "UNLOCK,false", nextTask: 0 },
      // { id: 16, active: "response", activecond: "pasture,1,LandBreed,true", target: "story,14", wndtype: 2, talk: "", preTask: "", signal: "", completion: "UNLOCK,false", nextTask: 0 },
      // { id: 17, active: "response", activecond: "pasture,1,PastureUnlock,true", target: "story,15", wndtype: 2, talk: "", preTask: "", signal: "", completion: "UNLOCK,false", nextTask: 14 },
      // //没有没有食物
      // { id: 18, active: "actionstate", activecond: "pasture,1,CANBREED,false,5", target: "story,16", wndtype: 2, talk: "", preTask: "", signal: "", completion: "UNLOCK,false", nextTask: 0 },
      // //没有位置
      // //{ id: 19, active: "actionstate", activecond: "pasture,1,CANBREED,false,4", target: "story,17", wndtype: 2, talk: "", preTask: "", signal: "", completion: "UNLOCK,false", nextTask: 0 },
      // { id: 20, active: "clickBuild", activecond: "fameland,1,1,HARVEST", target: "story,18", wndtype: 2, talk: "", preTask: "", signal: "", completion: "UNLOCK,false", nextTask: 0 },
      // { id: 21, active: "response", activecond: "fameland,1,HarvestPlant,true", target: "story,19", wndtype: 2, talk: "", preTask: "", signal: "", completion: "UNLOCK,false", nextTask: 0 },
      ];
      var TaskManager = exports('TaskManager', /*#__PURE__*/function () {
        TaskManager.getInstance = function getInstance() {
          if (this.instance == null) {
            this.instance = new TaskManager();
          }

          return this.instance;
        };

        function TaskManager() {
          //taskState = GameDataManager.getInstance().getGameData().roleInfo.Task;
          this.clickWnd = null;
          this.waitPopTask = [];
          this.taskLock = false;
          this.moveLock = false;
          this.moveMapLock = false;
          this.clickLastTime = 0;
          this.tskState = {};
          this.asErrorType = ERRORTYPE.ET_NONE;
          this.asOperaArgs = {};
        }

        var _proto = TaskManager.prototype;

        _proto.haveTalk = function haveTalk(task) {
          return task.talk && task.talk != "";
        };

        _proto.getClickTarget = function getClickTarget(task) {
          var cond = task.split(",");
          if (cond.length < 2) return null;
          var producer = null;
          var game = GameManager.getInstance().getGame(MainGame);

          if (cond[0] == "farm" || cond[0] == "fameland") {
            producer = game.getFarmLandFromID(Number(cond[1]));
          } else if (cond[0] == "pasture") {
            producer = game.getPastureFromID(Number(cond[1]));
          } else if (cond[0] == "build") {
            producer = game.getBuildFromID(Number(cond[1]));
          }

          return producer;
        };

        _proto.checkTarget = function checkTarget(target, task) {
          var cond = task.split(",");
          if (cond.length < 2) return false;

          if (cond.length == 2) {
            if (cond[0] == target.getType() && cond[1] == target.getID().toString()) {
              return true;
            }
          } else if (cond.length == 3) {
            if (cond[0] == target.getType() && cond[1] == target.getID().toString() && cond[2] == target.getLevel().toString()) {
              return true;
            }
          } else if (cond.length == 4) {
            if (cond[0] == target.getType() && cond[1] == target.getID().toString() && cond[2] == target.getLevel().toString() && target.getState() == cond[3]) {
              return true;
            }
          }

          return false;
        };

        _proto.checkTargetCond = function checkTargetCond(taskCond) {
          if (taskCond == "") return true;
          var cond = taskCond.split(",");
          if (cond.length < 3) return false;
          var target = this.getClickTarget(taskCond);

          if (cond.length == 3) {
            if (cond[1] == target.getID().toString() && cond[2] == target.getLevel().toString()) {
              return true;
            }
          }

          return false;
        };

        _proto.checkActiveCond = function checkActiveCond(task, target) {
          if (!task) return false;
          var userData = GameAllData.FarmUserResponse;
          var info = task.activecond.split(",");

          if (info[0] == "unit") {
            if (!target) return false;
            if (info[1] == "level" && target.level == Number(info[2])) return true;
          } else if (info[0] == "user") {
            if (info[1] == "vip" && userData.VipLevel == Number(info[2])) return true;
            if (info[1] == "rank" && userData.RankLevel == Number(info[2])) return true;
          }

          return false;
        };

        _proto.nextTask = function nextTask(task) {
          if (!task) return;
          var next = this.getTaskConfig(task.nextTask);
          if (!next) return;
          if (this.isTaskFinish(next.id)) return;

          if (this.canExecTask(next)) {
            var args = {};
            var data = {
              task: next,
              cb: null,
              args: args
            };
            this.waitPopTask.push(data);
          }
        };

        _proto.directlyStartTask = function directlyStartTask(taskData) {
          var task = taskData.task;
          var args = taskData.args;
          var self = this;

          var cb = function cb(task) {
            self.taskLock = false;
            var tdindex = self.waitPopTask.findIndex(function (item) {
              return item.task.id == task.id;
            });

            if (tdindex >= 0) {
              var td = self.waitPopTask[tdindex];
              self.nextTask(td);
              td && td.cb && td.cb(td.task);
              self.waitPopTask.splice(tdindex, 1);
              setTimeout(function () {
                self.checkTaskArray();
              }, 1);
            }
          };

          console.log("开始任务 id=>", task.id);

          if (task.wndtype == 2) {
            this.taskLock = true;
            this.showTalk(task, args, cb);
          } else if (task.wndtype == 1) {
            this.taskLock = true;
            this.showTalk(task, args, cb);
          } else {
            console.log("未定义任务类型");
            this.taskLock = false;
            taskData.cb && taskData.cb(taskData.task);
          }
        };

        _proto.checkTaskArray = function checkTaskArray() {
          if (this.waitPopTask.length > 0 && !this.taskLock) {
            this.directlyStartTask(this.waitPopTask[0]);
          }
        };

        _proto.canExecTask = function canExecTask(task) {
          var _this = this;

          var haveTask = this.waitPopTask.find(function (item) {
            return item.task.id == task.id;
          });

          if (haveTask) {
            console.log("任务已经存在 id=>", task.id);
            return false;
          }

          if (!task.signal || task.signal == "") return true;
          var sArray = task.signal.split(",");

          if (sArray.length > 0) {
            var _loop = function _loop(index) {
              var sid = Number(sArray[index]);
              haveTask = _this.waitPopTask.find(function (item) {
                return item.task.id == sid;
              });

              if (haveTask) {
                console.log("有互斥任务=>", sid);
                return {
                  v: false
                };
              }
            };

            for (var index = 0; index < sArray.length; index++) {
              var _ret = _loop(index);

              if (typeof _ret === "object") return _ret.v;
            }
          }

          return true;
        };

        _proto.startTask = function startTask(task, args, cb) {
          if (!task) return false;
          if (GameAllData.visitState) return false;
          if (WebSocketMgr.wsState() != 1) return;
          console.log("任务过入准备 id=>", task.id);
          if (!this.canExecTask(task)) return false;
          var data = {
            task: task,
            cb: cb,
            args: args
          };
          this.waitPopTask.push(data);
          this.checkTaskArray();
          return true;
        };

        _proto.isTaskFinish = function isTaskFinish(id) {
          if (this.tskState[id.toString()]) return true;
          return false;
        };

        _proto.getTaskConfig = function getTaskConfig(id) {
          return taskData.find(function (item) {
            return item.id == id;
          });
        };

        _proto.findTask = function findTask(acitve) {
          var _this2 = this;

          var select = taskData.filter(function (item) {
            return item.active == acitve;
          });
          var target = select.find(function (item) {
            return !_this2.isTaskFinish(item.id) && _this2.checkTargetCond(item.activecond);
          });
          return target;
        };

        _proto.isPreTaskState = function isPreTaskState(task) {
          var _this3 = this;

          if (task.preTask && task.preTask != "") {
            var array = task.preTask.split(",");
            var isRet = true;
            array.forEach(function (element) {
              if (!_this3.isTaskFinish(Number(element))) {
                isRet = false;
              }
            });
            return isRet;
          } else {
            return true;
          }
        } //开始第一个任务
        ;

        _proto.startEntryGameTask = function startEntryGameTask(cb) {
          var _this4 = this;

          if (GameAllData.visitState) return false;
          var args = {};
          var t = this.findTask("enterGame");

          if (!t) {
            //前置任务己完成的
            var select = taskData.filter(function (item) {
              return item.active == "taskfinish" && !_this4.isTaskFinish(item.id);
            });
            var target = select.find(function (item) {
              var t = item.activecond.split(",");
              return _this4.isTaskFinish(Number(t[1]));
            });

            if (!target) {
              console.log("没有进入触发的事件");
              cb && cb();
              return false;
            }

            return this.startTask(target, args, cb);
          }

          return this.startTask(t, args, cb);
        };

        _proto.startFirstTask = function startFirstTask(cb) {
          //如果任务1己经做过了直接返回
          if (GameAllData.visitState) return;

          if (this.isTaskFinish(1)) {
            console.log("1号任务己经做过了");
            cb && cb();
            return;
          } //没有这个任务配置


          var task = this.getTaskConfig(1);

          if (!task) {
            console.log("没有进入触发的事件");
            cb && cb();
            return;
          }

          var args = {};
          this.startTask(task, args, cb);
        };

        _proto.showTalk = function showTalk(task, args, cb) {
          if (task.wndtype == 1) {
            UIManager.getInstance().openUI(TalkUI, 70, function (ui, arg) {
              ui.initUI(task, args, cb);
            }, null, null);
          } else if (task.wndtype == 2) {
            UIManager.getInstance().openUI(UIStory, 70, function (ui, arg) {
              ui.initUI(task, args, cb);
            }, null, null);
          }
        };

        _proto.findTaskFinish = function findTaskFinish(cond) {
          var _this5 = this;

          var select = taskData.filter(function (item) {
            return item.active == "taskfinish" && _this5.isPreTaskState(item);
          });
          var target = select.find(function (item) {
            return !_this5.isTaskFinish(item.id) && cond == item.activecond;
          });
          return target;
        };

        _proto.finishTask = function finishTask(id) {
          this.tskState[id.toString()] = {
            finish: 1
          };
          var taskString = JSON.stringify(this.tskState);
          EventManager.getInstance().trigger(MessageManager.Custom.UPDATATASKDATA, {
            text: taskString
          });
          console.log("完成了任务==>", id);
          var self = this;
          var cond = "task," + id;
          var select = this.findTaskFinish(cond);
          var args = {};

          if (select) {
            setTimeout(function () {
              self.startTask(select, args, null);
            }, 2);
          }
        };

        _proto.onTalkEnd = function onTalkEnd(task) {
          if (this.isTaskFinish(task.id)) {
            console.log("己经完成");
            return;
          }

          var cond = task.completion.split(",");

          if (cond[0] == "TALK" && cond[1] == "true") {
            this.finishTask(task.id);
          }
        };

        _proto.findWndFromClassName = function findWndFromClassName(WndClass, ctlpath) {
          var wnd = UIManager.getInstance().getUIFromName(WndClass);
          if (!wnd) return null;
          var ctlnode = wnd.node.getChildByPath(ctlpath);

          if (!ctlnode) {
            console.log("未找到路径=>", ctlpath);
          }

          return ctlnode;
        };

        _proto.checkClickEnd = function checkClickEnd(mode, target, task) {
          if (this.isTaskFinish(task.id)) {
            console.log("己经完成");
            return;
          }

          if (!this.checkTarget(target, task.target)) return;
          var cond = task.completion.split(",");

          if (cond[0] == "UNLOCK" && mode == "UNLOCK") {
            this.finishTask(task.id);
          }
        };

        _proto.findClickProducerTask = function findClickProducerTask(target) {
          var _this6 = this;

          var select = taskData.filter(function (item) {
            return item.active == "clickBuild" && _this6.isPreTaskState(item);
          });
          var ret = select.find(function (item) {
            if (_this6.isTaskFinish(item.id)) return false;
            return _this6.checkTarget(target, item.activecond);
          });
          return ret;
        };

        _proto.onDataResponse = function onDataResponse(mode, data) {
          if (!data) return;
          var self = this;
          var cond = "";

          if (data.select) {
            var target = data.select;
            cond += target.getType() + "," + target.getID() + ",";
          }

          cond += mode + "," + "true";
          var select = this.findResponse(cond);
          var args = {};
          args["select"] = data.select;
          args["mode"] = mode;

          if (select) {
            setTimeout(function () {
              self.startTask(select, args, null);
            }, 4);
          }

          EventManager.getInstance().trigger(MessageManager.Custom.TASKEVENT, {
            c: mode,
            target: data.select
          });
        };

        _proto.onClickProducer = function onClickProducer(target, uipos) {
          if (!target) return;
          console.log("on click ==>", target.getType());
          EventManager.getInstance().trigger(MessageManager.Custom.TASKEVENT, {
            c: "click",
            target: target
          });
          var task = this.findClickProducerTask(target);
          var self = this;
          var args = {};
          args["select"] = target;

          if (task) {
            self.startTask(task, args, null);
          }
        };

        _proto.onClickAnimal = function onClickAnimal(target, uipos) {
          if (!target) return;
        };

        _proto.findActionState = function findActionState(cond) {
          var _this7 = this;

          var select = taskData.filter(function (item) {
            return item.active == "actionstate" && _this7.isPreTaskState(item);
          });
          var target = select.find(function (item) {
            return !_this7.isTaskFinish(item.id) && cond == item.activecond;
          });
          return target;
        };

        _proto.findResponse = function findResponse(cond) {
          var _this8 = this;

          var select = taskData.filter(function (item) {
            return item.active == "response" && _this8.isPreTaskState(item);
          });
          var target = select.find(function (item) {
            return !_this8.isTaskFinish(item.id) && cond == item.activecond;
          });
          return target;
        };

        _proto.onActionState = function onActionState(mode, data, state, args) {
          if (state == undefined) return;
          console.log("onActionState=>", mode, " value=", state);
          var self = this;

          var argss = _extends({}, args);

          var target = data.select;
          var cond = target.getType() + "," + target.getID() + "," + mode + "," + state;
          var select = this.findActionState(cond);

          if (!select) {
            cond = target.getType() + "," + target.getID() + "," + mode + "," + state + "," + args.asErrorType;
            select = this.findActionState(cond);
          }

          if (select) {
            setTimeout(function () {
              self.startTask(select, argss, null);
            }, 2);
          }

          EventManager.getInstance().trigger(MessageManager.Custom.TASKEVENT, {
            c: "actionstate",
            target: cond
          });
        };

        _proto.onCtlClick = function onCtlClick(ctlnode) {
          if (!ctlnode) return;
          console.log("click ctl =>", ctlnode.name);
          EventManager.getInstance().trigger(MessageManager.Custom.TASKEVENT, {
            c: "clickCtl",
            target: ctlnode
          });
        };

        _proto.findClickOperaBtn = function findClickOperaBtn(aid, ctlnode, className) {
          var _this9 = this;

          var cond = ctlnode.getType() + "," + ctlnode.getID() + "," + ctlnode.getLevel() + "," + className;
          var select = taskData.filter(function (item) {
            return item.active == aid && _this9.isPreTaskState(item);
          });
          var target = select.find(function (item) {
            return !_this9.isTaskFinish(item.id) && cond == item.activecond;
          });
          return target;
        };

        _proto.onShowOperaBtn = function onShowOperaBtn(ctlnode, mode) {
          if (!ctlnode) return;
          console.log("showOperaBtn =>", mode);
          var self = this;
          var clickTask = this.findClickOperaBtn("showOperaBtn", ctlnode, mode);
          var args = {};
          args["select"] = ctlnode;
          args["mode"] = mode;

          if (clickTask) {
            setTimeout(function () {
              self.startTask(clickTask, args, null);
            }, 2);
          }else{
            setTimeout(function () {
              self.startTask(clickTask, args, null);
            }, 2);
          }

          EventManager.getInstance().trigger(MessageManager.Custom.TASKEVENT, {
            c: "showOperaBtn",
            target: mode
          });
        };

        _proto.onClickOperaBtn = function onClickOperaBtn(ctlnode, mode) {
          if (!ctlnode) return;
          console.log("clickOperaBtn =>", mode);
          var self = this;
          var clickTask = this.findClickOperaBtn("clickOperaBtn", ctlnode, mode);
          var args = {};
          args["select"] = ctlnode;
          args["mode"] = mode;

          if (clickTask) {
            setTimeout(function () {
              self.startTask(clickTask, args, null);
            }, 2);
          }

          EventManager.getInstance().trigger(MessageManager.Custom.TASKEVENT, {
            c: "clickOperaBtn",
            target: mode
          });
        };

        _proto.findWindowsOpen = function findWindowsOpen(className) {
          var _this10 = this;

          var select = taskData.filter(function (item) {
            return item.active == "openWnd" && _this10.isPreTaskState(item);
          });
          var target = select.find(function (item) {
            if (_this10.isTaskFinish(item.id)) return false;
            if (className != item.activecond) return false;
            return true;
          });
          return target;
        };

        _proto.onWindowsOpen = function onWindowsOpen(classname) {
          console.log("onWindowsOpen =>", classname);
          var self = this;
          var winopen = this.findWindowsOpen(classname);
          console.log(winopen);
          var args = {};

          if (winopen) {
            setTimeout(function () {
              self.startTask(winopen, args, null);
            }, 2);
          }

          EventManager.getInstance().trigger(MessageManager.Custom.TASKEVENT, {
            c: "openwindow",
            target: classname
          });
        };

        _proto.onWindowsClose = function onWindowsClose(classname) {
          console.log("onWindowsClose =>", classname);
          EventManager.getInstance().trigger(MessageManager.Custom.TASKEVENT, {
            c: "closewindow",
            target: classname
          });
        };

        _proto.onTaskPropel = function onTaskPropel() {};

        _proto.checkGameEvent = function checkGameEvent(value) {};

        return TaskManager;
      }());
      TaskManager.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TaskTalkUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './GameAllData.ts', './MessageManager.ts', './WebSocketMgr.ts', './NodeHelp.ts', './TweenHelp.ts', './BasePanel.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, Node, Label, SpriteFrame, UIOpacity, Sprite, ConfigFile, GameAllData, MessageManager, WebSocketMgr, NodeHelp, TweenHelper, ETweenType, BasePanel;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      SpriteFrame = module.SpriteFrame;
      UIOpacity = module.UIOpacity;
      Sprite = module.Sprite;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      TweenHelper = module.TweenHelper;
      ETweenType = module.ETweenType;
    }, function (module) {
      BasePanel = module.BasePanel;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _class3;

      cclegacy._RF.push({}, "08498msAhJDEIfiWdPz55na", "TaskTalkUI", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TaskTalkUI = exports('TaskTalkUI', (_dec = ccclass('TaskTalkUI'), _dec2 = property({
        type: Node,
        displayName: "面板"
      }), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(SpriteFrame), _dec8 = property(SpriteFrame), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(TaskTalkUI, _BasePanel);

        function TaskTalkUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "panel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "IconLead", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "IconRole", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nameLead", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nameRole", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sexone", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sextow", _descriptor7, _assertThisInitialized(_this));

          _this.Talkconfig = null;
          _this.config = [];
          _this.taskRight = false;
          _this.tasklift = false;
          _this.configIndex = 0;
          _this.LastIndex = 0;
          return _this;
        }

        var _proto = TaskTalkUI.prototype;

        _proto.start = function start() {
          NodeHelp.getchildlable(this.IconLead, "tip", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(109502);
          });
          NodeHelp.getchildlable(this.IconRole, "tip", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(109502);
          });
          var config = ConfigFile.getRoleInfoByRoleId(GameAllData.FarmUserResponse.RoleModeId);

          if (config) {
            this.nameLead.string = ConfigFile.findLanguage(config.RoleName);
          }

          this.node.getComponent("PlayButtonSound").play();
          TweenHelper["default"](this.panel, ETweenType.Jelly);
          TweenHelper.getTween(this.node.getChildByName("Mask").getComponent(UIOpacity), "open", function (_tween) {
            var sartOpacity = 0;
            var opacity = 150;

            _tween.to(0, {
              opacity: sartOpacity
            }).to(0.1, {
              opacity: opacity
            });
          }).start();
        };

        _proto.onClickedClose = function onClickedClose(anction) {
          if (anction === void 0) {
            anction = true;
          }

          _BasePanel.prototype.onClickedClose.call(this, anction);

          this.config = null;
          this.node.getChildByName("Mask").getComponent(UIOpacity).opacity = 0;
        };

        _proto.setData = function setData(Talkconfig) {
          if (!Talkconfig.Talk || Talkconfig.Talk == "") {
            return;
          }

          this.Talkconfig = Talkconfig;
          var datas = Talkconfig.Talk.split(";");

          for (var _iterator = _createForOfIteratorHelperLoose(datas), _step; !(_step = _iterator()).done;) {
            var data = _step.value;
            if (data == "") continue;
            var dataIds = data.split(",");
            var config = ConfigFile.getTTalkSegmentInfoByIDSection(Number(dataIds[0]), Number(dataIds[1]));
            this.config = this.config.concat(config);
          }

          this.taskRight = false;
          this.configIndex = 0;
          this.LastIndex = 0;
          this.setShow();
        };

        _proto.setShow = function setShow() {
          var config = this.config[this.configIndex];

          if (config) {
            var Left = config.RoleTalkLeft;
            var right = config.RoleTalkRight;

            if (Left && !this.tasklift) {
              this.tasklift = true;
              this.newShow(Left, 1, config);
            } else if (right && !this.taskRight) {
              this.taskRight = true;
              this.newShow(right, 2, config);
            } else {
              this.configIndex += 1;
              this.taskRight = false;
              this.tasklift = false;
              this.setShow();
            }
          } else {
            WebSocketMgr.send(MessageManager.Net.FarmTaskTalkRequest, {
              TaskModeId: this.Talkconfig.TaskId
            });
            this.onClickedClose();
          }
        };

        _proto.newShow = function newShow(id, direction, config) {
          var _this2 = this;

          var text = ConfigFile.findLanguage(id);

          if (direction == 1) {
            var rsex = GameAllData.FarmUserResponse && GameAllData.FarmUserResponse.Sex || 1;
            this.IconLead.active = true;
            this.IconLead.setSiblingIndex(0);
            this.IconLead.getComponent(Sprite).spriteFrame = rsex == 1 ? this.sexone : this.sextow;
            NodeHelp.getchildlable(this.IconLead, "Label", Label, function (comp) {
              comp.string = text;
            });
            if (this.LastIndex == direction) ;else {
              TweenHelper.getTween(this.IconLead, "up", function (_tween) {
                var v3T = _this2.IconLead.position;
                var v3T2 = v3T.clone();
                v3T2.x = v3T.x + 50;
                v3T2.y = v3T.y + 50;

                _tween.to(0.2, {
                  position: v3T2
                });
              }).start();
              TweenHelper.getTween(this.IconLead.getComponent(UIOpacity), "opacityup", function (_tween) {
                var opacity = 255;

                _tween.to(0.2, {
                  opacity: opacity
                });
              }).start();

              if (this.IconRole.active) {
                TweenHelper.getTween(this.IconRole, "down", function (_tween) {
                  var v3T = _this2.IconRole.position;
                  var v3T2 = v3T.clone();
                  v3T2.x = v3T.x - 50;
                  v3T2.y = v3T.y - 50;

                  _tween.to(0.2, {
                    position: v3T2
                  });
                }).start();
                TweenHelper.getTween(this.IconRole.getComponent(UIOpacity), "opacitydow", function (_tween) {
                  var opacity = 0;

                  _tween.to(0.2, {
                    opacity: opacity
                  });
                }).start();
              }
            }
          } else {
            var _rsex = 1;
            var role = ConfigFile.getRoleInfoByRoleId(config.TalkRole);

            if (role) {
              _rsex = role.RoleSex;
              this.nameRole.string = ConfigFile.findLanguage(role.RoleName);
            }

            this.IconRole.active = true;
            this.IconRole.setSiblingIndex(0);
            this.IconRole.getComponent(Sprite).spriteFrame = _rsex == 1 ? this.sexone : this.sextow;
            NodeHelp.getchildlable(this.IconRole, "Label", Label, function (comp) {
              comp.string = text;
            });
            if (this.LastIndex == direction) ;else {
              TweenHelper.getTween(this.IconRole, "up", function (_tween) {
                var v3T = _this2.IconRole.position;
                var v3T2 = v3T.clone();
                v3T2.x = v3T.x + 50;
                v3T2.y = v3T.y + 50;

                _tween.to(0.2, {
                  position: v3T2
                });
              }).start();
              TweenHelper.getTween(this.IconRole.getComponent(UIOpacity), "opacityup", function (_tween) {
                var opacity = 255;

                _tween.to(0.2, {
                  opacity: opacity
                });
              }).start();

              if (this.IconLead.active) {
                TweenHelper.getTween(this.IconLead, "down", function (_tween) {
                  var v3T = _this2.IconLead.position;
                  var v3T2 = v3T.clone();
                  v3T2.x = v3T.x - 50;
                  v3T2.y = v3T.y - 50;

                  _tween.to(0.2, {
                    position: v3T2
                  });
                }).start();
                TweenHelper.getTween(this.IconLead.getComponent(UIOpacity), "opacitydow", function (_tween) {
                  var opacity = 0;

                  _tween.to(0.2, {
                    opacity: opacity
                  });
                }).start();
              }
            }
          }

          this.LastIndex == direction;
        };

        _proto.onchick = function onchick() {
          this.setShow();
        };

        return TaskTalkUI;
      }(BasePanel), _class3.className = "TaskTalkUI", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "panel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "IconLead", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "IconRole", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "nameLead", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "nameRole", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "sexone", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "sextow", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TaskUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './GameManager.ts', './MessageManager.ts', './WebSocketMgr.ts', './MainGame.ts', './DateUtil.ts', './GList.ts', './NodeHelp.ts', './Pool.ts', './TweenHelp.ts', './UIHelp.ts', './BasePanel.ts', './BagUIItemTip.ts', './TaskUIItem.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, Node, Prefab, ScrollView, Label, Sprite, ToggleContainer, Toggle, instantiate, UIOpacity, Input, UITransform, v3, Widget, ProgressBar, sys, resources, SpriteFrame, ConfigFile, GameAllData, EventManager, GameManager, MessageManager, WebSocketMgr, MainGame, DateUtil, GList, NodeHelp, PoolOnce, TweenHelper, ETweenType, UIHelp, BasePanel, BagUIItemTip, TaskUIItem;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      ScrollView = module.ScrollView;
      Label = module.Label;
      Sprite = module.Sprite;
      ToggleContainer = module.ToggleContainer;
      Toggle = module.Toggle;
      instantiate = module.instantiate;
      UIOpacity = module.UIOpacity;
      Input = module.Input;
      UITransform = module.UITransform;
      v3 = module.v3;
      Widget = module.Widget;
      ProgressBar = module.ProgressBar;
      sys = module.sys;
      resources = module.resources;
      SpriteFrame = module.SpriteFrame;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      MainGame = module.MainGame;
    }, function (module) {
      DateUtil = module.DateUtil;
    }, function (module) {
      GList = module.GList;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      TweenHelper = module.TweenHelper;
      ETweenType = module.ETweenType;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      BasePanel = module.BasePanel;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }, function (module) {
      TaskUIItem = module.TaskUIItem;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _class3;

      cclegacy._RF.push({}, "893cf6QRZRGqpgKpoKbS6KH", "TaskUI", undefined);
      /**item高度*/


      var ItemH = 98;
      var Space = 6;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TaskUI = exports('TaskUI', (_dec = ccclass('TaskUI'), _dec2 = property({
        type: Node,
        displayName: "面板"
      }), _dec3 = property(Prefab), _dec4 = property(Prefab), _dec5 = property(Prefab), _dec6 = property(Prefab), _dec7 = property(Prefab), _dec8 = property(Prefab), _dec9 = property(Node), _dec10 = property(Node), _dec11 = property(ScrollView), _dec12 = property(Node), _dec13 = property(Node), _dec14 = property(Node), _dec15 = property(ScrollView), _dec16 = property(ScrollView), _dec17 = property(Label), _dec18 = property(Label), _dec19 = property(Label), _dec20 = property(Label), _dec21 = property(Sprite), _dec22 = property(ToggleContainer), _dec23 = property(Node), _dec24 = property(Node), _dec25 = property(Toggle), _dec26 = property(Toggle), _dec27 = property(Toggle), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(TaskUI, _BasePanel);

        function TaskUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "panel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "TaskItem", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rewardItem", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "DailyTaskItem", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rewardTipsItem", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ActivityTaskItem", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ActivityTaskTipItem", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Mainline", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "SideQuest", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrollView", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "LayBox", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "LayDaily", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "LayEveryDay", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dailyScrollView", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "EveryDayScrollView", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jinduLabel", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "shareTitle", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "shareLabel", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "shareShowLabel", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "shareBigRewardIcon", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tc", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rewardTips", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tip", _descriptor23, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Toggle1", _descriptor24, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Toggle2", _descriptor25, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Toggle3", _descriptor26, _assertThisInitialized(_this));

          _this.chicktaskModeId = -1;
          _this.Itemcomps = null;
          _this.activityTaskItemcomps = null;
          _this.DailyItemcomps = null;
          _this.activityTaskTipcomps = null;
          _this.ItemGeneratorOver = true;
          _this.updateOver = true;
          _this.updateGo = false;
          _this.Datalist = [];
          _this.nextShow = -1;
          _this.dailyNextShow = -1;
          _this.remainTime = 0;
          _this.everyDayGList = null;
          _this.finishTaskNum = 0;
          _this.maxShareNum = 4;
          _this.ExchangeMode = 1;
          _this.Pool = new PoolOnce(30, function () {
            return instantiate(_this.TaskItem);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          _this.RewardPool = new PoolOnce(30, function () {
            return instantiate(_this.rewardItem);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          _this.dailyPool = new PoolOnce(30, function () {
            return instantiate(_this.DailyTaskItem);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          _this.activityTaskPool = new PoolOnce(30, function () {
            return instantiate(_this.ActivityTaskItem);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          _this.ActivityTaskTipPool = new PoolOnce(10, function () {
            return instantiate(_this.ActivityTaskTipItem);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          return _this;
        }

        var _proto = TaskUI.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this.setTextShow();
          this.node.getComponent("PlayButtonSound").play();
          TweenHelper["default"](this.node.getChildByName("Panel"), ETweenType.Jelly);
          TweenHelper.getTween(this.node.getChildByName("Mask").getComponent(UIOpacity), "open", function (_tween) {
            var sartOpacity = 0;
            var opacity = 150;

            _tween.to(0, {
              opacity: sartOpacity
            }).to(0.1, {
              opacity: opacity
            });
          }).start();
          this.scrollView.node.on(ScrollView.EventType.SCROLLING, this.scrollViewShow, this);
          this.scrollView.node.on(ScrollView.EventType.SCROLL_BEGAN, this.closeTip, this);
          this.scrollView.node.on(Input.EventType.TOUCH_START, this.closeTip, this);
          this.dailyScrollView.node.on(Input.EventType.TOUCH_START, this.closeTip, this);
          this.dailyScrollView.node.on(ScrollView.EventType.SCROLL_BEGAN, this.closeTip, this);
          this.EveryDayScrollView.node.on(Input.EventType.TOUCH_START, this.closeTip, this);
          this.EveryDayScrollView.node.on(ScrollView.EventType.SCROLL_BEGAN, this.closeTip, this);
          EventManager.getInstance().add(MessageManager.Custom.TaskChange, this, this.onEventTaskChange);
          EventManager.getInstance().add(MessageManager.Net.FarmTaskShareSuccessResponse, this, this.onTaskShareSuccessResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmTaskFinishResponse, this, this.onTaskFinishSuccessResponse);
          EventManager.getInstance().add(MessageManager.Custom.PropOnChange, this, this.setEveryDayShow);
          this.node.getChildByName("Panel").on(Input.EventType.TOUCH_START, this.onCloseTip, this);
          NodeHelp.getchildlable(this.LayEveryDay, "ScrollView", ScrollView, function (comp, node) {
            _this2.everyDayGList = new GList(comp, _this2.TaskItem, ItemH, false, Space);
          });
          this.onEventTaskChange(1);

          if (this.ExchangeMode == 1) {
            this.tc.toggleItems[0].isChecked = true;
            this.setExchangeMode(1);
          } else if (this.ExchangeMode == 2) {
            this.tc.toggleItems[1].isChecked = true;
            this.setExchangeMode(2);
          } else if (this.ExchangeMode == 3) {
            this.tc.toggleItems[2].isChecked = true;
            this.setExchangeMode(3);
          }

          this.initRewardTips();
        };

        _proto.initUI = function initUI(mode) {
          this.ExchangeMode = mode;
        };

        _proto.onClickedClose = function onClickedClose(anction) {
          if (anction === void 0) {
            anction = true;
          }

          _BasePanel.prototype.onClickedClose.call(this, anction);

          this.unscheduleAllCallbacks();
          this.clearItem();
          BagUIItemTip.getInstance().tipDestroy();
          this.RewardPool.clear();
          this.Pool.clear();
          this.dailyPool.clear();
          if (this.everyDayGList) this.everyDayGList.Dispose();
          this.activityTaskPool.clear();
          NodeHelp.getchildlable(this.rewardTips, "RewardBox", null, function (comp, node) {
            node.destroyAllChildren();
          });
          this.scrollView.node.off(ScrollView.EventType.SCROLLING, this.scrollViewShow, this);
          this.scrollView.node.off(ScrollView.EventType.SCROLL_BEGAN, this.closeTip, this);
          this.dailyScrollView.node.off(ScrollView.EventType.SCROLL_BEGAN, this.closeTip, this);
          this.scrollView.node.off(Input.EventType.TOUCH_START, this.closeTip, this);
          this.dailyScrollView.node.off(Input.EventType.TOUCH_START, this.closeTip, this);
          this.EveryDayScrollView.node.off(Input.EventType.TOUCH_START, this.closeTip, this);
          this.EveryDayScrollView.node.off(ScrollView.EventType.SCROLL_BEGAN, this.closeTip, this);
          EventManager.getInstance().remove(MessageManager.Custom.TaskChange, this, this.onEventTaskChange);
          EventManager.getInstance().remove(MessageManager.Net.FarmTaskShareSuccessResponse, this, this.onTaskShareSuccessResponse);
          EventManager.getInstance().remove(MessageManager.Net.FarmTaskFinishResponse, this, this.onTaskFinishSuccessResponse);
          EventManager.getInstance().remove(MessageManager.Custom.PropOnChange, this, this.setEveryDayShow);
          this.node.getChildByName("Panel").off(Input.EventType.TOUCH_START, this.onCloseTip, this);
          this.node.getChildByName("Mask").getComponent(UIOpacity).opacity = 0;
          this.ExchangeMode = 1;
        };

        _proto.setTextShow = function setTextShow() {
          NodeHelp.getchildlable(this.panel, "LabTitle", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(6500);
          });
          NodeHelp.getchildlable(this.Mainline, "TitleBG", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(6501);
          });
          NodeHelp.getchildlable(this.SideQuest, "TitleBG", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(6502);
          });
          NodeHelp.getchildlable(this.rewardTips, "titile", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(231918);
          });
          this.shareTitle.string = ConfigFile.findLanguage(231918);
          this.shareLabel.string = ConfigFile.findLanguage(231921); // this.shareShowLabel.node.active = false;

          this.shareShowLabel.string = ConfigFile.findLanguage(300001);
        }; //1为初始化2为改变


        _proto.onEventTaskChange = function onEventTaskChange(type) {
          if (GameAllData.DayFarmTaskUpdateResponse && GameAllData.DayFarmTaskUpdateResponse.length >= 1) {
            while (GameAllData.DayFarmTaskUpdateResponse.length >= 1) {
              var actionData = GameAllData.DayFarmTaskUpdateResponse.shift(); //任务数据改变

              if (actionData.Action == 0) {
                var data = {
                  ID: actionData.ID,
                  TaskModeId: actionData.TaskModeId,
                  conditions: actionData.conditions,
                  TalkState: actionData.TalkState,
                  TaskState: actionData.TaskState,
                  TaskType: actionData.TaskType
                };
                GameAllData.FarmTaskListResponse.taskList.push(data);
              } else {
                var i = 0;

                for (var _iterator = _createForOfIteratorHelperLoose(GameAllData.FarmTaskListResponse.taskList), _step; !(_step = _iterator()).done;) {
                  var item = _step.value;

                  if (actionData.TaskModeId == item.TaskModeId) {
                    if (actionData.Action == 1) {
                      if (actionData.TaskType == 4) {
                        GameAllData.FarmTaskListResponse.taskList.splice(i, 1);
                      } else {
                        item.TaskState = actionData.TaskState;
                      }

                      if (actionData.Get) {
                        var game = GameManager.getInstance().getGame(MainGame);
                        game.onProcessGet(game._UICamera.node, actionData.Get);
                      }

                      break;
                    } else if (actionData.Action == 2) {
                      item.conditions = actionData.conditions;
                      break;
                    } else {
                      item.conditions = actionData.conditions;
                      item.TaskState = actionData.TaskState;
                    }
                  }

                  i++;
                }
              }
            }
          }

          this.clearItem();
          this.bubbleSort();
          this.setScrollViewContent();
          this.getItemGenerator();
          this.setEveryDayShow();
          this.setActivityTasks();
          this.setEveryDayTasks();
          this.setTaskBtn();
        };

        _proto.onTaskShareSuccessResponse = function onTaskShareSuccessResponse(data) {
          console.log("分享返回code--------?>>", data.Code); // this.clearItem()
          // this.bubbleSort()
          // this.getItemGenerator()
        };

        _proto.onTaskFinishSuccessResponse = function onTaskFinishSuccessResponse(data) {
          console.log("领奖返回code--------?>>", data.Code); // this.clearItem()
          // this.bubbleSort()
          // this.getItemGenerator()
        };

        _proto.bubbleSort = function bubbleSort() {
          if (!GameAllData.FarmTaskListResponse || !GameAllData.FarmTaskListResponse.taskList || GameAllData.FarmTaskListResponse.taskList.length < 1) {
            return;
          }

          this.Datalist = GameAllData.FarmTaskListResponse.taskList.slice();

          if (!this.Datalist || this.Datalist.length < 1) {
            return;
          }

          var i = this.Datalist.length,
              j;
          var tempExchangVal;

          while (i > 0) {
            for (j = 0; j < i - 1; j++) {
              var configJ = ConfigFile.getTTaskInfoByTaskId(this.Datalist[j].TaskModeId);
              var configJAdd = ConfigFile.getTTaskInfoByTaskId(this.Datalist[j + 1].TaskModeId);

              if (!configJAdd || !configJ) {
                continue;
              }

              if (configJ.TaskSort > configJAdd.TaskSort || configJAdd.TaskType == 1) {
                tempExchangVal = this.Datalist[j];
                this.Datalist[j] = this.Datalist[j + 1];
                this.Datalist[j + 1] = tempExchangVal;
              }
            }

            i--;
          }

          i = this.Datalist.length, j;

          while (i > 0) {
            for (j = 0; j < i - 1; j++) {
              var taskJ = this.Datalist[j].TaskState;
              var taskJAdd = this.Datalist[j + 1].TaskState;

              if (taskJ == null || !taskJAdd == null) {
                continue;
              }

              if (taskJ > taskJAdd) {
                tempExchangVal = this.Datalist[j];
                this.Datalist[j] = this.Datalist[j + 1];
                this.Datalist[j + 1] = tempExchangVal;
              }
            }

            i--;
          }
        };

        _proto.clearItem = function clearItem() {
          if (this.Itemcomps && this.Itemcomps.length >= 1) {
            while (this.Itemcomps.length >= 1) {
              var item = this.Itemcomps.pop();
              item.clearRewardBox();
              item.data = null;
              item.tag = null;
              this.Pool.put(item.node);
            }
          }

          if (this.DailyItemcomps && this.DailyItemcomps.length >= 1) {
            while (this.DailyItemcomps.length >= 1) {
              var _item = this.DailyItemcomps.pop();

              _item.clearRewardBox();

              _item.data = null;
              _item.tag = null;
              this.dailyPool.put(_item.node);
            }
          }

          if (this.activityTaskItemcomps && this.activityTaskItemcomps.length >= 1) {
            while (this.activityTaskItemcomps.length >= 1) {
              var _item2 = this.activityTaskItemcomps.pop();

              this.activityTaskPool.put(_item2.node);
            }
          }

          this.Datalist = null;
          this.setMainLine();
        };

        _proto.getItemGenerator = function getItemGenerator() {
          var _this3 = this;

          if (!this.Datalist || this.Datalist.length < 1) return;
          this.finishTaskNum = 0;
          var i = 0;
          var k = 0;
          var j = 0;
          var lastShareTaskData;

          var func = function func() {
            if (!_this3.Datalist[i]) {
              i = 0;

              _this3.unschedule(func);

              _this3.moveByChickTaskModeId();

              _this3.ItemGeneratorOver = true;
              return;
            }

            var itemData = _this3.Datalist[i];

            if (itemData.TaskType == 3 && itemData.TaskModeId != 200007) {
              if (sys.Platform.IOS === sys.platform) {
                //ios特殊处理
                _this3.maxShareNum = ConfigFile.getGlobalInfoByGlobalId(280).IntValue;
                console.log("ios分享任务最大显示数量：", _this3.maxShareNum);

                if (j < _this3.maxShareNum) {
                  var dailyItem = _this3.dailyPool.get();

                  var dailyItemcomp = dailyItem.getComponent("DailyTaskUIItem");
                  var showShare = true;

                  if (itemData.conditions && itemData.conditions.length >= 1) {
                    if (itemData.conditions[0].MaxCondition <= itemData.conditions[0].nowCondition) {
                      _this3.finishTaskNum++;
                    }

                    if (lastShareTaskData) {
                      if (lastShareTaskData.conditions[0].MaxCondition > lastShareTaskData.conditions[0].nowCondition) {
                        showShare = false;
                      }
                    }
                  }

                  dailyItemcomp.init(itemData, _this3, showShare);

                  _this3.dailyScrollView.content.addChild(dailyItem); // this.setItemPos(j, dailyItem)


                  j++;

                  if (!_this3.DailyItemcomps) {
                    _this3.DailyItemcomps = [];
                  }

                  _this3.DailyItemcomps.push(dailyItemcomp);

                  lastShareTaskData = itemData;
                }
              } else {
                var _dailyItem = _this3.dailyPool.get();

                var _dailyItemcomp = _dailyItem.getComponent("DailyTaskUIItem");

                _dailyItemcomp.init(itemData, _this3);

                _this3.dailyScrollView.content.addChild(_dailyItem); // this.setItemPos(j, dailyItem)
                // j++


                if (itemData && itemData.conditions && itemData.conditions.length >= 1) {
                  if (itemData.conditions[0].MaxCondition <= itemData.conditions[0].nowCondition) {
                    _this3.finishTaskNum++;
                  }
                }

                if (!_this3.DailyItemcomps) {
                  _this3.DailyItemcomps = [];
                }

                _this3.DailyItemcomps.push(_dailyItemcomp);
              }
            } else if (itemData.TaskType != 4 && itemData.TaskType != 5) {
              var item = _this3.Pool.get();

              var itemcomp = item.getComponent("TaskUIItem");

              if (itemData.TaskType == 1) {
                itemcomp.init(itemData, _this3);
                _this3.Mainline.active = true;
                NodeHelp.getchildlable(_this3.Mainline, "TaskItems", null, function (comp, node) {
                  node.addChild(item);
                  itemcomp.node.active = true;
                });
              } else if (itemData.TaskType == 2) {
                itemcomp.init(itemData, _this3);

                _this3.scrollView.content.addChild(item);

                if (k >= 15) {
                  item.active = false;
                }

                _this3.setItemPos(k, item);

                k++;
              }

              if (!_this3.Itemcomps) {
                _this3.Itemcomps = [];
              }

              _this3.setMainLine();

              _this3.Itemcomps.push(itemcomp);
            }

            i++;

            if (_this3.finishTaskNum > _this3.maxShareNum) {
              _this3.finishTaskNum = _this3.maxShareNum;
            }

            _this3.jinduLabel.string = _this3.finishTaskNum + "/" + _this3.maxShareNum;

            if (itemData.TaskModeId == 200007) {
              var imgIcon = "";

              if (itemData.TaskState == 2) {
                imgIcon = "icon/baoxiang2/spriteFrame";
              } else {
                imgIcon = "icon/baoxiang1/spriteFrame";
              }

              resources.load(imgIcon, SpriteFrame, function (error, res) {
                if (res) {
                  if (!_this3 || !_this3.shareBigRewardIcon || !_this3.shareBigRewardIcon.isValid) return;
                  _this3.shareBigRewardIcon.spriteFrame = res; // let scale = NodeHelp.setScopeLimitation(this.shareBigRewardIcon.node.getComponent(UITransform), 142, 100);
                  // this.shareBigRewardIcon.node.setScale(new Vec3(scale, scale, 1))
                }

                if (error) {
                  console.log("加载动物产出图 ==>", error);
                }
              });
            }
          };

          this.ItemGeneratorOver = false;
          this.schedule(func, 0);
        };

        _proto.setScrollViewContent = function setScrollViewContent() {
          if (!this.Datalist || this.Datalist.length < 1) return;
          var length = this.Datalist.length;

          if (this.Datalist.find(function (v) {
            return v.TaskType == 1;
          })) {
            length -= 1;
          }

          this.Datalist.forEach(function (v) {
            if (v.TaskType == 3 || v.TaskType == 4 || v.TaskType == 5) length -= 1;
          });
          var contentHeight = length * ItemH + (length + 1) * Space;
          this.scrollView.content.getComponent(UITransform).height = contentHeight;
          this.nextShow = -1;
          this.dailyNextShow = -1;
        };

        _proto.setItemPos = function setItemPos(index, node) {
          var higet = (index + 1) * ItemH + (index + 1) * Space - ItemH / 2;
          node.setPosition(v3(0, 0 - higet, 0));
        };

        _proto.scrollViewShow = function scrollViewShow() {
          var Offset = this.scrollView.getScrollOffset(); //console.log("滚动偏移----------》" + Offset)

          var i = 0;
          if (Offset.y > 0) i = Math.floor(Offset.y / (ItemH + Space)) - 1;
          var section = 0;
          if (i != 0) section = Math.floor(i / 5) - 1;
          if (section < 0 || this.nextShow == section) return;
          this.nextShow = section;
          this.scrollView.content.children.forEach(function (v, i) {
            if (i >= section * 5 && i < 15 + section * 5) {
              v.active = true;
            } else {
              v.active = false;
            }
          });
        };

        _proto.dailyScrollViewShow = function dailyScrollViewShow() {
          var Offset = this.dailyScrollView.getScrollOffset(); //console.log("滚动偏移----------》" + Offset)

          var i = 0;
          if (Offset.y > 0) i = Math.floor(Offset.y / (ItemH + Space)) - 1;
          var section = 0;
          if (i != 0) section = Math.floor(i / 5) - 1;
          if (section < 0 || this.dailyNextShow == section) return;
          this.dailyNextShow = section;
          this.dailyScrollView.content.children.forEach(function (v, i) {
            if (i >= section * 5 && i < 15 + section * 5) {
              v.active = true;
            } else {
              v.active = false;
            }
          });
        };

        _proto.setMainLine = function setMainLine() {
          var _this4 = this;

          NodeHelp.getchildlable(this.Mainline, "TaskItems", null, function (comp, node) {
            if (node.children.length < 1) {
              _this4.Mainline.active = false;
              _this4.SideQuest.getComponent(Widget).top = 0;
              _this4.SideQuest.getComponent(Widget).bottom = 0;

              _this4.SideQuest.getComponent(Widget).updateAlignment();

              _this4.scrollView.scrollToTop();
            } else {
              _this4.Mainline.active = true;
              _this4.SideQuest.getComponent(Widget).top = _this4.Mainline.getComponent(UITransform).height + 6;
              _this4.SideQuest.getComponent(Widget).bottom = 0;

              _this4.SideQuest.getComponent(Widget).updateAlignment();

              _this4.scrollView.scrollToTop();
            }
          });
        };

        _proto.moveByChickTaskModeId = function moveByChickTaskModeId() {
          var _this5 = this;

          if (!this.scrollView || this.scrollView.content.children.length <= 0) return;
          var index = 0;
          var items = this.scrollView.content.children.find(function (v, i) {
            index = i;
            return v.getComponent(TaskUIItem).data.TaskModeId == _this5.chicktaskModeId;
          });
          if (!items) return;
          var h = Math.abs(items.getPosition().y) - ItemH / 2 + index * Space * 2;
          var height = this.scrollView.content.getComponent(UITransform).height;
          this.scrollView.scrollToPercentVertical((height - h) / height, 0.1);
        };

        _proto.onChangeMode = function onChangeMode(t1) {
          if (t1.node.name == "Toggle2") {
            this.setExchangeMode(2);
          } else if (t1.node.name == "Toggle3") {
            this.setExchangeMode(3);
          } else {
            this.setExchangeMode(1);
          }
        };

        _proto.setExchangeMode = function setExchangeMode(mode) {
          if (mode == 1) {
            this.LayBox.active = true;
            this.LayDaily.active = false;
            this.LayEveryDay.active = false;
          } else if (mode == 2) {
            this.LayBox.active = false;
            this.LayDaily.active = true;
            this.LayEveryDay.active = false;
          } else {
            this.LayBox.active = false;
            this.LayDaily.active = false;
            this.LayEveryDay.active = true;
          }

          this.closeTip();
        } //检查分享大奖励
        ;

        _proto.checkShareBigReward = function checkShareBigReward() {
          if (this.finishTaskNum >= this.maxShareNum) ;
        };

        _proto.reqFinishShareBigReward = function reqFinishShareBigReward() {
          this.closeTip();

          if (this.finishTaskNum >= this.maxShareNum) {
            WebSocketMgr.send(MessageManager.Net.FarmTaskFinishRequest, {
              ID: 200007
            });
          } else {
            this.openRewardTip();
          }
        };

        _proto.initRewardTips = function initRewardTips() {
          var _this6 = this;

          var config = ConfigFile.getTTaskInfoByTaskId(200007); // if(config && config.TaskReward)
          // {
          //     let rewards = config.TaskReward.split(";")
          //     let id
          //     let number
          //     for (let reward of rewards) {
          //         let data = reward.split(",")
          //         id = data[0]
          //         number = Number(data[1])
          //     }
          //     NodeHelp.getchildlable(this.rewardTips, "icon", Sprite, (comp) => {
          //         NodeHelp.loadIcon("propIcon/itemicon", id, (res: SpriteFrame) => {
          //             if (comp.isValid) {
          //                 comp.spriteFrame = res
          //                 let scale = NodeHelp.setScopeLimitation(comp.node.getComponent(UITransform), 64, 64)
          //                 comp.node.setScale(scale, scale)
          //             }
          //         })
          //     })
          //     NodeHelp.getchildlable(this.rewardTips, "number", Label, (comp) => {
          //         let str = NumberUtil.unitConversion(number,false)
          //         comp.string = str
          //     })
          // }
          //得到奖励

          if (config && config.TaskReward) {
            var rewards = config.TaskReward.split(";");

            var _loop = function _loop() {
              var reward = _step2.value;
              if (reward == "") return "continue";
              var rewardnode = instantiate(_this6.ActivityTaskTipItem);
              var comp = rewardnode.getComponent("ActivityTipItem");
              comp.init(reward, _this6.tag);
              NodeHelp.getchildlable(_this6.rewardTips, "RewardBox", null, function (comp, node) {
                node.addChild(rewardnode);
              });
            };

            for (var _iterator2 = _createForOfIteratorHelperLoose(rewards), _step2; !(_step2 = _iterator2()).done;) {
              var _ret = _loop();

              if (_ret === "continue") continue;
            }
          }
        };

        _proto.setEveryDayShow = function setEveryDayShow() {
          // 取本地时间
          var localTime = UIHelp.getTimeMask() / 1000;
          var servertime = DateUtil.getServerTimeDiff(localTime);
          var endTime = new Date(new Date(servertime).toLocaleDateString()).getTime() + 24 * 60 * 60 * 1000 - 1;
          this.remainTime = Math.round((endTime - servertime) / 1000);
          var str = DateUtil.getDHMSAll(this.remainTime);
          NodeHelp.getchildlable(this.LayEveryDay, "Time", Label, function (comp) {
            comp.string = str;
          });
          this.schedule(this.updateRemainTime, 1);
        };

        _proto.getFinish = function getFinish(data) {
          var config = ConfigFile.getTTaskInfoByTaskId(data.TaskModeId);
          var showFinish = 2;

          if (data.conditions && data.conditions.length >= 1) {
            //得到条件内容
            for (var _iterator3 = _createForOfIteratorHelperLoose(data.conditions), _step3; !(_step3 = _iterator3()).done;) {
              var condition = _step3.value;

              if (showFinish && config && config.TaskFinishType == 2) {
                if (condition.nowCondition < condition.MaxCondition) showFinish = 1;
              } else {
                showFinish = 1;
              }
            }
          } else {
            showFinish = config && config.TaskFinishType == 2 ? 2 : 1;
          }

          return showFinish;
        };

        _proto.setEveryDayTasks = function setEveryDayTasks() {
          var _this7 = this;

          if (!this.everyDayGList || !this.Datalist || this.Datalist.length < 1) return;
          var EveryDayTasks = this.Datalist.filter(function (v) {
            return v.TaskType == 4;
          });

          if (EveryDayTasks && EveryDayTasks.length >= 1) {
            EveryDayTasks.sort(function (a, b) {
              var showFinishA = _this7.getFinish(a);

              var showFinishB = _this7.getFinish(b);

              return showFinishB - showFinishA;
            });
            var self = this;

            this.everyDayGList.itemRenderer = function (index, item) {
              var dailyItemcomp = item.getComponent("TaskUIItem");
              dailyItemcomp.init(EveryDayTasks[index], self);
            };

            this.everyDayGList.SetItemNum(EveryDayTasks.length);
            NodeHelp.getchildlable(this.LayEveryDay, "LabTaskOver", Label, function (comp, node) {
              node.active = false;
            });
          } else {
            NodeHelp.getchildlable(this.LayEveryDay, "LabTaskOver", Label, function (comp, node) {
              node.active = true;
              comp.string = ConfigFile.findLanguage(7305);
            });
            this.everyDayGList.SetItemNum(0);
          }
        };

        _proto.setActivityTasks = function setActivityTasks() {
          var _this8 = this;

          if (!this.Datalist || this.Datalist.length < 1) return;
          var ActivityTasks = this.Datalist.filter(function (v) {
            return v.TaskType == 5;
          });
          var max = 0;
          var min = 0;
          ActivityTasks.forEach(function (v) {
            if (v.conditions[0].MaxCondition && v.conditions[0].MaxCondition > max) {
              max = v.conditions[0].MaxCondition;
              min = v.conditions[0].nowCondition;
            }
          });
          var i = ActivityTasks.length,
              j;
          var tempExchangVal;

          while (i > 0) {
            for (j = 0; j < i - 1; j++) {
              var configJ = ActivityTasks[j].TaskModeId;
              var configJAdd = ActivityTasks[j + 1].TaskModeId;

              if (!configJAdd || !configJ) {
                continue;
              }

              if (configJ > configJAdd) {
                tempExchangVal = ActivityTasks[j];
                ActivityTasks[j] = ActivityTasks[j + 1];
                ActivityTasks[j + 1] = tempExchangVal;
              }
            }

            i--;
          }

          NodeHelp.getchildlable(this.LayEveryDay, "Activity", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(7302) + min;
          });
          NodeHelp.getchildlable(this.LayEveryDay, "ProgressBar", ProgressBar, function (comp) {
            comp.progress = min / max;
          });
          ActivityTasks.forEach(function (v, i) {
            var item = _this8.activityTaskPool.get();

            var itemcomp = item.getComponent("EveryDayActivityTaskItem");
            NodeHelp.getchildlable(_this8.LayEveryDay, "tasks", null, function (comp, node) {
              node.addChild(item);
              itemcomp.init(i, v, max, _this8);

              if (!_this8.activityTaskItemcomps) {
                _this8.activityTaskItemcomps = [];
              }

              _this8.activityTaskItemcomps.push(itemcomp);
            });
          });
        };

        _proto.updateRemainTime = function updateRemainTime() {
          this.remainTime--;
          var str = DateUtil.getDHMSAll(this.remainTime);
          NodeHelp.getchildlable(this.LayEveryDay, "Time", Label, function (comp) {
            comp.string = str;
          });

          if (this.remainTime < 1) {
            this.unschedule(this.updateRemainTime);
          }
        };

        _proto.onCloseTip = function onCloseTip() {
          if (this.rewardTips.active) {
            this.rewardTips.active = false;
          }

          BagUIItemTip.getInstance().closeTip();
        };

        _proto.openRewardTip = function openRewardTip() {
          this.rewardTips.active = !this.rewardTips.active;
        };

        _proto.closeTip = function closeTip() {
          BagUIItemTip.getInstance().closeTip();
        };

        _proto.closeActivityTaskTip = function closeActivityTaskTip() {
          this.closeTip();
          this.tip.active = false;
        };

        _proto.openActivityTaskTip = function openActivityTaskTip(data, position) {
          var _this9 = this;

          var TaskID = data.TaskModeId;
          var TaskState = data.TaskState;
          var config = ConfigFile.getTTaskInfoByTaskId(TaskID);

          if (config) {
            this.tip.active = true; //得到奖励

            NodeHelp.getchildlable(this.tip, "have", Label, function (comp, node) {
              if (TaskState == 2) {
                comp.string = ConfigFile.findLanguage(7303);
              } else {
                var num = data.conditions[0].MaxCondition;
                comp.string = ConfigFile.findLanguage(7304).format(num);
              }
            });
            NodeHelp.getchildlable(this.tip, "Activitytip", null, function (comp, node) {
              node.setWorldPosition(position);
            });

            if (config.TaskReward) {
              this.clearActivityTaskTip();
              var rewards = config.TaskReward.split(";");

              var _loop2 = function _loop2() {
                var reward = _step4.value;
                if (reward == "") return "continue";

                var rewardnode = _this9.ActivityTaskTipPool.get();

                var comp = rewardnode.getComponent("ActivityTipItem");
                comp.init(reward, _this9.tag);
                NodeHelp.getchildlable(_this9.tip, "Activitytip", null, function (comp_2, node) {
                  node.addChild(rewardnode);

                  if (!_this9.activityTaskTipcomps) {
                    _this9.activityTaskTipcomps = [];
                  }

                  _this9.activityTaskTipcomps.push(comp);
                });
              };

              for (var _iterator4 = _createForOfIteratorHelperLoose(rewards), _step4; !(_step4 = _iterator4()).done;) {
                var _ret2 = _loop2();

                if (_ret2 === "continue") continue;
              }
            }
          }
        };

        _proto.clearActivityTaskTip = function clearActivityTaskTip() {
          if (this.activityTaskTipcomps && this.activityTaskTipcomps.length >= 1) {
            while (this.activityTaskTipcomps.length >= 1) {
              var item = this.activityTaskTipcomps.pop();
              this.ActivityTaskTipPool.put(item.node);
            }
          }
        } //设置任务按钮
        ;

        _proto.setTaskBtn = function setTaskBtn() {
          if (!this.Datalist || this.Datalist.length < 1) return;
          var mainTasks = this.Datalist.filter(function (v) {
            return v.TaskType == 1 || v.TaskType == 2;
          });

          if (mainTasks && mainTasks.length > 0) {
            this.Toggle1.node.active = true;
          } else {
            this.Toggle1.node.active = false;
          }

          var ActivityTasks = this.Datalist.filter(function (v) {
            return v.TaskType == 5;
          });
          var ActivityTasksLength = ActivityTasks ? ActivityTasks.length : 0;
          var EveryDayTasks = this.Datalist.filter(function (v) {
            return v.TaskType == 4;
          });
          var EveryDayTasksLength = EveryDayTasks ? EveryDayTasks.length : 0;

          if (ActivityTasksLength + EveryDayTasksLength > 0) {
            this.Toggle3.node.active = true;
          } else {
            this.Toggle3.node.active = false;
          }
        };

        return TaskUI;
      }(BasePanel), _class3.className = "TaskUI", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "panel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "TaskItem", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "rewardItem", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "DailyTaskItem", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "rewardTipsItem", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "ActivityTaskItem", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "ActivityTaskTipItem", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "Mainline", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "SideQuest", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "scrollView", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "LayBox", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "LayDaily", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "LayEveryDay", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "dailyScrollView", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "EveryDayScrollView", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "jinduLabel", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "shareTitle", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "shareLabel", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "shareShowLabel", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "shareBigRewardIcon", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "tc", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "rewardTips", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "tip", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "Toggle1", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "Toggle2", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "Toggle3", [_dec27], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TaskUIItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TaskConfig.ts', './EnumDefine.ts', './ConfigFile.ts', './MessageManager.ts', './TaskConfigGoManager.ts', './UIManager.ts', './WebSocketMgr.ts', './NodeHelp.ts', './TaskTalkUI.ts', './BagUIItemTip.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _createForOfIteratorHelperLoose, cclegacy, _decorator, Sprite, resources, SpriteFrame, Label, Component, TaskConfig, EnumDefine, ConfigFile, MessageManager, TaskConfigGoManager, UIManager, WebSocketMgr, NodeHelp, TaskTalkUI, BagUIItemTip;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      resources = module.resources;
      SpriteFrame = module.SpriteFrame;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      TaskConfig = module.TaskConfig;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      TaskConfigGoManager = module.TaskConfigGoManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      TaskTalkUI = module.TaskTalkUI;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "a0554d8AydN6I6jCDHhfhRN", "TaskUIItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TaskUIItem = exports('TaskUIItem', (_dec = ccclass('TaskUIItem'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TaskUIItem, _Component);

        function TaskUIItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.data = null;
          _this.tag = null;
          _this.config = null;
          return _this;
        }

        var _proto = TaskUIItem.prototype;

        _proto.init = function init(itemData, tag, boo) {
          this.data = itemData;
          this.tag = tag;
          this.config = ConfigFile.getTTaskInfoByTaskId(this.data.TaskModeId);
          this.setShow();
        };

        _proto.setShow = function setShow() {
          var _this2 = this;

          var fistCondition = null;
          var title = "";
          var conditionString = "";
          var showFinish = true; //初始话领取显示

          if (this.data && this.data.conditions && this.data.conditions.length >= 1) {
            fistCondition = ConfigFile.getTConditionInfoByConditionId(this.data.conditions[0].ConditionModeId); //得到条件内容

            var _loop = function _loop() {
              var condition = _step.value;
              var config = ConfigFile.getTConditionInfoByConditionId(condition.ConditionModeId);

              if (!config) {
                console.log("UIGameTaskItemTip----->notHaveConfig");
                return {
                  v: void 0
                };
              }

              var numStr = "";

              if (config.Other) {
                var gameConfig = TaskConfig.find(function (v) {
                  return v.id == config.ConditionType;
                });

                if (gameConfig) {
                  if (gameConfig.configName == "") {
                    numStr = config.Other + "";
                  } else {
                    var Itemconfig = ConfigFile.getInstance().config.get(gameConfig.configName);

                    if (Itemconfig) {
                      var Item = Itemconfig.find(function (item) {
                        return item[gameConfig.configIdName] == config.Other;
                      });

                      if (Item) {
                        numStr = ConfigFile.findLanguage(Number(Item[gameConfig.configField]));
                      }
                    }
                  }
                }
              }

              if (conditionString == "") {
                if (numStr == "") {
                  numStr += condition.nowCondition + "/" + condition.MaxCondition;
                  conditionString = ConfigFile.findLanguage(Number(config.Des)).format(numStr);
                } else {
                  var num = condition.nowCondition + "/" + condition.MaxCondition;
                  conditionString = ConfigFile.findLanguage(Number(config.Des)).format(numStr, num);
                }
              } else {
                if (numStr == "") {
                  numStr += condition.nowCondition + "/" + condition.MaxCondition;
                  conditionString += "," + ConfigFile.findLanguage(Number(config.Des)).format(numStr);
                } else {
                  var _num = condition.nowCondition + "/" + condition.MaxCondition;

                  conditionString += "," + ConfigFile.findLanguage(Number(config.Des)).format(numStr, _num);
                }
              }

              if (showFinish && _this2.config && _this2.config.TaskFinishType == 2) {
                if (condition.nowCondition < condition.MaxCondition) showFinish = false;
              } else {
                showFinish = false;
              }
            };

            for (var _iterator = _createForOfIteratorHelperLoose(this.data.conditions), _step; !(_step = _iterator()).done;) {
              var _ret = _loop();

              if (typeof _ret === "object") return _ret.v;
            }
          } else {
            showFinish = this.config && this.config.TaskFinishType == 2;
          }

          if (fistCondition) //得到icon
            NodeHelp.getchildlable(this.node, "SpriteIcon", Sprite, function (comp) {
              var image = "TaskIcon/" + fistCondition.ConditionType + "/spriteFrame";
              resources.load(image, SpriteFrame, function (error, res) {
                if (res && comp.isValid) {
                  comp.spriteFrame = res;
                }

                if (error) {
                  console.log("加载任务图 ==>", error);
                }
              });
            });

          if (this.config) {
            //得到任务名
            title += ConfigFile.findLanguage(this.config.TaskName); //得到奖励

            if (this.config.TaskReward) {
              this.clearRewardBox();
              var rewards = this.config.TaskReward.split(";");

              var _loop2 = function _loop2() {
                var reward = _step2.value;
                if (reward == "") return "continue";

                var rewardnode = _this2.tag.RewardPool.get();

                var comp = rewardnode.getComponent("TaskUIRewardItem");
                comp.init(reward, _this2.tag);
                NodeHelp.getchildlable(_this2.node, "RewardBox", null, function (comp, node) {
                  node.addChild(rewardnode);
                });
              };

              for (var _iterator2 = _createForOfIteratorHelperLoose(rewards), _step2; !(_step2 = _iterator2()).done;) {
                var _ret2 = _loop2();

                if (_ret2 === "continue") continue;
              }
            }
          }

          NodeHelp.getchildlable(this.node, "LabelName", Label, function (comp) {
            comp.string = title;
          });
          NodeHelp.getchildlable(this.node, "LabelString", Label, function (comp) {
            comp.string = conditionString;
          });
          NodeHelp.getchildlable(this.node, "ButtonGo", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(6503);
          });
          NodeHelp.getchildlable(this.node, "ButtonGet", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(111017);
          }); //设置按钮显示

          NodeHelp.getchildlable(this.node, "ButtonGo", null, function (comp, node) {
            node.active = !showFinish;
          });
          NodeHelp.getchildlable(this.node, "ButtonGet", null, function (comp, node) {
            node.active = showFinish;
          });
        };

        _proto.clearRewardBox = function clearRewardBox() {
          var _this3 = this;

          NodeHelp.getchildlable(this.node, "RewardBox", null, function (comp, node) {
            while (node.children.length >= 1) {
              _this3.tag.RewardPool.put(node.children[0]);
            }
          });
        };

        _proto.chickFind = function chickFind() {
          BagUIItemTip.getInstance().closeTip();

          if (!this.data || !this.tag) {
            return;
          }

          if (this.data.TalkState == 0 && this.config && this.config.Talk && this.config.Talk != "") {
            var config = this.config;
            UIManager.getInstance().openUI(TaskTalkUI, 13, function (ui, args) {
              ui.setData(config);
            }, undefined, null);
            this.tag.onClickedClose();
          } else if (this.data && this.data.conditions && this.data.conditions.length >= 1) {
            var configCondition = null;

            for (var _iterator3 = _createForOfIteratorHelperLoose(this.data.conditions), _step3; !(_step3 = _iterator3()).done;) {
              var condition = _step3.value;

              var _config = ConfigFile.getTConditionInfoByConditionId(condition.ConditionModeId);

              if (!_config) {
                console.log("UIGameTaskItemTip----->notHaveConfig");
                continue;
              }

              var ConditionOver = true;
              if (_config.Compare == 0) ConditionOver = condition.MaxCondition - condition.nowCondition <= 0;else ConditionOver = condition.nowCondition - condition.MaxCondition <= 0;

              if (!ConditionOver) {
                configCondition = _config;
                break;
              }
            }

            if (configCondition) {
              this.tag.onClickedClose();
              var gameConfig = TaskConfig.find(function (v) {
                return v.id == configCondition.ConditionType;
              });

              if (!gameConfig) {
                return;
              }

              var uiData = gameConfig.uiData;

              if (gameConfig.goUiName == EnumDefine.TaskFindType.Build) {
                var Itemconfig = ConfigFile.getInstance().config.get(gameConfig.configName);

                if (Itemconfig) {
                  var Item = Itemconfig.find(function (item) {
                    return item[gameConfig.configIdName] == configCondition.Other;
                  });

                  if (Item) {
                    uiData = Number(Item[gameConfig.configField]);
                  }
                }
              }

              TaskConfigGoManager.goUIByTaskFindType(gameConfig.goUiName, uiData);
            }
          }
        };

        _proto.chickGoGet = function chickGoGet() {
          BagUIItemTip.getInstance().closeTip();
          WebSocketMgr.send(MessageManager.Net.FarmTaskFinishRequest, {
            ID: this.data.TaskModeId
          });
        };

        return TaskUIItem;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TaskUIRewardItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './producer.ts', './NodeHelp.ts', './NumberUtil.ts', './BagUIItemTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Input, Sprite, UITransform, Label, Button, Component, ConfigFile, Configname, producer, NodeHelp, NumberUtil, BagUIItemTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Input = module.Input;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      Label = module.Label;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "6c62bsY3D1FG4xxEqJqUMsc", "TaskUIRewardItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TaskUIRewardItem = exports('TaskUIRewardItem', (_dec = ccclass('TaskUIRewardItem'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TaskUIRewardItem, _Component);

        function TaskUIRewardItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.data = null;
          _this.tag = null;

          _initializerDefineProperty(_this, "icon", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = TaskUIRewardItem.prototype;

        _proto.onEnable = function onEnable() {
          this.icon.on(Input.EventType.TOUCH_START, this.oniconStartTouch, this);
        };

        _proto.onDisable = function onDisable() {
          this.icon.off(Input.EventType.TOUCH_START, this.oniconStartTouch, this);
        };

        _proto.init = function init(data, tag) {
          this.data = data;
          this.tag = tag;
          this.setShow();
        };

        _proto.setShow = function setShow() {
          var data = this.data.split(",");
          var id = data[0];
          var number = Number(data[1]);
          NodeHelp.getchildlable(this.node, "Sprite", Sprite, function (comp) {
            NodeHelp.loadIcon("propIcon/itemicon", id, function (res) {
              if (comp.isValid) {
                comp.spriteFrame = res;
                var scale = NodeHelp.setScopeLimitation(comp.node.getComponent(UITransform), 38, 38);
                comp.node.setScale(scale, scale);
              }
            });
          });
          NodeHelp.getchildlable(this.node, "Label", Label, function (comp) {
            var str = NumberUtil.unitConversion(number, false);
            comp.string = str;
          });
        };

        _proto.oniconStartTouch = function oniconStartTouch(event) {
          var node = event.target;
          var config = null;
          var reward = this.data.split(",");
          config = ConfigFile.getItemData(reward[0]);

          if (config) {
            var propTimeText = null;

            if (config.Type && (config.Type == 2 || config.Type == "2")) {
              var animalConfig = ConfigFile.getInstance().config.get(Configname.TAnimalInfo);

              if (animalConfig) {
                var animalConsumeTime = 0;
                animalConfig.forEach(function (v) {
                  if (v.AnimalConsumeId == config.ItemId && (animalConsumeTime == 0 || v.AnimalConsumeTime < animalConsumeTime)) {
                    animalConsumeTime = v.AnimalConsumeTime;
                  }
                });

                if (animalConsumeTime) {
                  propTimeText = producer.getTimeFormat(animalConsumeTime * reward[1]);
                }
              }
            }

            var propName = ConfigFile.findLanguage(config.Name);
            var propText = ConfigFile.findLanguage(config.Tips);
            BagUIItemTip.getInstance().openTip(this.tag.node || this.node, propName, propText, node.getComponent(Button), propTimeText);
          }
        };

        return TaskUIRewardItem;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "icon", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/text.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventManager.ts', './MessageManager.ts', './WebSocketMgr.ts', './BasePanel.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, EditBox, EventManager, MessageManager, WebSocketMgr, BasePanel;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      EditBox = module.EditBox;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      BasePanel = module.BasePanel;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _class3;

      cclegacy._RF.push({}, "c8846fpLzpO5J2bmvNRscBk", "text", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var text = exports('text', (_dec = ccclass('text'), _dec2 = property(EditBox), _dec3 = property(EditBox), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(text, _BasePanel);

        function text() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "text", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "text3", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = text.prototype;

        _proto.onLoad = function onLoad() {
          EventManager.getInstance().add(MessageManager.Net.FarmGmResponse, this, this.FarmGmResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmFillInvitationCodeResponse, this, this.FarmFillInvitationCodeResponse);
        };

        _proto.onDestroy = function onDestroy() {
          _BasePanel.prototype.onDestroy.call(this);
        };

        _proto.onchickRequest = function onchickRequest() {
          var data = {
            Gm: this.text.string
          };
          WebSocketMgr.send(MessageManager.Net.FarmGmRequest, data);
        };

        _proto.onchickResponse = function onchickResponse() {
          this.node.getChildByName("text_2").active = false;
        };

        _proto.FarmGmResponse = function FarmGmResponse() {
          this.node.getChildByName("text_2").active = true;
        };

        _proto.onClickSendInvitationCode = function onClickSendInvitationCode() {
          WebSocketMgr.send(MessageManager.Net.FarmFillInvitationCodeRequest, {
            InvitationCode: this.text3.string
          });
        };

        _proto.FarmFillInvitationCodeResponse = function FarmFillInvitationCodeResponse(data) {
          if (0 == data.Code) {
            this.text3.string = "邀请成功！！！";
          } else {
            this.text3.string = "邀请失败！！！---请检查输入的邀请码！！！";
          }
        };

        return text;
      }(BasePanel), _class3.className = "text", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "text", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "text3", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TimerMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Pool.ts', './Sets.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, Component, macro, director, game, PoolOnce, Sets;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      macro = module.macro;
      director = module.director;
      game = module.game;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      Sets = module.Sets;
    }],
    execute: function () {
      cclegacy._RF.push({}, "134e1rS4PdNsY2e/OcAu7d9", "TimerMgr", undefined);
      /**
       * 全局定时器 
       * 提供关于帧率 循环 延迟 时间缩放等接口
       * 提供更强大的功能
       */


      var TimerMgr = exports('TimerMgr', new ( /*#__PURE__*/function () {
        function _class2() {
          this.handerPool = new PoolOnce(100, function () {
            return {
              method: null,
              caller: null,
              timerCallBack: null,
              args: null
            };
          }, function (data) {
            data.method = null;
            data.caller = null;
            data.timerCallBack = null;
            data.args = null;
          }, function (data) {
            data.method = null;
            data.caller = null;
            data.args = null;
            data.timerCallBack = null;
          });
          this.handerMap = new Map();
          this._updateInterval = {};
          this._updateAddTime = {};
          this.handerComponent = null;
          this._dt = 0;
          this.minDt = 1 / 60;
          this._dirtyMark = {};
          this._fps = 60;
        }

        var _proto = _class2.prototype;
        /**手动传入 避免循环引用 */

        _proto.init = function init(canvas) {
          this.handerComponent = canvas.addComponent(Component);
          this.handerComponent.lateUpdate = this.lateUpdate.bind(this);
        }
        /**所有执行完毕的帧定时器 */
        ;

        _proto.lateUpdate = function lateUpdate(dt) {
          for (var _key in this._dirtyMark) {
            this._dirtyMark[_key] = true;
          }
        }
        /**
         * 延迟定时器
         * @param callBack 
         * @param delay 
         */
        ;

        _proto.once = function once(caller, method, delay, args, cover) {
          if (delay === void 0) {
            delay = 0;
          }

          if (args === void 0) {
            args = null;
          }

          if (cover === void 0) {
            cover = true;
          }

          if (delay < 0) method.apply(caller, args);else this.loop(caller, method, 0, 0, delay, args, cover);
        }
        /**
         * 延迟到下一帧执行
         * @param caller 
         * @param method 
         */
        ;

        _proto.callLater = function callLater(caller, method, args, cover) {
          if (args === void 0) {
            args = null;
          }

          if (cover === void 0) {
            cover = true;
          }

          this.once(caller, method, 0, args, cover);
        }
        /**
         * 循环定时器
         * @param callback 
         * @param interval 
         * @param repeat -1时 无限循环
         * @param delay -1时立即执行
         * @param cover 覆盖上一个执行 
         */
        ;

        _proto.loop = function loop(caller, method, interval, repeat, delay, args, cover) {
          if (repeat === void 0) {
            repeat = -1;
          }

          if (delay === void 0) {
            delay = 0;
          }

          if (args === void 0) {
            args = null;
          }

          if (cover === void 0) {
            cover = true;
          }

          if (repeat == -1) repeat = macro.REPEAT_FOREVER;
          var loop = this.handerMap.get(caller);

          if (!loop) {
            loop = [];
            this.handerMap.set(caller, loop);
          }

          if (this.has(caller, method)) if (cover) this.clear(caller, method);
          var pool = this.handerPool.get();
          pool.caller = caller;
          pool.method = method;
          pool.args = args;
          pool.timerCallBack = this.onCallBack.bind(this, pool);
          loop.push(pool);
          this.handerComponent.schedule(pool.timerCallBack, interval, repeat, delay);
          if (delay < 0) pool.timerCallBack();
        }
        /**
         * 清除一个定时器
         * @param caller 
         * @param callback 
         * @returns 
         */
        ;

        _proto.clear = function clear(caller, method) {
          var pool = this.get(caller, method);

          if (pool) {
            Sets["delete"](this.handerMap.get(caller), pool);
            this.handerComponent.unschedule(pool.timerCallBack);
            this.handerPool.put(pool);
          }
        }
        /**
         * 清除目标上的所有定时器
         * @param caller 
         * @returns 
         */
        ;

        _proto.clearAll = function clearAll(caller) {
          var _this = this;

          var loop = this.handerMap.get(caller);
          if (!loop) return;
          Sets.forEach(loop, function (value) {
            _this.clear(value.caller, value.method);
          }, true);
        }
        /**
         * 是否注册过
         * @param caller 
         * @param callback 
         * @returns 
         */
        ;

        _proto.has = function has(caller, method) {
          return !!this.get(caller, method);
        }
        /**
         * 注册过的值
         * @param caller 
         * @param callback 
         * @returns 
         */
        ;

        _proto.get = function get(caller, method) {
          var loop = this.handerMap.get(caller);
          if (!loop) return null;
          return Sets.filterValue(loop, function (value) {
            return value.caller == caller && value.method == method;
          });
        };

        _proto.onCallBack = function onCallBack(pool) {
          pool.method.apply(pool.caller, pool.args);
        }
        /**低帧率 */
        ;

        _proto.hasLowFps = function hasLowFps() {
          return this._fps <= 31;
        };

        _proto.setTimeScale = function setTimeScale(raito) {}
        /**
         * 获取标记 true 脏了
         * 会在lateUpdate将标记置为true
        */
        ;

        _proto.dirtyMark = function dirtyMark(key) {
          var dirty = this._dirtyMark[key];
          this._dirtyMark[key] = false;
          return dirty == undefined || dirty == true ? true : false;
        };

        _proto.deleteDirtyMark = function deleteDirtyMark(key) {
          delete this._dirtyMark[key];
        }
        /**清除间隔执行 */
        ;

        _proto.clearUpdateInterval = function clearUpdateInterval(id) {
          this._updateInterval[id] = null;
        }
        /**
         * 
         * update里检测间隔执行 
         * 误差(间隔时间)在 -1 到1之间
         * @param dt 
         * @param interval 间隔多长时间 返回 true
         * @param onceValue  第一次进入返回false
         */
        ;

        _proto.hasUpdateIntervale = function hasUpdateIntervale(id, interval, onceValue) {
          if (this._updateInterval[id] == undefined) this._updateInterval[id] = 0;

          if (this._updateInterval[id] == 0) {
            this._updateInterval[id] += this.dt;
            return onceValue;
          }

          this._updateInterval[id] += this.dt;

          if (this._updateInterval[id] >= interval) {
            // 保留差值
            this._updateInterval[id] = this._updateInterval[id] - interval;
            return true;
          }

          return false;
        }
        /**
         * update里增加时间
         * @param id 
         * @returns 增量到当前的时间
         */
        ;

        _proto.updateAddTime = function updateAddTime(id) {
          if (this._updateAddTime[id] == undefined) this._updateAddTime[id] = 0;
          this._updateAddTime[id] += this.dt;
          return this._updateAddTime[id];
        }
        /**清除递增时间 */
        ;

        _proto.clearUpdateAddTime = function clearUpdateAddTime(id) {
          this._updateAddTime[id] = null;
        };

        _createClass(_class2, [{
          key: "scheduler",
          get: function get() {
            return director.getScheduler();
          }
          /**游戏统一帧率 增加控制慢镜头缩放比例 */

        }, {
          key: "dt",
          get: function get() {
            this._dt = this.dtDefault;
            this._dt *= this.timeScale;
            return this._dt;
          }
          /**一秒的帧率平滑 */

        }, {
          key: "dtSecond",
          get: function get() {
            return this.dt * this._fps;
          }
          /**不受时间缩放影响的帧率 */

        }, {
          key: "dtDefault",
          get: function get() {
            // let dt = director.getDeltaTime()
            // 控制最小帧率
            // if (dt < this.minDt)
            //     return this.minDt
            return game.deltaTime;
          }
        }, {
          key: "fps",
          get:
          /**当前帧率 */
          function get() {
            return this._fps;
          },
          set: function set(value) {
            if (game.frameRate == value) return;
            this._fps = value;
            game.setFrameRate(this._fps);
            game.frameRate = this._fps;
            console.log("设置帧率：" + game.frameRate);
          }
        }, {
          key: "timeScale",
          get: function get() {
            return 1;
          }
        }]);

        return _class2;
      }())());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TipDlg.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseUI.ts', './GameDataManager.ts', './UIManager.ts', './EventManager.ts', './ConfigManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Button, Node, BaseUI, GameDataManager, UIManager, EventManager, ConfigManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Button = module.Button;
      Node = module.Node;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      GameDataManager = module.GameDataManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      ConfigManager = module.ConfigManager;
    }],
    execute: function () {
      exports('GUISTATE', void 0);

      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _class3;

      cclegacy._RF.push({}, "83d86z1VZlFd4TUQBqM7CAw", "TipDlg", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GUISTATE;

      (function (GUISTATE) {
        GUISTATE[GUISTATE["GU_NONE"] = 0] = "GU_NONE";
        GUISTATE[GUISTATE["GU_INIT"] = 1] = "GU_INIT";
        GUISTATE[GUISTATE["GU_TICKET1"] = 2] = "GU_TICKET1";
        GUISTATE[GUISTATE["GU_TICKET2"] = 3] = "GU_TICKET2";
        GUISTATE[GUISTATE["GU_TICKET3"] = 4] = "GU_TICKET3";
        GUISTATE[GUISTATE["GU_TICKET4"] = 5] = "GU_TICKET4";
        GUISTATE[GUISTATE["GU_STEP4"] = 6] = "GU_STEP4";
        GUISTATE[GUISTATE["GU_END"] = 7] = "GU_END";
        GUISTATE[GUISTATE["GU_STOP"] = 8] = "GU_STOP";
        GUISTATE[GUISTATE["GU_EXIT"] = 9] = "GU_EXIT";
        GUISTATE[GUISTATE["GU_CLICK"] = 10] = "GU_CLICK";
      })(GUISTATE || (GUISTATE = exports('GUISTATE', {})));

      var TipDlg = exports('TipDlg', (_dec = ccclass('TipDlg'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Button), _dec8 = property(Node), _dec9 = property(Node), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(TipDlg, _BaseUI);

        function TipDlg() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "title", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "text", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tipinfo", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "valLab1", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "valLab2", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ok", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maskLayer", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bgLayer", _descriptor8, _assertThisInitialized(_this));

          _this.lastTouchtime = 0;
          _this.itemconfig = void 0;
          _this.taskconfig = void 0;
          _this._ri = null;
          _this.cb = null;
          _this.ret = false;
          _this.isEnable = true;
          return _this;
        }

        var _proto = TipDlg.prototype;

        _proto.onLoad = function onLoad() {};

        _proto.initUI = function initUI(arg) {
          this.text.string = "";
          this.tipinfo.string = "";
          this.valLab1.string = "";
          this.valLab2.string = "";

          if (arg) {
            arg.title && (this.title.string = arg.title);
            arg.text && (this.text.string = arg.text);
            arg.tipinfo && (this.tipinfo.string = arg.tipinfo);
            arg.valLab1 && (this.valLab1.string = arg.valLab1);
            arg.valLab2 && (this.valLab2.string = arg.valLab2);
            arg.cb && (this.cb = arg.cb);
            this.isEnable = arg.isOK == true;
          }

          this.ok.interactable = this.isEnable;
        };

        _proto.start = function start() {
          this._ri = GameDataManager.getInstance().getGameData().roleInfo;
          this.itemconfig = ConfigManager.getInstance().getConfig("ItemConfig").data;
          this.taskconfig = ConfigManager.getInstance().getConfig("tasksConfig").data;
          this.updataState();
          this.maskLayer.on(Node.EventType.TOUCH_START, this.OnTBegin, this);
          this.bgLayer.on(Node.EventType.TOUCH_START, this.OnBBegin, this);
        };

        _proto.OnTBegin = function OnTBegin(touch) {
          this.ret = false;
          UIManager.getInstance().closeUI(TipDlg);
        };

        _proto.OnBBegin = function OnBBegin(touch) {};

        _proto.onDestroy = function onDestroy() {
          EventManager.getInstance().removeAll(this);
          this.cb && this.cb(this.ret);
        };

        _proto.onClose = function onClose() {
          this.ret = this.isEnable;
          UIManager.getInstance().closeUI(TipDlg);
        };

        _proto.updataState = function updataState() {};

        _proto.changeStatus = function changeStatus(s) {};

        return TipDlg;
      }(BaseUI), _class3.className = "TipDlg", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "title", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "text", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "tipinfo", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "valLab1", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "valLab2", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "ok", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "maskLayer", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "bgLayer", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TipManager.ts", ['cc', './EnumDefine.ts', './ConfigFile.ts', './GameAllData.ts', './ChickBox.ts', './ChoiceBox.ts', './SafeCodeInputBox.ts', './SetUI.ts', './TipsUI.ts', './UIConchExchange.ts', './UIManager.ts'], function (exports) {
  'use strict';

  var cclegacy, _decorator, EnumDefine, ConfigFile, GameAllData, ChickBox, ChoiceBox, SafeCodeInputBox, SetUI, TipsUI, UIConchExchange, UIManager;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      ChickBox = module.ChickBox;
    }, function (module) {
      ChoiceBox = module.ChoiceBox;
    }, function (module) {
      SafeCodeInputBox = module.SafeCodeInputBox;
    }, function (module) {
      SetUI = module.SetUI;
    }, function (module) {
      TipsUI = module.TipsUI;
    }, function (module) {
      UIConchExchange = module.UIConchExchange;
    }, function (module) {
      UIManager = module.UIManager;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d4de8PDJ05IsJ47NyuZ417r", "TipManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TipManager = exports('TipManager', /*#__PURE__*/function () {
        function TipManager() {}

        TipManager.TipFromCode = function TipFromCode(code, iconType) {
          //let text = ConfigFile.findLanguage(code).iconformat(iconType || EnumDefine.CurrencyType.Conch);
          var text = ConfigFile.findLanguage(code, iconType || EnumDefine.CurrencyType.Conch);
          TipManager.autoTip(5, code, text, null);
        };

        TipManager.TipFromText = function TipFromText(code, text) {
          TipManager.autoTip(5, code, text, null);
        };

        TipManager.autoTip = function autoTip(type, codeType, text, cancelCb, confirmCb, isVideo) {
          var data = ConfigFile.findLanguageData(codeType);
          var t = data.MessageType ? data.MessageType : type;

          if (t == 3) {
            TipManager.ChickBox(text, cancelCb, isVideo);
          } else if (t == 4) {
            TipManager.ChoiceBox(text, cancelCb, confirmCb);
          } else {
            TipManager.tip(text, isVideo);
          }
        }
        /**tip面板 */
        ;

        TipManager.tip = function tip(text, isVideo) {
          var tip = UIManager.getInstance().getUI(TipsUI);

          if (tip) {
            tip.node.setSiblingIndex(1000);
            tip.text = text;
          } else UIManager.getInstance().openUI(TipsUI, 1000, function (ui, args) {
            ui.text = text;
          }, undefined, null);
        };

        TipManager.ChickBox = function ChickBox$1(text, confirmCb, isVideo) {
          UIManager.getInstance().openUI(ChickBox, 99, function (ui, args) {
            ui.text = text;
            ui.confirmCb = confirmCb;
          }, undefined, null);
        };

        TipManager.ChoiceBox = function ChoiceBox$1(text, cancelCb, confirmCb) {
          UIManager.getInstance().openUI(ChoiceBox, 99, function (ui, args) {
            ui.text = text;
            ui.cancelCb = cancelCb;
            ui.confirmCb = confirmCb;
          }, undefined, null);
        };

        TipManager.SafeCodeInputBox = function SafeCodeInputBox$1(confirmCb) {
          if (!GameAllData.isBandingSafeCode) {
            TipManager.autoTip(3, 8048, ConfigFile.findLanguage(8048), function () {
              UIManager.getInstance().openUI(SetUI, 11);
              UIManager.getInstance().closeUI(UIConchExchange);
            });
            return;
          }

          if (GameAllData.isSafeCodeTips && GameAllData.isBandingSafeCode || GameAllData.IsAccountTypeIsTest) {
            UIManager.getInstance().openUI(SafeCodeInputBox, 99, function (ui, args) {
              ui.confirmCb = confirmCb;
            }, undefined, null);
          } else {
            confirmCb();
          }
        } //处理带参数的提示
        ;

        TipManager.ChickBoxNew = function ChickBoxNew(code, moneyType, confirmCb) {
          if (moneyType === void 0) {
            moneyType = 0;
          }

          var text = ConfigFile.findLanguage(code);

          if (moneyType && moneyType != 0) {
            text = ConfigFile.findLanguage(code, moneyType);
          }

          UIManager.getInstance().openUI(ChickBox, 99, function (ui, args) {
            ui.text = text;
            ui.code = code;
            ui.moneyType = moneyType;
            ui.confirmCb = confirmCb;
          }, undefined, null);
        };

        return TipManager;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TipsUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UIManager.ts', './NodeHelp.ts', './Pool.ts', './BasePanel.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, Prefab, instantiate, Label, v3, tween, UIOpacity, UIManager, NodeHelp, PoolOnce, BasePanel;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      Label = module.Label;
      v3 = module.v3;
      tween = module.tween;
      UIOpacity = module.UIOpacity;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      BasePanel = module.BasePanel;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _class3;

      cclegacy._RF.push({}, "1aa07PnMn1ONq53jmzoJXG0", "TipsUI", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TipsUI = exports('TipsUI', (_dec = ccclass('TipsUI'), _dec2 = property({
        type: Node,
        displayName: "显示面板"
      }), _dec3 = property(Prefab), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(TipsUI, _BasePanel);

        function TipsUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "Panel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "item", _descriptor2, _assertThisInitialized(_this));

          _this._texts = [];
          _this.openIn = false;
          _this.openEnd = false;
          _this.confirmCb = null;
          _this.cancelCb = null;
          _this.Pool = new PoolOnce(10, function () {
            return instantiate(_this.item);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          return _this;
        }

        var _proto = TipsUI.prototype;

        _proto.deleteText = function deleteText() {
          if (this._texts[0]) {
            return this._texts.shift();
          } else return "";
        } //
        ;

        _proto.start = function start() {
          this.createitem();
        };

        _proto.deletitem = function deletitem() {
          var _this2 = this;

          this.openEnd = true;
          var item = this.Panel.children.find(function (v) {
            var have = false;
            NodeHelp.getchildlable(v, "Label", Label, function (comp) {
              if (comp.string == _this2.text) have = true;
            });
            return have;
          });

          if (item) {
            this.deleteText();
            this.createitem();
            var v3p = v3(0, -100, 0);
            var tween_1 = tween(item.getComponent(UIOpacity)).to(0.5, {
              opacity: 0
            });
            var tween_2 = tween(item).to(0.8, {
              position: v3p
            }, {
              easing: "backOutIn"
            }).call(function () {
              _this2.openEnd = false;

              _this2.Pool.put(item);

              if (_this2._texts.length < 1) {
                _this2.colseTipUi();
              } else {
                if (!_this2.openIn) _this2.createitem();
              }
            });
            tween_1.start();
            tween_2.start();
          } else {
            this.colseTipUi();
          }
        };

        _proto.createitem = function createitem() {
          var _this3 = this;

          if (this.text == "") return;
          this.openIn = true;
          var item = this.Pool.get();
          NodeHelp.getchildlable(item, "Label", Label, function (comp) {
            comp.string = _this3.text;
          });
          item.setPosition(0, 135, 0);
          item.getComponent(UIOpacity).opacity = 1;
          this.Panel.addChild(item);
          var v3p = v3(0, 0, 0);
          var tween_1 = tween(item.getComponent(UIOpacity)).to(0.8, {
            opacity: 255
          });
          var tween_2 = tween(item).to(0.5, {
            position: v3p
          }, {
            easing: "backOut"
          }).delay(0.5).call(function () {
            _this3.openIn = false;

            _this3.deletitem();
          });
          tween_1.start();
          tween_2.start();
        };

        _proto.colseTipUi = function colseTipUi() {
          this.unscheduleAllCallbacks();
          this.Pool.clear();
          UIManager.getInstance().closeUI(this.tag);
        };

        _createClass(TipsUI, [{
          key: "text",
          get: function get() {
            if (this._texts[0]) return this._texts[0];else return "";
          },
          set: function set(v) {
            var data = this._texts.filter(function (value, index) {
              return v == value;
            });

            if (data.length < 5) this._texts.push(v);
          }
        }]);

        return TipsUI;
      }(BasePanel), _class3.className = "TipsUI", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Panel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "item", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ToolItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './GameAllData.ts', './OperaleDef.ts', './producer.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Sprite, Label, Component, ConfigFile, Configname, GameAllData, OperaleDef, producer;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      OperaleDef = module.OperaleDef;
    }, function (module) {
      producer = module.producer;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "023c0gfMVlHBZj/xCVA9DSj", "ToolItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var tipDI = [2191, 2192, 2190, 2191, 3110, 3111, 3112];
      var nameDI = [2194, 2195, 2193, 2194, 3120, 3121, 3122];
      var actionDI = [OperaleDef.DIG, OperaleDef.DIG, OperaleDef.WATERING, OperaleDef.ERADICATE, OperaleDef.CLEANING, OperaleDef.FUMIGATE, OperaleDef.REMEDY];
      var ToolItem = exports('ToolItem', (_dec = ccclass('ToolItem'), _dec2 = property(Sprite), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ToolItem, _Component);

        function ToolItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "sprIcon", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "toolID", _descriptor2, _assertThisInitialized(_this));

          _this.touchStart = null;
          _this.lastTime = 0;
          _this.isLock = false;
          _this.mode = OperaleDef.NONE;
          _this.needVipLevel = 0;
          _this._grayscale = false;
          return _this;
        }

        var _proto = ToolItem.prototype;

        _proto.setSelect = function setSelect(value) {
          var sp = this.node.getComponent(Sprite);
          if (!sp.material) return;
          if (value) sp.material.setProperty("outerOutlineFade", 1.0);else sp.material.setProperty("outerOutlineFade", 0.0);
        };

        _proto.initUI = function initUI() {
          var _this2 = this;

          var vip = GameAllData.FarmUserResponse.VipLevel;
          var rank = GameAllData.FarmUserResponse.RankLevel;

          if (this.toolID > 3) {
            var DukeInfo = ConfigFile.getInstance().config.get(Configname.TDukeInfo);
            var tid = this.toolID - 3;
            var i = DukeInfo.find(function (item) {
              if (!item.SolveAnimalDisaster) return false;
              return item.SolveAnimalDisaster == tid;
            });
            this.needVipLevel = i.DukeLevel;
            if (rank < this.needVipLevel) this.isLock = true;else this.isLock = false;
          } else {
            var VipInfo = ConfigFile.getInstance().config.get(Configname.TVipInfo);

            var _i = VipInfo.find(function (item) {
              if (!item.SolveBotanyDisaster) return false;
              return item.SolveBotanyDisaster == _this2.toolID;
            });

            this.needVipLevel = _i.VipLevel;
            if (vip < this.needVipLevel) this.isLock = true;else this.isLock = false;
          }

          this.mode = actionDI[this.toolID];
          var label = this.getComponentInChildren(Label);
          label.string = producer.getMessageText(nameDI[this.toolID]);
          this.upDateState(); //this.scheduleOnce(this.upDateState,1000);
        };

        _proto.upDateState = function upDateState() {
          this.setSelect(false);
          if (this.isLock) this.grayscale = true;else this.grayscale = false; // if(this.isLock) this.sprIcon.grayscale = true;
          // else this.sprIcon.grayscale = false;
        };

        _proto.getTalkText = function getTalkText() {
          var name = this.node.getComponentInChildren(Label).string;
          var text = producer.getMessageText(tipDI[this.toolID]); //let text = "VIP%s级可解锁"+name+"功能";

          text = text.format(this.needVipLevel.toString());
          return {
            name: name,
            text: text
          };
        };

        _createClass(ToolItem, [{
          key: "grayscale",
          set: function set(val) {
            this._grayscale = val;
            var sp = this.node.getComponent(Sprite);
            if (!sp.material) return;

            if (this._grayscale) {
              var _sp$material;

              (_sp$material = sp.material) == null ? void 0 : _sp$material.setProperty("HsvSaturation", 0.0);
            } else {
              var _sp$material2;

              (_sp$material2 = sp.material) == null ? void 0 : _sp$material2.setProperty("HsvSaturation", 1.0);
            }
          }
        }]);

        return ToolItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sprIcon", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "toolID", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ToolUnlockTip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseTip.ts', './producer.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, BaseTip, producer;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      BaseTip = module.BaseTip;
    }, function (module) {
      producer = module.producer;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "75e5cNcXM1CBLIcGgIpJ7gB", "ToolUnlockTip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ToolUnlockTip = exports('ToolUnlockTip', (_dec = ccclass('ToolUnlockTip'), _dec2 = property(Label), _dec3 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseTip) {
        _inheritsLoose(ToolUnlockTip, _BaseTip);

        function ToolUnlockTip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseTip.call.apply(_BaseTip, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "Name", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Text", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = ToolUnlockTip.prototype;

        _proto.initUI = function initUI(arg) {
          this.popHeight = 100;
          this._cbData = arg;

          _BaseTip.prototype.initUI.call(this, arg); //this.Name.string = arg.name;


          producer.replaceDefaultColor(this.Name, arg.name);
          this.Text.string = arg.text;
        };

        return ToolUnlockTip;
      }(BaseTip), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Name", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Text", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/torus.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, _extends, cclegacy;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
      _extends = module.extends;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1e1961nHppKU5dYu4B8LAqG", "torus", undefined); // Supports Torus package versions 0.2.*


      var ConnectToTorus = exports('default', /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(Torus, opts) {
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", new Promise( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
                    var _opts$config, _opts$config2, _opts$config3, buttonPosition, apiKey, modalZIndex, network, defaultVerifier, torus, provider;

                    return _regeneratorRuntime().wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.prev = 0; // defaults

                            buttonPosition = "bottom-left";
                            apiKey = "torus-default";
                            modalZIndex = 99999;
                            network = {
                              host: "mainnet"
                            };
                            defaultVerifier = undefined; // parsing to Torus interfaces

                            network = opts.networkParams || opts.network ? _extends({
                              host: opts.network
                            }, opts.networkParams) : network;
                            torus = new Torus({
                              buttonPosition: ((_opts$config = opts.config) == null ? void 0 : _opts$config.buttonPosition) || buttonPosition,
                              apiKey: ((_opts$config2 = opts.config) == null ? void 0 : _opts$config2.apiKey) || apiKey,
                              modalZIndex: ((_opts$config3 = opts.config) == null ? void 0 : _opts$config3.modalZIndex) || modalZIndex
                            });
                            _context.next = 10;
                            return torus.init(_extends({
                              showTorusButton: false
                            }, opts.config, {
                              network: network
                            }));

                          case 10:
                            if (opts.loginParams) {
                              defaultVerifier = opts.loginParams.verifier;
                            }

                            _context.next = 13;
                            return torus.login({
                              verifier: defaultVerifier
                            });

                          case 13:
                            provider = torus.provider;
                            provider.torus = torus;
                            resolve(provider);
                            _context.next = 21;
                            break;

                          case 18:
                            _context.prev = 18;
                            _context.t0 = _context["catch"](0);
                            reject(_context.t0);

                          case 21:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee, null, [[0, 18]]);
                  }))));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        return function ConnectToTorus(_x, _x2) {
          return _ref.apply(this, arguments);
        };
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/towAnimation.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UIManager.ts', './UIGame.ts', './UIHelp.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Vec3, Component, UIManager, UIGame, UIHelp;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      UIGame = module.UIGame;
    }, function (module) {
      UIHelp = module.UIHelp;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "91989wrSAdNFJ1NQ+Fe9A8C", "towAnimation", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var temp_V3_1 = new Vec3();
      var temp_V3_2 = new Vec3();
      var temp_V3_3 = new Vec3();
      var towAnimation = exports('towAnimation', (_dec = ccclass('towAnimation'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(towAnimation, _Component);

        function towAnimation() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.targetNode = null;
          _this.sourceNode = null;
          _this.inputData = null;
          _this._cb = null;
          _this.offsetX = 0;
          _this.offsetY = 0;
          _this.lastTime = 0;
          _this.ischeck = false;
          _this.show = void 0;
          return _this;
        }

        var _proto = towAnimation.prototype;

        _proto.initUI = function initUI(args, cb, show) {
          if (show === void 0) {
            show = false;
          }

          this._cb = cb;
          this.inputData = args;
          this.targetNode = args.target;
          this.sourceNode = args.source;
          this.offsetX = args.x;
          this.offsetY = args.y;
          this.show = show;

          if (this.sourceNode) {
            this.sourceNode.getWorldPosition(temp_V3_1);
            temp_V3_1.x += this.offsetX;
            temp_V3_1.y += this.offsetY;
            this.node.setWorldPosition(temp_V3_1);
          }
        };

        _proto.start = function start() {};

        _proto.setHide = function setHide() {
          var game = UIManager.getInstance().getUI(UIGame);
          var tool = game.getToolsView();
          if (tool.node.active) this.lastTime = 0;

          if (!tool.node.active && UIHelp.getTimeDiff(this.lastTime) > 6000) {
            this.node.parent = null;
          }
        };

        _proto.onMove = function onMove(deltaTime) {
          this.ischeck = false;
          if (!this.targetNode || !this.sourceNode) return;
          this.node.getWorldPosition(temp_V3_1);
          this.targetNode.getWorldPosition(temp_V3_2);
          temp_V3_2.x += this.offsetX;
          temp_V3_2.y += this.offsetY;
          var diff = Math.abs(Vec3.distance(temp_V3_1, temp_V3_2));

          if (diff < 10) {
            this.sourceNode.getWorldPosition(temp_V3_1);
            temp_V3_1.x += this.offsetX;
            temp_V3_1.y += this.offsetY;
          }

          Vec3.subtract(temp_V3_3, temp_V3_2, temp_V3_1);
          temp_V3_3.normalize();
          temp_V3_3.multiplyScalar(300 * deltaTime);
          temp_V3_1.add(temp_V3_3);
          this.node.setWorldPosition(temp_V3_1);
        };

        _proto.update = function update(deltaTime) {
          var game = UIManager.getInstance().getUI(UIGame);
          var tool = game.getToolsView();
          if (tool.node.active || this.show) this.onMove(deltaTime);else this.ischeck = true;
          if (this.ischeck) this.setHide();
        };

        return towAnimation;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TransferItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './NodeHelp.ts', './ExchangeRecodItem.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, ConfigFile, NodeHelp, ExchangeRecodItem;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      ExchangeRecodItem = module.ExchangeRecodItem;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "09726bPvbxIHI+A9jHwe1o1", "TransferItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TransferItem = exports('TransferItem', (_dec = ccclass('TransferItem'), _dec(_class = /*#__PURE__*/function (_ExchangeRecodItem) {
        _inheritsLoose(TransferItem, _ExchangeRecodItem);

        function TransferItem() {
          return _ExchangeRecodItem.apply(this, arguments) || this;
        }

        var _proto = TransferItem.prototype;

        _proto.init = function init(data, index) {
          var _this = this;

          _ExchangeRecodItem.prototype.init.call(this, data, index);

          if ((index + 1) % 2 == 0) {
            this.node.getChildByName("bg_2").active = true;
          }

          NodeHelp.getchildlable(this.node, "dstUserID", Label, function (comp) {
            comp.string = _this.data.dst_user_id;
          });
          NodeHelp.getchildlable(this.node, "modeID", Label, function (comp) {
            var currencyData = ConfigFile.getItemData(_this.data.mode_id);
            var currencyName = ConfigFile.findLanguage(currencyData.Name);
            comp.string = currencyName;
          });
          NodeHelp.getchildlable(this.node, "value", Label, function (comp) {
            comp.string = _this.data.value;
          });
          NodeHelp.getchildlable(this.node, "taxRate", Label, function (comp) {
            comp.string = Math.floor(Number(_this.data.tax_rate * 100)) + "%";
          });
          NodeHelp.getchildlable(this.node, "obtain", Label, function (comp) {
            comp.string = _this.data.obtain;
          });
          NodeHelp.getchildlable(this.node, "time", Label, function (comp) {
            //时间显示
            var date = new Date(_this.data.time * 1000);
            var year = date.getFullYear() + "";
            var month = date.getMonth() + 1 + "";
            var day = date.getDate() + "";
            var hours = date.getHours() < 10 ? "0" + date.getHours() : date.getHours() + "";
            var minutes = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes() + "";
            var seconds = date.getSeconds() < 10 ? "0" + date.getSeconds() : date.getSeconds() + "";
            comp.string = month + "/" + day + "/" + year + " " + hours + ":" + minutes + ":" + seconds;
          });
        };

        return TransferItem;
      }(ExchangeRecodItem)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TweenHelp.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _createForOfIteratorHelperLoose, cclegacy, Size, ccenum, view, Tween, Widget, v3, tween, Vec3;

  return {
    setters: [function (module) {
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Size = module.Size;
      ccenum = module.ccenum;
      view = module.view;
      Tween = module.Tween;
      Widget = module.Widget;
      v3 = module.v3;
      tween = module.tween;
      Vec3 = module.Vec3;
    }],
    execute: function () {
      exports({
        ETweenType: void 0,
        winSize: winSize
      });

      cclegacy._RF.push({}, "cfce5y8H7xM/YwJJ9B5zchi", "TweenHelp", undefined);

      var ETweenType;

      (function (ETweenType) {
        ETweenType[ETweenType["None"] = 0] = "None";
        ETweenType[ETweenType["Jelly"] = 1] = "Jelly";
        ETweenType[ETweenType["RightGo"] = 2] = "RightGo";
        ETweenType[ETweenType["Rightout"] = 3] = "Rightout";
        ETweenType[ETweenType["jumptow"] = 4] = "jumptow";
      })(ETweenType || (ETweenType = exports('ETweenType', {})));

      var _winSize = new Size();

      var _winSizeT = new Size();

      ccenum(ETweenType);
      var TweenHelper = exports('TweenHelper', /*#__PURE__*/function () {
        function TweenHelper() {}

        TweenHelper.stop = function stop(value, type) {
          if (!type) Tween.stopAllByTarget(value);else {
            var _tween = this.getTween(value, type);

            if (_tween) _tween.stop();
          }
        } // this.node.setScale(0.9, 0.9, 0.9);
        // tween(this.node)
        //     .to(0.2, { scale: new Vec3(1.05, 1.05, 1.05) })
        //     .to(0.10, { scale: new Vec3(0.95, 0.95, 0.95) })
        //     .to(0.10, { scale: new Vec3(1.0, 1.0, 1.0) })
        //     .start();
        ;

        TweenHelper["default"] = function _default(node, type, cb) {
          TweenHelper.stop(node, type);

          switch (type) {
            case ETweenType.Jelly:
              {
                if (node.scale.x < 0) {
                  node.setScale(-0.9, 0.9, 0.9);
                } else {
                  node.setScale(0.9, 0.9, 0.9);
                }

                break;
              }

            case ETweenType.RightGo:
              {
                var widget = node.getComponent(Widget);
                if (widget) widget.updateAlignment();
                var posi = node.getWorldPosition();
                node.setWorldPosition(posi.x + winSize().width / 2, posi.y, 0);
              }
          }

          return this.getTween(node, type, function (_tween) {
            switch (type) {
              case ETweenType.Jelly:
                {
                  var v3T = v3(1, 1, 1);
                  if (node.scale.x < 0) v3T.x = -1;
                  var v3T2 = v3T.clone();

                  _tween.call(function () {
                    v3T2.x = v3T.x * .9;
                    v3T2.y = v3T.y * .9;
                  }).to(0, {
                    scale: v3T2
                  }).call(function () {
                    v3T2.x = v3T.x * 1.05;
                    v3T2.y = v3T.y * 1.05;
                  }).to(.2, {
                    scale: v3T2
                  }).call(function () {
                    v3T2.x = v3T.x * .95;
                    v3T2.y = v3T.y * .95;
                  }).to(.1, {
                    scale: v3T2
                  }).call(function () {
                    v3T2.x = v3T.x * 1;
                    v3T2.y = v3T.y * 1;
                  }).to(.1, {
                    scale: v3T2
                  }).call(function () {
                    if (cb) cb();
                  });

                  break;
                }

              case ETweenType.jumptow:
                {
                  var _v3T = v3(1, 1, 1);

                  var _v3T2 = _v3T.clone();

                  _tween.call(function () {
                    _v3T2.x = _v3T.x * 1.2;
                    _v3T2.y = _v3T.y * 1.2;
                  }).to(0.3, {
                    scale: _v3T2
                  }, {
                    easing: "quadIn"
                  }).call(function () {
                    _v3T2.x = _v3T.x * 1;
                    _v3T2.y = _v3T.y * 1;
                  }).to(.1, {
                    scale: _v3T2
                  }, {
                    easing: "quadIn"
                  }).delay(.1).call(function () {
                    _v3T2.x = _v3T.x * 1.2;
                    _v3T2.y = _v3T.y * 1.2;
                  }).to(0.3, {
                    scale: _v3T2
                  }, {
                    easing: "quadIn"
                  }).call(function () {
                    _v3T2.x = _v3T.x * 1;
                    _v3T2.y = _v3T.y * 1;
                  }).to(.1, {
                    scale: _v3T2
                  }, {
                    easing: "quadIn"
                  }).call(function () {
                    if (cb) cb();
                  });

                  break;
                }

              case ETweenType.RightGo:
                {
                  var _v3T3 = node.getWorldPosition();

                  var _v3T4 = _v3T3.clone();

                  var movex = winSize().width / 2;

                  _tween.call(function () {
                    _v3T4.x = _v3T3.x - movex;
                  }).to(0.3, {
                    worldPosition: _v3T4
                  }, {
                    easing: "quadIn"
                  }).call(function () {
                    if (cb) cb();
                  });

                  break;
                }

              case ETweenType.Rightout:
                {
                  var _v3T5 = node.getWorldPosition();

                  var _v3T6 = _v3T5.clone();

                  var _movex = winSize().width / 2;

                  _tween.call(function () {
                    _v3T6.x = _v3T5.x + _movex;
                  }).to(0.3, {
                    worldPosition: _v3T6
                  }, {
                    easing: "quadIn"
                  }).call(function () {
                    if (cb) cb();
                  });

                  break;
                }
            }
          }).start();
        } //循环果冻效果
        ;

        TweenHelper.jellyRepeatForever = function jellyRepeatForever(node) {
          TweenHelper.stop(node);
          node.setScale(0.9, 0.9, 0.9);
          var embedTween = tween(node).to(0.2, {
            scale: new Vec3(1.05, 1.05, 1.05)
          }).to(0.10, {
            scale: new Vec3(0.95, 0.95, 0.95)
          }).to(0.10, {
            scale: new Vec3(1.0, 1.0, 1.0)
          });
          return this.getTween(node, ETweenType.Jelly, function (_tween) {
            tween(node).to(0.2, {
              scale: new Vec3(1.05, 1.05, 1.05)
            }).to(0.10, {
              scale: new Vec3(0.95, 0.95, 0.95)
            }).to(0.10, {
              scale: new Vec3(1.0, 1.0, 1.0)
            });
          }).repeat(99999, embedTween).start();
        };

        TweenHelper.getTween = function getTween(obj, type, create) {
          var _tween = obj["_Tweens_" + type];

          if (!_tween && create) {
            _tween = obj["_Tweens_" + type] = new Tween(obj);
            create(_tween);
          }

          return _tween;
        }
        /**获取tween的持续时间 */
        ;

        TweenHelper.duration = function duration(_tween) {
          if (_tween) {
            var duration = 0;
            var actions = _tween._actions;

            for (var _iterator = _createForOfIteratorHelperLoose(actions), _step; !(_step = _iterator()).done;) {
              var value = _step.value;
              duration += value._duration;
            }

            return duration;
          }

          return 0;
        }
        /**
         * 改变tween里第 index的tween的持续时间
         * @param _tween 
         * @param index 
         * @param duration 
         */
        ;

        TweenHelper.setDuration = function setDuration(_tween, index, duration) {
          var actions = _tween._actions;
          var action = actions[index];
          if (action) action.initWithDuration(duration);
        };

        return TweenHelper;
      }());
      /**屏幕尺寸 */

      function winSize(addW, addH) {
        if (_winSize.width == 0 && _winSize.height == 0) _winSize.set(view.getVisibleSize());

        _winSizeT.set(_winSize);

        if (addW != undefined) _winSizeT.width += addW;
        if (addH != undefined) _winSizeT.height += addH;
        return _winSizeT;
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/types.ts", ['cc'], function () {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "19c64iTnHZMsaXPDSNGZgju", "types", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIActivity.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumDefine.ts', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './UIManager.ts', './NodeHelp.ts', './BaseUI.ts', './BagUIItemTip.ts', './ActivityComponent.ts', './UIActivityToggleItem.ts', './UIActivityLuckGet.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, Sprite, Node, SpriteFrame, Prefab, Input, Label, view, sys, Widget, UITransform, instantiate, EnumDefine, ConfigFile, GameAllData, EventManager, MessageManager, UIManager, NodeHelp, BaseUI, BagUIItemTip, Activitycoopent, UIActivityToggleItem, UIActivityLuckGet;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      Prefab = module.Prefab;
      Input = module.Input;
      Label = module.Label;
      view = module.view;
      sys = module.sys;
      Widget = module.Widget;
      UITransform = module.UITransform;
      instantiate = module.instantiate;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }, function (module) {
      Activitycoopent = module.Activitycoopent;
    }, function (module) {
      UIActivityToggleItem = module.UIActivityToggleItem;
    }, function (module) {
      UIActivityLuckGet = module.UIActivityLuckGet;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _class3;

      cclegacy._RF.push({}, "0f11e4bdWBKlIoWx8qBngv2", "UIActivity", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIActivity = exports('UIActivity', (_dec = ccclass('UIActivity'), _dec2 = property(Sprite), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property({
        type: [SpriteFrame],
        displayName: "活动背景图片"
      }), _dec10 = property({
        type: [Prefab],
        displayName: "活动二级面板"
      }), _dec11 = property({
        type: Prefab,
        displayName: "选择按钮"
      }), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(UIActivity, _BaseUI);

        function UIActivity() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "NodeBG", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Toggles", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "TipParent", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ScrollViewMask", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "togglePanels", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonClose", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "panels", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "BG", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "PrefabPanels", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "PrefabToggle", _descriptor10, _assertThisInitialized(_this));

          _this.confirmCb = null;
          _this.cancelCb = null;
          _this.activityType = null;
          _this.ActivityMap = new Map();
          _this.activitydata = 0;
          return _this;
        }

        var _proto = UIActivity.prototype;

        _proto.start = function start() {
          this.setSafe();
          EventManager.getInstance().add(MessageManager.Custom.ActivityChange, this, this.setShow);
          EventManager.getInstance().add(MessageManager.Custom.ActivityGet, this, this.setActivityGet);
          this.togglePanels.on(Input.EventType.TOUCH_START, this.closeTip, this);
          this.setShow();
          NodeHelp.getchildlable(this.togglePanels, "BGTitle", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(130241);
          });
        };

        _proto.onDisable = function onDisable() {
          this.togglePanels.off(Input.EventType.TOUCH_START, this.closeTip, this);
        };

        _proto.setSafe = function setSafe() {
          var visibleSize = view.getVisibleSize();
          var screenWidth = visibleSize.width;
          var screenHeight = visibleSize.height;
          var safeArea = sys.getSafeAreaRect();
          var widget = this.togglePanels.getComponent(Widget);
          this.togglePanels.getComponent(UITransform).width += safeArea.x <= 10 ? 0 : safeArea.x - 10; // widget.top = screenHeight - safeArea.y - safeArea.height;
          // widget.bottom = safeArea.y;

          widget.updateAlignment();
          this.togglePanels.children.forEach(function (v) {
            var childWidget = v.getComponent(Widget);
            if (childWidget) childWidget.updateAlignment();
          });
          this.ScrollViewMask.getComponent(Widget).updateAlignment();
          var buttonWidget = this.buttonClose.getComponent(Widget);
          buttonWidget.right = screenWidth - safeArea.x - safeArea.width + 15;
          buttonWidget.top = screenHeight - safeArea.y - safeArea.height + 10;
          buttonWidget.updateAlignment();
        };

        _proto.setShow = function setShow() {
          if (!GameAllData.FarmActivityListResponse) return;
          this.onclaer();

          if (GameAllData.FarmActivityListResponse.Activities && GameAllData.FarmActivityListResponse.Activities.length > 0) {
            for (var _iterator = _createForOfIteratorHelperLoose(GameAllData.FarmActivityListResponse.Activities), _step; !(_step = _iterator()).done;) {
              var data = _step.value;
              this.addconfig(data.ActivityType, data);
            }
          }

          this.setActivity();
          this.scheduleOnce(this.setChickToggle);
        };

        _proto.setLuckGet = function setLuckGet(data, id) {
          console.log("setLuckGet--------->%o", data);
          var isLuckyWheel = true;

          for (var _iterator2 = _createForOfIteratorHelperLoose(this.panels.children), _step2; !(_step2 = _iterator2()).done;) {
            var panel = _step2.value;
            var comp = panel.getComponent(Activitycoopent);

            if (comp.activityInfo && comp.activityInfo.ActivityModeId == id) {
              if (GameAllData.FarmActivityListResponse.Activities && GameAllData.FarmActivityListResponse.Activities.length > 0) {
                for (var _iterator3 = _createForOfIteratorHelperLoose(GameAllData.FarmActivityListResponse.Activities), _step3; !(_step3 = _iterator3()).done;) {
                  var Activitie = _step3.value;

                  if (Activitie.ActivityModeId == id) {
                    this.ActivityMap.get(comp.activityInfo.ActivityType)[0] = Activitie;
                    break;
                  }
                }
              }

              comp.activityInfo = this.ActivityMap.get(comp.activityInfo.ActivityType)[0];

              if (panel.active) {
                comp.onGoGet(data);
                isLuckyWheel = true;
              }

              break;
            }
          }

          if (!isLuckyWheel) {
            UIManager.getInstance().openUI(UIActivityLuckGet, 20, function (ui, args) {
              ui.init(data);
            }, undefined, null);
          }
        };

        _proto.setActivityGet = function setActivityGet(data) {
          var _this2 = this;

          this.activitydata = data;
          this.ActivityMap.clear();

          if (GameAllData.FarmActivityListResponse.Activities && GameAllData.FarmActivityListResponse.Activities.length > 0) {
            for (var _iterator4 = _createForOfIteratorHelperLoose(GameAllData.FarmActivityListResponse.Activities), _step4; !(_step4 = _iterator4()).done;) {
              var _data = _step4.value;
              this.addconfig(_data.ActivityType, _data);
            }
          }

          var _loop = function _loop() {
            var key = _step5.value;

            _this2.panels.children.forEach(function (V) {
              var comp = V.getComponent(Activitycoopent);

              if (comp.activitysKey == key) {
                comp.activityInfo = _this2.ActivityMap.get(key)[0];
                comp.activitys = _this2.ActivityMap.get(key);
                comp.activitysKey = key;
                comp.activitydata = _this2.activitydata;
              }
            });
          };

          for (var _iterator5 = _createForOfIteratorHelperLoose(this.ActivityMap.keys()), _step5; !(_step5 = _iterator5()).done;) {
            _loop();
          }

          EventManager.getInstance().trigger(MessageManager.Custom.ActivityGetofPanel);
        };

        _proto.setChickToggle = function setChickToggle() {
          var _this3 = this;

          var tog = null;

          if (this.activityType) {
            var toggle = this.Toggles.children.find(function (v) {
              return _this3.activityType == v.getComponent(UIActivityToggleItem).type;
            });

            if (toggle && toggle.isValid) {
              tog = toggle.getComponent(UIActivityToggleItem);
            }
          }

          if (!tog && this.Toggles.children[0]) {
            tog = this.Toggles.children[0].getComponent(UIActivityToggleItem);
          }

          if (tog) {
            // tog.node.getComponent(Toggle).isChecked = true
            tog.onclick();
          }
        };

        _proto.setSign = function setSign() {
          //创建每日签到
          if (GameAllData.FarmActivityListResponse.Signs && GameAllData.FarmActivityListResponse.Signs.length > 0) {
            var SignsShow = false; //是否显示每日签到

            for (var _iterator6 = _createForOfIteratorHelperLoose(GameAllData.FarmActivityListResponse.Signs), _step6; !(_step6 = _iterator6()).done;) {
              var sign = _step6.value;
              if (!sign.IsGet) SignsShow = true;
            }

            if (!SignsShow) return;
            var toggle = instantiate(this.PrefabToggle);
            var str = ConfigFile.findLanguage(130006);
            NodeHelp.getchildlable(toggle, "Label", Label, function (comp) {
              comp.string = str;
            });
            NodeHelp.getchildlable(toggle, "Checkmark", Label, function (comp) {
              comp.string = str;
            });
            var Togglecomp = toggle.getComponent(UIActivityToggleItem);
            Togglecomp.init(EnumDefine.ActivityType.EveryDay, this);
            this.Toggles.addChild(toggle);
            var node = instantiate(this.PrefabPanels[EnumDefine.ActivityType.EveryDay]);
            var comp = node.getComponent(Activitycoopent);
            comp.activitytype = EnumDefine.ActivityType.EveryDay;
            this.panels.addChild(node);
            node.active = false;
          }
        };

        _proto.setActivity = function setActivity() {
          var _this4 = this;

          var fist = false;

          for (var _iterator7 = _createForOfIteratorHelperLoose(this.ActivityMap.keys()), _step7; !(_step7 = _iterator7()).done;) {
            var key = _step7.value;

            if (key == EnumDefine.ActivityType.FirstCharge) {
              fist = true;
              break;
            }
          }

          if (!fist) {
            this.setSign();
          } //创建活动


          var _loop2 = function _loop2() {
            var key = _step8.value;
            var tActivitiesInfo = ConfigFile.getTActivitiesInfoByActivitiesId(_this4.ActivityMap.get(key)[0].ActivityModeId);
            if (!tActivitiesInfo) return "continue";

            if (!_this4.PrefabPanels[key]) {
              return "continue";
            }

            var Show = false; //显示面板

            for (var _iterator9 = _createForOfIteratorHelperLoose(_this4.ActivityMap.get(key)), _step9; !(_step9 = _iterator9()).done;) {
              var keyinfo = _step9.value;

              if (keyinfo.TotalGet < keyinfo.TotalGetTime || keyinfo.TotalGetTime == 0) {
                Show = true;
              }

              if (keyinfo.ActivityType == 6 || keyinfo.ActivityType == 7) {
                if (keyinfo.MaxTime == -1 || keyinfo.TotalGet < keyinfo.MaxTime) Show = true;else Show = false;
              }
            }

            if (!Show) {
              if (key == EnumDefine.ActivityType.FirstCharge) {
                _this4.setSign();
              }

              return "continue";
            }

            var toggle = instantiate(_this4.PrefabToggle);
            NodeHelp.getchildlable(toggle, "Label", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(tActivitiesInfo.Name);
            });
            NodeHelp.getchildlable(toggle, "Checkmark", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(tActivitiesInfo.Name);
            });
            Togglecomp = toggle.getComponent(UIActivityToggleItem);
            Togglecomp.init(key, _this4);

            _this4.Toggles.addChild(toggle);

            var node = instantiate(_this4.PrefabPanels[key]);
            var comp = node.getComponent(Activitycoopent);
            comp.activityInfo = _this4.ActivityMap.get(key)[0];
            comp.activitys = _this4.ActivityMap.get(key);
            comp.activitysKey = key;
            comp.activitydata = _this4.activitydata;

            _this4.panels.addChild(node);

            node.active = false;

            if (key == EnumDefine.ActivityType.FirstCharge) {
              _this4.setSign();
            }
          };

          for (var _iterator8 = _createForOfIteratorHelperLoose(this.ActivityMap.keys()), _step8; !(_step8 = _iterator8()).done;) {
            var Togglecomp;

            var _ret = _loop2();

            if (_ret === "continue") continue;
          }
        };

        _proto.addconfig = function addconfig(name, data) {
          if (this.ActivityMap.has(name)) {
            this.ActivityMap.get(name).push(data);
          } else {
            var arr = [];
            arr.push(data);
            this.ActivityMap.set(name, arr);
          }
        };

        _proto.onclaer = function onclaer() {
          this.Toggles.destroyAllChildren();
          this.panels.children.forEach(function (v) {
            v.getComponent(Activitycoopent).onClose();
          });

          while (this.panels.children.length > 0) {
            var item = this.panels.children[0];
            var comp = item.getComponent(Activitycoopent);
            comp.onClose();
          }

          this.ActivityMap.clear();
        };

        _proto.onClose = function onClose() {
          this.onclaer();
          BagUIItemTip.getInstance().tipDestroy();
          EventManager.getInstance().remove(MessageManager.Custom.ActivityChange, this, this.setShow);
          UIManager.getInstance().closeUI(UIActivity);
        };

        _proto.closeTip = function closeTip() {
          BagUIItemTip.getInstance().closeTip();
        };

        return UIActivity;
      }(BaseUI), _class3.className = "UIActivity", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "NodeBG", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Toggles", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "TipParent", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "ScrollViewMask", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "togglePanels", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "buttonClose", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "panels", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "BG", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "PrefabPanels", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "PrefabToggle", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIActivityLuckGet.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './GameManager.ts', './UIManager.ts', './MainGame.ts', './NodeHelp.ts', './Pool.ts', './BaseUI.ts', './AnswerItem.ts', './BagUIItemTip.ts', './GetItemEff.ts', './UIGame.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Node, ScrollView, instantiate, Input, Label, find, ConfigFile, GameManager, UIManager, MainGame, NodeHelp, PoolOnce, BaseUI, AnswerItem, BagUIItemTip, GetItemEff, UIGame;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      ScrollView = module.ScrollView;
      instantiate = module.instantiate;
      Input = module.Input;
      Label = module.Label;
      find = module.find;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      MainGame = module.MainGame;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      AnswerItem = module.AnswerItem;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }, function (module) {
      GetItemEff = module.GetItemEff;
    }, function (module) {
      UIGame = module.UIGame;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class3;

      cclegacy._RF.push({}, "75ae0gjePJCS51NUHejmezH", "UIActivityLuckGet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIActivityLuckGet = exports('UIActivityLuckGet', (_dec = ccclass('UIActivityLuckGet'), _dec2 = property(Prefab), _dec3 = property(Node), _dec4 = property(ScrollView), _dec5 = property(Node), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(UIActivityLuckGet, _BaseUI);

        function UIActivityLuckGet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "itemPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "items", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ScrollViewitems", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bg", _descriptor4, _assertThisInitialized(_this));

          _this.icons = null;
          _this.Pool = new PoolOnce(30, function () {
            return instantiate(_this.itemPrefab);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          return _this;
        }

        var _proto = UIActivityLuckGet.prototype;

        _proto.start = function start() {
          var _this2 = this;

          setTimeout(function () {
            _BaseUI.prototype.elasticEffect.call(_this2, _this2.bg, null);
          }, 1);
          this.setShow();
        };

        _proto.onEnable = function onEnable() {
          this.ScrollViewitems.node.on(ScrollView.EventType.SCROLL_BEGAN, this.closeTip, this);
          this.ScrollViewitems.node.on(Input.EventType.TOUCH_START, this.closeTip, this);
        };

        _proto.onDisable = function onDisable() {
          this.ScrollViewitems.node.off(ScrollView.EventType.SCROLL_BEGAN, this.closeTip, this);
          this.ScrollViewitems.node.off(Input.EventType.TOUCH_START, this.closeTip, this);
          this.clearItems();
          this.Pool.clear();
        };

        _proto.init = function init(icons) {
          this.icons = icons;
          this.createItems();
          this.scheduleOnce(this.onClickClose, 10);
        };

        _proto.setShow = function setShow() {
          NodeHelp.getchildlable(this.node, "Level", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(130104);
          });
          NodeHelp.getchildlable(this.node, "LevelText", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(130103);
          });
          NodeHelp.getchildlable(this.node, "Btn", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(120054);
          });
        };

        _proto.createItems = function createItems() {
          var _this3 = this;

          var Itemlen = this.icons.Items ? this.icons.Items.length : 0;
          var currencylen = this.icons.Currency ? this.icons.Currency.length : 0;
          var Itemslength = Itemlen + currencylen;
          var print = this.items;

          if (Itemslength >= 3) {
            print = this.ScrollViewitems.content;
          }

          var i_1 = 0;
          var i_2 = 0;

          var funcItem = function funcItem() {
            if (i_1 >= Itemlen) {
              i_1 = 0;

              _this3.unschedule(funcItem);

              return;
            }

            var itemData = _this3.icons.Items[i_1];

            var item = _this3.Pool.get();

            print.addChild(item);
            item.getComponent(AnswerItem).initUI(Number(itemData.ItemModeId), Number(itemData.ChangeCount));
            i_1++;
          };

          var funcCurrency = function funcCurrency() {
            if (i_2 >= currencylen) {
              i_2 = 0;

              _this3.unschedule(funcCurrency);

              return;
            }

            var itemData = _this3.icons.Currency[i_2];

            var item = _this3.Pool.get();

            print.addChild(item);
            item.getComponent(AnswerItem).initUI(Number(itemData.CurrencyModeId), Number(itemData.ChangeCount));
            i_2++;
          };

          this.schedule(funcItem, 0);
          this.schedule(funcCurrency, 0);
        };

        _proto.clearItems = function clearItems() {
          while (this.ScrollViewitems && this.ScrollViewitems.content.children.length > 0) {
            this.Pool.put(this.ScrollViewitems.content.children[0]);
          }

          while (this.items && this.items.children.length > 0) {
            this.Pool.put(this.items.children[0]);
          }
        };

        _proto.onClickClose = function onClickClose() {
          BagUIItemTip.getInstance().tipDestroy();

          if (this.icons) {
            var gameUi = UIManager.getInstance().getUI(UIGame);

            if (gameUi) {
              var mg = GameManager.getInstance().getGame(MainGame);
              var flyNode = instantiate(mg.getItemEff);
              flyNode.parent = find("Canvas");
              flyNode.getComponent(GetItemEff).getFly(gameUi.node.worldPosition, this.icons);
            }
          }

          UIManager.getInstance().closeUI(UIActivityLuckGet);
        };

        _proto.closeTip = function closeTip() {
          BagUIItemTip.getInstance().closeTip();
        };

        return UIActivityLuckGet;
      }(BaseUI), _class3.className = "UIActivityLuckGet", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "itemPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "items", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "ScrollViewitems", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "bg", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIActivityOther.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumDefine.ts', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './UIManager.ts', './NodeHelp.ts', './BaseUI.ts', './UIActivityOtherToggleItem.ts', './BagUIItemTip.ts', './ActivityComponent.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, Sprite, Node, SpriteFrame, Prefab, Input, Label, view, sys, Widget, UITransform, instantiate, EnumDefine, ConfigFile, GameAllData, EventManager, MessageManager, UIManager, NodeHelp, BaseUI, UIActivityOtherToggleItem, BagUIItemTip, Activitycoopent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      Prefab = module.Prefab;
      Input = module.Input;
      Label = module.Label;
      view = module.view;
      sys = module.sys;
      Widget = module.Widget;
      UITransform = module.UITransform;
      instantiate = module.instantiate;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      UIActivityOtherToggleItem = module.UIActivityOtherToggleItem;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }, function (module) {
      Activitycoopent = module.Activitycoopent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _class3;

      cclegacy._RF.push({}, "93acdypHiFNbah3Vc1IfYaF", "UIActivityOther", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIActivityOther = exports('UIActivityOther', (_dec = ccclass('UIActivityOther'), _dec2 = property(Sprite), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property({
        type: [SpriteFrame],
        displayName: "活动背景图片"
      }), _dec10 = property({
        type: [Prefab],
        displayName: "活动二级面板"
      }), _dec11 = property({
        type: Prefab,
        displayName: "选择按钮"
      }), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(UIActivityOther, _BaseUI);

        function UIActivityOther() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "NodeBG", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Toggles", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "TipParent", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ScrollViewMask", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "togglePanels", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonClose", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "panels", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "BG", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "PrefabPanels", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "PrefabToggle", _descriptor10, _assertThisInitialized(_this));

          _this.confirmCb = null;
          _this.cancelCb = null;
          _this.activityType = null;
          _this.ActivityMap = new Map();
          _this.activitydata = 0;
          _this.typename = [130251, 130261, 130243, 130268];
          return _this;
        }

        var _proto = UIActivityOther.prototype;

        _proto.start = function start() {
          this.setSafe();
          EventManager.getInstance().add(MessageManager.Custom.ActivityChange, this, this.onActivityChange);
          EventManager.getInstance().add(MessageManager.Custom.ActivityGet, this, this.onActivityGet);
          this.togglePanels.on(Input.EventType.TOUCH_START, this.closeTip, this);
          this.setShow();
          NodeHelp.getchildlable(this.togglePanels, "BGTitle", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(130241);
          });
        };

        _proto.onDisable = function onDisable() {
          this.togglePanels.off(Input.EventType.TOUCH_START, this.closeTip, this);
        };

        _proto.setSafe = function setSafe() {
          var visibleSize = view.getVisibleSize();
          var screenWidth = visibleSize.width;
          var screenHeight = visibleSize.height;
          var safeArea = sys.getSafeAreaRect();
          var widget = this.togglePanels.getComponent(Widget);
          this.togglePanels.getComponent(UITransform).width += safeArea.x <= 10 ? 0 : safeArea.x - 10; // widget.top = screenHeight - safeArea.y - safeArea.height;
          // widget.bottom = safeArea.y;

          widget.updateAlignment();
          this.togglePanels.children.forEach(function (v) {
            var childWidget = v.getComponent(Widget);
            if (childWidget) childWidget.updateAlignment();
          });
          this.ScrollViewMask.getComponent(Widget).updateAlignment();
          var buttonWidget = this.buttonClose.getComponent(Widget);
          buttonWidget.right = screenWidth - safeArea.x - safeArea.width + 15;
          buttonWidget.top = screenHeight - safeArea.y - safeArea.height + 10;
          buttonWidget.updateAlignment();
        };

        _proto.setShow = function setShow() {
          //得到数据
          var datas = GameAllData.getActivityInfo(true);
          if (datas.length < 1) return;

          for (var _iterator = _createForOfIteratorHelperLoose(datas), _step; !(_step = _iterator()).done;) {
            var data = _step.value;
            this.addconfig(data.ActivityType, data);
          }

          this.setActivity();
          this.setToggles();
          this.scheduleOnce(this.setChickToggle);
        } //创建切页按钮
        ;

        _proto.setToggles = function setToggles() {
          var _this2 = this;

          var _loop = function _loop() {
            var key = _step2.value;
            var name = _this2.typename[key - EnumDefine.ActivityType.Extension];
            if (!name) return "continue";
            var toggle = instantiate(_this2.PrefabToggle);
            NodeHelp.getchildlable(toggle, "Label", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(name);
            });
            NodeHelp.getchildlable(toggle, "Checkmark", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(name);
            });
            Togglecomp = toggle.getComponent(UIActivityOtherToggleItem);
            Togglecomp.init(key, _this2);

            _this2.Toggles.addChild(toggle);
          };

          for (var _iterator2 = _createForOfIteratorHelperLoose(this.ActivityMap.keys()), _step2; !(_step2 = _iterator2()).done;) {
            var Togglecomp;

            var _ret = _loop();

            if (_ret === "continue") continue;
          }
        } //改变切页面板
        ;

        _proto.changeToggles = function changeToggles() {
          var _this3 = this;

          this.Toggles.children.forEach(function (v) {
            var Togglecomp = v.getComponent(UIActivityOtherToggleItem);

            if (!_this3.ActivityMap.has(Togglecomp.type)) {
              v.destroy();
            }
          });

          var _loop2 = function _loop2() {
            var key = _step3.value;

            var havenode = _this3.Toggles.children.find(function (v) {
              var Togglecomp = v.getComponent(UIActivityOtherToggleItem);
              return Togglecomp.type == key;
            });

            if (havenode) return "continue";
            var name = _this3.typename[key - EnumDefine.ActivityType.Extension];
            if (!name) return "continue";
            var toggle = instantiate(_this3.PrefabToggle);
            NodeHelp.getchildlable(toggle, "Label", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(name);
            });
            NodeHelp.getchildlable(toggle, "Checkmark", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(name);
            });
            Togglecomp = toggle.getComponent(UIActivityOtherToggleItem);
            Togglecomp.init(key, _this3);

            _this3.Toggles.addChild(toggle);
          };

          for (var _iterator3 = _createForOfIteratorHelperLoose(this.ActivityMap.keys()), _step3; !(_step3 = _iterator3()).done;) {
            var Togglecomp;

            var _ret2 = _loop2();

            if (_ret2 === "continue") continue;
          }
        } //创建活动面板
        ;

        _proto.setActivity = function setActivity() {
          //创建活动
          for (var _iterator4 = _createForOfIteratorHelperLoose(this.ActivityMap.keys()), _step4; !(_step4 = _iterator4()).done;) {
            var key = _step4.value;
            var tActivitiesInfo = ConfigFile.getTActivitiesInfoByActivitiesId(this.ActivityMap.get(key)[0].ActivityModeId);
            if (!tActivitiesInfo) continue;

            if (!this.PrefabPanels[key - EnumDefine.ActivityType.Extension]) {
              continue;
            }

            var node = instantiate(this.PrefabPanels[key - EnumDefine.ActivityType.Extension]);
            var comp = node.getComponent(Activitycoopent);
            comp.activitysKey = key;
            this.panels.addChild(node);
            node.active = false;
          }
        } //改变切页面板
        ;

        _proto.changeActivity = function changeActivity() {
          var _this4 = this;

          this.panels.children.forEach(function (v) {
            var comp = v.getComponent(Activitycoopent);

            if (!_this4.ActivityMap.has(comp.activitysKey)) {
              comp.onClose();
            }
          });

          var _loop3 = function _loop3() {
            var key = _step5.value;
            var tActivitiesInfo = ConfigFile.getTActivitiesInfoByActivitiesId(_this4.ActivityMap.get(key)[0].ActivityModeId);
            if (!tActivitiesInfo) return "continue";

            if (!_this4.PrefabPanels[key - EnumDefine.ActivityType.Extension]) {
              return "continue";
            }

            var havenode = _this4.panels.children.find(function (v) {
              var comp = v.getComponent(Activitycoopent);
              return comp.activitysKey == key;
            });

            if (havenode) return "continue";
            var node = instantiate(_this4.PrefabPanels[key - EnumDefine.ActivityType.Extension]);
            var comp = node.getComponent(Activitycoopent);
            comp.activitysKey = key;

            _this4.panels.addChild(node);

            node.active = false;
          };

          for (var _iterator5 = _createForOfIteratorHelperLoose(this.ActivityMap.keys()), _step5; !(_step5 = _iterator5()).done;) {
            var _ret3 = _loop3();

            if (_ret3 === "continue") continue;
          }
        } //显示面板
        ;

        _proto.setChickToggle = function setChickToggle() {
          var _this5 = this;

          var tog = null;

          if (this.activityType) {
            var toggle = this.Toggles.children.find(function (v) {
              return _this5.activityType == v.getComponent(UIActivityOtherToggleItem).type;
            });

            if (toggle && toggle.isValid) {
              tog = toggle.getComponent(UIActivityOtherToggleItem);
            }
          }

          if (!tog && this.Toggles.children[0]) {
            tog = this.Toggles.children[0].getComponent(UIActivityOtherToggleItem);
          }

          if (tog) {
            // tog.node.getComponent(Toggle).isChecked = true
            tog.onclick();
          }
        };

        _proto.addconfig = function addconfig(name, data) {
          if (this.ActivityMap.has(name)) {
            this.ActivityMap.get(name).push(data);
          } else {
            var arr = [];
            arr.push(data);
            this.ActivityMap.set(name, arr);
          }
        };

        _proto.onclaer = function onclaer() {
          this.Toggles.destroyAllChildren();

          while (this.panels.children.length > 0) {
            var item = this.panels.children[0];
            var comp = item.getComponent(Activitycoopent);
            comp.onClose();
          }

          this.ActivityMap.clear();
        };

        _proto.onClose = function onClose() {
          this.onclaer();
          BagUIItemTip.getInstance().tipDestroy();
          EventManager.getInstance().remove(MessageManager.Custom.ActivityChange, this, this.onActivityChange);
          UIManager.getInstance().closeUI(UIActivityOther);
        };

        _proto.onActivityChange = function onActivityChange() {
          this.ActivityMap.clear(); //得到数据

          var datas = GameAllData.getActivityInfo(true);

          if (datas.length < 1) {
            this.onClose();
            return;
          }

          for (var _iterator6 = _createForOfIteratorHelperLoose(datas), _step6; !(_step6 = _iterator6()).done;) {
            var data = _step6.value;
            this.addconfig(data.ActivityType, data);
          }

          this.changeToggles();
          this.changeActivity();
          this.scheduleOnce(this.setChickToggle);
        };

        _proto.onActivityGet = function onActivityGet() {};

        _proto.closeTip = function closeTip() {
          BagUIItemTip.getInstance().closeTip();
        };

        return UIActivityOther;
      }(BaseUI), _class3.className = "UIActivityOther", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "NodeBG", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Toggles", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "TipParent", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "ScrollViewMask", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "togglePanels", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "buttonClose", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "panels", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "BG", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "PrefabPanels", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "PrefabToggle", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIActivityOtherToggleItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumDefine.ts', './NodeHelp.ts', './redDot.ts', './ActivityComponent.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _createForOfIteratorHelperLoose, cclegacy, _decorator, Widget, Component, EnumDefine, NodeHelp, redDot, Activitycoopent;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Widget = module.Widget;
      Component = module.Component;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      redDot = module.redDot;
    }, function (module) {
      Activitycoopent = module.Activitycoopent;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "92775w+6n1G5KPhVyKlK+H1", "UIActivityOtherToggleItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIActivityOtherToggleItem = exports('UIActivityOtherToggleItem', (_dec = ccclass('UIActivityOtherToggleItem'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIActivityOtherToggleItem, _Component);

        function UIActivityOtherToggleItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.type = null;
          _this.tag = null;
          return _this;
        }

        var _proto = UIActivityOtherToggleItem.prototype;

        _proto.init = function init(type, tag) {
          this.type = type;
          this.tag = tag;
          NodeHelp.getchildlable(this.node, "redDot", redDot, function (comp) {
            comp.uiName = "UIActivity";
            comp.redName = type;
            comp.onRedChange();
          });
        };

        _proto.onclick = function onclick() {
          var _this2 = this;

          if (!this.tag) {
            return;
          }

          this.checkMark(true);
          this.tag.Toggles.children.forEach(function (v) {
            if (v.getComponent(UIActivityOtherToggleItem).type != _this2.type) {
              v.getComponent(UIActivityOtherToggleItem).checkMark(false);
            }
          });
          this.tag.activityType = this.type;
          this.tag.NodeBG.spriteFrame = this.tag.BG[this.type - EnumDefine.ActivityType.Extension];
          this.tag.NodeBG.getComponent(Widget).updateAlignment();

          for (var _iterator = _createForOfIteratorHelperLoose(this.tag.panels.children), _step; !(_step = _iterator()).done;) {
            var panel = _step.value;
            var comp = panel.getComponent(Activitycoopent);

            if (comp.activitysKey == this.type) {
              panel.active = true;
            } else {
              panel.active = false;
            }
          }
        };

        _proto.checkMark = function checkMark(show) {
          NodeHelp.getchildlable(this.node, "Checkmark", null, function (comp, node) {
            node.active = show;
          });
        };

        return UIActivityOtherToggleItem;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIActivityToggleItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './NodeHelp.ts', './redDot.ts', './ActivityComponent.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _createForOfIteratorHelperLoose, cclegacy, _decorator, Widget, Component, NodeHelp, redDot, Activitycoopent;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Widget = module.Widget;
      Component = module.Component;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      redDot = module.redDot;
    }, function (module) {
      Activitycoopent = module.Activitycoopent;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "f28feqACMZPvrvTp101ILBk", "UIActivityToggleItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIActivityToggleItem = exports('UIActivityToggleItem', (_dec = ccclass('UIActivityToggleItem'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIActivityToggleItem, _Component);

        function UIActivityToggleItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.type = null;
          _this.tag = null;
          return _this;
        }

        var _proto = UIActivityToggleItem.prototype;

        _proto.init = function init(type, tag) {
          this.type = type;
          this.tag = tag;
          NodeHelp.getchildlable(this.node, "redDot", redDot, function (comp) {
            comp.uiName = "UIActivity";
            comp.redName = type;
            comp.onRedChange();
          });
        };

        _proto.onclick = function onclick() {
          var _this2 = this;

          if (!this.tag) {
            return;
          }

          this.checkMark(true);
          this.tag.Toggles.children.forEach(function (v) {
            if (v.getComponent(UIActivityToggleItem).type != _this2.type) {
              v.getComponent(UIActivityToggleItem).checkMark(false);
            }
          });
          this.tag.activityType = this.type;
          this.tag.NodeBG.spriteFrame = this.tag.BG[this.type];
          this.tag.NodeBG.getComponent(Widget).updateAlignment();

          for (var _iterator = _createForOfIteratorHelperLoose(this.tag.panels.children), _step; !(_step = _iterator()).done;) {
            var panel = _step.value;
            var comp = panel.getComponent(Activitycoopent);

            if (!comp.activityInfo && comp.activitytype == this.type) {
              panel.active = true;
            } else if (comp.activityInfo && comp.activityInfo.ActivityType == this.type) {
              panel.active = true;
            } else {
              panel.active = false;
            }
          }
        };

        _proto.checkMark = function checkMark(show) {
          NodeHelp.getchildlable(this.node, "Checkmark", null, function (comp, node) {
            node.active = show;
          });
        };

        return UIActivityToggleItem;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIAnswer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './MessageManager.ts', './UIManager.ts', './WebSocketMgr.ts', './UIHelp.ts', './BaseUI.ts', './AnswerItem.ts', './BagUIItemTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, Prefab, Node, Label, tween, math, instantiate, Input, UITransform, ConfigFile, Configname, MessageManager, UIManager, WebSocketMgr, UIHelp, BaseUI, AnswerItem, BagUIItemTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Prefab = module.Prefab;
      Node = module.Node;
      Label = module.Label;
      tween = module.tween;
      math = module.math;
      instantiate = module.instantiate;
      Input = module.Input;
      UITransform = module.UITransform;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      AnswerItem = module.AnswerItem;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _class3;

      cclegacy._RF.push({}, "668c5NxgTlKA5x8sRROpXXr", "UIAnswer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var temp_V3_1 = new Vec3();
      var UIAnswer = exports('UIAnswer', (_dec = ccclass('UIAnswer'), _dec2 = property(Prefab), _dec3 = property(Node), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property([Label]), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(Node), _dec10 = property(Node), _dec11 = property(Label), _dec12 = property(Label), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(UIAnswer, _BaseUI);

        function UIAnswer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "itemPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mask", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "title", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "text", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "solution", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Bar", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "toggleCont", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tipNode", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bg", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "itemName", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "itemText", _descriptor11, _assertThisInitialized(_this));

          _this.aidArray = [];
          _this.qid = 0;
          _this.lock = false;
          return _this;
        }

        var _proto = UIAnswer.prototype;

        _proto.initUI = function initUI(args, cb) {
          this.initSolution(args);
        };

        _proto.initText = function initText() {
          this.title.string = ConfigFile.findLanguage(211601);
        };

        _proto.getAnswer = function getAnswer(select, index) {
          if (index == 0) {
            return select.rightanswer;
          } else if (index == 1) {
            return select.wronganswer1;
          } else if (index == 2) {
            return select.wronganswer2;
          } else {
            return select.wronganswer3;
          }
        };

        _proto.closeEffect = function closeEffect(cb) {
          this.node.setScale(1.0, 1.0, 1.0);
          tween(this.node).to(0.2, {
            scale: new Vec3(0.3, 0.3, 0.3)
          }).call(function () {
            cb && cb();
            UIManager.getInstance().closeUI(UIAnswer);
          }).start();
        };

        _proto.onSwitchEvent = function onSwitchEvent(target) {
          this.closeTip();

          if (target.node.name == "Toggle1") {
            this.sendRequest(this.qid, this.aidArray[0]);
          } else if (target.node.name == "Toggle2") {
            this.sendRequest(this.qid, this.aidArray[1]);
          } else if (target.node.name == "Toggle3") {
            this.sendRequest(this.qid, this.aidArray[2]);
          } else {
            this.sendRequest(this.qid, this.aidArray[3]);
          }

          UIManager.getInstance().closeUI(UIAnswer);
        };

        _proto.clearSelect = function clearSelect() {
          this.toggleCont.children[0].children[0].children[0].active = false;
          this.toggleCont.children[1].children[0].children[0].active = false;
          this.toggleCont.children[2].children[0].children[0].active = false;
          this.toggleCont.children[3].children[0].children[0].active = false;
        };

        _proto.onT1 = function onT1() {
          this.closeTip();
          if (this.lock) return;
          this.lock = true;
          var c = this.toggleCont.children[0].children[0];
          c.children[0].active = true;
          var self = this;
          this.elasticEffect(this.toggleCont.children[0], function () {
            self.closeEffect(function () {
              self.sendRequest(self.qid, self.aidArray[0]);
            });
          });
        };

        _proto.onT2 = function onT2() {
          this.closeTip();
          if (this.lock) return;
          this.lock = true;
          var c = this.toggleCont.children[1].children[0];
          c.children[0].active = true;
          var self = this;
          this.elasticEffect(this.toggleCont.children[1], function () {
            self.closeEffect(function () {
              self.sendRequest(self.qid, self.aidArray[1]);
            });
          });
        };

        _proto.onT3 = function onT3() {
          this.closeTip();
          if (this.lock) return;
          this.lock = true;
          var c = this.toggleCont.children[2].children[0];
          c.children[0].active = true;
          var self = this;
          this.elasticEffect(this.toggleCont.children[2], function () {
            self.closeEffect(function () {
              self.sendRequest(self.qid, self.aidArray[2]);
            });
          });
        };

        _proto.onT4 = function onT4() {
          this.closeTip();
          if (this.lock) return;
          this.lock = true;
          var c = this.toggleCont.children[3].children[0];
          c.children[0].active = true;
          var self = this;
          this.elasticEffect(this.toggleCont.children[3], function () {
            self.closeEffect(function () {
              self.sendRequest(self.qid, self.aidArray[3]);
            });
          });
        };

        _proto.initSolution = function initSolution(id) {
          this.clearSelect();
          var tabledata = ConfigFile.getInstance().config.get(Configname.TVerifyInfo);
          var select = tabledata.find(function (item) {
            return item.issue == id;
          });

          if (!select) {
            console.log("没有这个问答ID");
            return;
          }

          this.qid = id;
          this.text.string = ConfigFile.findLanguage(select.issue);
          var startIndex = math.randomRangeInt(0, 13);
          var index2 = 0;

          for (var index = startIndex; index < startIndex + 4; index++) {
            var index1 = Math.floor(index % 4);
            var aid = this.getAnswer(select, index1);
            this.solution[index2.toString()].string = ConfigFile.findLanguage(aid);
            this.aidArray.push(aid);
            index2++;
          } //1,2;2,2


          var reward = select.reward.split(";");

          if (reward && reward.length > 0) {
            var totallength = reward.length * 140;
            var startX = -totallength / 2;

            for (var _index = 0; _index < reward.length; _index++) {
              if (reward[_index] == "") continue;
              var value = reward[_index];
              var itemdata = value.split(",");
              var newNode = instantiate(this.itemPrefab);
              newNode.getComponent(AnswerItem).initUI(Number(itemdata[0]), Number(itemdata[1]));
              newNode.setPosition(new Vec3(startX + _index * 140 + 70));
              newNode.parent = this.Bar;
            }
          }
        };

        _proto.CloseUI = function CloseUI() {
          BagUIItemTip.getInstance().tipDestroy(); //TaskManager.getInstance().onTalkEnd(this._task);

          UIManager.getInstance().closeUI(UIAnswer);
        };

        _proto.onLoad = function onLoad() {
          this.mask.on(Input.EventType.TOUCH_START, this.onBeginTouch, this);
          this.bg.on(Input.EventType.TOUCH_START, this.onBGTouch, this);
          this.initText();
        };

        _proto.onDestroy = function onDestroy() {
          _BaseUI.prototype.onDestroy.call(this);
        };

        _proto.start = function start() {
          this.elasticEffect(this.node, null);
        };

        _proto.onBeginTouch = function onBeginTouch(event) {
          this.closeTip();
          this.tipNode.active = false;
        };

        _proto.showTip = function showTip(target) {
          this.tipNode.active = true;
          var cs1 = target.getComponent(UITransform).contentSize;
          var cs2 = this.tipNode.getComponent(UITransform).contentSize;
          target.getWorldPosition(temp_V3_1);
          temp_V3_1.y += cs1.height / 2;
          temp_V3_1.y += cs2.height / 2;
          this.tipNode.setWorldPosition(temp_V3_1);
          var ai = target.getComponent(AnswerItem);
          var data = ConfigFile.getItemData(ai.itemID);
          this.itemName.string = ConfigFile.findLanguage(data.Name);
          this.itemText.string = ConfigFile.findLanguage(data.Tips);
        };

        _proto.onBGTouch = function onBGTouch(event) {
          this.closeTip();
          var arraySelect = [];
          var uipos = event.touch.getUILocation();
          this.Bar.children.forEach(function (item) {
            if (UIHelp.TestUIPoint(uipos, item)) {
              arraySelect.push(item);
            }
          });

          if (arraySelect.length > 0) {
            var select = arraySelect[0];
            this.showTip(select);
          } else {
            this.tipNode.active = false;
          }
        };

        _proto.closeTip = function closeTip() {
          BagUIItemTip.getInstance().closeTip();
        };

        return UIAnswer;
      }(BaseUI), _class3.className = "UIAnswer", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "itemPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "mask", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "title", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "text", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "solution", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "Bar", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "toggleCont", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "tipNode", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "bg", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "itemName", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "itemText", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIAnswerRet.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './EventManager.ts', './MessageManager.ts', './UIManager.ts', './producer.ts', './UIHelp.ts', './BaseUI.ts', './AnswerItem.ts', './BagUIItemTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, Prefab, Node, Label, Input, UITransform, instantiate, ConfigFile, Configname, EventManager, MessageManager, UIManager, producer, UIHelp, BaseUI, AnswerItem, BagUIItemTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Prefab = module.Prefab;
      Node = module.Node;
      Label = module.Label;
      Input = module.Input;
      UITransform = module.UITransform;
      instantiate = module.instantiate;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      AnswerItem = module.AnswerItem;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _class3;

      cclegacy._RF.push({}, "2f3eeHvutZNG7lD4z4d1eLr", "UIAnswerRet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var temp_V3_1 = new Vec3();
      var UIAnswerRet = exports('UIAnswerRet', (_dec = ccclass('UIAnswerRet'), _dec2 = property(Prefab), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Label), _dec7 = property(Label), _dec8 = property(Label), _dec9 = property(Label), _dec10 = property(Label), _dec11 = property(Node), _dec12 = property(Node), _dec13 = property(Node), _dec14 = property(Label), _dec15 = property(Label), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(UIAnswerRet, _BaseUI);

        function UIAnswerRet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "itemPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mark", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "BG", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "child", _descriptor4, _assertThisInitialized(_this));

          _this.select = null;

          _initializerDefineProperty(_this, "level", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "levelText", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "levelFail", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "levelTextFail", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "BtnText", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Bar1", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Bar2", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tipNode", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "itemName", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "itemText", _descriptor14, _assertThisInitialized(_this));

          _this.newLevel = 0;
          return _this;
        }

        var _proto = UIAnswerRet.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this.mark.on(Input.EventType.TOUCH_START, this.onBegin.bind(this));
          this.BG.on(Input.EventType.TOUCH_START, this.onBGTouch, this);
          setTimeout(function () {
            _BaseUI.prototype.elasticEffect.call(_this2, _this2.Bar1, null);

            _BaseUI.prototype.elasticEffect.call(_this2, _this2.Bar2, null);
          }, 1); // this.node.setScale(1.0, 1.0, 1.0);
          // tween(this.node)
          //     .to(0.2, { scale: new Vec3(1.05, 1.05, 1.05) })
          //     .to(0.10, { scale: new Vec3(0.95, 0.95, 0.95) })
          //     .to(0.10, { scale: new Vec3(1.0, 1.0, 1.0) })
          //     .start();
        };

        _proto.onBGTouch = function onBGTouch(event) {
          var arraySelect = [];
          var uipos = event.touch.getUILocation();
          this.child.children.forEach(function (item) {
            if (UIHelp.TestUIPoint(uipos, item)) {
              arraySelect.push(item);
            }
          });

          if (arraySelect.length > 0) {
            var select = arraySelect[0];
            this.showTip(select);
          } else {
            this.tipNode.active = false;
          }
        };

        _proto.onBegin = function onBegin(event) {};

        _proto.showTip = function showTip(target) {
          this.tipNode.active = true;
          var cs1 = target.getComponent(UITransform).contentSize;
          var cs2 = this.tipNode.getComponent(UITransform).contentSize;
          target.getWorldPosition(temp_V3_1);
          temp_V3_1.y += cs1.height / 2;
          temp_V3_1.y += cs2.height / 2;
          this.tipNode.setWorldPosition(temp_V3_1);
          var ai = target.getComponent(AnswerItem);
          var data = ConfigFile.getItemData(ai.itemID);
          this.itemName.string = ConfigFile.findLanguage(data.Name);
          this.itemText.string = ConfigFile.findLanguage(data.Tips);
        };

        _proto.getLandUpgradeUnlockItem = function getLandUpgradeUnlockItem() {
          var _this3 = this;

          var land = this.select;
          var landinfo = ConfigFile.getLandInfo(this.newLevel);
          var botanyTable = ConfigFile.getInstance().config.get(Configname.TBotanyInfo);
          var botany = botanyTable.filter(function (item) {
            if (!item.Show) return false;
            return item.NeedLevel == _this3.newLevel;
          });
          return botany;
        };

        _proto.getPastureUpgradeUnlockItem = function getPastureUpgradeUnlockItem() {
          var _this4 = this;

          var pasture = this.select;
          var pastureinfo = ConfigFile.getFenceInfo(this.newLevel);
          var animalTable = ConfigFile.getInstance().config.get(Configname.TAnimalInfo);
          var animal = animalTable.filter(function (item) {
            if (!item.Show) return false;
            return item.NeedLevel == _this4.newLevel;
          });
          return animal;
        };

        _proto.initUI = function initUI(state, Qid) {
          this.level.string = "" + this.newLevel;
          var tabledata = ConfigFile.getInstance().config.get(Configname.TVerifyInfo);
          var select = tabledata.find(function (item) {
            return item.issue == Qid;
          });

          if (!select) {
            this.Bar1.active = false;
            this.Bar2.active = true;
            this.levelFail.string = producer.getMessageText(110004);
            this.levelTextFail.string = producer.getMessageText(211605);
            this.BtnText.string = producer.getMessageText(211604);
            return;
          }

          if (state != 2) {
            this.Bar1.active = true;
            this.Bar2.active = false;
            this.level.string = producer.getMessageText(110003);
            this.BtnText.string = producer.getMessageText(120054);

            if (state == 0) {
              this.levelText.string = producer.getMessageText(211603);
              var reward = select.reward.split(";");

              if (reward && reward.length > 0) {
                var totallength = reward.length * 140;
                var startX = -totallength / 2;

                for (var index = 0; index < reward.length; index++) {
                  if (reward[index] == "") continue;
                  var value = reward[index];
                  var itemdata = value.split(",");
                  var newNode = instantiate(this.itemPrefab);
                  newNode.getComponent(AnswerItem).initUI(Number(itemdata[0]), Number(itemdata[1]));
                  newNode.setPosition(new Vec3(startX + index * 140 + 70));
                  newNode.parent = this.child;
                }
              }
            } else {
              this.BtnText.string = producer.getMessageText(120054);
              this.levelText.string = producer.getMessageText(211602);
            }
          } else {
            this.Bar1.active = false;
            this.Bar2.active = true;
            this.levelFail.string = producer.getMessageText(110004);
            this.levelTextFail.string = producer.getMessageText(211605);
            this.BtnText.string = producer.getMessageText(211604);
          }
        };

        _proto.onCloseWnd = function onCloseWnd() {
          BagUIItemTip.getInstance().tipDestroy();
          UIManager.getInstance().closeUI(UIAnswerRet);
          EventManager.getInstance().trigger(MessageManager.Custom.QuestionCheck, {});
        };

        _proto.closeTip = function closeTip() {
          BagUIItemTip.getInstance().closeTip();
        };

        return UIAnswerRet;
      }(BaseUI), _class3.className = "UIAnswerRet", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "itemPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "mark", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "BG", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "child", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "level", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "levelText", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "levelFail", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "levelTextFail", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "BtnText", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "Bar1", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "Bar2", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "tipNode", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "itemName", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "itemText", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIArenaItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './NodeHelp.ts', './Pool.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, instantiate, Label, Component, ConfigFile, NodeHelp, PoolOnce;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "5da7csay5xOfJzLlQsRLdFh", "UIArenaItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIArenaItem = exports('UIArenaItem', (_dec = ccclass('UIArenaItem'), _dec2 = property({
        type: Prefab,
        displayName: "奖励item"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIArenaItem, _Component);

        function UIArenaItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "ActivityRewardItem", _descriptor, _assertThisInitialized(_this));

          _this.data = null;
          _this.tag = null;
          _this.Pool = new PoolOnce(30, function () {
            return instantiate(_this.ActivityRewardItem);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          return _this;
        }

        var _proto = UIArenaItem.prototype;

        _proto.init = function init(data, tag) {
          this.data = data;
          this.tag = tag;
          this.setReward();
          this.setRankpoint();
        };

        _proto.onDisable = function onDisable() {
          var _this2 = this; //添加奖励item


          NodeHelp.getchildlable(this.node, "RewardItems", null, function (comp, node) {
            while (node.children.length > 0) {
              _this2.Pool.put(node.children[0]);
            }
          });
        };

        _proto.onDestroy = function onDestroy() {
          this.Pool.clear();
        };

        _proto.setReward = function setReward() {
          var _this3 = this;

          var Reward = this.data.split(",");
          if (Reward.length < 2) return;
          var rankNum = Reward[0];
          if (Reward[0] != Reward[1]) rankNum = Reward[0] + "~" + Reward[1];
          NodeHelp.getchildlable(this.node, "LabelRank", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(130246).format(rankNum);
          }); //添加奖励item

          NodeHelp.getchildlable(this.node, "RewardItems", null, function (comp, node) {
            while (node.children.length > 0) {
              _this3.Pool.put(node.children[0]);
            }

            for (var index = 0; index < Reward.length; index += 2) {
              if (!Reward[index] || !Reward[index + 1]) return;
              if (index == 0) continue;

              var item = _this3.Pool.get();

              node.addChild(item);
              var itemComp = item.getComponent("ActivityRewardItem");
              itemComp.init(Reward[index], Reward[index + 1]);
              itemComp.tag = _this3.tag;
            }
          });
        };

        _proto.setRankpoint = function setRankpoint() {
          if (this.tag.rankData) {
            var Reward = this.data.split(",");
            if (Reward.length < 2) return;
            var rankData = this.tag.rankData.RankInfo.find(function (v, i) {
              return v.Rank == Reward[0];
            });

            if (rankData) {
              NodeHelp.getchildlable(this.node, "LableCommission", Label, function (comp) {
                comp.string = ConfigFile.findLanguage(7032) + ":" + rankData.point;
              });
            }
          }
        };

        return UIArenaItem;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "ActivityRewardItem", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIConchExchange.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './BaseUI.ts', './UIManager.ts', './EnumDefine.ts', './WebSocketMgr.ts', './RechargeView.ts', './UIWallet.ts', './HttpMgr.ts', './TipManager.ts', './GameManager.ts', './MainGame.ts', './BagUIItemTip.ts', './NumberUtil.ts', './UIConchExchangeRecod.ts', './NodeHelp.ts', './ConstValue.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, Label, Node, SpriteFrame, Sprite, EditBox, ToggleContainer, Input, Button, LabelOutline, Color, ConfigFile, Configname, GameAllData, EventManager, MessageManager, BaseUI, UIManager, EnumDefine, WebSocketMgr, RechargeView, UIWallet, HttpMgr, TipManager, GameManager, MainGame, BagUIItemTip, NumberUtil, UIConchExchangeRecod, NodeHelp, ConstValue;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      EditBox = module.EditBox;
      ToggleContainer = module.ToggleContainer;
      Input = module.Input;
      Button = module.Button;
      LabelOutline = module.LabelOutline;
      Color = module.Color;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      RechargeView = module.RechargeView;
    }, function (module) {
      UIWallet = module.UIWallet;
    }, function (module) {
      HttpMgr = module.HttpMgr;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      MainGame = module.MainGame;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }, function (module) {
      UIConchExchangeRecod = module.UIConchExchangeRecod;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      ConstValue = module.ConstValue;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _dec34, _dec35, _dec36, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _descriptor33, _descriptor34, _descriptor35, _class3;

      cclegacy._RF.push({}, "59d01fEzI5Ee7op6WgZ8G3X", "UIConchExchange", undefined);

      var Colors = ["#FFFFFF", "#CFCFCF"];
      var LineColors = ["#9E5A05", "#6B5539"];
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIConchExchange = exports('UIConchExchange', (_dec = ccclass('UIConchExchange'), _dec2 = property(Label), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Label), _dec7 = property(Label), _dec8 = property(Node), _dec9 = property([SpriteFrame]), _dec10 = property([Label]), _dec11 = property([Label]), _dec12 = property([Label]), _dec13 = property(Label), _dec14 = property(Label), _dec15 = property(Node), _dec16 = property(Node), _dec17 = property(Node), _dec18 = property(Sprite), _dec19 = property(Sprite), _dec20 = property(EditBox), _dec21 = property(EditBox), _dec22 = property(Label), _dec23 = property(ToggleContainer), _dec24 = property(EditBox), _dec25 = property(EditBox), _dec26 = property(Label), _dec27 = property(Label), _dec28 = property(Node), _dec29 = property(Node), _dec30 = property([Label]), _dec31 = property(Node), _dec32 = property(Node), _dec33 = property(Node), _dec34 = property(Node), _dec35 = property(Node), _dec36 = property(Node), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(UIConchExchange, _BaseUI);

        function UIConchExchange() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "Title1", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Exchange", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Body1", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Body2", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Title2", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Title3", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maskNode", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "CoinType", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "CoinVal", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "text", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "BtnText", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ratio", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "des", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Btn1", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Btn2", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Btn3", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "icon1", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "icon2", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "edit1", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "edit2", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "canGetMoney", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tc", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "body2Edit1", _descriptor23, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "body2Edit2", _descriptor24, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "getGold", _descriptor25, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "handlingFee", _descriptor26, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "body2BtnAll", _descriptor27, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "body2TitleBtn", _descriptor28, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "body2Text", _descriptor29, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "history", _descriptor30, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconUsdt", _descriptor31, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconGemStone", _descriptor32, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconShell", _descriptor33, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "BtnOk", _descriptor34, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "panel", _descriptor35, _assertThisInitialized(_this));

          _this.ExchangeMode = void 0;
          _this.handlingFeeNum = void 0;
          _this.lastBtnIndex = void 0;
          return _this;
        }

        var _proto = UIConchExchange.prototype;

        _proto.start = function start() {
          this.elasticEffect(this.node, null);
          this.iconUsdt.on(Input.EventType.TOUCH_START, this.oniconStartTouch.bind(this));
          this.iconUsdt.on(Input.EventType.TOUCH_END, this.oniconEndTouch.bind(this));
          this.iconUsdt.on(Input.EventType.TOUCH_CANCEL, this.oniconEndTouch.bind(this));
          this.iconGemStone.on(Input.EventType.TOUCH_START, this.oniconStartTouch.bind(this));
          this.iconGemStone.on(Input.EventType.TOUCH_END, this.oniconEndTouch.bind(this));
          this.iconGemStone.on(Input.EventType.TOUCH_CANCEL, this.oniconEndTouch.bind(this));
          this.iconShell.on(Input.EventType.TOUCH_START, this.oniconStartTouch.bind(this));
          this.iconShell.on(Input.EventType.TOUCH_END, this.oniconEndTouch.bind(this));
          this.iconShell.on(Input.EventType.TOUCH_CANCEL, this.oniconEndTouch.bind(this));
          this.panel.on(Input.EventType.TOUCH_START, this.onCloseTip.bind(this));
          EventManager.getInstance().add(MessageManager.Net.FarmGoldExchangeResponse, this, this.onGoldExchangeResponse);
          EventManager.getInstance().add(MessageManager.Custom.PropOnChange, this, this.onPropOnChange);
          EventManager.getInstance().add(MessageManager.Net.FarmTransferResponse, this, this.onTransferResponse);
          this.handlingFeeNum = Number(ConfigFile.getGlobalInfoByGlobalId(262).IntValue) / 100;
          this.upList();
          this.getAddressList(1, 20);
          this.updataText();
          this.updataCoin();
          if (this.ExchangeMode == 1) this.tc.toggleItems[0].isChecked = true;else if (this.ExchangeMode == 3) {
            this.tc.toggleItems[2].isChecked = true;
          } else this.tc.toggleItems[1].isChecked = true;
          this.setExchangeMode(this.ExchangeMode);
          this.lastBtnIndex = this.ExchangeMode;
          this.checkTransferBtn();
        };

        _proto.onDisable = function onDisable() {
          this.iconUsdt.off(Input.EventType.TOUCH_START, this.oniconStartTouch.bind(this));
          this.iconUsdt.off(Input.EventType.TOUCH_END, this.oniconEndTouch.bind(this));
          this.iconUsdt.off(Input.EventType.TOUCH_CANCEL, this.oniconEndTouch.bind(this));
          this.iconGemStone.off(Input.EventType.TOUCH_START, this.oniconStartTouch.bind(this));
          this.iconGemStone.off(Input.EventType.TOUCH_END, this.oniconEndTouch.bind(this));
          this.iconGemStone.off(Input.EventType.TOUCH_CANCEL, this.oniconEndTouch.bind(this));
          this.iconShell.off(Input.EventType.TOUCH_START, this.oniconStartTouch.bind(this));
          this.iconShell.off(Input.EventType.TOUCH_END, this.oniconEndTouch.bind(this));
          this.iconShell.off(Input.EventType.TOUCH_CANCEL, this.oniconEndTouch.bind(this));
          this.panel.off(Input.EventType.TOUCH_START, this.onCloseTip.bind(this));
        };

        _proto.upList = function upList() {
          if (GameAllData.addressData && GameAllData.addressData.length > 0) {
            this.Btn1.active = false;
            this.Btn2.active = true;
            this.Btn3.active = true;
          } else {
            this.Btn1.active = true;
            this.Btn2.active = false;
            this.Btn3.active = false;
          }
        };

        _proto.getAddressList = function getAddressList(page, size) {
          var _this2 = this;

          HttpMgr.post(GameAllData.httpServerUrl + "cashAdress/list", {
            page: page,
            size: size
          }, function (data) {
            try {
              if (data.data && data.data.items) {
                console.log("成功");
                GameAllData.addressData = data.data.items;

                _this2.upList();
              } else {
                GameAllData.addressData = [];

                _this2.upList();

                console.log("没有");
              }
            } catch (error) {}
          });
        };

        _proto.onPropOnChange = function onPropOnChange() {
          this.updataCoin();
        };

        _proto.onGoldExchangeResponse = function onGoldExchangeResponse(data) {
          console.log("onGoldExchangeResponse=>", data);
          this.edit1.string = "";
          this.canGetMoney.string = "0";

          if (!data.code) {
            TipManager.autoTip(3, 120439, ConfigFile.findLanguage(120439));
            this.setExchangeMode(this.ExchangeMode);
          } else {
            // TipManager.ChickBoxNew(8047);
            if (data.code == 8047) {
              TipManager.ChickBoxNew(8047);
            } else {
              TipManager.autoTip(3, 120439, ConfigFile.findLanguage(data.code));
            }
          }

          if (data.Get) {
            var game = GameManager.getInstance().getGame(MainGame);
            game.onProcessOne(game._UICamera.node, data.Get);
          }
        };

        _proto.updataText = function updataText() {
          this.Title1.string = ConfigFile.findLanguage(120400);
          this.Title2.string = ConfigFile.findLanguage(120441);
          this.Title3.string = ConfigFile.findLanguage(120502);
          this.text[0].string = ConfigFile.findLanguage(120401);
          this.text[1].string = ConfigFile.findLanguage(120408);
          this.text[2].string = ConfigFile.findLanguage(120409);
          this.text[3].string = ConfigFile.findLanguage(120410);
          this.text[4].string = ConfigFile.findLanguage(120413);
          this.text[5].string = ConfigFile.findLanguage(120310);
          this.BtnText[0].string = ConfigFile.findLanguage(120402);
          this.BtnText[1].string = ConfigFile.findLanguage(120300);
          this.BtnText[2].string = ConfigFile.findLanguage(120301);
          this.BtnText[3].string = ConfigFile.findLanguage(120414);
          this.BtnText[4].string = ConfigFile.findLanguage(120411);
          this.BtnText[5].string = ConfigFile.findLanguage(120415);
          this.body2Text[0].string = ConfigFile.findLanguage(120506);
          this.body2Text[1].string = ConfigFile.findLanguage(120504);
          this.body2Text[2].string = ConfigFile.findLanguage(120505);
          this.body2Text[3].string = ConfigFile.findLanguage(120503);
          this.body2Text[5].string = ConfigFile.findLanguage(120507);
          this.edit1.placeholder = ConfigFile.findLanguage(120063);
          this.edit2.placeholder = ConfigFile.findLanguage(120063);
          this.body2Edit1.placeholder = ConfigFile.findLanguage(120063);
          this.body2Edit2.placeholder = ConfigFile.findLanguage(120063);
          NodeHelp.getchildlable(this.history, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(106043);
          });
          var conch = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.Conch);
          var itemData = ConfigFile.getItemData(EnumDefine.CurrencyType.Conch);

          if (itemData) {
            var iTextId = itemData.Name;

            ConfigFile._findLanguage(iTextId);
          }

          var min = Number(ConfigFile.getGlobalInfoByGlobalId(263).IntValue);
          this.body2Text[4].string = ConfigFile.findLanguage(120501, EnumDefine.CurrencyType.Conch).format(conch, min);
          this.handlingFee.string = "" + this.handlingFeeNum + "%";
        };

        _proto.updataCoin = function updataCoin() {
          this.CoinVal[0].string = NumberUtil.unitConversion(GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.USDT));
          this.CoinVal[1].string = NumberUtil.unitConversion(GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.Conch));
          this.CoinVal[2].string = NumberUtil.unitConversion(GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.PEARL)); // this.CoinVal[0].string = NumberUtil.numberFormat(GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.USDT), ConstValue.DECIMAL_PLACES_NUM, false, "");
          // this.CoinVal[1].string = NumberUtil.numberFormat(GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.Conch), ConstValue.DECIMAL_PLACES_NUM, false, "");
          // this.CoinVal[2].string = NumberUtil.numberFormat(GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.PEARL), ConstValue.DECIMAL_PLACES_NUM, false, "");
        };

        _proto.updateCanGetMoney = function updateCanGetMoney() {
          if (NumberUtil.getDecimalDigits(this.edit1.string) > 0) {
            var num = Number(this.edit1.string);
            this.edit1.string = NumberUtil.numberFormat(num, 0, false, "");
          }

          if (NumberUtil.getDecimalDigits(this.body2Edit2.string) > 0) {
            var _num = Number(this.body2Edit2.string);

            this.body2Edit2.string = NumberUtil.numberFormat(_num, 0, false, "");
          }

          if (NumberUtil.getDecimalDigits(this.body2Edit1.string) > 0) {
            var _num2 = Number(this.body2Edit1.string);

            this.body2Edit1.string = NumberUtil.numberFormat(_num2, 0, false, "");
          }

          if (this.ExchangeMode == 4) {
            //贝壳--》U
            var inputValue = Number(this.edit1.string);

            if (inputValue) {
              var coin = ConfigFile.getGlobalInfoByGlobalId(16).Text;

              var _num3 = inputValue / Number(coin);

              var money = NumberUtil.numberFormat(_num3, ConstValue.DECIMAL_PLACES_NUM, false, "");
              this.canGetMoney.string = "" + money;
            } else {
              this.canGetMoney.string = "0";
            }
          }

          if (this.ExchangeMode == 1) {
            //U--->贝壳
            var _inputValue = Number(this.edit1.string);

            if (_inputValue) {
              var _coin = ConfigFile.getGlobalInfoByGlobalId(1).Text;

              var _num4 = _inputValue * Number(_coin);

              var _money = NumberUtil.numberFormat(_num4, ConstValue.DECIMAL_PLACES_NUM, false, "");

              this.canGetMoney.string = "" + _money;
            } else {
              this.canGetMoney.string = "0";
            }
          } else if (this.ExchangeMode == 3) {
            var _money2 = Number(this.body2Edit2.string);

            if (_money2) {
              // let coin = ConfigFile.getGlobalInfoByGlobalId(262).InitValue;
              // let intValue = Math.floor(inputValue / Number(coin));
              var Conch = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.Conch);

              if (_money2 > Conch) {
                _money2 = Conch;
                this.body2Edit2.string = _money2 + "";
              }

              var intValue = _money2 - _money2 * (this.handlingFeeNum / 100);

              var _num5 = NumberUtil.numberFormat(intValue, ConstValue.DECIMAL_PLACES_NUM, false, "");

              this.getGold.string = "" + _num5;
            } else {
              this.getGold.string = "0";
            }
          } else if (this.ExchangeMode == 2) {
            var _inputValue2 = Number(this.edit1.string);

            if (_inputValue2) {
              var _coin2 = Number(ConfigFile.getGlobalInfoByGlobalId(26).Text);

              var _num6 = _inputValue2 * _coin2;

              var _money3 = NumberUtil.numberFormat(_num6, ConstValue.DECIMAL_PLACES_NUM, false, "");

              this.canGetMoney.string = "" + _money3;
            } else {
              this.canGetMoney.string = "0";
            }
          }

          if (this.ExchangeMode == 3) {
            var _money4 = Number(this.body2Edit2.string);

            var id = Number(this.body2Edit1.string);
            this.setGrayscale(!_money4 || _money4 <= 0 || !id || id <= 0);
          } else {
            var _inputValue3 = Number(this.edit1.string);

            this.setGrayscale(!_inputValue3 || _inputValue3 <= 0);
          }
        };

        _proto.onInputChange = function onInputChange() {
          this.updateCanGetMoney();
        };

        _proto.onInputBegan = function onInputBegan() {
          this.onCloseTip();
        };

        _proto.setLabelEdge = function setLabelEdge(text, show) {// if (show) {
          //     let outline = text.getComponent(LabelOutline);
          //     if (!outline) {
          //         outline = text.addComponent(LabelOutline);
          //         outline.color = new Color("#A65313");
          //         text.getComponent(Label).color = new Color("#FFFFFF");
          //     }
          // } else {
          //     text.removeComponent(LabelOutline);
          //     text.getComponent(Label).color = new Color("#A65313");
          // }
        };

        _proto.setExchangeMode = function setExchangeMode(mode) {
          this.ExchangeMode = mode;
          this.BtnText[3].string = ConfigFile.findLanguage(120414);
          this.history.active = true;
          this.setGrayscale(true);

          if (mode == 1) {
            this.lastBtnIndex = mode;
            this.Body1.active = true;
            this.Body2.active = false;
            this.edit1.string = "";
            this.setLabelEdge(this.Title1.node, true);
            this.setLabelEdge(this.Title2.node, false);
            this.setLabelEdge(this.Title3.node, false);
            this.canGetMoney.string = "";
            this.icon1.spriteFrame = this.CoinType[0];
            this.icon2.spriteFrame = this.CoinType[1];
            var usdt = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.USDT);
            var coin = ConfigFile.getGlobalInfoByGlobalId(1).Text;
            this.ratio.string = "1:" + coin;
            this.des.node.active = true;
            this.Exchange.active = true;
            this.des.string = ConfigFile.findLanguage(120437).format(usdt * coin);
          } else if (mode == 3) {
            //转账
            var UserData = GameAllData.FarmUserResponse;
            var needVip = (ConfigFile.getGlobalInfoByGlobalId(261).IntValue - 100);

            if (needVip > UserData.VipLevel) {
              TipManager.autoTip(3, 120500, ConfigFile.findLanguage(120500).format(needVip));

              if (this.lastBtnIndex != 3) {
                // this.setExchangeMode(this.lastBtnIndex);
                this.tc.toggleItems[this.lastBtnIndex - 1].isChecked = true;
              }

              return;
            }

            this.lastBtnIndex = mode;
            this.Body1.active = false;
            this.Body2.active = true;
            this.BtnText[3].string = ConfigFile.findLanguage(120502);
            this.setLabelEdge(this.Title1.node, false);
            this.setLabelEdge(this.Title2.node, false);
            this.setLabelEdge(this.Title3.node, true);
            this.body2Edit1.string = "";
            this.body2Edit2.string = "";
            this.getGold.string = "";
          } else if (mode == 4) {
            this.edit1.string = "";
            this.setLabelEdge(this.Title1.node, true);
            this.setLabelEdge(this.Title2.node, false);
            this.canGetMoney.string = "";
            this.icon1.spriteFrame = this.CoinType[1];
            this.icon2.spriteFrame = this.CoinType[0];
            var Conch = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.Conch);
            var _coin3 = ConfigFile.getGlobalInfoByGlobalId(16).Text;
            this.ratio.string = _coin3 + ":1";
            this.des.node.active = true;
            this.Exchange.active = true;
            this.des.string = ConfigFile.findLanguage(120437).format(Conch);
            var usdtNum = NumberUtil.numberFormat(Conch / Number(_coin3), 4);

            try {
              var minVal = ConfigFile.getGlobalInfoByGlobalId(19).IntValue;
              this.des.string = ConfigFile.findLanguage(120412).format(usdtNum, minVal);
            } catch (error) {
              this.des.string = ConfigFile.findLanguage(120412).format(usdtNum, 10);
            }
          } else if (mode == 2) {
            this.lastBtnIndex = mode;
            this.Body1.active = true;
            this.Body2.active = false;
            this.edit1.string = "";
            this.setLabelEdge(this.Title1.node, false);
            this.setLabelEdge(this.Title2.node, true);
            this.setLabelEdge(this.Title3.node, false);
            this.canGetMoney.string = "";
            this.icon1.spriteFrame = this.CoinType[1];
            this.icon2.spriteFrame = this.CoinType[2];
            this.Exchange.active = false;
            var conch = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.Conch);
            var _coin4 = ConfigFile.getGlobalInfoByGlobalId(26).Text;
            this.ratio.string = "1:" + _coin4;
            this.des.string = ConfigFile.findLanguage(120437, EnumDefine.CurrencyType.PEARL).format(conch * _coin4); //let intValue = Math.floor(conch / coin);
            // this.des.node.active = true;
            // try {
            //     let minVal = ConfigFile.getGlobalInfoByGlobalId(19).IntValue;
            //     this.des.string = ConfigFile.findLanguage(120442).format(intValue,minVal);
            // } catch (error) {
            //     this.des.string = ConfigFile.findLanguage(120442).format(intValue,10);
            // }
            //this.des.string = ConfigFile.findLanguage(120437).format(intValue);
          }
        };

        _proto.initUI = function initUI(mode) {
          this.ExchangeMode = mode;
        };

        _proto.onDestroy = function onDestroy() {
          _BaseUI.prototype.onDestroy.call(this);
        };

        _proto.onChangeMode = function onChangeMode(t1) {
          this.onCloseTip();

          if (t1.node.name == "Toggle1") {
            this.setExchangeMode(1);
          } else if (t1.node.name == "Toggle2") {
            this.setExchangeMode(2);
          } else {
            this.setExchangeMode(3);
          }
        };

        _proto.onExchangeMode = function onExchangeMode() {
          this.onCloseTip();
          if (this.ExchangeMode && this.ExchangeMode == 1) this.setExchangeMode(4);else this.setExchangeMode(1);
        };

        _proto.onSubmit = function onSubmit() {
          this.BtnOk.getComponent(Button).interactable = false;
          this.BtnOk.getComponent(Sprite).grayscale = true; // this.scheduleOnce( this.BtnOk.getComponent(Button).interactable = true,2);

          this.onCloseTip();
          var inputValue = Number(this.edit1.string);

          if (this.ExchangeMode == 1) {
            var usdt = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.USDT);

            if (inputValue > usdt) {
              console.log("超出了最大值");
              TipManager.autoTip(3, 120438, ConfigFile.findLanguage(120440));
              return;
            }

            TipManager.SafeCodeInputBox(function () {
              WebSocketMgr.send(MessageManager.Net.FarmGoldExchangeRequest, {
                srcType: -1,
                dstType: -2,
                srcValue: inputValue,
                GoogleCode: GameAllData.bandSafeCode
              });
            });
          } else if (this.ExchangeMode == 3) {
            // if(!GameAllData.isMeetTheConditionsByGlobalId(291))
            // {
            //     return;
            // }
            if (GameAllData.isMeetTheConditionsByGlobalId(291) != "") {
              TipManager.ChickBox(GameAllData.isMeetTheConditionsByGlobalId(291));
              return;
            }

            var inputID = Number(this.body2Edit1.string);
            var inputGold = Number(this.body2Edit2.string);
            this.getGold.string = "";
            var conch = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.Conch);

            if (inputGold > conch) {
              console.log("超出了最大值");
              TipManager.autoTip(3, 120438, ConfigFile.findLanguage(120440));
              return;
            }

            var min = Number(ConfigFile.getGlobalInfoByGlobalId(263).IntValue);

            if (inputGold < min) {
              console.log("不能小于id263");
              TipManager.autoTip(3, 120514, ConfigFile.findLanguage(120514, EnumDefine.CurrencyType.Conch).format(min));
              return;
            }

            TipManager.SafeCodeInputBox(function () {
              WebSocketMgr.send(MessageManager.Net.FarmTransferRequest, {
                DstUserId: inputID,
                Value: inputGold,
                ModeId: EnumDefine.CurrencyType.Conch,
                GoogleCode: GameAllData.bandSafeCode
              });
            });
          } else if (this.ExchangeMode == 2) {
            var _conch = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.Conch);

            if (inputValue > _conch) {
              console.log("超出了最大值");
              TipManager.autoTip(3, 120438, ConfigFile.findLanguage(120440));
              return;
            }

            this.edit1.string = inputValue.toString();
            TipManager.SafeCodeInputBox(function () {
              WebSocketMgr.send(MessageManager.Net.FarmGoldExchangeRequest, {
                srcType: -2,
                dstType: -7,
                srcValue: inputValue,
                GoogleCode: GameAllData.bandSafeCode
              });
            });
          } else if (this.ExchangeMode == 4) {
            var coin = ConfigFile.getGlobalInfoByGlobalId(16).Text;
            var num = inputValue / Number(coin) + "";
            var money = parseInt(num);

            var _min = Number(ConfigFile.getGlobalInfoByGlobalId(19).IntValue);

            if (money >= _min) {
              TipManager.SafeCodeInputBox(function () {
                WebSocketMgr.send(MessageManager.Net.FarmGoldExchangeRequest, {
                  srcType: -2,
                  dstType: -1,
                  srcValue: inputValue,
                  GoogleCode: GameAllData.bandSafeCode
                });
              });
            } else {
              TipManager.autoTip(3, 120450, ConfigFile.findLanguage(120450, EnumDefine.CurrencyType.Conch).format(_min));
            } // let conch = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.Conch);
            // inputValue = inputValue * conch;
            // this.edit1.string = (inputValue).toString();

          }
        };

        _proto.onHistory = function onHistory() {
          var _this3 = this;

          UIManager.getInstance().openUI(UIConchExchangeRecod, 14, function (ui, args) {
            if (_this3.ExchangeMode == 3) ui.setlistShow("ToggleTransfer");else ui.setlistShow("ToggleExchange");
          });
        };

        _proto.onAll = function onAll() {
          this.onCloseTip();

          if (this.ExchangeMode == 1) {
            var usdt = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.USDT); // let coin =  Number(ConfigFile.getGlobalInfoByGlobalId(1).Text);
            // let intValue = Math.floor(usdt/coin);
            // usdt = intValue*coin;

            this.edit1.string = "" + usdt;
            this.updateCanGetMoney();
          } else if (this.ExchangeMode == 3) {
            var inputID = Number(this.body2Edit1.string);

            if (this.body2Edit1.string == "") {
              TipManager.autoTip(3, 120511, ConfigFile.findLanguage(120511));
            }

            var conch = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.Conch);
            var coin = this.handlingFeeNum;
            this.body2Edit2.string = "" + conch;
            this.updateCanGetMoney();
          } else {
            var _conch2 = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.Conch);

            this.edit1.string = "" + _conch2;
            this.updateCanGetMoney();
          }
        } //检测转账按钮
        ;

        _proto.checkTransferBtn = function checkTransferBtn() {
          var value = (ConfigFile.getGlobalInfoByGlobalId(260).IntValue - 100);
          this.body2TitleBtn.active = false;

          if (value > 0) {
            this.body2TitleBtn.active = true;
            
            let UserData = GameAllData.FarmUserResponse;
            let needVip = (ConfigFile.getGlobalInfoByGlobalId(261).IntValue - 100);
            if(needVip <= UserData.VipLevel){
              TipManager.autoTip(3, 120500, ConfigFile.findLanguage(120500));
              this.body2TitleBtn.active = true;
            }
          }
        } //转账返回
        ;

        _proto.onTransferResponse = function onTransferResponse(data) {
          if (!data.Code) {
            TipManager.autoTip(3, 120510, ConfigFile.findLanguage(120510));
            this.setExchangeMode(this.ExchangeMode);
            this.edit2.string = "";
            this.getGold.string = "0";
          }

          if (data.Cost) ;
        };

        _proto.onExchange = function onExchange() {
          //兑换
          this.onCloseTip();
          UIManager.getInstance().openUI(RechargeView, 13, function (ui, args) {
            ui.mode = 2;
          });
        };

        _proto.onRechange = function onRechange() {
          //充值
          this.onCloseTip();
          UIManager.getInstance().openUI(RechargeView, 13, function (ui, args) {
            ui.mode = 1;
          });
        };

        _proto.onBind = function onBind() {
          this.onCloseTip();
          UIManager.getInstance().openUI(UIWallet, 13, function (ui, args) {});
        };

        _proto.onClose = function onClose() {
          BagUIItemTip.getInstance().tipDestroy();
          UIManager.getInstance().closeUI(UIConchExchange);
        };

        _proto.oniconStartTouch = function oniconStartTouch(event) {
          var node = event.target;
          var type = EnumDefine.CurrencyType.USDT;

          if (node.parent.name == "Shell") {
            type = EnumDefine.CurrencyType.Conch;
          } else if (node.parent.name == "GemStone") {
            type = EnumDefine.CurrencyType.PEARL;
          }

          this.unscheduleAllCallbacks();
          var config = null;

          for (var _iterator = _createForOfIteratorHelperLoose(ConfigFile.getInstance().config.get(Configname.TItemInfo)), _step; !(_step = _iterator()).done;) {
            var itemConfig = _step.value;

            if (itemConfig.ItemId == type) {
              config = itemConfig;
              break;
            }
          }

          if (config) {
            var propName = ConfigFile.findLanguage(config.Name);
            var props = [];
            props.push(type);

            if (type == EnumDefine.CurrencyType.Conch) {
              props.push(EnumDefine.CurrencyType.ColoredGold);
            }

            BagUIItemTip.getInstance().openTipGoods(this.node, propName, props, node.getComponent(Button));
          }
        };

        _proto.oniconEndTouch = function oniconEndTouch(event) {};

        _proto.onCloseTip = function onCloseTip() {
          BagUIItemTip.getInstance().closeTip();
        };

        _proto.setGrayscale = function setGrayscale(grayscale) {
          this.BtnOk.getComponent(Sprite).grayscale = grayscale;
          this.BtnOk.getComponent(Button).interactable = !grayscale;

          if (grayscale) {
            NodeHelp.getchildlable(this.BtnOk, "Label", LabelOutline, function (comp) {
              comp.color = new Color().fromHEX(LineColors[1]);
            });
            NodeHelp.getchildlable(this.BtnOk, "Label", Label, function (comp) {
              comp.color = new Color().fromHEX(Colors[1]);
            });
          } else {
            NodeHelp.getchildlable(this.BtnOk, "Label", LabelOutline, function (comp) {
              comp.color = new Color().fromHEX(LineColors[0]);
            });
            NodeHelp.getchildlable(this.BtnOk, "Label", Label, function (comp) {
              comp.color = new Color().fromHEX(Colors[0]);
            });
          }
        };

        return UIConchExchange;
      }(BaseUI), _class3.className = "UIConchExchange", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Title1", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Exchange", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "Body1", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "Body2", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "Title2", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "Title3", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "maskNode", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "CoinType", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "CoinVal", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "text", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "BtnText", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "ratio", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "des", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "Btn1", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "Btn2", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "Btn3", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "icon1", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "icon2", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "edit1", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "edit2", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "canGetMoney", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "tc", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "body2Edit1", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "body2Edit2", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "getGold", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "handlingFee", [_dec27], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor27 = _applyDecoratedDescriptor(_class2.prototype, "body2BtnAll", [_dec28], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor28 = _applyDecoratedDescriptor(_class2.prototype, "body2TitleBtn", [_dec29], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor29 = _applyDecoratedDescriptor(_class2.prototype, "body2Text", [_dec30], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor30 = _applyDecoratedDescriptor(_class2.prototype, "history", [_dec31], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor31 = _applyDecoratedDescriptor(_class2.prototype, "iconUsdt", [_dec32], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor32 = _applyDecoratedDescriptor(_class2.prototype, "iconGemStone", [_dec33], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor33 = _applyDecoratedDescriptor(_class2.prototype, "iconShell", [_dec34], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor34 = _applyDecoratedDescriptor(_class2.prototype, "BtnOk", [_dec35], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor35 = _applyDecoratedDescriptor(_class2.prototype, "panel", [_dec36], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIConchExchangeRecod.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './GameAllData.ts', './TipManager.ts', './UIManager.ts', './HttpMgr.ts', './GList.ts', './NodeHelp.ts', './BaseUI.ts', './ExchangeRecodItem.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Node, ScrollView, Toggle, Label, ConfigFile, GameAllData, TipManager, UIManager, HttpMgr, GList, NodeHelp, BaseUI, ExchangeRecodItem;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      ScrollView = module.ScrollView;
      Toggle = module.Toggle;
      Label = module.Label;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      HttpMgr = module.HttpMgr;
    }, function (module) {
      GList = module.GList;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      ExchangeRecodItem = module.ExchangeRecodItem;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _class3;

      cclegacy._RF.push({}, "c630f52iAlN0qv9v4A7NDUZ", "UIConchExchangeRecod", undefined);

      var DFSize = 50;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIConchExchangeRecod = exports('UIConchExchangeRecod', (_dec = ccclass('UIConchExchangeRecod'), _dec2 = property(Prefab), _dec3 = property(Prefab), _dec4 = property(Prefab), _dec5 = property(Prefab), _dec6 = property(Node), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(UIConchExchangeRecod, _BaseUI);

        function UIConchExchangeRecod() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "exchangeItem", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rechargeItem", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "cashOutItem", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "transferItem", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lists", _descriptor5, _assertThisInitialized(_this));

          _this.listNum = 0;
          _this.lastlistNum = -1;
          _this._pages = new Map();
          _this._itemsDatas = new Map();
          _this.itemsdata = [{
            Name: "exchangeItem",
            listName: "Exchangelist",
            Toggle: "ToggleExchange",
            url: GameAllData.httpServerUrl + "order/exchange/log"
          }, {
            Name: "rechargeItem",
            listName: "Rechargelist",
            Toggle: "ToggleRecharge",
            url: GameAllData.httpServerUrl + "order/recharge/log"
          }, {
            Name: "cashOutItem",
            listName: "CashOutlist",
            Toggle: "ToggleCashOut",
            url: GameAllData.httpServerUrl + "order/cash/log"
          }, {
            Name: "transferItem",
            listName: "Transferlist",
            Toggle: "ToggleTransfer",
            url: GameAllData.httpServerUrl + "order/transfer/log?page=1&size=20"
          }];
          _this.glists = {
            Exchangelist: null,
            Rechargelist: null,
            CashOutlist: null,
            Transferlist: null
          };
          return _this;
        }

        var _proto = UIConchExchangeRecod.prototype;

        _proto.onLoad = function onLoad() {
          this.setShow();
          this.setGlists();
        };

        _proto.onEnable = function onEnable() {
          var _this2 = this;

          this.lists.children.forEach(function (v, i) {
            v.on(ScrollView.EventType.BOUNCE_BOTTOM, function () {
              var index = i;

              var page = _this2.getPage(_this2.itemsdata[index].Name);

              _this2.httpGetData(page + 1, index);
            }, _this2);
          });
        };

        _proto.onDisable = function onDisable() {
          var _this3 = this;

          this.lists.children.forEach(function (v, i) {
            v.off(ScrollView.EventType.BOUNCE_BOTTOM, function () {
              var index = i;

              var page = _this3.getPage(_this3.itemsdata[index].Name);

              _this3.httpGetData(page + 1, index);
            }, _this3);
          });
          this.itemsdata.forEach(function (v) {
            _this3.deletePage(v.Name);

            _this3.deleteItemsDatas(v.Name);

            if (_this3.glists[v.listName]) {
              _this3.glists[v.listName].Dispose();

              _this3.glists[v.listName] = null;
            }
          });
        };

        _proto.setGlists = function setGlists() {
          var _this4 = this;

          NodeHelp.getchildlable(this.lists, "ScrollViewExchange", ScrollView, function (comp, node) {
            _this4.glists.Exchangelist = new GList(comp, _this4.exchangeItem, 58, false, 1);
          });
          NodeHelp.getchildlable(this.lists, "ScrollViewRecharge", ScrollView, function (comp, node) {
            _this4.glists.Rechargelist = new GList(comp, _this4.rechargeItem, 58, false, 1);
          });
          NodeHelp.getchildlable(this.lists, "ScrollViewCashOut", ScrollView, function (comp, node) {
            _this4.glists.CashOutlist = new GList(comp, _this4.cashOutItem, 58, false, 1);
          });
          NodeHelp.getchildlable(this.lists, "ScrollViewTransfer", ScrollView, function (comp, node) {
            _this4.glists.Transferlist = new GList(comp, _this4.transferItem, 58, false, 1);
          });
        };

        _proto.setlistShow = function setlistShow(name) {
          var _this5 = this;

          NodeHelp.getchildlable(this.node, "ToggleGroup", null, function (comp, node) {
            var nodeT = node.getChildByName(name);

            if (nodeT) {
              nodeT.getComponent(Toggle).isChecked = true;

              _this5.EventToggleGroup(nodeT.getComponent(Toggle));
            }
          });
        };

        _proto.setItemsDatas = function setItemsDatas(name, index, data) {
          if (!this._itemsDatas.has(name)) {
            this._itemsDatas.set(name, new Array());
          }

          var itemsData = this._itemsDatas.get(name).concat(data);

          this._itemsDatas.set(name, itemsData);

          var page = this.getPage(name);

          if (index > page) {
            this.setPage(name, index);
          }
        };

        _proto.getItemsData = function getItemsData(name) {
          if (this._itemsDatas.has(name)) {
            return this._itemsDatas.get(name);
          } else {
            return null;
          }
        };

        _proto.deleteItemsDatas = function deleteItemsDatas(name) {
          if (this._itemsDatas.has(name)) {
            this._itemsDatas.set(name, null);

            this._itemsDatas["delete"](name);
          }
        };

        _proto.getPage = function getPage(name) {
          if (!this._pages.has(name)) this.setPage(name, 0);
          return this._pages.get(name);
        };

        _proto.setPage = function setPage(name, nowPage) {
          this._pages.set(name, nowPage);

          return this._pages.get(name);
        };

        _proto.deletePage = function deletePage(name) {
          if (this._itemsDatas.has(name)) {
            this._itemsDatas["delete"](name);
          }
        };

        _proto.setGlistData = function setGlistData(listNum) {
          if (!this.itemsdata || !this.itemsdata[listNum]) {
            return;
          }

          var name = this.itemsdata[listNum].listName;
          var Data = this.getItemsData(this.itemsdata[listNum].Name);
          var list = this.glists[name];

          if (list && Data && Data.length >= 0) {
            list.itemRenderer = function (index, item) {
              item.getComponent(ExchangeRecodItem).init(Data[index], index);
            };

            list.SetItemNum(Data.length);
          }
        };

        _proto.setShow = function setShow() {
          NodeHelp.getchildlable(this.node, "ToggleExchange", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(120416);
          });
          NodeHelp.getchildlable(this.node, "ToggleRecharge", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(120421);
          });
          NodeHelp.getchildlable(this.node, "ToggleCashOut", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(120433);
          });
          NodeHelp.getchildlable(this.node, "ToggleTransfer", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(120550);
          });
          NodeHelp.getchildlable(this.lists, "ScrollViewExchange", null, function (comp, node) {
            NodeHelp.getchildlable(node, "type", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(120417);
            });
            NodeHelp.getchildlable(node, "proportion", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(120449);
            });
            NodeHelp.getchildlable(node, "exchangeNum", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(120418);
            });
            NodeHelp.getchildlable(node, "getNum", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(120419);
            });
            NodeHelp.getchildlable(node, "time", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(120420);
            });
          });
          NodeHelp.getchildlable(this.lists, "ScrollViewRecharge", null, function (comp, node) {
            NodeHelp.getchildlable(node, "orderID", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(120422);
            });
            NodeHelp.getchildlable(node, "currencyType", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(120458);
            });
            NodeHelp.getchildlable(node, "currency", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(120424);
            });
            NodeHelp.getchildlable(node, "rechargeTime", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(120427);
            });
            NodeHelp.getchildlable(node, "toTime", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(120428);
            });
            NodeHelp.getchildlable(node, "status", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(120429);
            });
          });
          NodeHelp.getchildlable(this.lists, "ScrollViewCashOut", null, function (comp, node) {
            NodeHelp.getchildlable(node, "orderID", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(120422);
            });
            NodeHelp.getchildlable(node, "currencyType", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(120458);
            });
            NodeHelp.getchildlable(node, "currency", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(120435);
            });
            NodeHelp.getchildlable(node, "cashTime", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(120436);
            });
            NodeHelp.getchildlable(node, "toTime", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(120428);
            });
          });
          NodeHelp.getchildlable(this.lists, "ScrollViewTransfer", null, function (comp, node) {
            NodeHelp.getchildlable(node, "dstUserID", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(120551);
            });
            NodeHelp.getchildlable(node, "modeID", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(120458);
            });
            NodeHelp.getchildlable(node, "value", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(120552);
            });
            NodeHelp.getchildlable(node, "taxRate", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(120553);
            });
            NodeHelp.getchildlable(node, "obtain", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(120554);
            });
            NodeHelp.getchildlable(node, "time", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(120555);
            });
          });
        };

        _proto.EventToggleGroup = function EventToggleGroup(toggle) {
          var index = 0;
          this.itemsdata.find(function (v, i) {
            index = i;
            return v.Toggle == toggle.node.name;
          });
          this.listNum = index;
          this.listShow();
        };

        _proto.listShow = function listShow() {
          if (this.lastlistNum == this.listNum) {
            return;
          }

          this.lastlistNum = this.listNum;
          this.lists.getComponent("SwitchChildrenCC").setIndex(this.listNum);
          if (!this.getItemsData(this.itemsdata[this.listNum].Name)) this.initItemsShowData(this.listNum);
        };

        _proto.initItemsShowData = function initItemsShowData(listNum) {
          var nowlistNum = listNum;
          this.httpGetData(1, nowlistNum);
        }
        /**发送https请求得到数据
         * @page
         * 页数
         * @listNum
         * 是哪一个表
         */
        ;

        _proto.httpGetData = function httpGetData(page, listNum) {
          var _this6 = this;

          if (!this.itemsdata || !this.itemsdata[listNum]) {
            return;
          }

          var nowlistNum = listNum;
          var newPage = page;
          var params = {
            page: page,
            size: DFSize
          };
          HttpMgr.post(this.itemsdata[nowlistNum].url, params, function (data) {
            console.log("UIConchExchangeRecodData--->", data);

            if (0 != data.code) {
              TipManager.ChickBox(ConfigFile.findLanguage(data.code));
              return;
            }

            if (data.data && data.data.items && data.data.items.length >= 1) _this6.setItemsDatas(_this6.itemsdata[listNum].Name, page, data.data.items);

            _this6.setGlistData(listNum);
          }, {
            listNum: nowlistNum,
            page: newPage
          });
        };

        _proto.onClose = function onClose() {
          UIManager.getInstance().closeUI(UIConchExchangeRecod);
        };

        return UIConchExchangeRecod;
      }(BaseUI), _class3.className = "UIConchExchangeRecod", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "exchangeItem", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "rechargeItem", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "cashOutItem", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "transferItem", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lists", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIDescription.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './BaseUI.ts', './UIManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, Input, ConfigFile, BaseUI, UIManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Input = module.Input;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      UIManager = module.UIManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _class3;

      cclegacy._RF.push({}, "14e60LpXqtIHKxsy4jvXaVo", "UIDescription", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIDescription = exports('UIDescription', (_dec = ccclass('UIDescription'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Node), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(UIDescription, _BaseUI);

        function UIDescription() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;
          _this._cbData = null;
          _this._cb = null;

          _initializerDefineProperty(_this, "Text", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Title", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maskNode", _descriptor3, _assertThisInitialized(_this));

          _this._isOk = false;
          _this.showType = 0;
          return _this;
        }

        var _proto = UIDescription.prototype;

        _proto.onLoad = function onLoad() {
          this.Title.string = ConfigFile.findLanguage(120324);
        };

        _proto.start = function start() {
          this.maskNode.on(Input.EventType.TOUCH_START, this.onBeginTouch.bind(this));
          this.maskNode.on(Input.EventType.TOUCH_END, this.onStopTouch.bind(this));
          this.maskNode.on(Input.EventType.TOUCH_CANCEL, this.onStopTouch.bind(this));
        };

        _proto.initUI = function initUI(t) {
          this.showType = t;

          if (this.showType == 1) {
            this.upText1();
          } else {
            this.upText2();
          }
        };

        _proto.onDestroy = function onDestroy() {
          this._cb && this._cb(this._cbData, this._isOk);
        };

        _proto.upText1 = function upText1() {
          this.Text.string = ConfigFile.findLanguage(120325);
        };

        _proto.upText2 = function upText2() {
          this.Text.string = ConfigFile.findLanguage(120326);
        };

        _proto.onClose = function onClose() {
          this._isOk = false;
          UIManager.getInstance().closeUI(UIDescription);
        };

        _proto.onBeginTouch = function onBeginTouch(event) {};

        _proto.onStopTouch = function onStopTouch(event) {
          UIManager.getInstance().closeUI(UIDescription);
        };

        return UIDescription;
      }(BaseUI), _class3.className = "UIDescription", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Text", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Title", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "maskNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIExtensionItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './EventManager.ts', './MessageManager.ts', './WebSocketMgr.ts', './NodeHelp.ts', './Pool.ts', './BagUIItemTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, Prefab, instantiate, Label, Component, RichText, ConfigFile, EventManager, MessageManager, WebSocketMgr, NodeHelp, PoolOnce, BagUIItemTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      Label = module.Label;
      Component = module.Component;
      RichText = module.RichText;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "893e51a9n5OJL54ku6pocBh", "UIExtensionItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIExtensionItem = exports('UIExtensionItem', (_dec = ccclass('UIExtensionItem'), _dec2 = property({
        type: Prefab,
        displayName: "奖励item"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIExtensionItem, _Component);

        function UIExtensionItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "ActivityRewardItem", _descriptor, _assertThisInitialized(_this));

          _this.data = null;
          _this.config = null;
          _this.tag = null;
          _this.Pool = new PoolOnce(30, function () {
            return instantiate(_this.ActivityRewardItem);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          return _this;
        }

        var _proto = UIExtensionItem.prototype;

        _proto.init = function init(IActivityInfo, tag) {
          this.data = IActivityInfo;
          this.tag = tag;
          this.config = ConfigFile.getTActivitiesInfoByActivitiesId(IActivityInfo.ActivityModeId);
          this.setReward();
          this.setLabelShow();
        };

        _proto.onEnable = function onEnable() {
          EventManager.getInstance().add(MessageManager.Custom.ActivityInfoChange, this, this.setActivityGet);
        };

        _proto.onDisable = function onDisable() {
          var _this2 = this;

          EventManager.getInstance().remove(MessageManager.Custom.ActivityInfoChange, this, this.setActivityGet);
          NodeHelp.getchildlable(this.node, "RewardItems", null, function (comp, node) {
            while (node.children.length > 0) {
              _this2.Pool.put(node.children[0]);
            }
          });
        };

        _proto.onDestroy = function onDestroy() {
          this.Pool.clear();
        };

        _proto.setActivityGet = function setActivityGet(data) {
          if (this.data.ActivityModeId == data.ActivityModeId) {
            this.data = data;
            this.setLabelShow();
          }
        };

        _proto.setReward = function setReward() {
          var _this3 = this;

          NodeHelp.getchildlable(this.node, "RewardItems", null, function (comp, node) {
            while (node.children.length > 0) {
              _this3.Pool.put(node.children[0]);
            }

            if (_this3.config && _this3.config.RewardNum) {
              var data = _this3.config.RewardNum.split(";");

              if (data) {
                for (var i = 0; i < data.length; i++) {
                  var rewards = data[i].split(",");
                  var rewardId = rewards[0];
                  var rewardNum = rewards[1];

                  var item = _this3.Pool.get();

                  node.addChild(item);
                  var itemComp = item.getComponent("ActivityRewardItem");
                  itemComp.init(rewardId, rewardNum);
                  itemComp.tag = _this3.tag;
                }
              }
            }
          });
        };

        _proto.setLabelShow = function setLabelShow() {
          var _this4 = this;

          var conditionString = ""; //let numStr = ""

          var ConditionOver = true;

          var _loop = function _loop() {
            var condition = _step.value;
            var config = ConfigFile.getTConditionInfoByConditionId(condition.ConditionModeId);

            if (config) {
              var defaultColor = "<color=#000000>%s</color>";

              if (conditionString == "") {
                var str = "<color=#FA1B1B>(%s/%s)</color>";

                if (condition.nowCondition >= condition.MaxCondition) {
                  str = "<color=#4AE036>(%s/%s)</color>";
                }

                var strs = ConfigFile.findLanguage(130256).format(config.Other, condition.MaxCondition);
                conditionString = defaultColor.format(strs);
                NodeHelp.getchildlable(_this4.node, "RichText", RichText, function (comp) {
                  comp.string = "<b>" + conditionString + str.format(condition.nowCondition, condition.MaxCondition) + "</b>";
                });
              } else {
                var _str = "<color=#FA1B1B>(%s/%s)</color>";

                if (condition.nowCondition >= condition.MaxCondition) {
                  _str = "<color=#4AE036>(%s/%s)</color>";
                }

                var _strs = ConfigFile.findLanguage(130256).format(config.Other, condition.MaxCondition);

                conditionString += "  " + defaultColor.format(_strs) + _str.format(condition.nowCondition, condition.MaxCondition);
                NodeHelp.getchildlable(_this4.node, "RichText", RichText, function (comp) {
                  comp.string = "<b>" + conditionString + "</b>";
                });
              }

              if (ConditionOver) {
                if (config.Compare == 0) ConditionOver = condition.MaxCondition - condition.nowCondition <= 0;else ConditionOver = condition.nowCondition - condition.MaxCondition <= 0;
              }
            }
          };

          for (var _iterator = _createForOfIteratorHelperLoose(this.data.Conditions), _step; !(_step = _iterator()).done;) {
            _loop();
          }

          if (ConditionOver) {
            NodeHelp.getchildlable(this.node, "LabelReceived", null, function (comp, node) {
              node.active = _this4.isGet();
              NodeHelp.getchildlable(node, "Label", Label, function (comp_1) {
                comp_1.string = ConfigFile.findLanguage(130273);
              });
            });
            NodeHelp.getchildlable(this.node, "ButtonGet", null, function (comp, node) {
              node.active = !_this4.isGet();
              NodeHelp.getchildlable(node, "Label", Label, function (comp_1) {
                comp_1.string = ConfigFile.findLanguage(130272);
              });
            });
          } else {
            NodeHelp.getchildlable(this.node, "LabelReceived", null, function (comp, node) {
              node.active = false;
            });
            NodeHelp.getchildlable(this.node, "ButtonGet", null, function (comp, node) {
              node.active = false;
            });
          }
        };

        _proto.isGet = function isGet() {
          if (this.data) return this.data.TotalGet >= this.data.TotalGetTime;
          return false;
        };

        _proto.onClickedButtonGet = function onClickedButtonGet() {
          BagUIItemTip.getInstance().closeTip();
          WebSocketMgr.send(MessageManager.Net.FarmActivityGetRequest, {
            ActivityModeId: this.data.ActivityModeId
          });
        };

        return UIExtensionItem;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "ActivityRewardItem", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIGame.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UIManager.ts', './MainGame.ts', './BaseUI.ts', './BagUI.ts', './MessageManager.ts', './EventManager.ts', './SeedView.ts', './ExceptionView.ts', './UIHelp.ts', './MarketView.ts', './UIShop.ts', './FamilyView.ts', './GameAllData.ts', './producer.ts', './UIHead.ts', './CutscenesView.ts', './TaskManager.ts', './RechargeView.ts', './UIConchExchange.ts', './UIGameTaskItemTip.ts', './UIActivity.ts', './LandUpgradeTip.ts', './PastureUpgradeTip.ts', './TaskUI.ts', './text.ts', './DateUtil.ts', './WebSocketMgr.ts', './UIActivityOther.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, Vec3, _decorator, Node, Label, input, Input, view, sys, Widget, tween, Vec2, Color, UITransform, UIManager, GAMESTATE, BaseUI, BagUI, MessageManager, EventManager, SeedView, ExceptionView, UIHelp, MarketView, UIShop, FamilyView, GameAllData, producer, UIHead, CutscenesView, TaskManager, RechargeView, UIConchExchange, UIGameTaskItemTip, UIActivity, LandUpgradeTip, PastureUpgradeTip, TaskUI, text, DateUtil, WebSocketMgr, UIActivityOther;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      input = module.input;
      Input = module.Input;
      view = module.view;
      sys = module.sys;
      Widget = module.Widget;
      tween = module.tween;
      Vec2 = module.Vec2;
      Color = module.Color;
      UITransform = module.UITransform;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      GAMESTATE = module.GAMESTATE;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      BagUI = module.BagUI;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      SeedView = module.SeedView;
    }, function (module) {
      ExceptionView = module.ExceptionView;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      MarketView = module.MarketView;
    }, function (module) {
      UIShop = module.UIShop;
    }, function (module) {
      FamilyView = module.FamilyView;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      UIHead = module.UIHead;
    }, function (module) {
      CutscenesView = module.CutscenesView;
    }, function (module) {
      TaskManager = module.TaskManager;
    }, function (module) {
      RechargeView = module.RechargeView;
    }, function (module) {
      UIConchExchange = module.UIConchExchange;
    }, function (module) {
      UIGameTaskItemTip = module.UIGameTaskItemTip;
    }, function (module) {
      UIActivity = module.UIActivity;
    }, function (module) {
      LandUpgradeTip = module.LandUpgradeTip;
    }, function (module) {
      PastureUpgradeTip = module.PastureUpgradeTip;
    }, function (module) {
      TaskUI = module.TaskUI;
    }, function (module) {
      text = module.text;
    }, function (module) {
      DateUtil = module.DateUtil;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      UIActivityOther = module.UIActivityOther;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _class3;

      cclegacy._RF.push({}, "aeeb5V8gyRPsIIsdz+44dnd", "UIGame", undefined);

      var v3_1 = new Vec3();
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var temp_v3_1 = new Vec3();
      var UIGame = exports('UIGame', (_dec = ccclass('UIGame'), _dec2 = property(SeedView), _dec3 = property(LandUpgradeTip), _dec4 = property(PastureUpgradeTip), _dec5 = property(ExceptionView), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(Node), _dec10 = property(Node), _dec11 = property(Node), _dec12 = property(Node), _dec13 = property(Node), _dec14 = property(Node), _dec15 = property(Node), _dec16 = property(Node), _dec17 = property(Label), _dec18 = property(Label), _dec19 = property(Label), _dec20 = property(Node), _dec21 = property(Node), _dec22 = property(Node), _dec23 = property(Node), _dec24 = property(Label), _dec25 = property(Node), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(UIGame, _BaseUI);

        function UIGame() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "toolsView", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "LandUpgradeTip", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "PastureUpgradeTip", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "exceptionView", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "HeadNode", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Active", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ActiveOther", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "BagNode", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "task", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "marketNode", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "shopNode", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "coinNode", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "setNode", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "VisitNode", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodePoint", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "homeName", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "visiID", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "heartNum", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "heart1", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "heart2", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnShare", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tipsNode", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "timeLabel", _descriptor23, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "effect1", _descriptor24, _assertThisInitialized(_this));

          _this._Game = null;
          _this.lastClickTime = 0;
          _this.toolsViewActive = null;
          _this.exceptionViewActive = null;
          _this.gmBtnClickNum = 0;
          _this._NetLockTime = 0;
          _this.gmClickBoo = false;
          return _this;
        }

        var _proto = UIGame.prototype;

        _proto.start = function start() {
          this.setSafe();
          this.toolsView.node.active = false;
          this.LandUpgradeTip.node.active = false;
          this.PastureUpgradeTip.node.active = false;
          this.exceptionView.node.active = false;
          input.on(Input.EventType.TOUCH_START, this.onBeginTouch, this);
          input.on(Input.EventType.TOUCH_MOVE, this.onMoveTouch, this);
          input.on(Input.EventType.TOUCH_END, this.onStopTouch, this);
          input.on(Input.EventType.TOUCH_CANCEL, this.onStopTouch, this);
          input.on(Input.EventType.MOUSE_WHEEL, this.onMouseWheel, this);
          EventManager.getInstance().add(MessageManager.Custom.ShowToolsView, this, this.onShowToolsView);
          EventManager.getInstance().add(MessageManager.Custom.ShowExceptionView, this, this.onShowExceptionView);
          EventManager.getInstance().add(MessageManager.Custom.ShowFarmTip, this, this.onShowFarmTip);
          this.setGameUiActivShow();
        };

        _proto.onDestroy = function onDestroy() {
          _BaseUI.prototype.onDestroy.call(this);

          input.off(Input.EventType.TOUCH_START, this.onBeginTouch, this);
          input.off(Input.EventType.TOUCH_MOVE, this.onMoveTouch, this);
          input.off(Input.EventType.TOUCH_END, this.onStopTouch, this);
          input.off(Input.EventType.TOUCH_CANCEL, this.onStopTouch, this);
          input.off(Input.EventType.MOUSE_WHEEL, this.onMouseWheel, this);
        };

        _proto.setSafe = function setSafe() {
          var visibleSize = view.getVisibleSize();
          var screenWidth = visibleSize.width;
          var screenHeight = visibleSize.height;
          var safeArea = sys.getSafeAreaRect();
          var left = safeArea.x;
          var bottom = safeArea.y;
          var right = screenWidth - safeArea.x - safeArea.width;
          var top = screenHeight - safeArea.y - safeArea.height;
          this.node.children.forEach(function (v) {
            var childWidget = v.getComponent(Widget);

            if (childWidget) {
              if (childWidget.isAlignLeft) {
                childWidget.left += left - 24 <= 0 ? 0 : left - 24;
              }

              if (childWidget.isAlignRight) {
                childWidget.right += right - 24 <= 0 ? 0 : right - 24;
              } // if (childWidget.isAlignTop) {
              //     childWidget.top = (childWidget.top - top <= 0 ? 0 : childWidget.top - top)
              // }
              // if (childWidget.isAlignBottom) {
              //     childWidget.bottom = (childWidget.bottom - bottom <= 0 ? 0 : childWidget.bottom - bottom)
              // }


              childWidget.updateAlignment();
            }
          });
        };

        _proto.initUI = function initUI(args) {
          this._Game = args;
        };

        _proto.onShowFarmTip = function onShowFarmTip(arg) {
          var select = arg.select;

          if (arg.select) {
            var mode = arg.mode;
            var tipInfo = arg.Info;
            select.node.getWorldPosition(temp_v3_1);
            this.openTip(tipInfo, temp_v3_1);
          }
        };

        _proto.openTip = function openTip(data, pos) {
          var _this2 = this;

          var name = "ProducerTip";
          if (data.tip && data.tip != "") name = data.tip;

          if (name == "LandIUpgradeTip") {
            this.LandUpgradeTip.node.active = true;
            this.LandUpgradeTip.initUI(data);
            this.scheduleOnce(function () {
              _this2._Game.targetTScaleLock = true;
            }, 0.5);
          } else if (name == "PastureUpgradeTip") {
            this.PastureUpgradeTip.node.active = true;
            this.PastureUpgradeTip.initUI(data);
            this.scheduleOnce(function () {
              _this2._Game.targetTScaleLock = true;
            }, 0.5);
          }
        };

        _proto.setGameUiActivShow = function setGameUiActivShow() {
          if (GameAllData.haveActivityInfo(true)) this.ActiveOther.active = true;else this.ActiveOther.active = false;
          if (GameAllData.haveActivityInfo(false)) this.Active.active = true;else this.Active.active = true; //有签到表数据

          if (GameAllData.FarmActivityListResponse.Signs && GameAllData.FarmActivityListResponse.Signs.length > 0) this.Active.active = true;
        };

        _proto.entryVisit = function entryVisit(value) {
          if (value) {
            this.marketNode.active = false;
            this.shopNode.active = false;
            this.coinNode.active = false;
            this.setNode.active = false;
            this.BagNode.active = false;
            this.task.active = false;
            this.btnShare.active = false;
            this.VisitNode.active = true;
          } else {
            this.marketNode.active = true;
            this.shopNode.active = true;
            this.coinNode.active = true;
            this.setNode.active = true;
            this.BagNode.active = true;
            this.task.active = true;
            this.btnShare.active = true;
            this.VisitNode.active = false;
          }
        };

        _proto.openToolsView = function openToolsView(arg) {
          if (!this.toolsView.node.active) {
            var self = this;

            this._Game.gameStateChange(GAMESTATE.GS_SOWING);

            TaskManager.getInstance().onWindowsOpen("SeedView");
            this.toolsView.node.active = true; // this.LandUpgradeTip.node.active = true;

            this.closeExceptionView();
            this.toolsView.initUI(arg.unit, arg.mode);
            this.toolsView.node.getPosition(v3_1);
            v3_1.y = -500;
            this.toolsView.closeTip();
            this.toolsView.node.setPosition(v3_1);

            if (this.toolsViewActive) {
              this.toolsViewActive.stop();
            }

            this.toolsViewActive = tween(this.toolsView.node).to(0.2, {
              position: new Vec3(v3_1.x, -240, v3_1.z)
            }).call(function () {
              self.toolsViewActive = null;
            }).start();
          }
        };

        _proto.closeToolsView = function closeToolsView() {
          var _this3 = this;

          if (this.toolsView.node.active && this.toolsViewActive == null) {
            this._Game.gameStateChange(GAMESTATE.GS_ONTIME);

            this.toolsView.closeTip();
            var self = this;
            TaskManager.getInstance().onWindowsClose("SeedView");
            this.toolsView.node.getPosition(v3_1);

            if (this.toolsViewActive) {
              this.toolsViewActive.stop();
            }

            this.toolsViewActive = tween(this.toolsView.node).to(0.2, {
              position: new Vec3(v3_1.x, -500, v3_1.z)
            }).call(function () {
              self.toolsView.node.active = false;
              _this3.LandUpgradeTip.node.active = false;
              _this3.PastureUpgradeTip.node.active = false;
              self.toolsViewActive = null;

              _this3.scheduleOnce(function () {
                _this3._Game.targetTScaleLock = false;
              }, 0.5);
            }).start();
          }
        };

        _proto.openExceptionView = function openExceptionView(arg) {
          var _this4 = this;

          if (!this.exceptionView.node.active) {
            this._Game.gameStateChange(GAMESTATE.GS_PLANTBRUSH);

            this.exceptionView.node.active = true;
            this.closeToolsView();
            this.exceptionView.initUI(arg.unit, arg.mode);
            this.exceptionView.node.getPosition(v3_1);
            v3_1.y = -500;
            this.exceptionView.closeTip();
            this.exceptionView.node.setPosition(v3_1);
            TaskManager.getInstance().onWindowsOpen("ExceptionView");

            if (this.exceptionViewActive) {
              this.exceptionViewActive.stop();
            }

            this.exceptionViewActive = tween(this.exceptionView.node).to(0.2, {
              position: new Vec3(v3_1.x, -240, v3_1.z)
            }).call(function () {
              _this4.exceptionView.initUI(arg.unit, arg.mode);

              _this4.exceptionViewActive = null;
            }).start();
          }
        };

        _proto.closeExceptionView = function closeExceptionView() {
          var _this5 = this;

          if (this.exceptionView.node.active && this.exceptionViewActive == null) {
            this._Game.gameStateChange(GAMESTATE.GS_ONTIME);

            this.exceptionView.closeTip();
            var self = this;
            TaskManager.getInstance().onWindowsClose("ExceptionView");
            this.exceptionView.node.getPosition(v3_1);

            if (this.exceptionViewActive) {
              this.exceptionViewActive.stop();
            }

            this.exceptionViewActive = tween(this.exceptionView.node).to(0.2, {
              position: new Vec3(v3_1.x, -500, v3_1.z)
            }).call(function () {
              self.exceptionView.node.active = false;
              _this5.exceptionViewActive = null;
            }).start();
          }
        };

        _proto.onShowExceptionView = function onShowExceptionView(arg) {
          if (arg.show) {
            if (!arg.unit) {
              console.log("注意，再没有选中单位的情况下打开了操作档");
              return;
            }

            this.openExceptionView(arg);
          } else {
            this.closeExceptionView();
          }
        };

        _proto.onShowToolsView = function onShowToolsView(arg) {
          if (arg.show) {
            if (!arg.unit) {
              console.log("注意，再没有选中单位的情况下打开了操作档");
              return;
            }

            this.openToolsView(arg);
          } else {
            this.closeToolsView();
          }
        };

        _proto.getToolsView = function getToolsView() {
          return this.toolsView;
        };

        _proto.getexceptionView = function getexceptionView() {
          return this.exceptionView;
        };

        _proto.testClickUI = function testClickUI(uipos) {
          if (UIHelp.TestUIPoint(uipos, this.toolsView.BG)) return true;
          if (UIHelp.TestUIPoint(uipos, this.exceptionView.BG)) return true;
          return false;
        };

        _proto.onBeginTouch = function onBeginTouch(event) {
          UIGameTaskItemTip.getInstance().closeTip();
          var touches = event.getTouches();
          EventManager.getInstance().trigger(MessageManager.Custom.TOUCHSTART, event);
          var uipos = event.touch.getUILocation();
          this._Game && this._Game.onSceenEvent(event);
        };

        _proto.onMoveTouch = function onMoveTouch(event) {
          var touches = event.getTouches();
          EventManager.getInstance().trigger(MessageManager.Custom.TOUCHMOVE, event);

          if (touches.length >= 2) {
            if (this._Game._state != GAMESTATE.GS_TOW) {
              var tp1 = touches[0].getUILocation();
              var tpl1 = touches[0].getUIPreviousLocation();
              var tp2 = touches[1].getUILocation();
              var tpl2 = touches[1].getUIPreviousLocation();
              var distancecur = Vec2.distance(tp1, tp2);
              var distancep = Vec2.distance(tpl1, tpl2); //console.log("moveTouch ==>",distancecur,"  cep==>",distancep);

              this._Game.setSelectItem(null, tp1);

              var offset = Math.abs(distancep - distancecur);

              if (distancecur > distancep) {
                this._Game.targetScale = this._Game.targetScale + offset * 0.001;
                this._Game.scale = this._Game.targetScale;
              } else if (distancecur < distancep) {
                this._Game.targetScale = this._Game.targetScale - offset * 0.001;
                this._Game.scale = this._Game.targetScale;
              }
            }
          } else {
            this._Game.onPickMoveEvent(event);
          }
        };

        _proto.onMouseWheel = function onMouseWheel(event) {
          var sy = event.getScrollY();

          if (sy < 0) {
            this._Game.targetScale = this._Game.targetScale - 0.04;
          } else if (sy > 0) {
            this._Game.targetScale = this._Game.targetScale + 0.04;
          }
        };

        _proto.onStopTouch = function onStopTouch(event) {
          EventManager.getInstance().trigger(MessageManager.Custom.TOUCHEND, event);

          if (UIManager.getInstance().getUiListNumExceptUIgame() > 0) {
            return;
          }

          this._Game.onPickStopEvent(event);
        };

        _proto.upHeart = function upHeart() {
          var visitUser = GameAllData.FarmVisitUserResponse;
          if (!visitUser) return;
          var HeartResponse = GameAllData.FarmSendHeartResponse;

          if (HeartResponse) {
            this.heartNum.string = HeartResponse.sendCount + "/" + HeartResponse.totalCount;

            if (visitUser.IsSendHeart) {
              this.visiID.color = new Color(193, 125, 60, 255);
              this.heart1.active = true;
              this.heart2.active = false;
            } else {
              this.visiID.color = new Color(0, 255, 173, 255);
              this.heart1.active = false;
              this.heart2.active = true;
            }
          }
        };

        _proto.setVisiData = function setVisiData(value) {
          if (value) {
            this.homeName.node.active = true;
            this.visiID.node.active = true;
          } else {
            this.homeName.node.active = false;
            this.visiID.node.active = false;
          }
        };

        _proto.upVisitData = function upVisitData() {
          var visitUser = GameAllData.FarmVisitUserResponse;
          var msgTemple06 = producer.getMessageText(9006);
          var name = "myfarm";
          if (visitUser.NikiName && visitUser.NikiName != "") name = visitUser.NikiName;
          this.homeName.string = msgTemple06.format(name);
          this.visiID.string = "" + visitUser.Id;
          this.upHeart();
        };

        _proto.onBackVisit = function onBackVisit(event) {
          var node = event.target;

          if (GameAllData.visitState) {
            var self = this;

            var func = function func() {
              self._Game.sendFarmVisitBackRequest({});
            };

            UIManager.getInstance().openUI(CutscenesView, 20, function (ui, args) {
              ui.callEntry = func;
            });
          }
        };

        _proto.onHeart = function onHeart() {
          var visitUser = GameAllData.FarmVisitUserResponse;

          if (!visitUser) {
            console.log("没有初始化VisitUser");
            return;
          }

          if (UIHelp.getTimeDiff(this.lastClickTime) > 20) {
            this._Game.playEffect(this.effect1, "heartEffect", null);

            this.lastClickTime = UIHelp.getTimeMask();
          }

          var isSend = false;

          if (visitUser.hasOwnProperty('IsSendHeart')) {
            isSend = visitUser.IsSendHeart;
          }

          if (isSend) {
            var _text = producer.getMessageText(7003);

            this._Game.Message(_text, null, null);
          } else {
            this._Game.sendFarmVisitHearRequest(visitUser.Id);
          }
        };

        _proto.onAddCoin = function onAddCoin() {
          TaskManager.getInstance().onCtlClick(this.node.getChildByPath("coin/CoinShow/UIGameItemCoin"));
          UIManager.getInstance().openUI(UIConchExchange, 12, function (ui, args) {
            ui.initUI(1);
          });
        };

        _proto.onAddPearl = function onAddPearl() {
          TaskManager.getInstance().onCtlClick(this.node.getChildByPath("coin/CoinShow/UIGameItemPearl"));
          UIManager.getInstance().openUI(UIConchExchange, 12, function (ui, args) {
            ui.initUI(2);
          });
        };

        _proto.onAddGold = function onAddGold() {
          TaskManager.getInstance().onCtlClick(this.node.getChildByPath("coin/CoinShow/UIGameItemGold"));
          UIManager.getInstance().openUI(RechargeView, 13, function (ui, args) {});
        };

        _proto.onClick = function onClick(event) {
          // this._Game.testScale();
          // return;
          var node = event.target;
          node.getWorldPosition(v3_1);
          UIManager.getInstance().openUI(MarketView, 11, function (ui, args) {
            ui.startPos = ui.node.parent.getComponent(UITransform).convertToNodeSpaceAR(v3_1);
            WebSocketMgr.send(MessageManager.Net.FarmClientActionRequest, {
              Action: 1
            });
          }, undefined, null);
        };

        _proto.onClickBag = function onClickBag(event) {
          var node = event.target;
          node.getWorldPosition(v3_1);
          UIManager.getInstance().openUI(BagUI, 11, function (ui, args) {
            ui.startPos = ui.node.parent.getComponent(UITransform).convertToNodeSpaceAR(v3_1);
          }, undefined, null);
        };

        _proto.onClickHead = function onClickHead(event) {
          if (GameAllData.visitState) return;
          var node = event.target;
          UIManager.getInstance().openUI(UIHead, 11, function (ui, args) {}, undefined, null);
        };

        _proto.onClickShop = function onClickShop(event) {
          var node = event.target;
          node.getWorldPosition(v3_1);
          UIManager.getInstance().openUI(UIShop, 11, function (ui, args) {
            ui.startPos = ui.node.parent.getComponent(UITransform).convertToNodeSpaceAR(v3_1);
          }, undefined, null);
        };

        _proto.onClickFamily = function onClickFamily(event) {
          var node = event.target;
          node.getWorldPosition(v3_1);
          UIManager.getInstance().openUI(FamilyView, 11, function (ui, args) {
            ui.startPos = ui.node.parent.getComponent(UITransform).convertToNodeSpaceAR(v3_1);
          }, undefined, null);
        };

        _proto.onClickActivity = function onClickActivity(event) {
          UIManager.getInstance().openUI(UIActivity, 11, function (ui, args) {}, undefined, null);
        };

        _proto.onClickActivityOther = function onClickActivityOther(event) {
          UIManager.getInstance().openUI(UIActivityOther, 11, function (ui, args) {}, undefined, null);
        };

        _proto.onOpenDailyTask = function onOpenDailyTask() {
          UIManager.getInstance().openUI(TaskUI, 11, function (ui, args) {
            ui.initUI(2);
          }, undefined, null);
        };

        _proto.onchicktext = function onchicktext() {
          if (this.gmClickBoo == false) {
            this.gmClickBoo = true;
            this.gmBtnClickNum = 1;
            this._NetLockTime = UIHelp.getTimeMask();
          } else {
            if (UIHelp.getTimeDiff(this._NetLockTime) < 1000) {
              this.gmBtnClickNum += 1;
            } else {
              this.gmClickBoo = false;
              this.gmBtnClickNum = 0;
            }
          }

          if (this.gmBtnClickNum >= 5) {
            // if(CommonUtil.isTestNet())
            UIManager.getInstance().openUI(text, 12, undefined, undefined, undefined);
          }
        };

        _proto.update = function update() {
          this.timeLabel.string = DateUtil.getMDHMNew();
        };

        return UIGame;
      }(BaseUI), _class3.className = "UIGame", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "toolsView", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "LandUpgradeTip", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "PastureUpgradeTip", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "exceptionView", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "HeadNode", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "Active", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "ActiveOther", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "BagNode", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "task", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "marketNode", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "shopNode", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "coinNode", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "setNode", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "VisitNode", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "nodePoint", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "homeName", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "visiID", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "heartNum", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "heart1", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "heart2", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "btnShare", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "tipsNode", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "timeLabel", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "effect1", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIGameActiveOther.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumDefine.ts', './ConfigFile.ts', './GameAllData.ts', './NodeHelp.ts', './TweenHelp.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, UIOpacity, UITransform, v3, Layout, Label, Component, EnumDefine, ConfigFile, GameAllData, NodeHelp, TweenHelper;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UIOpacity = module.UIOpacity;
      UITransform = module.UITransform;
      v3 = module.v3;
      Layout = module.Layout;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      TweenHelper = module.TweenHelper;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "0854acyQ+ZHv5B/0s71e7YV", "UIGameActiveOther", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIGameActiveOther = exports('UIGameActiveOther', (_dec = ccclass('UIGameActiveOther'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIGameActiveOther, _Component);

        function UIGameActiveOther() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.isopen = false;
          return _this;
        }

        var _proto = UIGameActiveOther.prototype;

        _proto.onEnable = function onEnable() {
          this.isopen = false;
          NodeHelp.getchildlable(this.node, "Entrances", UIOpacity, function (comp, node) {
            comp.opacity = 0;
            var posX = node.getComponent(UITransform).width;
            node.setPosition(v3(posX, 0, 0));
          });
          this.ActiveSetShow();
        } //活动数显示
        ;

        _proto.ActiveSetShow = function ActiveSetShow() {
          if (!GameAllData.FarmActivityListResponse) {
            return;
          }

          if (GameAllData.FarmActivityListResponse.Activities && GameAllData.FarmActivityListResponse.Activities.length > 0) {
            //有推广送金等高于普通活动的数据
            var haveExtension = false;
            var haveDirectlyunder = false;
            var haveArena = false;
            var haveGeneral = false;
            GameAllData.FarmActivityListResponse.Activities.forEach(function (v, i) {
              if (v.ActivityType >= EnumDefine.ActivityType.Extension) {
                switch (v.ActivityType) {
                  case EnumDefine.ActivityType.Extension:
                    haveExtension = true;
                    break;

                  case EnumDefine.ActivityType.Directlyunder:
                    haveDirectlyunder = true;
                    break;

                  case EnumDefine.ActivityType.Arena:
                    haveArena = true;
                    break;

                  case EnumDefine.ActivityType.Generalrepresentative:
                    haveGeneral = true;
                    break;
                }
              }
            });
            this.EntrancesSetShow("Extension", haveExtension);
            this.EntrancesSetShow("Directlyunder", haveDirectlyunder);
            this.EntrancesSetShow("Arena", haveArena);
            this.EntrancesSetShow("Generalrepresentative", haveGeneral);
            NodeHelp.getchildlable(this.node, "Entrances", Layout, function (comp, node) {
              comp.updateLayout();
            });
          }
        } //活动入口显示
        ;

        _proto.EntrancesSetShow = function EntrancesSetShow(name, have) {
          NodeHelp.getchildlable(this.node, name, null, function (comp, node) {
            node.active = have;
            if (have) NodeHelp.getchildlable(node, "Label", Label, function (comp) {
              var nameid = -1;

              switch (name) {
                case "Extension":
                  nameid = 130251;
                  break;

                case "Directlyunder":
                  nameid = 130261;
                  break;

                case "Arena":
                  nameid = 130243;
                  break;

                case "Generalrepresentative":
                  nameid = 130268;
                  break;
              }

              comp.string = ConfigFile.findLanguage(nameid);
            });
          });
        } //活动按钮点击
        ;

        _proto.onClick = function onClick() {
          this.isopen = !this.isopen;

          if (this.isopen) {
            NodeHelp.getchildlable(this.node, "Entrances", UIOpacity, function (comp, node) {
              TweenHelper.getTween(comp, "UIGameActiveOtheropen_1", function (_tween) {
                var opacity = 255;

                _tween.to(0.2, {
                  opacity: opacity
                });
              }).start();
              TweenHelper.getTween(node, "UIGameActiveOtheropen_2", function (_tween) {
                var position = v3(0, 0, 0);

                _tween.to(0.2, {
                  position: position
                });
              }).start();
            });
          } else {
            NodeHelp.getchildlable(this.node, "Entrances", UIOpacity, function (comp, node) {
              TweenHelper.getTween(comp, "UIGameActiveOtherclose_1", function (_tween) {
                var opacity = 0;

                _tween.to(0.2, {
                  opacity: opacity
                });
              }).start();
              TweenHelper.getTween(node, "UIGameActiveOtherclose_2", function (_tween) {
                var posX = node.getComponent(UITransform).width;
                var position = v3(posX, 0, 0);

                _tween.to(0.2, {
                  position: position
                });
              }).start();
            });
          }
        };

        _proto.onClickedDirectlyunder = function onClickedDirectlyunder() {};

        _proto.onClickedGeneralAgent = function onClickedGeneralAgent() {};

        _proto.onClickedArena = function onClickedArena() {};

        _proto.onClickedExtension = function onClickedExtension() {};

        return UIGameActiveOther;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIGameHead.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameAllData.ts', './EventManager.ts', './MessageManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, resources, SpriteFrame, Component, GameAllData, EventManager, MessageManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      resources = module.resources;
      SpriteFrame = module.SpriteFrame;
      Component = module.Component;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "cea01XKmExLwYoJKr2l9MXc", "UIGameHead", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIGameHead = exports('UIGameHead', (_dec = ccclass('UIGameHead'), _dec2 = property({
        type: Sprite,
        displayName: "头像图片"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIGameHead, _Component);

        function UIGameHead() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "SprIcon", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = UIGameHead.prototype;

        _proto.onLoad = function onLoad() {
          EventManager.getInstance().add(MessageManager.Custom.HeadOnChange, this, this.onEventHeadOnChange);
          EventManager.getInstance().add(MessageManager.Custom.OterHeadOnChange, this, this.onOterHeadOnChange);
          this.onEventHeadOnChange();
        };

        _proto.onDestroy = function onDestroy() {
          EventManager.getInstance().removeAll(this);
        };

        _proto.onEventHeadOnChange = function onEventHeadOnChange() {
          var _this2 = this;

          var id = -1;

          if (GameAllData.FarmUserResponse && GameAllData.FarmUserResponse.RoleModeId) {
            id = GameAllData.FarmUserResponse.RoleModeId;
          }

          var image = "headIcon/" + id + "/spriteFrame";
          resources.load(image, SpriteFrame, function (error, res) {
            if (res && _this2.SprIcon && _this2.SprIcon.isValid) {
              _this2.SprIcon.spriteFrame = res;
            }

            if (error) {
              console.log("加载头像 ==>", error);
            }
          });
        };

        _proto.onOterHeadOnChange = function onOterHeadOnChange() {
          var _this3 = this;

          var id = -1;

          if (GameAllData.FarmVisitUserResponse || GameAllData.FarmVisitUserResponse.RoleModeId) {
            id = GameAllData.FarmVisitUserResponse.RoleModeId;
          }

          var image = "headIcon/" + id + "/spriteFrame";
          resources.load(image, SpriteFrame, function (error, res) {
            if (res && _this3.SprIcon && _this3.SprIcon.isValid) {
              _this3.SprIcon.spriteFrame = res;
            }

            if (error) {
              console.log("加载头像 ==>", error);
            }
          });
        };

        return UIGameHead;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "SprIcon", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIGameItemCoin.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumDefine.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './NumberUtil.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component, EnumDefine, propType, GameAllData, EventManager, MessageManager, NumberUtil;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      propType = module.propType;
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "e8f84aCRstC26bCCjBva08e", "UIGameItemCoin", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIGameItemCoin = exports('UIGameItemCoin', (_dec = ccclass('UIGameItemCoin'), _dec2 = property({
        type: Label,
        displayName: "数量文本"
      }), _dec3 = property({
        displayName: "道具类型"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIGameItemCoin, _Component);

        function UIGameItemCoin() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "CoinNum", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "PropName", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = UIGameItemCoin.prototype;

        _proto.onLoad = function onLoad() {
          EventManager.getInstance().add(MessageManager.Custom.PropOnChange, this, this.onEventPropOnChange);
          this.onEventPropOnChange();
        };

        _proto.onDestroy = function onDestroy() {
          EventManager.getInstance().removeAll(this);
        };

        _proto.onEventPropOnChange = function onEventPropOnChange() {
          var num = 0;

          switch (this.PropName) {
            case propType.USDT:
              {
                num = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.USDT);
                break;
              }

            case propType.SHELL:
              {
                num = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.Conch);
                break;
              }

            case propType.PEARL:
              {
                num = GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.PEARL);
              }
          }

          this.CoinNum.string = NumberUtil.unitConversion(num);
        };

        return UIGameItemCoin;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "CoinNum", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "PropName", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIGameItemExperience.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumDefine.ts', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './TaskManager.ts', './UIManager.ts', './NodeHelp.ts', './UIHelp.ts', './ExperienceUI.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, Vec3, _decorator, ProgressBar, Label, Sprite, LabelOutline, Color, UITransform, Component, EnumDefine, ConfigFile, Configname, propType, GameAllData, EventManager, MessageManager, TaskManager, UIManager, NodeHelp, UIHelp, ExperienceUI;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      _decorator = module._decorator;
      ProgressBar = module.ProgressBar;
      Label = module.Label;
      Sprite = module.Sprite;
      LabelOutline = module.LabelOutline;
      Color = module.Color;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      propType = module.propType;
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      TaskManager = module.TaskManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      ExperienceUI = module.ExperienceUI;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "9354e32WO9Cup4WiME27egf", "UIGameItemExperience", undefined);

      var v3_1 = new Vec3();
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIGameItemExperience = exports('UIGameItemExperience', (_dec = ccclass('UIGameItemExperience'), _dec2 = property({
        type: ProgressBar,
        displayName: "经验条"
      }), _dec3 = property({
        type: Label,
        displayName: "leve文本"
      }), _dec4 = property({
        displayName: "道具类型"
      }), _dec5 = property({
        type: Sprite,
        displayName: "icon图片"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIGameItemExperience, _Component);

        function UIGameItemExperience() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "experience", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "leve", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "PropName", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "icon", _descriptor4, _assertThisInitialized(_this));

          _this.vipConfig = null;
          _this.dukeConfig = null;
          _this.lastClickTime = 0;
          return _this;
        }

        var _proto = UIGameItemExperience.prototype;

        _proto.onLoad = function onLoad() {
          EventManager.getInstance().add(MessageManager.Custom.OterVipOrRankChange, this, this.onEventOterPropOnChange);
          EventManager.getInstance().add(MessageManager.Custom.VipOrRankChange, this, this.onEventPropOnChange);
          var level = "";
          var ex = 0;
          var iconNum = -1;

          switch (this.PropName) {
            case propType.VIP:
              {
                level = "V0";
                ex = 0;
                iconNum = 0;
                break;
              }

            case propType.TITLE:
              {
                level = "0";
                ex = 0;
                break;
              }
          }

          if (iconNum != -1) {
            this.leve.node.getComponent(LabelOutline).color = new Color().fromHEX(EnumDefine.vipColor["color" + iconNum]);
          }

          this.leve.string = level;
          this.experience.progress = ex;

          if (!GameAllData.FarmUserResponse) {
            return;
          }

          this.onEventPropOnChange();
        };

        _proto.onDestroy = function onDestroy() {
          EventManager.getInstance().remove(MessageManager.Custom.OterVipOrRankChange, this, this.onEventOterPropOnChange);
          EventManager.getInstance().remove(MessageManager.Custom.VipOrRankChange, this, this.onEventPropOnChange);
          EventManager.getInstance().removeAll(this);
        };

        _proto.getconfig = function getconfig(configname, leve) {
          var config = ConfigFile.getInstance().config.get(configname).find(function (v) {
            if (leve == v.VipLevel || leve == v.DukeLevel) return true;
          });
          return config;
        };

        _proto.onEventOterPropOnChange = function onEventOterPropOnChange() {
          var level = "";
          var iconNum = -1;

          switch (this.PropName) {
            case propType.VIP:
              {
                var levelNum = GameAllData.FarmVisitUserResponse.VipLevel;
                iconNum = 0;
                level = "V" + levelNum;

                if (levelNum != iconNum) {
                  if (levelNum % 2 == 1) iconNum = levelNum;else iconNum = levelNum - 1;
                }

                break;
              }

            case propType.TITLE:
              {
                level = GameAllData.FarmVisitUserResponse.RankLevel;
                break;
              }
          }

          if (iconNum != -1) {
            var lconUrl = EnumDefine.vipIconUrl.vipSmall.format(iconNum);
            NodeHelp.loadImage(this.icon, lconUrl);
            this.leve.node.getComponent(LabelOutline).color = new Color().fromHEX(EnumDefine.vipColor["color" + iconNum]);
          }

          this.leve.string = level;
          this.experience.node.active = false;
        };

        _proto.onEventPropOnChange = function onEventPropOnChange() {
          if (GameAllData.visitState) return;
          var level = "";
          var ex = 0;
          var iconNum = -1;
          this.vipConfig = this.getconfig(Configname.TVipInfo, GameAllData.FarmUserResponse.VipLevel);
          this.dukeConfig = this.getconfig(Configname.TDukeInfo, GameAllData.FarmUserResponse.RankLevel);
          var VipExp = Number(this.vipConfig && this.vipConfig.VipExp || 0);
          var DukePeople = Number(this.dukeConfig && this.dukeConfig.DukePeople || 0);

          switch (this.PropName) {
            case propType.VIP:
              {
                var levelNum = GameAllData.FarmUserResponse.VipLevel;
                iconNum = 0;
                level = "V" + levelNum;
                ex = Number(GameAllData.FarmUserResponse.VipExp) / VipExp;

                if (levelNum != iconNum) {
                  if (levelNum % 2 == 1) iconNum = levelNum;else iconNum = levelNum - 1;
                }

                break;
              }

            case propType.TITLE:
              {
                level = GameAllData.FarmUserResponse.RankLevel + "";
                ex = Number(GameAllData.FarmUserResponse.RankExp) / DukePeople;
                break;
              }
          }

          if (iconNum != -1) {
            var lconUrl = EnumDefine.vipIconUrl.vipSmall.format(iconNum);
            NodeHelp.loadImage(this.icon, lconUrl);
            this.leve.node.getComponent(LabelOutline).color = new Color().fromHEX(EnumDefine.vipColor["color" + iconNum]);
          }

          this.leve.string = level;
          this.experience.node.active = true;
          this.experience.progress = ex;
        };

        _proto.onClick = function onClick(event) {
          var _this2 = this;

          if (GameAllData.visitState) return;

          if (UIHelp.getTimeDiff(this.lastClickTime) < 500) {
            return;
          }

          this.lastClickTime = UIHelp.getTimeMask();
          TaskManager.getInstance().onCtlClick(this.node);
          var node = event.target;
          node.getWorldPosition(v3_1);
          UIManager.getInstance().openUI(ExperienceUI, 11, function (ui, args) {
            ui.PropName = _this2.PropName;
            ui.startPos = ui.node.parent.getComponent(UITransform).convertToNodeSpaceAR(v3_1);
            TaskManager.getInstance().onWindowsOpen("ExpreienceUI+" + ui.PropName);
          }, undefined, null);
        };

        return UIGameItemExperience;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "experience", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "leve", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "PropName", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "icon", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIGameItemSettings.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameAllData.ts', './UIManager.ts', './PlatformUtil.ts', './TweenHelp.ts', './SetUI.ts', './UINotice.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, Vec3, Node, UITransform, UIOpacity, v3, tween, Button, Component, GameAllData, UIManager, PlatformUtil, TweenHelper, SetUI, UINotice;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Node = module.Node;
      UITransform = module.UITransform;
      UIOpacity = module.UIOpacity;
      v3 = module.v3;
      tween = module.tween;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      PlatformUtil = module.PlatformUtil;
    }, function (module) {
      TweenHelper = module.TweenHelper;
    }, function (module) {
      SetUI = module.SetUI;
    }, function (module) {
      UINotice = module.UINotice;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "7444bWczNlCfY8psA3vz6mz", "UIGameItemSettings", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var v3_1 = new Vec3();
      var UIGameItemSettings = exports('UIGameItemSettings', (_dec = ccclass('UIGameItemSettings'), _dec2 = property({
        type: Node,
        displayName: "打开按钮"
      }), _dec3 = property({
        type: Node,
        displayName: "关闭按钮"
      }), _dec4 = property({
        type: Node,
        displayName: "设置按钮组"
      }), _dec5 = property({
        type: UITransform,
        displayName: "背景"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIGameItemSettings, _Component);

        function UIGameItemSettings() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "openBtn", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "closeBtn", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "setBtns", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "background", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = UIGameItemSettings.prototype;

        _proto.onLoad = function onLoad() {
          this.openBtn.active = false;
          this.closeBtn.active = true;
          this.setBtns.getComponent(UIOpacity).opacity = 255;
          this.setBtns.setPosition(v3(-this.node.getComponent(UITransform).width, 0, 0));
        }
        /**打开设置组件显示*/
        ;

        _proto.onClickOpen = function onClickOpen() {
          var _this2 = this;

          this.openBtn.active = false;
          this.closeBtn.active = true;
          this.closeBtn.getComponent("PlayButtonSound").onPlayEffect();
          TweenHelper.getTween(this.setBtns.getComponent(UIOpacity), "UIGameItemSettingsOP1", function (_tween) {
            var opacity = 255;

            _tween.to(0.2, {
              opacity: opacity
            });
          }).start();
          TweenHelper.getTween(this.background.node.getComponent(UIOpacity), "UIGameItemSettingsOP2", function (_tween) {
            var opacity = 255;

            _tween.to(0.1, {
              opacity: opacity
            });
          }).start();
          tween(this.setBtns).to(0.2, {
            position: v3(-this.node.getComponent(UITransform).width, 0, 0)
          }).call(function () {
            for (var _iterator = _createForOfIteratorHelperLoose(_this2.setBtns.children), _step; !(_step = _iterator()).done;) {
              var child = _step.value;
              var btn = child.getComponent(Button);
              if (btn) btn.interactable = true;
            }
          }).start();
          TweenHelper.getTween(this.background, "UIGameItemSettingsOP3", function (_tween) {
            var width_1 = _this2.node.getComponent(UITransform).width;

            _tween.to(0.2, {
              width: width_1
            });
          }).start();
        }
        /**关闭组件显示 */
        ;

        _proto.onClickClose = function onClickClose() {
          var _this3 = this;

          this.openBtn.active = true;
          this.closeBtn.active = false;
          this.openBtn.getComponent("PlayButtonSound").onPlayEffect();
          TweenHelper.getTween(this.setBtns.getComponent(UIOpacity), "UIGameItemSettingsCL1", function (_tween) {
            var opacity = 0;

            _tween.to(0.2, {
              opacity: opacity
            });
          }).start();
          tween(this.setBtns).to(0.2, {
            position: v3(0, 0, 0)
          }).call(function () {
            for (var _iterator2 = _createForOfIteratorHelperLoose(_this3.setBtns.children), _step2; !(_step2 = _iterator2()).done;) {
              var child = _step2.value;
              var btn = child.getComponent(Button);
              if (btn) btn.interactable = false;
            }
          }).start();
          TweenHelper.getTween(this.background, "UIGameItemSettingsCL3", function (_tween) {
            var width_1 = _this3.background.height;

            _tween.to(0.2, {
              width: width_1
            });
          }).start();
          TweenHelper.getTween(this.background.node.getComponent(UIOpacity), "UIGameItemSettingsCL2", function (_tween) {
            var opacity = 0;

            _tween.to(0.1, {
              opacity: opacity
            });
          }).start();
        }
        /**打开设置*/
        ;

        _proto.onClickSet = function onClickSet(event) {
          var node = event.target;
          node.getWorldPosition(v3_1);
          UIManager.getInstance().openUI(SetUI, 11, function (ui, args) {
            ui.startPos = ui.node.parent.getComponent(UITransform).convertToNodeSpaceAR(v3_1);
          }, undefined, null);
        }
        /**打开邮件 */
        ;

        _proto.onClickMail = function onClickMail(event) {
          var node = event.target;
          node.getWorldPosition(v3_1);
          UIManager.getInstance().openUI(UINotice, 11, function (ui, args) {
            ui.startPos = ui.node.parent.getComponent(UITransform).convertToNodeSpaceAR(v3_1);
          }, undefined, null);
        }
        /**打开客服 */
        ;

        _proto.onClickMeiqiaOpen = function onClickMeiqiaOpen() {
          var id = GameAllData.FarmUserResponse.Id;
          var data = "name-" + GameAllData.FarmUserResponse.NikiName + "#" + id;
          PlatformUtil.meiqiaOpen(id, data);
        };

        return UIGameItemSettings;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "openBtn", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "closeBtn", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "setBtns", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "background", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIGameTask.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './GameManager.ts', './MessageManager.ts', './UIManager.ts', './MainGame.ts', './NodeHelp.ts', './Pool.ts', './TweenHelp.ts', './TaskUI.ts', './UIGameTaskItemTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, Vec3, _decorator, Prefab, ScrollView, Node, instantiate, v3, UITransform, tween, UIOpacity, Layout, Widget, Component, ConfigFile, GameAllData, EventManager, GameManager, MessageManager, UIManager, MainGame, NodeHelp, PoolOnce, TweenHelper, TaskUI, UIGameTaskItemTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      ScrollView = module.ScrollView;
      Node = module.Node;
      instantiate = module.instantiate;
      v3 = module.v3;
      UITransform = module.UITransform;
      tween = module.tween;
      UIOpacity = module.UIOpacity;
      Layout = module.Layout;
      Widget = module.Widget;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      MainGame = module.MainGame;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      TweenHelper = module.TweenHelper;
    }, function (module) {
      TaskUI = module.TaskUI;
    }, function (module) {
      UIGameTaskItemTip = module.UIGameTaskItemTip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "03bc7dG091FRps/idAWsymi", "UIGameTask", undefined);

      var vec3_1 = new Vec3(0, 0, 0); //itms隐藏的起始位置

      var itmeHighetHalf = 40; //item高度的一半

      var SideQuestPadding = 10; //滑动列表的边距

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIGameTask = exports('UIGameTask', (_dec = ccclass('UIGameTask'), _dec2 = property(Prefab), _dec3 = property(Prefab), _dec4 = property(ScrollView), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIGameTask, _Component);

        function UIGameTask() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "TaskItem", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "TaskTipItem", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "SideQuest", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "BlockInputEvents", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "TaskItems", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Mainline", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ButtonClose", _descriptor7, _assertThisInitialized(_this));

          _this.Itemcomps = null;
          _this.ItemGeneratorOver = true;
          _this.updateOver = true;
          _this.updateGo = false;
          _this.open = true;
          _this.openIn = false;
          _this.Click = true;
          _this.Pool = new PoolOnce(30, function () {
            return instantiate(_this.TaskItem);
          }, function (data) {
            data.scale = v3(1, 1, 1);
            data.position = v3(0, 0, 0);
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          _this.tipPool = new PoolOnce(3, function () {
            return instantiate(_this.TaskTipItem);
          }, function (data) {
            if (data && data.children.length >= 1) data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          return _this;
        }

        var _proto = UIGameTask.prototype;

        _proto.onLoad = function onLoad() {
          this.SideQuest.node.on(ScrollView.EventType.SCROLL_BEGAN, this.onStartTouch.bind(this));
          EventManager.getInstance().add(MessageManager.Custom.TaskChange, this, this.onEventTaskChange);
          EventManager.getInstance().add(MessageManager.Custom.TaskTalkChange, this, this.onEventTaskTalkChange);
          this.open = true;
          this.openIn = false;
          this.Click = true;
          this.onEventTaskChange(1);
          this.onEventTaskChange(2);
          this.checkTaskShowHide();
        };

        _proto.onDisable = function onDisable() {
          UIGameTaskItemTip.getInstance().tipDestroy();
          this.SideQuest.node.off(ScrollView.EventType.SCROLL_BEGAN, this.onStartTouch.bind(this));
        };

        _proto.onDestroy = function onDestroy() {
          GameAllData.FarmTaskUpdateResponse = null;
          EventManager.getInstance().remove(MessageManager.Custom.TaskChange, this, this.onEventTaskChange);
          EventManager.getInstance().remove(MessageManager.Custom.TaskTalkChange, this, this.onEventTaskTalkChange);
        };

        _proto.update = function update() {
          if (this.ItemGeneratorOver && this.updateOver && this.updateGo) {
            if (!this.open && !this.openIn) {
              this.onClickOpen();
            } else {
              if (this.openIn) return;
              this.updateTask();
            }
          }
        };

        _proto.bubbleSort = function bubbleSort() {
          if (!GameAllData.FarmTaskListResponse || !GameAllData.FarmTaskListResponse.taskList || GameAllData.FarmTaskListResponse.taskList.length < 1) {
            return;
          }

          var i = GameAllData.FarmTaskListResponse.taskList.length,
              j;
          var tempExchangVal;

          while (i > 0) {
            for (j = 0; j < i - 1; j++) {
              var configJ = ConfigFile.getTTaskInfoByTaskId(GameAllData.FarmTaskListResponse.taskList[j].TaskModeId);
              var configJAdd = ConfigFile.getTTaskInfoByTaskId(GameAllData.FarmTaskListResponse.taskList[j + 1].TaskModeId);

              if (!configJAdd || !configJ) {
                continue;
              }

              if (configJ.TaskSort > configJAdd.TaskSort || configJAdd.TaskType == 1) {
                tempExchangVal = GameAllData.FarmTaskListResponse.taskList[j];
                GameAllData.FarmTaskListResponse.taskList[j] = GameAllData.FarmTaskListResponse.taskList[j + 1];
                GameAllData.FarmTaskListResponse.taskList[j + 1] = tempExchangVal;
              }
            }

            i--;
          }
        } //1为初始化2为改变
        ;

        _proto.onEventTaskChange = function onEventTaskChange(type) {
          if (type == 1) {
            this.clearItem();
            this.bubbleSort();
            this.getItemGenerator();
          } else if (type == 2) {
            this.updateGo = true;
          }
        };

        _proto.onEventTaskTalkChange = function onEventTaskTalkChange(id) {
          this.ChangeTask(id);
        };

        _proto.updateTask = function updateTask() {
          var _this2 = this;

          this.updateOver = false;

          if (!GameAllData.FarmTaskUpdateResponse || GameAllData.FarmTaskUpdateResponse.length < 1) {
            this.updateOver = true;
            this.updateGo = false;
            return;
          }

          UIManager.getInstance().closeBasePanel(TaskUI); //操作 0：添加 1：已完成 2：条件改变 3：状态改变

          var actionData = GameAllData.FarmTaskUpdateResponse.shift(); //任务数据改变

          if (actionData.Action == 0) {
            var data = {
              ID: actionData.ID,
              TaskModeId: actionData.TaskModeId,
              conditions: actionData.conditions,
              TalkState: actionData.TalkState,
              TaskState: actionData.TaskState,
              TaskType: actionData.TaskType
            };
            GameAllData.FarmTaskListResponse.taskList.push(data);
            this.bubbleSort();
          } else {
            var i = 0;

            for (var _iterator = _createForOfIteratorHelperLoose(GameAllData.FarmTaskListResponse.taskList), _step; !(_step = _iterator()).done;) {
              var item = _step.value;

              if (actionData.TaskModeId == item.TaskModeId) {
                if (actionData.Action == 1) {
                  GameAllData.FarmTaskListResponse.taskList.splice(i, 1);
                  break;
                } else if (actionData.Action == 2) {
                  item.conditions = actionData.conditions;
                  break;
                } else {
                  item.conditions = actionData.conditions;
                  item.TaskState = actionData.TaskState;
                }
              }

              i++;
            }
          } //任务动画效果


          switch (actionData.Action) {
            case 0:
              {
                this.Click = false;
                this.creatTask(actionData.TaskModeId);
                var comp = this.Itemcomps.find(function (v, i) {
                  if (actionData.TaskModeId == v.data.TaskModeId) {
                    return true;
                  }
                });
                this.onSetMainLine();

                if (comp) {
                  this.BlockInputEvents.active = true; //滑动

                  if (comp.data.TaskType != 1) {
                    var h = Math.abs(comp.node.getPosition().y);
                    var height = this.SideQuest.content.getComponent(UITransform).height;
                    var move = (height - h) / height;
                    h = move >= 0.5 ? h - itmeHighetHalf - SideQuestPadding : h + itmeHighetHalf + SideQuestPadding;
                    this.SideQuest.scrollToPercentVertical((height - h) / height, 0.1);
                  }

                  tween(comp.node.getComponent(UIOpacity)).to(0, {
                    opacity: 105
                  }).delay(0.1).to(0.2, {
                    opacity: 255
                  }).start();
                  tween(comp.node).to(0, {
                    scale: v3(0.1, 0.1, 0.1)
                  }).delay(0.1).to(1, {
                    scale: v3(1.2, 1.2, 1.2)
                  }, {
                    easing: "quintOut"
                  }).to(0.5, {
                    scale: v3(1, 1, 1)
                  }, {
                    easing: "quintOut"
                  }).to(0.3, {
                    scale: v3(1.1, 1.1, 1.1)
                  }, {
                    easing: "quintOut"
                  }).to(0.2, {
                    scale: v3(1, 1, 1)
                  }, {
                    easing: "quintOut"
                  }).call(function () {
                    console.log("任务变化添加---------》" + actionData.TaskModeId);
                    _this2.BlockInputEvents.active = false;
                    _this2.updateOver = true;
                    _this2.Click = true;
                  }).start();
                } else {
                  console.log("任务变化添加---------》" + actionData.TaskModeId);
                  this.updateOver = true;
                  this.Click = true;
                }

                break;
              }

            case 1:
              {
                this.Click = false;

                var _comp = this.Itemcomps.find(function (v, i) {
                  if (actionData.TaskModeId == v.data.TaskModeId) {
                    return true;
                  }
                });

                if (_comp) {
                  this.BlockInputEvents.active = true; //滑动

                  if (_comp.data.TaskType != 1) {
                    var _h = Math.abs(_comp.node.getPosition().y);

                    var _height = this.SideQuest.content.getComponent(UITransform).height;

                    var _move = (_height - _h) / _height;

                    _h = _move >= 0.5 ? _h - itmeHighetHalf - SideQuestPadding : _h + itmeHighetHalf + SideQuestPadding;
                    this.SideQuest.scrollToPercentVertical((_height - _h) / _height, 0.1);
                  }

                  tween(_comp.node).delay(0.1).call(function () {
                    UIGameTaskItemTip.getInstance().openTip(_this2, _comp, true);
                  }).delay(1).call(function () {
                    if (actionData.Get) {
                      var game = GameManager.getInstance().getGame(MainGame);
                      game.onProcessGet(game._UICamera.node, actionData.Get);
                    }
                  }).to(1, {
                    scale: v3(0.1, 0.1, 0.1)
                  }, {
                    easing: "quintOut"
                  }).call(function () {
                    UIGameTaskItemTip.getInstance().closeTip();
                    _this2.BlockInputEvents.active = false;

                    _this2.clearTask(actionData.TaskModeId);

                    var data = GameAllData.FarmTaskUpdateResponse[0];

                    if (data && !(data.TaskType == 1 && data.Action == 0)) {
                      _this2.onSetMainLine();
                    } else if (!data) {
                      _this2.onSetMainLine();
                    }

                    console.log("任务变化完成---------》1" + actionData.TaskModeId);
                    _this2.Click = true;
                    _this2.updateOver = true;
                  }).start();
                } else {
                  this.clearTask(actionData.TaskModeId);
                  this.onSetMainLine();
                  console.log("任务变化完成---------》1" + actionData.TaskModeId);
                  this.Click = true;
                  this.updateOver = true;
                }

                break;
              }

            case 2:
              {
                this.Click = false;
                this.ChangeTask(actionData.TaskModeId);
                console.log("任务变化状态变化---------》2" + actionData.TaskModeId);
                this.Click = true;
                this.updateOver = true;
                break;
              }

            case 3:
              {
                this.Click = false;
                this.ChangeTask(actionData.TaskModeId);
                console.log("任务变化状态变化---------》3" + actionData.TaskModeId);
                this.Click = true;
                this.updateOver = true;
                break;
              }
          }
        };

        _proto.creatTask = function creatTask(id) {
          var item = this.Pool.get();
          var comp = item.getComponent("UIGameTaskItem");
          comp.node.getComponent(UIOpacity).opacity = 1;
          var data = GameAllData.FarmTaskListResponse.taskList.find(function (v) {
            return v.TaskModeId == id;
          });
          if (!data) return;

          if (data.TaskType == 3 || data.TaskType == 4 || data.TaskType == 5) {
            //分享任务不显示
            return;
          }

          if (data.TaskType == 1) this.Mainline.addChild(item);else {
            var indenx = -1;
            this.Itemcomps.find(function (v) {
              var config = ConfigFile.getTTaskInfoByTaskId(data.TaskModeId);

              if (config.TaskSort < v.config.TaskSort) {
                return indenx = v.node.getSiblingIndex();
              }
            });

            if (indenx != -1) {
              this.SideQuest.content.insertChild(item, indenx);
              this.SideQuest.content.getComponent(Layout).updateLayout();
            } else this.SideQuest.content.addChild(item);
          }
          comp.init(data, this);

          if (!this.Itemcomps) {
            this.Itemcomps = [];
          }

          this.Itemcomps.push(comp);
        };

        _proto.clearTask = function clearTask(id) {
          var index = -1;
          var comp = this.Itemcomps.find(function (v, i) {
            if (id == v.data.TaskModeId) {
              index = i;
              return true;
            }
          });

          if (comp) {
            this.Itemcomps.splice(index, 1);
            this.Pool.put(comp.node);
          }

          this.checkTaskShowHide();
        };

        _proto.ChangeTask = function ChangeTask(id) {
          var comp = this.Itemcomps.find(function (v) {
            return id == v.data.TaskModeId;
          });

          if (comp) {
            comp.changeData();
          }
        };

        _proto.clearItem = function clearItem() {
          if (this.Itemcomps && this.Itemcomps.length >= 1) {
            while (this.Itemcomps.length >= 1) {
              var item = this.Itemcomps.pop();
              item.data = null;
              item.tag = null;
              this.Pool.put(item.node);
            }
          }
        };

        _proto.getItemGenerator = function getItemGenerator() {
          var _this3 = this;

          if (!GameAllData.FarmTaskListResponse || GameAllData.FarmTaskListResponse.taskList.length < 1) return;
          var i = 0;
          var j = 0;

          var func = function func() {
            if (!GameAllData.FarmTaskListResponse.taskList[i]) {
              i = 0;

              _this3.unschedule(func);

              _this3.onSetMainLine();

              _this3.ItemGeneratorOver = true;
              return;
            }

            var itemData = GameAllData.FarmTaskListResponse.taskList[i];

            if (itemData.TaskType != 3 && itemData.TaskType != 4 && itemData.TaskType != 5) {
              //分享任务不显示
              var item = _this3.Pool.get();

              var comp = item.getComponent("UIGameTaskItem");
              comp.node.getComponent(UIOpacity).opacity = 255;
              if (itemData.TaskType == 1) _this3.Mainline.addChild(item);else _this3.SideQuest.content.addChild(item);
              comp.init(itemData, _this3);

              if (!_this3.Itemcomps) {
                _this3.Itemcomps = [];
              }

              _this3.Itemcomps.push(comp);

              if (j == 0) {
                _this3.checkTaskShowHide();

                j++;
              }
            }

            i++;
          };

          this.ItemGeneratorOver = false;
          this.schedule(func, 0);
        };

        _proto.onClickClose = function onClickClose() {
          var _this4 = this;

          if (!this.Click) {
            return;
          }

          this.openIn = true;
          UIGameTaskItemTip.getInstance().closeTip();
          NodeHelp.getchildlable(this.node, "ButtonClose", null, function (comp, node) {
            node.active = false;
          });
          NodeHelp.getchildlable(this.node, "ButtonOpen", null, function (comp, node) {
            node.active = true;
            node.getComponent("PlayButtonSound").onPlayEffect();
          });
          TweenHelper.getTween(this.TaskItems, "close", function (_tween) {
            var pos1 = vec3_1;
            var pos2 = pos1.clone();
            pos2.y = 0 + _this4.TaskItems.getComponent(UITransform).height;

            _tween.to(0.2, {
              position: pos2
            }).call(function () {
              _this4.open = false;
              _this4.openIn = false;
            });
          }).start();
        };

        _proto.onStartTouch = function onStartTouch() {
          if (!this.Click) {
            return;
          }

          UIGameTaskItemTip.getInstance().closeTip();
        };

        _proto.onClickOpen = function onClickOpen() {
          var _this5 = this;

          if (!this.Click) {
            return;
          }

          this.openIn = true;
          UIGameTaskItemTip.getInstance().closeTip();
          NodeHelp.getchildlable(this.node, "ButtonClose", null, function (comp, node) {
            node.active = true;
            node.getComponent("PlayButtonSound").onPlayEffect();
          });
          NodeHelp.getchildlable(this.node, "ButtonOpen", null, function (comp, node) {
            node.active = false;
          });
          TweenHelper.getTween(this.TaskItems, "open", function (_tween) {
            var pos1 = vec3_1;
            var pos2 = pos1.clone();

            _tween.to(0.2, {
              position: pos2
            }).call(function () {
              _this5.open = true;
              _this5.openIn = false;
            });
          }).start();
        };

        _proto.onSetMainLine = function onSetMainLine() {
          if (this.Mainline.children.length < 1) {
            if (!this.Mainline.active) return;
            this.Mainline.active = false;
            var widget = this.SideQuest.node.getComponent(Widget);
            widget.top = 0;
            widget.updateAlignment();
            var widgetView = this.SideQuest.node.getChildByName("view").getComponent(Widget);
            widgetView.updateAlignment();
          } else {
            if (this.Mainline.active) return;
            this.Mainline.active = true;

            var _widget = this.SideQuest.node.getComponent(Widget);

            _widget.top = this.Mainline.getComponent(UITransform).height;

            _widget.updateAlignment();

            var _widgetView = this.SideQuest.node.getChildByName("view").getComponent(Widget);

            _widgetView.updateAlignment();
          }
        };

        _proto.checkTaskShowHide = function checkTaskShowHide() {
          if (this.Itemcomps && this.Itemcomps.length >= 1) {
            this.ButtonClose.active = true;
          } else {
            this.ButtonClose.active = false;
          }
        };

        return UIGameTask;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "TaskItem", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "TaskTipItem", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "SideQuest", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "BlockInputEvents", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "TaskItems", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "Mainline", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "ButtonClose", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIGameTaskItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './GameAllData.ts', './TaskManager.ts', './UIManager.ts', './NodeHelp.ts', './redDot.ts', './TaskTalkUI.ts', './UIGame.ts', './UIGameTaskItemTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Sprite, resources, Component, ConfigFile, GameAllData, TaskManager, UIManager, NodeHelp, redDot, TaskTalkUI, UIGame, UIGameTaskItemTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      resources = module.resources;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      TaskManager = module.TaskManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      redDot = module.redDot;
    }, function (module) {
      TaskTalkUI = module.TaskTalkUI;
    }, function (module) {
      UIGame = module.UIGame;
    }, function (module) {
      UIGameTaskItemTip = module.UIGameTaskItemTip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "70732wYGURIV5kRXjL5kEZO", "UIGameTaskItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIGameTaskItem = exports('UIGameTaskItem', (_dec = ccclass('UIGameTaskItem'), _dec2 = property(SpriteFrame), _dec3 = property(SpriteFrame), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIGameTaskItem, _Component);

        function UIGameTaskItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "BGMainline", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "BGSideQuest", _descriptor2, _assertThisInitialized(_this));

          _this.data = null;
          _this.tag = null;
          _this.config = null;
          _this.talk = false;
          return _this;
        }

        var _proto = UIGameTaskItem.prototype;

        _proto.init = function init(itemData, tag) {
          var _this2 = this;

          this.data = itemData;
          this.tag = tag;
          this.config = ConfigFile.getTTaskInfoByTaskId(this.data.TaskModeId);
          this.talk = false;
          NodeHelp.getchildlable(this.node, "redDot", redDot, function (comp) {
            comp.uiName = "gameUITask";
            comp.redName = _this2.data.TaskModeId;
            comp.onRedChange();
          });
          this.setShow();
        };

        _proto.changeData = function changeData() {
          var _this3 = this;

          var data = GameAllData.FarmTaskListResponse.taskList.find(function (v) {
            return v.TaskModeId == _this3.data.TaskModeId;
          });
          this.data = data;
          this.setShow();
        };

        _proto.setShow = function setShow() {
          var _this4 = this;

          var condition = null;
          if (this.data && this.data.conditions[0]) condition = ConfigFile.getTConditionInfoByConditionId(this.data.conditions[0].ConditionModeId);
          if (condition) NodeHelp.getchildlable(this.node, "Icon", Sprite, function (comp) {
            var image = "TaskIcon/" + condition.ConditionType + "/spriteFrame";
            resources.load(image, SpriteFrame, function (error, res) {
              if (res && comp.isValid) {
                comp.spriteFrame = res;
              }

              if (error) {
                console.log("加载任务图 ==>", error);
              }
            });
          });

          if (this.data.TalkState == 0 && this.config && this.config.Talk && this.config.Talk != "") {
            this.talk = true;
          } else {
            this.talk = false;
          }

          NodeHelp.getchildlable(this.node, "ChatIcon", null, function (comp, node) {
            node.active = _this4.talk;
          });

          if (this.data.TaskType == 1) {
            this.node.getComponent(Sprite).spriteFrame = this.BGMainline;
          } else {
            this.node.getComponent(Sprite).spriteFrame = this.BGSideQuest;
          }
        };

        _proto.onClick = function onClick() {
          var GameUi = UIManager.getInstance().getUI(UIGame);

          if (GameUi) {
            var node = GameUi.node.getChildByPath("task");
            TaskManager.getInstance().onCtlClick(node);
          }

          if (this.talk) {
            var config = this.config;
            UIManager.getInstance().openUI(TaskTalkUI, 13, function (ui, args) {
              ui.setData(config);
            }, undefined, null); //UIManager.getInstance().closeBasePanel(TaskUI)
          } else {
            UIGameTaskItemTip.getInstance().openTip(this.tag, this);
          }
        };

        return UIGameTaskItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "BGMainline", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "BGSideQuest", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIGameTaskItemTip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TaskConfig.ts', './ConfigFile.ts', './UIManager.ts', './NodeHelp.ts', './TaskUI.ts', './UIGameTaskTipItem.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _createForOfIteratorHelperLoose, cclegacy, _decorator, UITransform, resources, instantiate, Button, Animation, v3, tween, ScrollView, Label, Component, TaskConfig, ConfigFile, UIManager, NodeHelp, TaskUI, UIGameTaskTipItem;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      resources = module.resources;
      instantiate = module.instantiate;
      Button = module.Button;
      Animation = module.Animation;
      v3 = module.v3;
      tween = module.tween;
      ScrollView = module.ScrollView;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      TaskConfig = module.TaskConfig;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      TaskUI = module.TaskUI;
    }, function (module) {
      UIGameTaskTipItem = module.UIGameTaskTipItem;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "04445XxKtNJHZHHPPaKNgxX", "UIGameTaskItemTip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIGameTaskItemTip = exports('UIGameTaskItemTip', (_dec = ccclass('UIGameTaskItemTip'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIGameTaskItemTip, _Component);

        function UIGameTaskItemTip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.tip = null;
          _this.isShowTip = false;
          _this.tag = null;
          _this.parentTag = null;
          return _this;
        }

        UIGameTaskItemTip.getInstance = function getInstance() {
          if (this.instance == null) {
            this.instance = new UIGameTaskItemTip();
          }

          return this.instance;
        };

        var _proto = UIGameTaskItemTip.prototype;

        _proto.openTip = function openTip(parentTag, tag, overTip) {
          var _this2 = this;

          if (overTip === void 0) {
            overTip = false;
          }

          this.tag = tag;
          this.parentTag = parentTag;
          var tagPos = this.parentTag.node.getComponent(UITransform).convertToNodeSpaceAR(tag.node.worldPosition);
          var parentSizeW = this.parentTag.node.getComponent(UITransform).width;
          tagPos.x = tagPos.x + parentSizeW / 2;
          if (!this.tip) resources.load("prefabs/ui/item/UIGameItem/TaskItemTip", function (completedCount, totalCount, item) {}, function (error, prefab) {
            if (error) {
              console.log(error);
              return;
            }

            _this2.tipDestroy();

            _this2.tip = instantiate(prefab);
            _this2.tip.parent = _this2.parentTag.node;

            _this2.tip.setPosition(tagPos);

            NodeHelp.getchildlable(_this2.tip, "Label", Button, function (comp) {
              comp.node.on(Button.EventType.CLICK, _this2.onChickTitle, _this2);
            });
            NodeHelp.getchildlable(_this2.tip, "upgradeEffect", Animation, function (comp) {
              comp.node.on(Animation.EventType.LASTFRAME, _this2.closeTip, _this2);
              comp.node.active = false;
            });

            _this2.show(overTip);

            if (overTip) _this2.overTip();
          });else {
            this.tip.parent = this.parentTag.node;
            this.tip.active = true;
            this.tip.setPosition(tagPos);
            this.show(overTip);
            if (overTip) this.overTip();
          }
        };

        _proto.overTip = function overTip() {
          var _this3 = this;

          this.tip.getChildByName("mask").active = true;
          var v3T = v3(1, 1, 1);
          var v3R = v3(0, 0, 0);
          var v3R2 = v3R.clone();
          var v3T2 = v3T.clone();
          tween(this.tip).call(function () {
            v3R2.z = v3R.z - 20;
          }).to(0, {
            eulerAngles: v3R2
          }).call(function () {
            v3R2.z = v3R.z + 10;
          }).to(.2, {
            eulerAngles: v3R2
          }).call(function () {
            v3R2.z = v3R.z - 5;
          }).to(.15, {
            eulerAngles: v3R2
          }).call(function () {
            v3R2.z = v3R.z;
          }).to(.1, {
            eulerAngles: v3R2
          }).start();
          tween(this.tip).call(function () {
            v3T2.x = v3T.x * .9;
            v3T2.y = v3T.y * .9;
          }).to(0, {
            scale: v3T2
          }).call(function () {
            v3T2.x = v3T.x * 1.05;
            v3T2.y = v3T.y * 1.05;
          }).to(.2, {
            scale: v3T2
          }).call(function () {
            v3T2.x = v3T.x * .95;
            v3T2.y = v3T.y * .95;
          }).to(.1, {
            scale: v3T2
          }).call(function () {
            v3T2.x = v3T.x * 1;
            v3T2.y = v3T.y * 1;
          }).to(.1, {
            scale: v3T2
          }).call(function () {
            // 得到item
            NodeHelp.getchildlable(_this3.tip, "ScrollView", ScrollView, function (comp) {
              comp.content.children.forEach(function (v) {
                v.getComponent(UIGameTaskTipItem).playTwen();
              });
            });
            NodeHelp.getchildlable(_this3.tip, "Items", null, function (comp, node) {
              node.children.forEach(function (v) {
                v.getComponent(UIGameTaskTipItem).playTwen();
              });
            });
            NodeHelp.getchildlable(_this3.tip, "upgradeEffect", Animation, function (comp) {
              comp.node.active = true;
              comp.play();
            });
          }).start();
        };

        _proto.closeTip = function closeTip() {
          if (this.tip) {
            NodeHelp.getchildlable(this.tip, "upgradeEffect", Animation, function (comp) {
              comp.stop();
              comp.node.active = false;
            });
            this.tip.getChildByName("mask").active = false;
            this.tip.active = false;
          }
        };

        _proto.tipDestroy = function tipDestroy() {
          var _this4 = this;

          if (this.tip) {
            NodeHelp.getchildlable(this.tip, "Label", Button, function (comp) {
              comp.node.off(Button.EventType.CLICK, _this4.onChickTitle, _this4);
            });
            NodeHelp.getchildlable(this.tip, "upgradeEffect", Animation, function (comp) {
              comp.node.off(Animation.EventType.LASTFRAME, _this4.closeTip, _this4);
            });
            this.tip.destroy();
            this.tip = null;
          }
        };

        _proto.show = function show(overTip) {
          var _this5 = this; //清除item


          NodeHelp.getchildlable(this.tip, "ScrollView", ScrollView, function (comp) {
            while (comp.content.children.length >= 1) {
              comp.content.children[0].setPosition(v3(0, 0, 0));

              _this5.parentTag.tipPool.put(comp.content.children[0]);
            }
          });
          NodeHelp.getchildlable(this.tip, "Items", null, function (comp, node) {
            while (node.children.length >= 1) {
              node.children[0].setPosition(v3(0, 0, 0));

              _this5.parentTag.tipPool.put(node.children[0]);
            }
          });
          var data = this.tag.data; //得到任务名

          var config = ConfigFile.getTTaskInfoByTaskId(data.TaskModeId);
          var title = "";

          if (config) {
            title += ConfigFile.findLanguage(config.TaskName);
          } //得到条件内容


          var conditionString = "";

          var _loop = function _loop() {
            var condition = _step.value;
            var config = ConfigFile.getTConditionInfoByConditionId(condition.ConditionModeId);

            if (!config) {
              console.log("UIGameTaskItemTip----->notHaveConfig");
              return {
                v: void 0
              };
            }

            var numStr = "";

            if (config.Other) {
              var gameConfig = TaskConfig.find(function (v) {
                return v.id == config.ConditionType;
              });

              if (gameConfig.configName == "") {
                numStr = config.Other + "";
              } else {
                var Itemconfig = ConfigFile.getInstance().config.get(gameConfig.configName);

                if (Itemconfig) {
                  var Item = Itemconfig.find(function (item) {
                    return item[gameConfig.configIdName] == config.Other;
                  });

                  if (Item) {
                    numStr = ConfigFile.findLanguage(Number(Item[gameConfig.configField]));
                  }
                }
              }
            }

            numStr += condition.nowCondition + "/" + condition.MaxCondition;

            if (conditionString == "") {
              conditionString = ConfigFile.findLanguage(Number(config.Des)).format(numStr);
            } else conditionString += "," + ConfigFile.findLanguage(Number(config.Des)).format(numStr);
          };

          for (var _iterator = _createForOfIteratorHelperLoose(data.conditions), _step; !(_step = _iterator()).done;) {
            var _ret = _loop();

            if (typeof _ret === "object") return _ret.v;
          }

          NodeHelp.getchildlable(this.tip, "Label", Label, function (comp) {
            comp.string = title;
          }); // 得到item

          if (data.conditions.length >= 2) {
            NodeHelp.getchildlable(this.tip, "ScrollView", ScrollView, function (comp) {
              for (var _iterator2 = _createForOfIteratorHelperLoose(data.conditions), _step2; !(_step2 = _iterator2()).done;) {
                var condition = _step2.value;

                var _config = ConfigFile.getTConditionInfoByConditionId(condition.ConditionModeId);

                if (!_config) {
                  console.log("UIGameTaskItemTip----->notHaveConfig");
                  return;
                }

                var item = _this5.parentTag.tipPool.get();

                comp.content.addChild(item);
                var conditionData = condition;
                item.getComponent(UIGameTaskTipItem).init(conditionData, data.TaskModeId, overTip);
              }
            });
          } else {
            NodeHelp.getchildlable(this.tip, "Items", null, function (comp, node) {
              for (var _iterator3 = _createForOfIteratorHelperLoose(data.conditions), _step3; !(_step3 = _iterator3()).done;) {
                var condition = _step3.value;

                var _config2 = ConfigFile.getTConditionInfoByConditionId(condition.ConditionModeId);

                if (!_config2) {
                  console.log("UIGameTaskItemTip----->notHaveConfig");
                  return;
                }

                var item = _this5.parentTag.tipPool.get();

                node.addChild(item);
                var conditionData = condition;
                item.getComponent(UIGameTaskTipItem).init(conditionData, data.TaskModeId, overTip);
              }
            });
          } // this.parentTag.tipPool.get().parent = this.node;

        };

        _proto.onChickTitle = function onChickTitle() {
          var _this6 = this;

          UIManager.getInstance().openUI(TaskUI, 11, function (ui, args) {
            ui.initUI(1);
            ui.chicktaskModeId = _this6.tag.data.TaskModeId;
          }, undefined, null);
        };

        return UIGameTaskItemTip;
      }(Component), _class2.instance = void 0, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIGameTaskTipItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TaskConfig.ts', './EnumDefine.ts', './ConfigFile.ts', './TaskConfigGoManager.ts', './UIManager.ts', './NodeHelp.ts', './TaskUI.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, resources, SpriteFrame, Sprite, Label, UIOpacity, v3, tween, Component, TaskConfig, EnumDefine, ConfigFile, TaskConfigGoManager, UIManager, NodeHelp, TaskUI;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      resources = module.resources;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      Label = module.Label;
      UIOpacity = module.UIOpacity;
      v3 = module.v3;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      TaskConfig = module.TaskConfig;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      TaskConfigGoManager = module.TaskConfigGoManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      TaskUI = module.TaskUI;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "d7458Ch4ZhKXqnCXGCB0/iL", "UIGameTaskTipItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIGameTaskTipItem = exports('UIGameTaskTipItem', (_dec = ccclass('UIGameTaskTipItem'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIGameTaskTipItem, _Component);

        function UIGameTaskTipItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "buttonFind", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "icon", _descriptor2, _assertThisInitialized(_this));

          _this.data = null;
          _this.taskModeId = -1;
          return _this;
        }

        var _proto = UIGameTaskTipItem.prototype;

        _proto.init = function init(data, id, overTip) {
          this.data = data;
          this.taskModeId = id;
          this.setShow(overTip);
        };

        _proto.setShow = function setShow(overTip) {
          var _this2 = this;

          var config = ConfigFile.getTConditionInfoByConditionId(this.data.ConditionModeId);
          var image = "TaskIcon/" + config.ConditionType + "/spriteFrame";
          resources.load(image, SpriteFrame, function (error, res) {
            if (res) {
              if (_this2.icon) _this2.icon.getComponent(Sprite).spriteFrame = res;
            }

            if (error) {
              console.log("加载条件图 ==>", error);
            }
          }); //图标显示

          var ConditionOver = false;
          if (config.Compare == 0) ConditionOver = this.data.MaxCondition - this.data.nowCondition <= 0;else ConditionOver = this.data.nowCondition - this.data.MaxCondition <= 0;

          if (ConditionOver) {
            NodeHelp.getchildlable(this.buttonFind, "IconOk", null, function (comp, node) {
              if (overTip) node.active = false;else node.active = true;
            });
            NodeHelp.getchildlable(this.buttonFind, "ButtonFind", null, function (comp, node) {
              node.active = false;
            });
            NodeHelp.getchildlable(this.node, "Label", Label, function (comp, node) {
              node.active = false;
            });
          } else {
            NodeHelp.getchildlable(this.buttonFind, "IconOk", null, function (comp, node) {
              node.active = false;
            });
            NodeHelp.getchildlable(this.buttonFind, "ButtonFind", null, function (comp, node) {
              node.active = true;
            });
            NodeHelp.getchildlable(this.node, "Label", Label, function (comp, node) {
              node.active = true;
              comp.string = _this2.data.nowCondition + "/" + _this2.data.MaxCondition;
            });
          } //条件内容显示


          var numStr = "";
          var conditionString = "";

          if (config.Other) {
            var gameConfig = TaskConfig.find(function (v) {
              return v.id == config.ConditionType;
            });

            if (gameConfig.configName == "") {
              numStr = config.Other + "";
            } else {
              var Itemconfig = ConfigFile.getInstance().config.get(gameConfig.configName);

              if (Itemconfig) {
                var Item = Itemconfig.find(function (item) {
                  return item[gameConfig.configIdName] == config.Other;
                });

                if (Item) {
                  numStr = ConfigFile.findLanguage(Number(Item[gameConfig.configField]));
                }
              }
            }
          }

          if (numStr == "") {
            conditionString = ConfigFile.findLanguage(Number(config.Des)).format(this.data.MaxCondition);
          } else {
            conditionString = ConfigFile.findLanguage(Number(config.Des)).format(numStr, this.data.MaxCondition);
          }

          NodeHelp.getchildlable(this.node, "LabelText", Label, function (comp) {
            comp.string = conditionString;
          });
        };

        _proto.onChickIcon = function onChickIcon() {
          var _this3 = this;

          UIManager.getInstance().openUI(TaskUI, 11, function (ui, args) {
            ui.initUI(1);
            ui.chicktaskModeId = _this3.taskModeId;
          }, undefined, null);
        };

        _proto.onChickFind = function onChickFind() {
          UIManager.getInstance().closeBasePanel(TaskUI);
          var config = ConfigFile.getTConditionInfoByConditionId(this.data.ConditionModeId);
          var gameConfig = TaskConfig.find(function (v) {
            return v.id == config.ConditionType;
          });

          if (!gameConfig) {
            return;
          }

          var uiData = gameConfig.uiData;

          if (gameConfig.goUiName == EnumDefine.TaskFindType.Build) {
            var Itemconfig = ConfigFile.getInstance().config.get(gameConfig.configName);

            if (Itemconfig) {
              var Item = Itemconfig.find(function (item) {
                return item[gameConfig.configIdName] == config.Other;
              });

              if (Item) {
                uiData = Number(Item[gameConfig.configField]);
              }
            }
          }

          TaskConfigGoManager.goUIByTaskFindType(gameConfig.goUiName, uiData);
        };

        _proto.playTwen = function playTwen() {
          var config = ConfigFile.getTConditionInfoByConditionId(this.data.ConditionModeId);
          var ConditionOver = false;
          if (config.Compare == 0) ConditionOver = this.data.MaxCondition - this.data.nowCondition <= 0;else ConditionOver = this.data.nowCondition - this.data.MaxCondition <= 0;

          if (ConditionOver) {
            NodeHelp.getchildlable(this.buttonFind, "IconOk", UIOpacity, function (comp, node) {
              node.active = true;
              node.setScale(v3(0.5, 0.5, 1));
              comp.opacity = 1;
            });
            NodeHelp.getchildlable(this.buttonFind, "IconOk", UIOpacity, function (comp, node) {
              tween(comp).to(1, {
                opacity: 255
              }, {
                easing: "quintOut"
              }).start();
              tween(node).to(1, {
                scale: v3(1, 1, 1)
              }, {
                easing: "quintOut"
              }).start();
            });
          }
        };

        return UIGameTaskTipItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "buttonFind", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "icon", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIHead.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstLanguage.ts', './ConstValue.ts', './EnumDefine.ts', './ConfigFile.ts', './GameAllData.ts', './text.ts', './EventManager.ts', './MessageManager.ts', './TipManager.ts', './UIManager.ts', './WebSocketMgr.ts', './NodeHelp.ts', './PlatformUtil.ts', './Pool.ts', './TweenHelp.ts', './UIHelp.ts', './BaseUI.ts', './InvitationCodeView.ts', './NameInput.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Node, ScrollView, Label, Sprite, SpriteFrame, instantiate, UIOpacity, LabelOutline, Color, resources, ConstLanguage, ConstValue, EnumDefine, ConfigFile, Configname, GameAllData, text, EventManager, MessageManager, TipManager, UIManager, WebSocketMgr, NodeHelp, PlatformUtil, PoolOnce, TweenHelper, ETweenType, UIHelp, BaseUI, InvitationCodeView, NameInput;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      ScrollView = module.ScrollView;
      Label = module.Label;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      instantiate = module.instantiate;
      UIOpacity = module.UIOpacity;
      LabelOutline = module.LabelOutline;
      Color = module.Color;
      resources = module.resources;
    }, function (module) {
      ConstLanguage = module.ConstLanguage;
    }, function (module) {
      ConstValue = module.ConstValue;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      text = module.text;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PlatformUtil = module.PlatformUtil;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      TweenHelper = module.TweenHelper;
      ETweenType = module.ETweenType;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      InvitationCodeView = module.InvitationCodeView;
    }, function (module) {
      NameInput = module.NameInput;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _class3;

      cclegacy._RF.push({}, "f5df4toKvFB24X9RV9fjTXK", "UIHead", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIHead = exports('UIHead', (_dec = ccclass('UIHead'), _dec2 = property({
        type: Prefab,
        displayName: "头像模板"
      }), _dec3 = property({
        type: Node,
        displayName: "内容显示"
      }), _dec4 = property({
        type: ScrollView,
        displayName: "解锁头像表"
      }), _dec5 = property({
        type: ScrollView,
        displayName: "锁定头像表"
      }), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Label), _dec9 = property(Sprite), _dec10 = property([SpriteFrame]), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(UIHead, _BaseUI);

        function UIHead() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "item", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "describe", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listUnlock", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listLock", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "PanelHead", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "PanelPersonalData", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labMyHouse", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "houseIcon", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buildIcon", _descriptor9, _assertThisInitialized(_this));

          _this.Pool = new PoolOnce(30, function () {
            return instantiate(_this.item);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          _this.panel = null;
          _this.config = null;
          _this.Itemcomps = null;
          _this.qItemcomp = null;
          _this.declarcID = -1;
          _this.vipConfig = null;
          _this.dukeConfig = null;
          _this.rankLevel = 0;
          _this.vipLevel = 0;
          _this.gmBtnClickNum = 0;
          _this._NetLockTime = 0;
          _this.gmClickBoo = false;
          return _this;
        }

        var _proto = UIHead.prototype;

        _proto.start = function start() {
          this.panel = this.node.getChildByName("Panel");
          EventManager.getInstance().add(MessageManager.Custom.VipOrRankChange, this, this.onEventPropOnChange);
          EventManager.getInstance().add(MessageManager.Net.FarmHouseNameChangeResponse, this, this.onChangeNameResponse);
          EventManager.getInstance().add(MessageManager.Custom.HeadOnChange, this, this.onEventHeadOnChange);
          EventManager.getInstance().add(MessageManager.Custom.OterHeadOnChange, this, this.onEventHeadOnChange);
          this.setUserLevel();
          this.setConfig();
          this.getItemGenerator();
          this.setPanelHead();
          this.setPanelPersonalData();
          this.setHouseImg();
          this.node.getComponent("PlayButtonSound").play();
          TweenHelper["default"](this.node.getChildByName("Panel"), ETweenType.Jelly);
          TweenHelper.getTween(this.node.getChildByName("Mask").getComponent(UIOpacity), "open", function (_tween) {
            var sartOpacity = 0;
            var opacity = 150;

            _tween.to(0, {
              opacity: sartOpacity
            }).to(0.1, {
              opacity: opacity
            });
          }).start();
          this.gmBtnClickNum = 0;
          this._NetLockTime = 0;
          this.gmClickBoo = false; //测试者账号 

          if (GameAllData.IsAccountTypeIsTest) {
            var labLink = NodeHelp.getchildlable(this.PanelPersonalData, "labLink", Label);

            if (labLink) {
              labLink.node.active = false;
            }
          }
        };

        _proto.onClickedClose = function onClickedClose() {
          this.node.getChildByName("Mask").getComponent(UIOpacity).opacity = 0;
          EventManager.getInstance().remove(MessageManager.Custom.VipOrRankChange, this, this.onEventPropOnChange);
          EventManager.getInstance().remove(MessageManager.Net.FarmHouseNameChangeResponse, this, this.onChangeNameResponse);
          EventManager.getInstance().remove(MessageManager.Custom.HeadOnChange, this, this.onEventHeadOnChange);
          EventManager.getInstance().remove(MessageManager.Custom.OterHeadOnChange, this, this.onEventHeadOnChange);
          this.clearPool();
          UIManager.getInstance().closeUI(this.tag);
        };

        _proto.onEventPropOnChange = function onEventPropOnChange() {
          var _this2 = this;

          if (this.Itemcomps.length < 1) return;
          this.Itemcomps.forEach(function (v) {
            var Lock = v.setUnlock();

            if (Lock) {
              v.node.parent = null;

              _this2.listLock.content.addChild(v.node);
            } else {
              v.node.parent = null;

              _this2.listUnlock.content.addChild(v.node);
            }
          });
          this.qItemcomp.node.setSiblingIndex(this.listLock.content.children.length + 1);
          NodeHelp.getchildlable(this.PanelPersonalData, "labInvitedNum", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(7201).format(GameAllData.FarmUserResponse.InvitationCount || 0);
          });
        };

        _proto.onChangeNameResponse = function onChangeNameResponse(data) {
          if (!data) return;

          if (data.Code == 0) {
            console.log("改名成功");
          } else {
            TipManager.TipFromCode(120055);
            NodeHelp.getchildlable(this.PanelPersonalData, "MyLand", Label, function (comp) {
              comp.string = GameAllData.FarmUserResponse.NikiName;
            });
          }
        };

        _proto.setPanelHead = function setPanelHead() {
          NodeHelp.getchildlable(this.panel, "ToggleHead", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.UIHEAD_TRADE_BUTTON_TEXT1);
          });
          NodeHelp.getchildlable(this.panel, "ToggleHead", null, function (comp, node) {
            NodeHelp.getchildlable(node, "Checkmark", Label, function (comp, node) {
              comp.string = ConfigFile.findLanguage(ConstLanguage.UIHEAD_TRADE_BUTTON_TEXT1);
            });
          });
          NodeHelp.getchildlable(this.PanelHead, "Title", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.UIHEAD_TRADE_BG_TIP1);
          });
          NodeHelp.getchildlable(this.describe, "Button", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.UIHEAD_TRADE_Describe_BUTTON1);
          });
        };

        _proto.setPanelPersonalData = function setPanelPersonalData() {
          var _this3 = this;

          NodeHelp.getchildlable(this.panel, "TogglePersonalData", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(120058);
          });
          NodeHelp.getchildlable(this.panel, "TogglePersonalData", null, function (comp, node) {
            NodeHelp.getchildlable(node, "Checkmark", Label, function (comp, node) {
              comp.string = ConfigFile.findLanguage(120058);
            });
          });
          NodeHelp.getchildlable(this.PanelPersonalData, "btnCopyID", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.Set_PANEL_BUTTON1);
          });
          NodeHelp.getchildlable(this.PanelPersonalData, "PlayerID", null, function (comp, node) {
            NodeHelp.getchildlable(node, "Title", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(ConstLanguage.Set_PANEL_TEXT2);
            });
            NodeHelp.getchildlable(node, "Label", Label, function (comp) {
              if (GameAllData.FarmUserResponse && GameAllData.FarmUserResponse.Id) comp.string = GameAllData.FarmUserResponse.Id;
            });
          });
          NodeHelp.getchildlable(this.PanelPersonalData, "MyLand", Label, function (comp) {
            if (GameAllData.FarmUserResponse && GameAllData.FarmUserResponse.NikiName) comp.string = GameAllData.FarmUserResponse.NikiName;
          });
          NodeHelp.getchildlable(this.PanelPersonalData, "VipLevel", null, function (comp, node) {
            //vip等级显示
            NodeHelp.getchildlable(node, "levelIcon", Label, function (comp) {
              comp.string = "" + _this3.vipLevel;
              var iconNum = 0;

              if (_this3.vipLevel != iconNum) {
                if (_this3.vipLevel % 2 == 1) iconNum = _this3.vipLevel;else iconNum = _this3.vipLevel - 1;
              }

              var img = EnumDefine.vipIconUrl.vipSmall.format(iconNum);
              NodeHelp.loadImage(NodeHelp.getchildlable(node, "levelIcon", Sprite), img);
              comp.node.getComponent(LabelOutline).color = new Color().fromHEX(EnumDefine.vipColor["color" + iconNum]);
            });
            NodeHelp.getchildlable(node, "levelNum", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(ConstLanguage.VIP_EXPERIENCE_LEVEL).format("" + _this3.vipLevel);
            });
          });
          NodeHelp.getchildlable(this.PanelPersonalData, "TitleLevel", null, function (comp, node) {
            NodeHelp.getchildlable(node, "levelNum", Label, function (comp) {
              if (_this3.dukeConfig && _this3.dukeConfig.DukeName) comp.string = ConfigFile.findLanguage(_this3.dukeConfig.DukeName);
            });
          });
          NodeHelp.getchildlable(this.PanelPersonalData, "Code", null, function (comp, node) {
            NodeHelp.getchildlable(node, "labLink", Label, function (comp) {
              var strOperatorId = "?operater_id=%s&".format(GameAllData.operatorId);
              var strInvitationCode = "invite=%s&".format(GameAllData.FarmUserResponse.InvitationCode); //这个是自己的邀请码(千万不要弄成上级的了)

              var strChannelId = "agent_id=%s&".format(GameAllData.channelId);
              var strLanguageId = "language_id=%s".format(GameAllData.languageId);
              comp.string = ConstValue.OPERATOR_URL + strOperatorId + strInvitationCode + strChannelId + strLanguageId; //CommonUtil.createQRcode(comp.string, this.graQRcode);
            });
            NodeHelp.getchildlable(node, "btnCopy", Label, function (comp) {
              comp.string = ConfigFile.findLanguage(ConstLanguage.Set_PANEL_BUTTON1);
            });
          });
          NodeHelp.getchildlable(this.PanelPersonalData, "labInvitedNum", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(7201).format(GameAllData.FarmUserResponse.InvitationCount || 0);
          });
          this.setHeadIcon();
        };

        _proto.onEventHeadOnChange = function onEventHeadOnChange() {
          this.setHeadIcon();
        };

        _proto.setHeadIcon = function setHeadIcon() {
          var _this4 = this;

          var id = -1;

          if (GameAllData.FarmUserResponse || GameAllData.FarmUserResponse.RoleModeId) {
            id = GameAllData.FarmUserResponse.RoleModeId;
          }

          var image = "headIcon/" + id + "/spriteFrame";
          resources.load(image, SpriteFrame, function (error, res) {
            if (res) {
              NodeHelp.getchildlable(_this4.PanelPersonalData, "IconHead", Sprite, function (comp) {
                comp.spriteFrame = res;
              });
            }

            if (error) {
              console.log("加载头像 ==>", error);
            }
          });
        };

        _proto.setUserLevel = function setUserLevel() {
          //显示
          if (GameAllData.FarmUserResponse) {
            this.rankLevel = GameAllData.FarmUserResponse.RankLevel || 0;
            this.vipLevel = GameAllData.FarmUserResponse.VipLevel || 0;
          }

          var getconfig = function getconfig(configname, leve) {
            var config = ConfigFile.getInstance().config.get(configname).find(function (v) {
              if (leve == v.VipLevel || leve == v.DukeLevel) return true;
            });
            return config;
          };

          this.vipConfig = getconfig(Configname.TVipInfo, this.vipLevel);
          this.dukeConfig = getconfig(Configname.TDukeInfo, this.rankLevel);
          console.log(this.vipConfig, this.dukeConfig);
        };

        _proto.setConfig = function setConfig() {
          var rsex = GameAllData.FarmUserResponse && GameAllData.FarmUserResponse.Sex || 1;
          this.config = ConfigFile.getRoleInfoBySex(rsex);
          this.bubbleSort(this.config);
        };

        _proto.creatorQItem = function creatorQItem() {
          var item = this.Pool.get();
          var comp = item.getComponent("UIHeadItem");
          comp.init(null, this, true);
          this.qItemcomp = comp;
          this.listLock.content.addChild(item);
        };

        _proto.getItemGenerator = function getItemGenerator() {
          var _this5 = this;

          if (!this.config || this.config.length < 1) return;
          var i = 0;

          var func = function func() {
            if (!_this5.config[i]) {
              i = 0;

              _this5.creatorQItem();

              _this5.unschedule(func);

              return;
            }

            var itemData = _this5.config[i];

            var item = _this5.Pool.get();

            var comp = item.getComponent("UIHeadItem");
            comp.init(itemData, _this5);
            if (comp.lock) _this5.listLock.content.addChild(item);else _this5.listUnlock.content.addChild(item);

            if (!_this5.Itemcomps) {
              _this5.Itemcomps = [];

              _this5.setDescribeShow(comp);
            }

            _this5.Itemcomps.push(comp);

            i++;
          };

          this.schedule(func, 0);
        };

        _proto.setDescribeShow = function setDescribeShow(itemcomp) {
          var _this6 = this;

          if (!itemcomp) {
            return;
          }

          if (itemcomp.isQ) {
            var _image = "headIcon/" + "q" + "/spriteFrame";

            resources.load(_image, SpriteFrame, function (error, res) {
              if (res) {
                NodeHelp.getchildlable(_this6.describe, "Icon", Sprite, function (comp) {
                  comp.spriteFrame = res;
                });
              }

              if (error) {
                console.log("加载头像图 ==>", error);
              }
            });

            var _text = ConfigFile.findLanguage(ConstLanguage.UIHEAD_TRADE_Describe_QTXET1);

            NodeHelp.getchildlable(this.describe, "ScrollviewText", ScrollView, function (comp) {
              comp.scrollToTop(0.01);
            });
            NodeHelp.getchildlable(this.describe, "ScrollviewText", Label, function (comp) {
              comp.string = _text;
            });
            NodeHelp.getchildlable(this.describe, "Button", null, function (comp, node) {
              node.active = false;
            });
            NodeHelp.getchildlable(this.describe, "LockLabel", Label, function (comp, node) {
              node.active = false;
            });
            return;
          }

          var data = itemcomp.data;
          this.declarcID = data.RoleId;
          var image = "headIcon/" + data.RoleId + "/spriteFrame";
          resources.load(image, SpriteFrame, function (error, res) {
            if (res) {
              NodeHelp.getchildlable(_this6.describe, "Icon", Sprite, function (comp) {
                comp.spriteFrame = res;
              });
            }

            if (error) {
              console.log("加载头像图 ==>", error);
            }
          });
          var text = ConfigFile.findLanguage(data.RoleTxt);
          NodeHelp.getchildlable(this.describe, "ScrollviewText", ScrollView, function (comp) {
            comp.scrollToTop(0.01);
          });
          NodeHelp.getchildlable(this.describe, "ScrollviewText", Label, function (comp) {
            comp.string = text;
          });

          if (!itemcomp.lock) {
            NodeHelp.getchildlable(this.describe, "Button", null, function (comp, node) {
              node.active = true;
            });
            NodeHelp.getchildlable(this.describe, "LockLabel", Label, function (comp, node) {
              node.active = false;
            });
          } else {
            NodeHelp.getchildlable(this.describe, "Button", null, function (comp, node) {
              node.active = false;
            });
            NodeHelp.getchildlable(this.describe, "LockLabel", Label, function (comp, node) {
              node.active = true;
              var text = "";
              var duckname = "";
              if (itemcomp.vipUnlock != 0 && itemcomp.vipUnlock > _this6.vipLevel) text = ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_MASK_VIPUNLOCK).format(itemcomp.vipUnlock + "");

              if (itemcomp.titleUnlock != 0 && itemcomp.titleUnlock > _this6.rankLevel) {
                var duketable = ConfigFile.getInstance().config.get(Configname.TDukeInfo);
                var curDuke = duketable.find(function (item) {
                  return item.DukeLevel == _this6.rankLevel;
                });

                if (curDuke) {
                  duckname = ConfigFile.findLanguage(curDuke.DukeName);
                } //text += ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_MASK_VIPUNLOCK2).format(duckname);

              }

              text = ConfigFile.findLanguage(120060).format(itemcomp.vipUnlock.toString(), duckname); //text += ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_MASK_VIPUNLOCK3)

              comp.string = text;
            });
          }
        };

        _proto.bubbleSort = function bubbleSort(arr) {
          var i = arr.length,
              j;
          var tempExchangVal;

          while (i > 0) {
            for (j = 0; j < i - 1; j++) {
              if (arr[j].RoleId > arr[j + 1].RoleId && arr[j]) {
                tempExchangVal = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = tempExchangVal;
              }
            }

            i--;
          }
        } //小屋图片
        ;

        _proto.setHouseImg = function setHouseImg() {
          var leve = GameAllData.FarmHouseResponse.HouseLevel;
          var con = ConfigFile.getInstance().config.get(Configname.THouseInfo);

          if (leve >= con.length) {
            leve = con.length - 1;
          }

          var index = leve;
          if (index >= this.buildIcon.length) index = this.buildIcon.length - 1;
          this.houseIcon.spriteFrame = this.buildIcon[index];
          var scale = NodeHelp.setScopeLimitationByRect(this.buildIcon[index].rect, 151, 201);
          this.houseIcon.node.setScale(scale, scale);
          this.labMyHouse.string = ConfigFile.findLanguage(9015).format(leve);
        };

        _proto.closeAllClickShow = function closeAllClickShow() {
          if (this.qItemcomp) this.qItemcomp.notClickShow();
          if (this.Itemcomps.length < 1) return;
          this.Itemcomps.forEach(function (v) {
            v.notClickShow();
          });
        };

        _proto.clearPool = function clearPool() {
          if (this.qItemcomp) {
            this.Pool.put(this.qItemcomp.node);
            this.qItemcomp = null;
          }

          while (this.Itemcomps.length > 0) {
            this.Pool.put(this.Itemcomps.pop().node);
          }

          this.Pool.clear();
        };

        _proto.clickDescribeSwitch = function clickDescribeSwitch() {
          WebSocketMgr.send(MessageManager.Net.FarmSelectHeadPortraitRequest, {
            HeadPortraitModeId: this.declarcID
          });
        };

        _proto.clickToggleGroup = function clickToggleGroup(focus) {
          if (focus.node.name == "ToggleHead") {
            this.PanelHead.active = true;
            this.PanelPersonalData.active = false;
          } else {
            this.PanelHead.active = false;
            this.PanelPersonalData.active = true;
            NodeHelp.getchildlable(this.PanelPersonalData, "Code", null, function (comp, node) {
              NodeHelp.getchildlable(node, "scrLink", ScrollView, function (comp) {
                comp.scrollToLeft();
              });
            });
          }
        };

        _proto.setNewName = function setNewName(text) {
          var name = "myfarm";
          var UserData = GameAllData.FarmUserResponse;
          if (UserData.NikiName && UserData.NikiName != "") name = UserData.NikiName;
          if (text == name) return;
          NodeHelp.getchildlable(this.PanelPersonalData, "MyLand", Label, function (comp) {
            comp.string = text;
          });
          WebSocketMgr.send(MessageManager.Net.FarmHouseNameChangeRequest, {
            Name: text
          });
        };

        _proto.onChangeName = function onChangeName() {
          var self = this;
          var name = "myfarm";
          var UserData = GameAllData.FarmUserResponse;
          if (UserData.NikiName && UserData.NikiName != "") name = UserData.NikiName;
          UIManager.getInstance().openUI(NameInput, 99, function (ui, arg) {
            ui.initUI(name, null, function (data, text) {
              self.setNewName(text);
            });
          }, null, null);
        };

        _proto.onClickedCopy = function onClickedCopy() {
          //测试者账号 
          if (GameAllData.IsAccountTypeIsTest) {
            return;
          }

          var labLink = NodeHelp.getchildlable(this.PanelPersonalData, "labLink", Label);
          if (PlatformUtil.writeClipboardText(labLink.string)) TipManager.TipFromCode(7203);
        };

        _proto.onShowMa = function onShowMa() {
          if (GameAllData.IsAccountTypeIsTest) {
            TipManager.SafeCodeInputBox(function () {});
            return;
          }

          UIManager.getInstance().openUI(InvitationCodeView, 12, function (ui, args) {});
        };

        _proto.onClickedCopyID = function onClickedCopyID() {
          NodeHelp.getchildlable(this.PanelPersonalData, "PlayerID", null, function (comp, node) {
            NodeHelp.getchildlable(node, "Label", Label, function (comp) {
              if (PlatformUtil.writeClipboardText(comp.string)) TipManager.TipFromCode(7203);
            });
          });
        };

        _proto.onchicktext = function onchicktext() {
          if (this.gmClickBoo == false) {
            this.gmClickBoo = true;
            this.gmBtnClickNum = 1;
            this._NetLockTime = UIHelp.getTimeMask();
          } else {
            if (UIHelp.getTimeDiff(this._NetLockTime) < 1000) {
              this.gmBtnClickNum += 1;
            } else {
              this.gmClickBoo = false;
              this.gmBtnClickNum = 0;
            }
          }

          if (this.gmBtnClickNum >= 5) {
            // if(CommonUtil.isTestNet())
            UIManager.getInstance().openUI(text, 12, undefined, undefined, undefined);
          }
        };

        return UIHead;
      }(BaseUI), _class3.className = "UIHead", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "item", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "describe", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "listUnlock", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "listLock", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "PanelHead", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "PanelPersonalData", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "labMyHouse", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "houseIcon", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "buildIcon", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIHeadItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameAllData.ts', './NodeHelp.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _createForOfIteratorHelperLoose, cclegacy, _decorator, Input, Sprite, resources, SpriteFrame, Component, GameAllData, NodeHelp;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Input = module.Input;
      Sprite = module.Sprite;
      resources = module.resources;
      SpriteFrame = module.SpriteFrame;
      Component = module.Component;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "e4550tzAkVDQolLoTjqSVgB", "UIHeadItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIHeadItem = exports('UIHeadItem', (_dec = ccclass('UIHeadItem'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIHeadItem, _Component);

        function UIHeadItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.data = null;
          _this.tag = null;
          _this.lock = false;
          _this.vipUnlock = 0;
          _this.titleUnlock = 0;
          _this.isQ = false;
          return _this;
        }

        var _proto = UIHeadItem.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on(Input.EventType.TOUCH_START, this.onTouchStart, this);
        };

        _proto.onDestroy = function onDestroy() {
          this.node.off(Input.EventType.TOUCH_START, this.onTouchStart, this);
        };

        _proto.init = function init(itemData, tag, isQ) {
          if (isQ === void 0) {
            isQ = false;
          }

          this.data = itemData;
          this.tag = tag;
          this.isQ = isQ;
          this.setUnlock();
          this.setIcon();
        };

        _proto.onTouchStart = function onTouchStart() {// let self = this
          // self.tag.closeAllClickShow()
          // self.isClickShow()
        };

        _proto.setIcon = function setIcon() {
          var _this2 = this;

          var self = this;
          NodeHelp.getchildlable(this.node, "Icon", Sprite, function (comp) {
            var image = "";

            if (_this2.isQ) {
              image = "headIcon/q/spriteFrame";
            } else {
              image = "headIcon/" + self.data.RoleId + "/spriteFrame";
            }

            resources.load(image, SpriteFrame, function (error, res) {
              if (res && comp.isValid) {
                comp.spriteFrame = res;
              }

              if (error) {
                console.log("加载头像图 ==>", error);
              }
            });
          });
        };

        _proto.setUnlock = function setUnlock() {
          //显示
          if (this.isQ) {
            this.lock = true;
            return this.lock;
          }

          var rankLevel = 0;
          var vipLevel = 0;

          if (GameAllData.FarmUserResponse) {
            rankLevel = GameAllData.FarmUserResponse.RankLevel || 0;
            vipLevel = GameAllData.FarmUserResponse.VipLevel || 0;
          }

          var unlocks = this.data.RoleUnlock.split(";");

          if (!unlocks || unlocks.length < 1 || this.data.RoleUnlock == "") {
            this.lock = false;
          } else {
            for (var _iterator = _createForOfIteratorHelperLoose(unlocks), _step; !(_step = _iterator()).done;) {
              var unlock = _step.value;
              if (unlock == "") continue;

              var _unlock = unlock.split(",");

              switch (Number(_unlock[0])) {
                case 1:
                  this.vipUnlock = Number(_unlock[1]);
                  break;

                case 2:
                  this.titleUnlock = Number(_unlock[1]);
                  break;
              }
            }

            if (vipLevel < this.vipUnlock || rankLevel < this.titleUnlock) {
              this.lock = true;
            } else {
              this.lock = false;
            }
          }

          return this.lock;
        };

        _proto.isClickShow = function isClickShow() {
          NodeHelp.getchildlable(this.node, "Click", null, function (comp, node) {
            node.active = true;
          });
        };

        _proto.notClickShow = function notClickShow() {
          NodeHelp.getchildlable(this.node, "Click", null, function (comp, node) {
            node.active = false;
          });
        };

        _proto.onClick = function onClick() {
          this.tag.setDescribeShow(this);
          var self = this;
          self.tag.closeAllClickShow();
          self.isClickShow();
        };

        return UIHeadItem;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIHelp.ts", ['cc', './ConfigFile.ts', './GameAllData.ts', './GameManager.ts', './UIManager.ts', './producer.ts', './MainGame.ts', './LoadingTAView.ts'], function (exports) {
  'use strict';

  var cclegacy, Vec3, Vec2, UITransform, rect, BoxCollider2D, Intersection2D, PolygonCollider2D, Rect, ConfigFile, GameAllData, GameManager, UIManager, producer, MainGame, LoadingTAView;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      Vec2 = module.Vec2;
      UITransform = module.UITransform;
      rect = module.rect;
      BoxCollider2D = module.BoxCollider2D;
      Intersection2D = module.Intersection2D;
      PolygonCollider2D = module.PolygonCollider2D;
      Rect = module.Rect;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      MainGame = module.MainGame;
    }, function (module) {
      LoadingTAView = module.LoadingTAView;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c44e6cLg85JzaIFNvBdsH7x", "UIHelp", undefined);

      var vt_1 = new Vec3();
      var vt_2 = new Vec3();
      var v2_1 = new Vec2();
      var UIHelp = exports('UIHelp', /*#__PURE__*/function () {
        function UIHelp() {}

        UIHelp.getTimeMask = function getTimeMask() {
          return Date.now();
        };

        UIHelp.getDayMask = function getDayMask() {
          return Math.floor(this.getTimeMask() / 86400000);
        };

        UIHelp.getTimeDiff = function getTimeDiff(time1) {
          var curTime = Date.now();
          return Math.abs(curTime - time1);
        };

        UIHelp.getTurnTimeDiff = function getTurnTimeDiff(time1) {
          var curTime = Date.now();
          return time1 - curTime;
        };

        UIHelp.ConverSceen = function ConverSceen(camera, pos) {
          if (!camera) return;
          vt_2.x = pos.x;
          vt_2.y = pos.y;
          vt_2.z = 0;
          camera.screenToWorld(vt_2, vt_1);
          pos.x = vt_1.x;
          pos.y = vt_1.y;
        };

        UIHelp.TestUIPoint = function TestUIPoint(pos, node) {
          var bx = node.getComponent(UITransform);

          if (rect(bx.getBoundingBoxToWorld()).contains(pos)) {
            return true;
          }

          return false;
        };

        UIHelp.BboxHitTest = function BboxHitTest(pos, node) {
          var polygonCollider = node.getComponent(BoxCollider2D);
          vt_1.set(pos.x, pos.y, 0);
          node.getComponent(UITransform).convertToNodeSpaceAR(vt_1, vt_2);
          v2_1.set(vt_2.x, vt_2.y);
          return Intersection2D.pointInPolygon(v2_1, polygonCollider.worldPoints);
        };

        UIHelp.polygonHitTest = function polygonHitTest(pos, node) {
          var polygonCollider = node.getComponent(PolygonCollider2D);
          vt_1.set(pos.x, pos.y, 0);
          node.getComponent(UITransform).convertToNodeSpaceAR(vt_1, vt_2);
          v2_1.set(vt_2.x, vt_2.y);
          return Intersection2D.pointInPolygon(v2_1, polygonCollider.points);
        };

        UIHelp.rectPolygonHitTest = function rectPolygonHitTest(pos, radiul, node) {
          var polygonCollider = node.getComponent(PolygonCollider2D);
          vt_1.set(pos.x, pos.y, 0);
          node.getComponent(UITransform).convertToNodeSpaceAR(vt_1, vt_2);
          var rc = new Rect(vt_2.x - radiul, vt_2.y - radiul, radiul * 2, radiul * 2);
          return Intersection2D.rectPolygon(rc, polygonCollider.points);
        };

        UIHelp.clone = function clone(object) {
          if (!object || typeof object !== "object") {
            return object;
          }

          var Constructor = object.constructor;
          var ret = new Constructor();

          for (var attr in object) {
            if (object.hasOwnProperty(attr)) {
              var value = object[attr];

              if (value === object) {
                return;
              }

              if (typeof value === "object") {
                ret[attr] = this.clone(value);
              } else {
                ret[attr] = value;
              }
            }
          }

          return ret;
        }
        /**重置安全码锁定剩余时间**/
        ;

        UIHelp.getBandSafeCodeTime = function getBandSafeCodeTime() {
          var localTime = UIHelp.getTimeMask() / 1000; // let servertime = DateUtil.getServerTimeDiff(localTime);

          var servertime = producer.getServerTimeDiff(localTime);
          var time = servertime - GameAllData.bandSafeCodeTime;
          var all = ConfigFile.getGlobalInfoByGlobalId(264).IntValue * 3600;
          var value = all - time;
          return value;
        }
        /**@description 打开转圈的loading界面 */
        ;

        UIHelp.openLoadingTA = function openLoadingTA() {
          this.juhua++;
          console.log("菊花圈圈:", this.juhua);
          UIHelp.closeLoadingTA(); // UIManager.getInstance().openUI(LoadingTAView, 100, null, null, null, true);

          UIManager.getInstance().openUI(LoadingTAView, 100, function (ui, args) {
            ui.setBg(1);
          }, undefined, null);
        }
        /**@description 关闭转圈的loading界面 */
        ;

        UIHelp.closeLoadingTA = function closeLoadingTA() {
          console.log("关闭菊花圈圈1");
          UIManager.getInstance().closeUI(LoadingTAView);
          var game = GameManager.getInstance().getGame(MainGame);

          if (game) {
            game.resetRequest();
          }
        }
        /**@description 打开转圈的loading界面 */
        ;

        UIHelp.openLoadingTANew = function openLoadingTANew() {
          this.juhua++;
          console.log("菊花圈圈2:", this.juhua);
          UIHelp.closeLoadingTA(); // UIManager.getInstance().openUI(LoadingTAView, 100, null, null, null, true);

          UIManager.getInstance().openUI(LoadingTAView, 100, function (ui, args) {
            ui.setBg(2);
          }, undefined, null);
        }
        /**@description 关闭转圈的loading界面 */
        ;

        UIHelp.closeLoadingTANew = function closeLoadingTANew() {
          console.log("关闭菊花圈圈2");
          UIManager.getInstance().closeUI(LoadingTAView);
        };

        return UIHelp;
      }());
      UIHelp.juhua = 0;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIHouse.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './TipManager.ts', './UIManager.ts', './WebSocketMgr.ts', './producer.ts', './NodeHelp.ts', './NumberUtil.ts', './BaseUI.ts', './NameInput.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Prefab, Node, SpriteFrame, Sprite, ScrollView, Label, ProgressBar, Input, resources, UITransform, Vec3, instantiate, tween, Color, ConfigFile, Configname, GameAllData, EventManager, MessageManager, TipManager, UIManager, WebSocketMgr, producer, NodeHelp, NumberUtil, BaseUI, NameInput;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      ScrollView = module.ScrollView;
      Label = module.Label;
      ProgressBar = module.ProgressBar;
      Input = module.Input;
      resources = module.resources;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      instantiate = module.instantiate;
      tween = module.tween;
      Color = module.Color;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      NameInput = module.NameInput;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _class3;

      cclegacy._RF.push({}, "7ff4f1NyO9G5rX6iwaskMOw", "UIHouse", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIHouse = exports('UIHouse', (_dec = ccclass('UIHouse'), _dec2 = property(Prefab), _dec3 = property(Node), _dec4 = property([SpriteFrame]), _dec5 = property(Sprite), _dec6 = property(Sprite), _dec7 = property(Sprite), _dec8 = property(ScrollView), _dec9 = property(Node), _dec10 = property(Node), _dec11 = property(Node), _dec12 = property(Node), _dec13 = property(Label), _dec14 = property(Label), _dec15 = property(Label), _dec16 = property(Label), _dec17 = property(Label), _dec18 = property(Label), _dec19 = property(Sprite), _dec20 = property(Label), _dec21 = property(Label), _dec22 = property(Label), _dec23 = property(Label), _dec24 = property(Label), _dec25 = property(Label), _dec26 = property(ProgressBar), _dec27 = property(Label), _dec28 = property(Label), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(UIHouse, _BaseUI);

        function UIHouse() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "TextPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "BG", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buildIcon", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buildSprite", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "VipIcon", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "RankIcon", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "SV", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "levelBtn", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Bar", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tipNode", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tipmark", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tipText", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "TitleName", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "VipLevel", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "HouseName", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "LV", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Money", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "MoneyIcon", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Add", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Vip", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Rank", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Like", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "N3Title", _descriptor23, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "CreateTime", _descriptor24, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "exp", _descriptor25, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "expNum", _descriptor26, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "exTips", _descriptor27, _assertThisInitialized(_this));

          _this.oldLevel = -1;
          return _this;
        }

        var _proto = UIHouse.prototype;

        _proto.start = function start() {
          this.tipNode.active = false;
          this.BG.on(Input.EventType.TOUCH_START, this.onBeginTouch.bind(this));
          this.BG.on(Input.EventType.TOUCH_MOVE, this.onMoveTouch.bind(this));
          this.BG.on(Input.EventType.TOUCH_END, this.onStopTouch.bind(this));
          this.BG.on(Input.EventType.TOUCH_CANCEL, this.onStopTouch.bind(this));
          EventManager.getInstance().add(MessageManager.Custom.VipOrRankChange, this, this.onVipOrRankChange);
          EventManager.getInstance().add(MessageManager.Custom.HouseDataChange, this, this.onVipOrRankChange);
          EventManager.getInstance().add(MessageManager.Net.FarmHouseNameChangeResponse, this, this.onChangeNameResponse);
        };

        _proto.onDisable = function onDisable() {
          this.BG.off(Input.EventType.TOUCH_START, this.onBeginTouch.bind(this));
          this.BG.off(Input.EventType.TOUCH_MOVE, this.onMoveTouch.bind(this));
          this.BG.off(Input.EventType.TOUCH_END, this.onStopTouch.bind(this));
          this.BG.off(Input.EventType.TOUCH_CANCEL, this.onStopTouch.bind(this));
        };

        _proto.onDestroy = function onDestroy() {
          _BaseUI.prototype.onDestroy.call(this);
        };

        _proto.onVipOrRankChange = function onVipOrRankChange() {
          this.update1();
        };

        _proto.onChangeNameResponse = function onChangeNameResponse(data) {
          if (!data) return;

          if (data.Code == 0) {
            console.log("改名成功");
          } else {
            TipManager.TipFromCode(120055);
          }
        };

        _proto.setImage = function setImage(sp, name) {
          resources.load(name, SpriteFrame, function (error, res) {
            if (res) {
              if (!sp || !sp.isValid) return;
              sp.spriteFrame = res;
            }

            if (error) {
              console.log("加载资源产出图 ==>", error);
            }
          });
        };

        _proto.setImage1 = function setImage1(sp, name) {
          resources.load(name, SpriteFrame, function (error, res) {
            if (res) {
              if (!sp || !sp.isValid) return;
              sp.spriteFrame = res;
              var scale = NodeHelp.setScopeLimitation(sp.node.getComponent(UITransform), 142, 100);
              sp.node.setScale(new Vec3(scale, scale, 1));
            }

            if (error) {
              console.log("加载动物产出图 ==>", error);
            }
          });
        };

        _proto.getVipResourceName = function getVipResourceName(VipLevel) {
          switch (VipLevel) {
            case 0:
              return "0";

            case 1:
              return "1";

            case 2:
              return "1";

            case 3:
              return "3";

            case 4:
              return "3";

            case 5:
              return "5";

            case 6:
              return "5";

            case 7:
              return "7";

            case 8:
              return "7";

            default:
              return "9";
          }
        };

        _proto.AddItem = function AddItem(text) {
          var item = instantiate(this.TextPrefab);
          var rt1 = item.getComponentInChildren(Label);
          rt1.string = text;
          var child = this.SV.content.children;

          if (child.length > 0) {
            var tail = child[child.length - 1];
            var rt2 = tail.getComponentInChildren(Label);
            tail.position.y;
            rt2.node.getComponent(UITransform).contentSize.height / 2;
          }

          this.SV.content.addChild(item);
          rt1.updateRenderData(true);
        };

        _proto.update1 = function update1() {
          var _this2 = this;

          var UserData = GameAllData.FarmUserResponse;
          var HouseData = GameAllData.FarmHouseResponse;
          var con = ConfigFile.getInstance().config.get(Configname.THouseInfo);

          if (HouseData.HouseLevel >= con.length) {
            HouseData.HouseLevel = con.length - 1;
          }

          var c = con.find(function (item) {
            return item.HouseId == HouseData.HouseLevel;
          });

          if (HouseData.HouseLevel + 1 >= con.length) {
            this.levelBtn.active = false;
            this.Bar.active = false;
          } else {
            this.Bar.active = true;

            if (HouseData.HouseExp >= c.HouseExp) {
              this.levelBtn.active = true;
            } else {
              this.levelBtn.active = false;
            }
          }

          this.exp.progress = HouseData.HouseExp / c.HouseExp;
          this.expNum.string = HouseData.HouseExp + "/" + c.HouseExp;
          var needItem = ConfigFile.getLimitInfo(c.NeedItem);
          var addVal = "0";

          if (c.HouseProp) {
            var prop = ConfigFile.getLimitInfo(c.HouseProp);
            addVal = NumberUtil.numberFormat(prop.val / 100, 2);
          }

          this.LV.string = "LV." + HouseData.HouseLevel;
          var index = HouseData.HouseLevel;
          if (index >= this.buildIcon.length) index = this.buildIcon.length - 1;
          this.buildSprite.spriteFrame = this.buildIcon[index];
          var scale = NodeHelp.setScopeLimitationByRect(this.buildIcon[index].rect, 315, 330);
          this.buildSprite.node.setScale(scale, scale, 1);

          if (this.oldLevel < 0) {
            this.oldLevel = index;
          } else {
            if (this.oldLevel != index) {
              //升级了
              var scale1 = this.buildSprite.node.scale;
              var scale2 = scale1.clone();
              tween(this.buildSprite.node).call(function () {
                scale2.x = scale1.x * 0.8;
                scale2.y = scale1.y * 0.8;
              }).to(0, {
                scale: scale2
              }).call(function () {
                scale2.x = scale1.x * 1.2;
                scale2.y = scale1.y * 1.2;
              }).to(0.2, {
                scale: scale2
              }).call(function () {
                scale2.x = scale1.x * 0.9;
                scale2.y = scale1.y * 0.9;
              }).to(0.1, {
                scale: scale2
              }).call(function () {
                scale2.x = scale1.x * 1;
                scale2.y = scale1.y * 1;
              }).to(0.1, {
                scale: scale2
              }).start();
            }
          }

          this.Money.string = needItem.val;
          NodeHelp.loadIcon("propIcon/itemicon", needItem.id, function (res) {
            _this2.MoneyIcon.spriteFrame = res;
            var scale = NodeHelp.setScopeLimitationMax(_this2.MoneyIcon.node.getComponent(UITransform), 40, 40);

            _this2.MoneyIcon.node.setScale(new Vec3(scale, scale, 1));
          });

          if (GameAllData.getCurrencyNumByType(needItem.id) < needItem.val) {
            this.Money.color = new Color(255, 0, 0, 255);
          } else {
            this.Money.color = new Color(255, 255, 255, 255);
          } //GameAllData.getCurrencyNumByType(EnumDefine.CurrencyType.Conch).toString();


          var datestring = producer.getDateTime(new Date(UserData.CreateTime * 1000));
          var msgTemp01 = producer.getMessageText(9001);
          this.Add.string = msgTemp01.format(addVal.toString());
          var msgTemp02 = producer.getMessageText(9002);
          this.Vip.string = msgTemp02.format(UserData.VipLevel.toString());
          var vipiconname = "vip/VIPicon/VIPiocnBIG/" + this.getVipResourceName(UserData.VipLevel) + "/spriteFrame";
          this.setImage(this.VipIcon, vipiconname);
          this.VipLevel.string = "VIP:" + UserData.VipLevel;
          var rankiconname = "vip/titleIcon/" + UserData.RankLevel + "/spriteFrame";
          this.setImage1(this.RankIcon, rankiconname);
          var msgTemp03 = producer.getMessageText(9003);
          var duketable = ConfigFile.getInstance().config.get(Configname.TDukeInfo);
          var curDuke = duketable.find(function (item) {
            return item.DukeLevel == UserData.RankLevel;
          });

          if (curDuke) {
            var dukename = producer.getMessageText(curDuke.DukeName);
            this.Rank.string = dukename;
          }

          var msgTemp05 = producer.getMessageText(9005);
          this.CreateTime.string = msgTemp05.format(datestring);
          var msgTemple04 = producer.getMessageText(9004);
          this.Like.string = msgTemple04.format(HouseData.LoveCount);
          var name = "myfarm";
          if (UserData.NikiName && UserData.NikiName != "") name = UserData.NikiName;
          var msgTemple06 = producer.getMessageText(9006);
          this.HouseName.string = msgTemple06.format(name);
          this.TitleName.string = name;
          this.N3Title.string = producer.getMessageText(9007);
        };

        _proto.addList = /*#__PURE__*/function () {
          var _addList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var HouseData, plantCount, index, id, cnt, configItem, plantname, msgTemple10, animalCount, _index, _id, _cnt, animal, aid, msgData, msgTemple, t;

            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    HouseData = GameAllData.FarmHouseResponse;
                    plantCount = Math.floor(HouseData.WitheredCount.length / 2);

                    for (index = plantCount - 1; index >= 0; index--) {
                      id = HouseData.WitheredCount[index * 2];

                      if (id) {
                        cnt = HouseData.WitheredCount[index * 2 + 1];
                        configItem = ConfigFile.getItemData(id);

                        if (configItem) {
                          plantname = producer.getMessageText(configItem.Name);
                          msgTemple10 = producer.getMessageText(9010);
                          msgTemple10 = msgTemple10.format(plantname, cnt);
                          this.AddItem(msgTemple10);
                        }
                      }
                    }

                    animalCount = Math.floor(HouseData.PastureDeathModeId.length / 2);

                    for (_index = animalCount - 1; _index >= 0; _index--) {
                      _id = HouseData.PastureDeathModeId[_index * 2];
                      _cnt = HouseData.PastureDeathModeId[_index * 2 + 1];
                      animal = ConfigFile.getAnimalFromModeId(_id);
                      aid = ConfigFile.getItemData(animal.AnimalCubId);
                      msgData = producer.getMessageText(aid.Name);
                      msgTemple = producer.getMessageText(9011);
                      msgTemple = msgTemple.format(msgData, _cnt);
                      t = msgTemple;
                      this.AddItem(t);
                    }

                  case 5:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function addList() {
            return _addList.apply(this, arguments);
          }

          return addList;
        }();

        _proto.initUI = /*#__PURE__*/function () {
          var _initUI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var HouseData, msgTemple08, msgTemple09, total;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    this.update1();
                    HouseData = GameAllData.FarmHouseResponse;
                    this.tipText.string = producer.getMessageText(9012);
                    msgTemple08 = producer.getMessageText(9008);
                    msgTemple09 = producer.getMessageText(9009);

                    if (HouseData.LandStealCount > 0) {
                      msgTemple08 = msgTemple08.format(HouseData.LandStealCount.toString());
                      this.AddItem(msgTemple08);
                    }

                    if (HouseData.PastureStealCount) {
                      msgTemple09 = msgTemple09.format(HouseData.PastureStealCount.toString());
                      this.AddItem(msgTemple09);
                    }

                    total = this.SV.content.children.length;
                    total += HouseData.WitheredCount.length;
                    total += HouseData.PastureDeathModeId.length;

                    if (total > 0) {
                      this.exTips.node.active = false;
                    } else {
                      this.exTips.string = ConfigFile.findLanguage(9014);
                      this.exTips.node.active = true;
                    } // for(let index = 0;index<10;index++){
                    //     HouseData.WitheredCount.push(1);
                    //     HouseData.WitheredCount.push(60);
                    // }
                    // for(let index = 0;index<10;index++){
                    //     HouseData.PastureDeathModeId.push(201);
                    //     HouseData.PastureDeathModeId.push(60);
                    // }
                    //处理植物
                    // let msgTemple10 = producer.getMessageText(9010);
                    // msgTemple10 = msgTemple10.format("",HouseData.WitheredCount.toString());
                    // this.AddItem("<color=#FF4925>"+msgTemple10+"</color>");
                    // this.node.setScale(0.2, 0.2, 0.2);
                    // tween(this.node)
                    //     .to(0.25, { scale: new Vec3(1.05, 1.05, 1.05) })
                    //     .to(0.15, { scale: new Vec3(0.95, 0.95, 0.95) })
                    //     .to(0.15, { scale: new Vec3(1.0, 1.0, 1.0) })
                    //     .start();


                    _BaseUI.prototype.elasticEffect.call(this, this.node, null);

                    _context2.next = 14;
                    return this.addList();

                  case 14:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function initUI() {
            return _initUI.apply(this, arguments);
          }

          return initUI;
        }();

        _proto.onTipMark = function onTipMark(event) {
          if (this.tipNode.active) this.tipNode.active = false;
        };

        _proto.onBeginTouch = function onBeginTouch(event) {
          UIManager.getInstance().closeUI(UIHouse);
        };

        _proto.onMoveTouch = function onMoveTouch(event) {};

        _proto.onStopTouch = function onStopTouch(event) {};

        _proto.onClickClose = function onClickClose() {
          UIManager.getInstance().closeUI(UIHouse);
        };

        _proto.onUpgrade = function onUpgrade() {
          var HouseData = GameAllData.FarmHouseResponse;
          var con = ConfigFile.getInstance().config.get(Configname.THouseInfo);
          var c = con.find(function (item) {
            return item.HouseId == HouseData.HouseLevel;
          });
          if (!c) return;

          if (HouseData.HouseExp >= c.HouseExp) {
            var needItem = ConfigFile.getLimitInfo(c.NeedItem);

            if (GameAllData.getCurrencyNumByType(needItem.id) < needItem.val) {
              TipManager.TipFromCode(10000, needItem.id);
              return;
            }

            TipManager.ChoiceBox(ConfigFile.findLanguage(9016, needItem.id).format(needItem.val), null, function () {
              WebSocketMgr.send(MessageManager.Net.FarmHouseLevelUpRequest, {});
            });
          }
        };

        _proto.setNewName = function setNewName(text) {
          var name = "myfarm";
          var UserData = GameAllData.FarmUserResponse;
          if (UserData.NikiName && UserData.NikiName != "") name = UserData.NikiName;
          if (text == name) return;

          if (text.includes(" ") || text.includes("#") || text.includes("%")) {
            TipManager.TipFromCode(120059);
            return;
          }

          WebSocketMgr.send(MessageManager.Net.FarmHouseNameChangeRequest, {
            Name: text
          });
        };

        _proto.onChangeName = function onChangeName() {
          var self = this;
          var name = "myfarm";
          var UserData = GameAllData.FarmUserResponse;
          if (UserData.NikiName && UserData.NikiName != "") name = UserData.NikiName;
          UIManager.getInstance().openUI(NameInput, 99, function (ui, arg) {
            ui.initUI(name, null, function (data, text) {
              self.setNewName(text);
            });
          }, null, null);
        };

        _proto.onTip = function onTip() {
          if (!this.tipNode.active) this.tipNode.active = true;else this.tipNode.active = false;
        };

        return UIHouse;
      }(BaseUI), _class3.className = "UIHouse", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "TextPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "BG", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "buildIcon", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "buildSprite", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "VipIcon", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "RankIcon", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "SV", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "levelBtn", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "Bar", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "tipNode", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "tipmark", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "tipText", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "TitleName", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "VipLevel", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "HouseName", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "LV", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "Money", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "MoneyIcon", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "Add", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "Vip", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "Rank", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "Like", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "N3Title", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "CreateTime", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "exp", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "expNum", [_dec27], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor27 = _applyDecoratedDescriptor(_class2.prototype, "exTips", [_dec28], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UILogin.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AreaCodeConfig.ts', './EnumDefine.ts', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './GameManager.ts', './MessageManager.ts', './TipManager.ts', './UIManager.ts', './HttpMgr.ts', './WebSocketMgr.ts', './MainGame.ts', './CommonUtil.ts', './NodeHelp.ts', './NumberUtil.ts', './PlatformUtil.ts', './UIHelp.ts', './BaseUI.ts', './AreaCodeItem.ts', './LoadingView.ts', './WaitNet.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ScrollView, Node, Label, EditBox, Button, Prefab, Asset, view, UITransform, Vec3, sys, Widget, instantiate, AreaCodeConfig, EnumDefine, ConfigFile, GameAllData, EventManager, GameManager, MessageManager, TipManager, UIManager, HttpMgr, WebSocketMgr, MainGame, CommonUtil, NodeHelp, NumberUtil, PlatformUtil, UIHelp, BaseUI, AreaCodeItem, LoadingView, WaitNet;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ScrollView = module.ScrollView;
      Node = module.Node;
      Label = module.Label;
      EditBox = module.EditBox;
      Button = module.Button;
      Prefab = module.Prefab;
      Asset = module.Asset;
      view = module.view;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      sys = module.sys;
      Widget = module.Widget;
      instantiate = module.instantiate;
    }, function (module) {
      AreaCodeConfig = module.AreaCodeConfig;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      HttpMgr = module.HttpMgr;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      MainGame = module.MainGame;
    }, function (module) {
      CommonUtil = module.CommonUtil;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }, function (module) {
      PlatformUtil = module.PlatformUtil;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      AreaCodeItem = module.AreaCodeItem;
    }, function (module) {
      LoadingView = module.LoadingView;
    }, function (module) {
      WaitNet = module.WaitNet;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _class3;

      cclegacy._RF.push({}, "8bf2bwAL7hG0bOelGoeSiFR", "UILogin", undefined);

      var re = /^(?=.*[a-zA-Z])(?=.*\d)[a-zA-Z\d]{3,}$/;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UILogin = exports('UILogin', (_dec = ccclass('UILogin'), _dec2 = property(ScrollView), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(ScrollView), _dec8 = property(EditBox), _dec9 = property(EditBox), _dec10 = property(Button), _dec11 = property(Button), _dec12 = property(Button), _dec13 = property(Label), _dec14 = property(Prefab), _dec15 = property(Node), _dec16 = property(EditBox), _dec17 = property(Label), _dec18 = property(Asset), _dec19 = property(Node), _dec20 = property(Node), _dec21 = property(Node), _dec22 = property(Node), _dec23 = property(Label), _dec24 = property(EditBox), _dec25 = property(EditBox), _dec26 = property(Button), _dec27 = property(Button), _dec28 = property(Label), _dec29 = property(EditBox), _dec30 = property(EditBox), _dec31 = property(Button), _dec32 = property(Node), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(UILogin, _BaseUI);

        function UILogin() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "scrServerList", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodNew", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bgAnimation", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labPhone", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labAreaCode", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrAllAreaCode", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "edtPhoneNum", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "edtVerificationCode", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnSendVerificationCode", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnLogin", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnMetaMask", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labQuickLogin", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pfbAreaCodeItem", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "uiID", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "searchEditBox", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labVersion", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Manifest", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "skNode", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bgSprite", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "oldLogin", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "email", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labEmail", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "edtEmailNum", _descriptor23, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "edtEmailCode", _descriptor24, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnSendEmailCode", _descriptor25, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnEmailLogin", _descriptor26, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labEmailBand", _descriptor27, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "edtEmailBandNum", _descriptor28, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "edtEmailBandCode", _descriptor29, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnSendEmailBandCode", _descriptor30, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonBack", _descriptor31, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = UILogin.prototype;

        _proto.start = function start() {
          var Pointdata = "intoGame-login";
          PlatformUtil.buriedPoint("intoLoginPage", Pointdata, -1); //AudioManager.getInstance().playMusic("background/level1")
          //EventManager.getInstance().add(MessageManager.Net.GameRegisterResponse, this, this.GameRegisterResponse);

          EventManager.getInstance().add(MessageManager.Custom.ThirdPartyLoginSuccess, this, this.onThirdPartyLoginSuccess);
          EventManager.getInstance().add(MessageManager.Custom.SelectedAreaCode, this, this.onSelectedAreaCode);
          EventManager.getInstance().add(MessageManager.Net.GameLoginResponse, this, this.GameLoginResponse);

          if (GameAllData.inviterId && GameAllData.inviterId != "") {
            this.uiID.active = true;
            this.uiID.children[0].getComponent(Label).string = ConfigFile.findLanguage(120013);
            this.uiID.children[1].getComponent(Label).string = "" + GameAllData.inviterId;
          } else {
            this.uiID.active = false;
          }

          this.initQuickLogin();
          this.initLabel();
          NodeHelp.getchildlable(this.node, "Test", null, function (comp, node) {
            node.active = CommonUtil.isTestNet();
          }); // let cs = view.getVisibleSize();
          // let scale = NodeHelp.setScopeLimitationMax(this.skNode.getComponent(UITransform), cs.width, cs.height)
          // this.skNode.setScale(new Vec3(scale, scale, 1))

          var cs = view.getVisibleSize();
          var scale = NodeHelp.setScopeLimitationInSizeNew(this.bgSprite.getComponent(UITransform), cs.width, cs.height);
          this.bgSprite.setScale(new Vec3(scale, scale, 1));
          GameAllData.FarmUserResponse = null; //布朗尼老哥用这个来判断的是否在游戏中(最好专门用一个全局变量来标记)
          //web版的是在一开始就做了token判断和请求了，原生的有热更新，故放到这儿处理

          if (sys.isNative) {
            var token = sys.localStorage.getItem("token");

            if (token) {
              this.nodNew.active = false;
              EventManager.getInstance().trigger(MessageManager.Custom.ConnectWebSocket);
            }
          }

          NodeHelp.getchildlable(this.node, "sprQuickLogin", null, function (comp, node) {
            node.active = !sys.isBrowser;
          });
          NodeHelp.getchildlable(this.node, "QuickLogin", null, function (comp, node) {
            node.active = !sys.isBrowser;
          });
          this.labVersion.string = "V" + PlatformUtil.getManifestVersion(this.Manifest);
          this.setSafe(); // this.scheduleOnce(
          //     () => {
          //         this.scrAllAreaCode.node.active = false;
          //     }, 0.1
          // )
          //  this.scrAllAreaCode.node.active = false;

          this.initAllAreaCode();
        };

        _proto.setSafe = function setSafe() {
          var visibleSize = view.getVisibleSize();
          var safeArea = sys.getSafeAreaRect();
          NodeHelp.getchildlable(this.node, "Version", Widget, function (comp, node) {
            var rightsize = visibleSize.x - (safeArea.x + safeArea.width) - comp.right;
            comp.right = rightsize <= 0 ? comp.right : rightsize;
            comp.updateAlignment();
          });
        };

        _proto.onDestroy = function onDestroy() {
          //EventManager.getInstance().remove(MessageManager.Net.GameRegisterResponse, this, this.GameRegisterResponse);
          EventManager.getInstance().remove(MessageManager.Custom.ThirdPartyLoginSuccess, this, this.onThirdPartyLoginSuccess);
          EventManager.getInstance().remove(MessageManager.Custom.SelectedAreaCode, this, this.onSelectedAreaCode);
          EventManager.getInstance().remove(MessageManager.Net.GameLoginResponse, this, this.GameLoginResponse);

          _BaseUI.prototype.onDestroy.call(this);
        } //登录返回
        ;

        _proto.GameLoginResponse = function GameLoginResponse(msg) {
          var uilog = UIManager.getInstance().getUI(UILogin);

          if (msg.Code == 120018 && uilog) {
            var mesStr = ConfigFile.findLanguage(msg.Code);
            TipManager.ChoiceBox(mesStr, function () {
              UIManager.getInstance().closeUI(WaitNet);
              sys.localStorage.removeItem("token");
              GameManager.getInstance().closeGame(MainGame);
            }, function () {
              // 跳转到下载界面
              // let username = this.getEditBoxBoxstring(this.Login.children[0])
              // let Password = this.getEditBoxBoxstring(this.Login.children[1])
              // let data = {
              //     Username: username,
              //     Password: Password,
              //     IsForce: 1,
              // }
              // WebSocketMgr.send(MessageManager.Net.GameLoginRequest, data)
              UIManager.getInstance().closeUI(WaitNet);
              WebSocketMgr.send(MessageManager.Net.GameLoginRequest, {
                IsForce: 1,
                Token: sys.localStorage.getItem("token")
              });
            });
            return;
          }

          if (0 != msg.Code) {
            return;
          }

          UIManager.getInstance().closeUI(UILogin);
          UIManager.getInstance().openUI(LoadingView, 10, null, null, null, true);
        } // //注册返回
        // GameRegisterResponse(msg) {
        //     let _msg = msg.Code
        //     if (_msg == 0) {
        //         console.log("注册成功");
        //         this.onClickGoToLogon(null, "false")
        //     }
        //     else {
        //         console.log("注册失败");
        //     }
        // }
        //第三方登录成功回调
        ;

        _proto.onThirdPartyLoginSuccess = function onThirdPartyLoginSuccess(data) {
          var url = GameAllData.httpServerUrl + "user/login_mob";
          var is_drop = 1;

          if (GameAllData.paramsUrl) {
            is_drop = 0;
          }

          var params = {
            id: data.userId,
            loginType: data.thirdPartyName,
            agent_id: GameAllData.channelId,
            operater_id: GameAllData.operatorId,
            invite_code: GameAllData.invitationCode,
            language_id: GameAllData.languageId,
            url: GameAllData.paramsUrl,
            is_drop: is_drop
          };
          EventManager.getInstance().trigger(MessageManager.Custom.RequestLogin, url, params);
        } //国家区号设置为选中的
        ;

        _proto.onSelectedAreaCode = function onSelectedAreaCode(data) {
          this.labAreaCode.string = data;
          this.scrAllAreaCode.node.active = false;
        } // /**点击登录 */
        // onClickLogint() {
        //     let username = this.getEditBoxBoxstring(this.Login.children[0])
        //     let Password = this.getEditBoxBoxstring(this.Login.children[1])
        //     let data = {
        //         Username: username,
        //         Password: Password,
        //         IsForce: 0,
        //     }
        //     WebSocketMgr.send(MessageManager.Net.GameLoginRequest, data)
        // }
        // /**点击注册 */
        // onClickLogon() {
        //     let username = this.getEditBoxBoxstring(this.Logon.children[0])
        //     let Password = this.getEditBoxBoxstring(this.Logon.children[1])
        //     let data = {
        //         Username: username,
        //         Password: Password
        //     }
        //     WebSocketMgr.send(MessageManager.Net.GameRegisterRequest, data)
        // }

        /**前往注册或者登录 */
        // onClickGoToLogon(evet, string) {
        //     let IsGoToLogon = (string == "true")
        // }
        //----------------------新的---------------------------
        ;

        _proto.onClickAreaDropDown = function onClickAreaDropDown() {
          if (this.scrAllAreaCode.node.active) {
            this.scrAllAreaCode.node.active = false;
          } else {
            this.scrAllAreaCode.node.active = true;
          }
        };

        _proto.onClickSendVerificationCode = function onClickSendVerificationCode() {
          var _this2 = this;

          if ("" == this.edtPhoneNum.string) {
            TipManager.ChickBox(ConfigFile.findLanguage(120002));
            return;
          }

          var url = GameAllData.httpServerUrl + "user/verification";
          var params = {
            mobile_prefix: this.labAreaCode.string,
            mobile: this.edtPhoneNum.string,
            agent_id: GameAllData.channelId.toString(),
            operater_id: GameAllData.operatorId.toString(),
            language_id: GameAllData.languageId
          };
          HttpMgr.post(url, params, function (data) {
            console.log("onClickSendVerificationCode--->", data);
          });
          this.btnSendVerificationCode.interactable = false;
          var cdTime = 60;

          var func = function func() {
            cdTime--;

            if (cdTime < 1) {
              _this2.btnSendVerificationCode.interactable = true;
              _this2.btnSendVerificationCode.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120006);

              _this2.unschedule(func);

              return;
            }

            _this2.btnSendVerificationCode.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120014).format(cdTime);
          };

          this.schedule(func, 1);
        };

        _proto.onClickLogin = function onClickLogin() {
          if ("" == this.edtPhoneNum.string) {
            return;
          }

          if ("" == this.edtVerificationCode.string) {
            return;
          }

          var url = GameAllData.httpServerUrl + "user/login_mobile";
          var is_drop = 1;

          if (GameAllData.paramsUrl) {
            is_drop = 0;
          }

          var params = {
            mobile_prefix: this.labAreaCode.string,
            mobile: this.edtPhoneNum.string,
            code: this.edtVerificationCode.string,
            agent_id: GameAllData.channelId,
            operater_id: GameAllData.operatorId,
            invite_code: GameAllData.invitationCode,
            language_id: GameAllData.languageId,
            url: GameAllData.paramsUrl,
            is_drop: is_drop
          };
          EventManager.getInstance().trigger(MessageManager.Custom.RequestLogin, url, params);
          UIHelp.openLoadingTA();
        };

        _proto.onClickLoginTelegram = function onClickLoginTelegram() {
          PlatformUtil.loginThirdParty(EnumDefine.ThirdPartyName.Telegram);
        };

        _proto.onClickLoginFacebook = function onClickLoginFacebook() {
          PlatformUtil.loginThirdParty(EnumDefine.ThirdPartyName.Facebook);
        };

        _proto.onClickLoginGoogle = function onClickLoginGoogle() {
          PlatformUtil.loginThirdParty(EnumDefine.ThirdPartyName.GooglePlus);
        };

        _proto.onClickLoginTwitter = function onClickLoginTwitter() {
          PlatformUtil.loginThirdParty(EnumDefine.ThirdPartyName.Twitter);
        };

        _proto.onClickLoginLine = function onClickLoginLine() {
          PlatformUtil.loginThirdParty(EnumDefine.ThirdPartyName.Line);
        };

        _proto.onClickLoginMetaMask = function onClickLoginMetaMask() {};

        _proto.onEditEndedPhoneNum = function onEditEndedPhoneNum() {
          if (!NumberUtil.checkInt(this.edtPhoneNum.string) || Number(this.edtPhoneNum.string) <= 0) {
            this.edtPhoneNum.string = "";
            return;
          }
        };

        _proto.onEditEndedVerificationCode = function onEditEndedVerificationCode() {
          this.edtPhoneNum.enabled = true;

          if (!NumberUtil.checkInt(this.edtVerificationCode.string) || Number(this.edtVerificationCode.string) <= 0) {
            this.edtVerificationCode.string = "";
            return;
          }
        } //----------------------测试用-------------------------
        ;

        _proto.onClickShowOld = function onClickShowOld() {
          this.nodNew.active = false;
          WebSocketMgr.connect("ws://47.57.186.158:9001"); //外网
        };

        _proto.onClickSelectServer = function onClickSelectServer() {
          if (this.scrServerList.node.active) {
            this.scrServerList.node.active = false;
          } else {
            this.scrServerList.node.active = true;
          }
        };

        _proto.onClickServer = function onClickServer(event) {
          var _this3 = this;

          var url = "https://gameapifarm.mrmb.xyz/api/v1/";
          var node = event.target;

          switch (node.getChildByName("Label").getComponent(Label).string) {
            case "裘斯:9100":
              url = "http://192.168.100.81:9100/api/v1/";
              break;

            case "裘斯:9101":
              url = "http://192.168.100.81:9101/api/v1/";
              break;

            case "秀左:9100":
              url = "http://192.168.100.82:9100/api/v1/";
              break;

            case "秀左:9101":
              url = "http://192.168.100.82:9101/api/v1/";
              break;

            case "巴姆:9100":
              url = "http://192.168.100.83:9100/api/v1/";
              break;

            case "巴姆:9101":
              url = "http://192.168.100.83:9101/api/v1/";
              break;
          }

          GameAllData.httpServerUrl = url;
          this.onClickSendVerificationCode();
          this.scheduleOnce(function () {
            _this3.onClickLogin();
          }, 1);
        } //--------------------------------------------------

        /**得到输入 */
        ;

        _proto.getEditBoxBoxstring = function getEditBoxBoxstring(node) {
          return node.getChildByName("EditBox").getComponent(EditBox).string;
        }
        /**检查密码格式*/
        ;

        _proto.checkPassword = function checkPassword(form) {
          if (re.test(form) && form.length >= 8 && form.length <= 16) return true;
          return false;
        }
        /**检查账号格式*/
        ;

        _proto.checkEmailOrPhone = function checkEmailOrPhone(form) {
          if (form.length >= 7 && form.length <= 20) return true;
          return false;
        } // 初始化默认和所有国家区号
        ;

        _proto.initAllAreaCode = function initAllAreaCode() {
          var _this4 = this; // this.scrAllAreaCode.node.active = true;


          this.scrAllAreaCode.content.removeAllChildren();
          AreaCodeConfig.sort(function (a, b) {
            return Number(a.codeNumber) - Number(b.codeNumber);
          });
          this.searchEditBox.placeholder = ConfigFile.findLanguage(8018);
          var areaCode = AreaCodeConfig.find(function (v) {
            return GameAllData.languageId === v.language_id;
          });
          this.labAreaCode.string = "+" + (areaCode ? areaCode.codeNumber : AreaCodeConfig[0].codeNumber);
          AreaCodeConfig.forEach(function (v) {
            var nodAreaCodeItem = instantiate(_this4.pfbAreaCodeItem);
            nodAreaCodeItem.parent = _this4.scrAllAreaCode.content;
            var srtAreaCodeItem = nodAreaCodeItem.getComponent(AreaCodeItem);
            srtAreaCodeItem.data = v;
          });
        };

        _proto.onInputChange = function onInputChange() {
          var _this5 = this;

          var str = this.searchEditBox.string;

          if (str != "") {
            this.scrAllAreaCode.content.removeAllChildren();

            if (Number(str)) {
              AreaCodeConfig.forEach(function (v) {
                var phoneNum = Number(v.codeNumber.substr(0, str.length));

                if (phoneNum == Number(str)) {
                  var nodAreaCodeItem = instantiate(_this5.pfbAreaCodeItem);
                  nodAreaCodeItem.parent = _this5.scrAllAreaCode.content;
                  var srtAreaCodeItem = nodAreaCodeItem.getComponent(AreaCodeItem);
                  srtAreaCodeItem.data = v;
                }
              });
            } else {
              AreaCodeConfig.forEach(function (v) {
                // if(v.Countryname.toLowerCase()==str.toLowerCase()) {
                //     this.onFind(str)
                // }
                var countStr = v.Countryname.substr(0, str.length);

                if (countStr.toLowerCase() == str.toLowerCase()) {
                  // this.onFind(str)
                  var nodAreaCodeItem = instantiate(_this5.pfbAreaCodeItem);
                  nodAreaCodeItem.parent = _this5.scrAllAreaCode.content;
                  var srtAreaCodeItem = nodAreaCodeItem.getComponent(AreaCodeItem);
                  srtAreaCodeItem.data = v;
                }
              });
            }
          } else {
            this.initAllAreaCode();
          } // let length = this.scrAllAreaCode.content.children.length;
          // let list = this.scrAllAreaCode.content.children;
          // let cell: any;
          // for (var i = 0; i < length; i++) {
          //     cell = list[i];
          //     let countStr = cell.data.Countryname.substr(1,str.length);
          //     if(countStr.toLowerCase() == str.toLowerCase())
          //     {
          //         // this.onFind(str)
          //         // const nodAreaCodeItem = instantiate(this.pfbAreaCodeItem);
          //         // nodAreaCodeItem.parent = this.scrAllAreaCode.content;
          //         // const srtAreaCodeItem = nodAreaCodeItem.getComponent(AreaCodeItem);
          //         // srtAreaCodeItem.data = v;
          //     }else{
          //         this.scrAllAreaCode.content.removeChild(cell);
          //     }
          // }

        };

        _proto.onFind = function onFind(str) {
          var _this6 = this;

          this.scrAllAreaCode.content.removeAllChildren();
          AreaCodeConfig.forEach(function (v) {
            if (v.Countryname.toLowerCase() == str.toLowerCase()) {
              var nodAreaCodeItem = instantiate(_this6.pfbAreaCodeItem);
              nodAreaCodeItem.parent = _this6.scrAllAreaCode.content;
              var srtAreaCodeItem = nodAreaCodeItem.getComponent(AreaCodeItem);
              srtAreaCodeItem.data = v;
            }
          });
        };

        _proto.initQuickLogin = function initQuickLogin() {
          if (sys.isNative) {
            this.btnMetaMask.node.active = false;
          }
        };

        _proto.initLabel = function initLabel() {
          this.labPhone.string = ConfigFile.findLanguage(120011);
          this.edtPhoneNum.placeholder = ConfigFile.findLanguage(120001);
          this.edtVerificationCode.placeholder = ConfigFile.findLanguage(120002);
          this.btnLogin.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120009);
          this.labQuickLogin.string = ConfigFile.findLanguage(120008);
          this.btnSendVerificationCode.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120006);
          this.labEmail.string = ConfigFile.findLanguage(8069);
          this.edtEmailNum.placeholder = ConfigFile.findLanguage(8021);
          this.edtEmailCode.placeholder = ConfigFile.findLanguage(8023);
          this.btnSendEmailCode.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120006);
          this.btnEmailLogin.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120009);
          this.labEmailBand.string = ConfigFile.findLanguage(8069);
          this.edtEmailBandNum.placeholder = ConfigFile.findLanguage(8021);
          this.edtEmailBandCode.placeholder = ConfigFile.findLanguage(8023);
          this.btnSendEmailBandCode.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120006);
        };

        _proto.edtVerificationCodeChange = function edtVerificationCodeChange() {
          this.edtPhoneNum.enabled = false;
        };

        _proto.onclickedButtonBack = function onclickedButtonBack() {
          if (this.email.active) {
            this.email.active = false;
            this.oldLogin.active = true;
            this.buttonBack.getChildByName("back").active = true;
            this.buttonBack.getChildByName("old").active = false;
          } else {
            this.email.active = true;
            this.oldLogin.active = false;
            this.buttonBack.getChildByName("back").active = false;
            this.buttonBack.getChildByName("old").active = true;
          }
        };

        _proto.onClickSendEmailCode = function onClickSendEmailCode() {
          var _this7 = this;

          if ("" == this.edtEmailNum.string) {
            TipManager.ChickBox(ConfigFile.findLanguage(8021));
            return;
          }

          var url = GameAllData.httpServerUrl + "user/email/verification";
          var params = {
            email: this.edtEmailNum.string,
            agent_id: GameAllData.channelId.toString(),
            operater_id: GameAllData.operatorId.toString(),
            language_id: GameAllData.languageId,
            type: "mailLogin"
          };
          HttpMgr.post(url, params, function (data) {
            console.log("onClickSendEmailCode--user/email/verification--->", data);

            if (0 != data.code) {
              TipManager.ChickBox(ConfigFile.findLanguage(data.code));
              return;
            }
          });
          this.btnSendEmailCode.interactable = false;
          var cdTime = 60;

          var func = function func() {
            cdTime--;

            if (cdTime < 1) {
              _this7.btnSendEmailCode.interactable = true;
              _this7.btnSendEmailCode.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120006);

              _this7.unschedule(func);

              return;
            }

            _this7.btnSendEmailCode.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120014).format(cdTime);
          };

          this.schedule(func, 1);
        };

        _proto.onClickLoginEmail = function onClickLoginEmail() {
          if ("" == this.edtEmailNum.string) {
            TipManager.ChickBox(ConfigFile.findLanguage(8021));
            return;
          }

          if ("" == this.edtEmailCode.string) {
            TipManager.ChickBox(ConfigFile.findLanguage(120002));
            return;
          }

          var url = GameAllData.httpServerUrl + "user/login_email";
          var is_drop = 1;

          if (GameAllData.paramsUrl) {
            is_drop = 0;
          }

          var params = {
            code: this.edtEmailCode.string,
            email: this.edtEmailNum.string,
            agent_id: GameAllData.channelId,
            operater_id: GameAllData.operatorId,
            language_id: GameAllData.languageId,
            url: GameAllData.paramsUrl,
            is_drop: is_drop
          };
          EventManager.getInstance().trigger(MessageManager.Custom.RequestLogin, url, params);
          UIHelp.openLoadingTA();
        } //发送邮箱验证码
        ;

        _proto.onClickSendEmailBandCode = function onClickSendEmailBandCode() {
          var _this8 = this;

          if (this.edtEmailBandNum.string == "") {
            TipManager.ChickBox(ConfigFile.findLanguage(8021));
            return;
          }

          var url = GameAllData.httpServerUrl + "user/email/verification";
          var params = {
            email: this.edtEmailBandNum.string,
            agent_id: GameAllData.channelId.toString(),
            operater_id: GameAllData.operatorId.toString(),
            language_id: GameAllData.languageId,
            type: "mailLogin"
          };
          HttpMgr.post(url, params, function (data) {
            console.log("onClickSendEmailCode--user/email/verification--->", data);

            if (0 != data.code) {
              TipManager.ChickBox(ConfigFile.findLanguage(data.code));
              return;
            }
          });
          this.btnSendEmailBandCode.interactable = false;
          var cdTime = 60;

          var func = function func() {
            cdTime--;

            if (cdTime < 1) {
              _this8.btnSendEmailBandCode.interactable = true;
              _this8.btnSendEmailBandCode.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120006);

              _this8.unschedule(func);

              return;
            }

            _this8.btnSendEmailBandCode.node.getChildByName("Label").getComponent(Label).string = ConfigFile.findLanguage(120014).format(cdTime);
          };

          this.schedule(func, 1);
        };

        _proto.onClickLoginBandEmail = function onClickLoginBandEmail() {
          if ("" == this.edtPhoneNum.string) {
            TipManager.ChickBox(ConfigFile.findLanguage(120001));
            return;
          }

          if ("" == this.edtVerificationCode.string) {
            TipManager.ChickBox(ConfigFile.findLanguage(120002));
            return;
          }

          if ("" == this.edtEmailBandNum.string) {
            TipManager.ChickBox(ConfigFile.findLanguage(8021));
            return;
          }

          if ("" == this.edtEmailBandCode.string) {
            TipManager.ChickBox(ConfigFile.findLanguage(120002));
            return;
          }

          var url = GameAllData.httpServerUrl + "user/change/login_email";
          var params = {
            mobile_prefix: this.labAreaCode.string,
            mobile: this.edtPhoneNum.string,
            code: this.edtVerificationCode.string,
            email_code: this.edtEmailBandCode.string,
            email: this.edtEmailBandNum.string,
            agent_id: GameAllData.channelId,
            operater_id: GameAllData.operatorId
          };
          EventManager.getInstance().trigger(MessageManager.Custom.RequestLogin, url, params);
          UIHelp.openLoadingTA();
        };

        return UILogin;
      }(BaseUI), _class3.className = "UILogin", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "scrServerList", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "nodNew", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "bgAnimation", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "labPhone", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "labAreaCode", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "scrAllAreaCode", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "edtPhoneNum", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "edtVerificationCode", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "btnSendVerificationCode", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "btnLogin", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "btnMetaMask", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "labQuickLogin", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "pfbAreaCodeItem", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "uiID", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "searchEditBox", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "labVersion", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "Manifest", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "skNode", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "bgSprite", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "oldLogin", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "email", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "labEmail", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "edtEmailNum", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "edtEmailCode", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "btnSendEmailCode", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "btnEmailLogin", [_dec27], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor27 = _applyDecoratedDescriptor(_class2.prototype, "labEmailBand", [_dec28], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor28 = _applyDecoratedDescriptor(_class2.prototype, "edtEmailBandNum", [_dec29], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor29 = _applyDecoratedDescriptor(_class2.prototype, "edtEmailBandCode", [_dec30], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor30 = _applyDecoratedDescriptor(_class2.prototype, "btnSendEmailBandCode", [_dec31], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor31 = _applyDecoratedDescriptor(_class2.prototype, "buttonBack", [_dec32], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIManager.ts", ['cc', './GameAllData.ts', './LoadingLiteView.ts', './TaskManager.ts'], function (exports) {
  'use strict';

  var cclegacy, sys, resources, log, instantiate, find, GameAllData, LoadingLiteView, TaskManager;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      resources = module.resources;
      log = module.log;
      instantiate = module.instantiate;
      find = module.find;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      LoadingLiteView = module.LoadingLiteView;
    }, function (module) {
      TaskManager = module.TaskManager;
    }],
    execute: function () {
      cclegacy._RF.push({}, "fcb706mngZPXIeAjofYaIuT", "UIManager", undefined);

      var UIManager = exports('UIManager', /*#__PURE__*/function () {
        UIManager.getInstance = function getInstance() {
          if (this.instance == null) {
            this.instance = new UIManager();
          }

          return this.instance;
        };

        function UIManager() {
          this.uiList = [];
          this.uiRoot = null;
          this.uiRoot = find("Canvas");
        }

        var _proto = UIManager.prototype;

        _proto.openUI = function openUI(uiClass, zOrder, callback, onProgress, args, isNotShowLoading) {
          var _this = this;

          if (isNotShowLoading || sys.isNative) {
            this._openUI(uiClass, zOrder, callback, onProgress, args);
          } else {
            this._openUI(LoadingLiteView, 100, function (ui, args) {
              _this._openUI(uiClass, zOrder, function (_ui, _args) {
                _this.closeUI(LoadingLiteView);

                if (callback) {
                  callback(_ui, _args);
                }
              }, function (completedCount, totalCount, item) {
                ui.progressBar && (ui.progressBar.progress = completedCount / totalCount);
              }, args);
            });
          }
        };

        _proto._openUI = function _openUI(uiClass, zOrder, callback, onProgress, args) {
          var _this2 = this;

          if (this.getUI(uiClass) && this.getUI(uiClass).tag.getclassName() != "LoadingLiteView") {
            this.closeUI(LoadingLiteView);
            return;
          }

          if (TaskManager.getInstance().moveLock) return; //测试者账号 

          if (GameAllData.IsAccountTypeIsTest) {
            if (uiClass && uiClass.className && uiClass.className == "InvitationCodeView") {
              this.closeUI(LoadingLiteView);
              return;
            }
          }

          resources.load(uiClass.getUrl(), function (completedCount, totalCount, item) {
            if (onProgress) {
              onProgress(completedCount, totalCount, item);
            }
          }, function (error, prefab) {
            if (error) {
              log(error);
              return;
            }

            if (_this2.getUI(uiClass)) {
              return;
            }

            var uiNode = instantiate(prefab);
            uiNode.parent = _this2.uiRoot;
            uiNode.setSiblingIndex(zOrder);
            var ui = uiNode.getComponent(uiClass);
            ui.tag = uiClass;

            _this2.uiList.push(ui);

            TaskManager.getInstance().onWindowsOpen(uiClass.className);

            if (callback) {
              callback(ui, args);
            }
          });
        };

        _proto.forceOpenUI = function forceOpenUI(uiClass, zOrder, callback, onProgress, args) {
          if (this.getUI(uiClass)) {
            this.closeUI(uiClass);
          }

          this.openUI(uiClass, zOrder, callback, onProgress, args);
        };

        _proto.closeUI = function closeUI(uiClass) {
          for (var i = 0; i < this.uiList.length; ++i) {
            if (this.uiList[i].tag === uiClass) {
              TaskManager.getInstance().onWindowsClose(uiClass.className);
              this.uiList[i].node.destroy();
              this.uiList.splice(i, 1);
              return;
            }
          }
        };

        _proto.closeBasePanel = function closeBasePanel(uiClass) {
          for (var i = 0; i < this.uiList.length; ++i) {
            if (this.uiList[i].tag === uiClass) {
              if (this.uiList[i].onClickedClose) this.uiList[i].onClickedClose(false);else {
                TaskManager.getInstance().onWindowsClose(uiClass.className);
                this.uiList[i].node.destroy();
                this.uiList.splice(0, 1);
              }
            }
          }
        };

        _proto.closeUIFromName = function closeUIFromName(classname) {
          for (var i = 0; i < this.uiList.length; ++i) {
            if (this.uiList[i].tag.getclassName() === classname) {
              this.uiList[i].node.destroy();
              this.uiList.splice(i, 1);
              return;
            }
          }
        };

        _proto.showUI = function showUI(uiClass, callback) {
          var _this3 = this;

          var ui = this.getUI(uiClass);

          if (ui) {
            ui.node.active = true;
            ui.onShow();
            callback && callback(ui);
          } else {
            this.openUI(uiClass, 0, function () {
              var ui = _this3.getUI(uiClass);

              ui.onShow();
              callback && callback(ui);
            });
          }
        };

        _proto.hideUI = function hideUI(uiClass) {
          var ui = this.getUI(uiClass);

          if (ui) {
            ui.node.active = false;
          }
        };

        _proto.getUIFromName = function getUIFromName(classname) {
          for (var i = 0; i < this.uiList.length; ++i) {
            if (this.uiList[i].tag.getclassName() === classname) {
              return this.uiList[i];
            }
          }

          return null;
        };

        _proto.getUI = function getUI(uiClass) {
          for (var i = 0; i < this.uiList.length; ++i) {
            if (this.uiList[i].tag === uiClass) {
              return this.uiList[i];
            }
          }

          return null;
        };

        _proto.closeAllUI = function closeAllUI() {
          while (this.uiList.length >= 1) {
            var ui = this.uiList[0];
            if (ui.onClickedClose) ui.onClickedClose(false);else {
              TaskManager.getInstance().onWindowsClose(ui.className);
              ui.node.destroy();
              this.uiList.splice(0, 1);
            }
          }
        } // 获取已打开的ui个数，除去uigame和uistory
        ;

        _proto.getUiListNumExceptUIgame = function getUiListNumExceptUIgame() {
          var leng = 0;

          for (var i = 0; i < this.uiList.length; ++i) {
            if (this.uiList[i] && this.uiList[i].tag && this.uiList[i].tag.getclassName) {
              if (this.uiList[i].tag.getclassName() != "UIStory" && this.uiList[i].tag.getclassName() != "UIGame" && this.uiList[i].tag.getclassName() != "TipsUI" && this.uiList[i].tag.getclassName() != "FamilyView") {
                leng++;
              }
            }
          }

          return leng;
        };

        _proto.closeAllUINew = function closeAllUINew() {
          // while (this.uiList.length >= 1) {
          //     let ui = this.uiList[0];
          //     if(ui.tag.getclassName() != "UIStory" && ui.tag.getclassName() != "UIGame")
          //     {
          //         if ((ui as BasePanel).onClickedClose)
          //             (ui as BasePanel).onClickedClose(false)
          //         else {
          //             TaskManager.getInstance().onWindowsClose(ui.tag.getclassName());
          //             ui.node.destroy();
          //             this.uiList.splice(0, 1);
          //         }
          //     }
          // }
          for (var i = this.uiList.length - 1; i > 0; --i) {
            if (this.uiList[i].tag.getclassName() != "UIStory" && this.uiList[i].tag.getclassName() != "UIGame" && this.uiList[i].tag.getclassName() != "TipsUI") {
              var ui = this.uiList[i];
              if (ui.onClickedClose) ui.onClickedClose(false);else {
                TaskManager.getInstance().onWindowsClose(ui.tag.getclassName());
                ui.node.destroy();
                this.uiList.splice(0, 1);
              }
            }
          }
        };

        return UIManager;
      }());
      UIManager.instance = void 0;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UINotice.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstLanguage.ts', './EnumDefine.ts', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './WebSocketMgr.ts', './NodeHelp.ts', './Pool.ts', './TweenHelp.ts', './UIHelp.ts', './BasePanel.ts', './BagUIItemTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Node, Toggle, ScrollView, instantiate, Input, UIOpacity, Label, ConstLanguage, EnumDefine, ConfigFile, GameAllData, EventManager, MessageManager, WebSocketMgr, NodeHelp, PoolOnce, TweenHelper, ETweenType, UIHelp, BasePanel, BagUIItemTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      Toggle = module.Toggle;
      ScrollView = module.ScrollView;
      instantiate = module.instantiate;
      Input = module.Input;
      UIOpacity = module.UIOpacity;
      Label = module.Label;
    }, function (module) {
      ConstLanguage = module.ConstLanguage;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      TweenHelper = module.TweenHelper;
      ETweenType = module.ETweenType;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      BasePanel = module.BasePanel;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _class3;

      cclegacy._RF.push({}, "515d5RuwNBGJLpucSKlKIQZ", "UINotice", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UINotice = exports('UINotice', (_dec = ccclass('UINotice'), _dec2 = property({
        type: Prefab,
        displayName: "list模板"
      }), _dec3 = property({
        type: Node,
        displayName: "面板"
      }), _dec4 = property({
        type: Toggle,
        displayName: "公告按钮"
      }), _dec5 = property({
        type: Toggle,
        displayName: "邮件按钮"
      }), _dec6 = property({
        type: Node,
        displayName: "邮件内容面板"
      }), _dec7 = property({
        type: ScrollView,
        displayName: "邮件列表"
      }), _dec8 = property({
        type: ScrollView,
        displayName: "公告列表"
      }), _dec9 = property({
        type: ScrollView,
        displayName: "PanelContentScrollView"
      }), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BasePanel) {
        _inheritsLoose(UINotice, _BasePanel);

        function UINotice() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePanel.call.apply(_BasePanel, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "item", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "panel", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "toggleNotice", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "toggleMail", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "panelContent", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listEail", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listNotice", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "PanelContentScrollView", _descriptor8, _assertThisInitialized(_this));

          _this.Pool = new PoolOnce(30, function () {
            return instantiate(_this.item);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          _this.addOver = true;
          _this.eail = null;
          _this.eailType = EnumDefine.NoticeEailType.Notice;
          _this.itemComponents = [];
          _this.fistOpen = false;
          return _this;
        }

        var _proto = UINotice.prototype;

        _proto.start = function start() {
          EventManager.getInstance().add(MessageManager.Custom.FarmMailList, this, this.onFarmMailList);
          EventManager.getInstance().add(MessageManager.Custom.FarmMailGetRes, this, this.onFarmMailGetRes);
          this.node.getChildByName("Panel").on(Input.EventType.TOUCH_START, this.onCloseTip, this);
          this.listEail.node.on(Input.EventType.TOUCH_START, this.onCloseTip, this);
          this.listEail.node.on(ScrollView.EventType.SCROLL_BEGAN, this.onCloseTip, this);
          this.listNotice.node.on(Input.EventType.TOUCH_START, this.onCloseTip, this);
          this.listNotice.node.on(ScrollView.EventType.SCROLL_BEGAN, this.onCloseTip, this);
          this.PanelContentScrollView.node.on(Input.EventType.TOUCH_START, this.onCloseTip, this);
          this.PanelContentScrollView.node.on(ScrollView.EventType.SCROLL_BEGAN, this.onCloseTip, this);
          this.setContentShow();
          this.setTextShow();
          this.setToggleShow();
          this.setListItems();
          this.setListShow();
          this.node.getComponent("PlayButtonSound").play();
          TweenHelper["default"](this.node.getChildByName("Panel"), ETweenType.Jelly);
          TweenHelper.getTween(this.node.getChildByName("Mask").getComponent(UIOpacity), "open", function (_tween) {
            var sartOpacity = 0;
            var opacity = 150;

            _tween.to(0, {
              opacity: sartOpacity
            }).to(0.1, {
              opacity: opacity
            });
          }).start();
        };

        _proto.onDisable = function onDisable() {
          this.node.getChildByName("Panel").off(Input.EventType.TOUCH_START, this.onCloseTip, this);
          this.listEail.node.off(Input.EventType.TOUCH_START, this.onCloseTip, this);
          this.listEail.node.on(ScrollView.EventType.SCROLL_BEGAN, this.onCloseTip, this);
          this.listNotice.node.off(Input.EventType.TOUCH_START, this.onCloseTip, this);
          this.listNotice.node.off(ScrollView.EventType.SCROLL_BEGAN, this.onCloseTip, this);
          this.PanelContentScrollView.node.off(Input.EventType.TOUCH_END, this.onCloseTip, this);
          this.PanelContentScrollView.node.off(ScrollView.EventType.SCROLL_BEGAN, this.onCloseTip, this);
        };

        _proto.onDestroy = function onDestroy() {
          _BasePanel.prototype.onDestroy.call(this);
        };

        _proto.onFarmMailList = function onFarmMailList() {
          this.setContentShow();
          this.listEmpty();
          this.setListItems();
          this.setListShow();
        } //领取返回
        ;

        _proto.onFarmMailGetRes = function onFarmMailGetRes(data) {
          if (!data) {
            return;
          }

          for (var i = 0; i < this.itemComponents.length; i++) {
            if (this.itemComponents[i].mailInfo.ID == data.ID) {
              this.itemComponents[i].mailInfo = data;
              this.itemComponents[i].init(this.itemComponents[i].mailInfo, this);
              this.itemComponents[i].onClick();
            }
          }
        } //得到邮件数据
        ;

        _proto.setContentShow = function setContentShow() {
          this.eail = null;

          if (GameAllData.FarmMailListResponse && GameAllData.FarmMailListResponse.Mails && GameAllData.FarmMailListResponse.Mails.length > 0) {
            this.eail = GameAllData.FarmMailListResponse.Mails;
            this.eailTranslate();
          }
        } //设置列表的显示
        ;

        _proto.setListShow = function setListShow() {
          var _this2 = this;

          if (!this.eail || this.eail.length < 0) {
            this.listNotice.node.active = false;
            this.listEail.node.active = false;
            this.panelContent.active = false;
            NodeHelp.getchildlable(this.panel, "NotHave", Label, function (comp) {
              if ((_this2.eailType & EnumDefine.NoticeEailType.Notice) != 0) comp.string = ConfigFile.findLanguage(ConstLanguage.NOTICE_PANEL_NOTHAVE1);else comp.string = ConfigFile.findLanguage(ConstLanguage.NOTICE_PANEL_NOTHAVE2);
            });
            NodeHelp.getchildlable(this.panel, "NotHave", null, function (comp, node) {
              node.active = true;
            });
            NodeHelp.getchildlable(this.panel, "ButtonQuickReceive", null, function (comp, node) {
              node.active = false;
            });
            NodeHelp.getchildlable(this.panel, "ButtonQuickDelete", null, function (comp, node) {
              node.active = false;
            });
            return;
          }

          NodeHelp.getchildlable(this.panel, "NotHave", null, function (comp, node) {
            node.active = false;
          });
          NodeHelp.getchildlable(this.panel, "ButtonQuickReceive", null, function (comp, node) {
            node.active = (_this2.eailType & EnumDefine.NoticeEailType.Eail) != 0;
          });
          NodeHelp.getchildlable(this.panel, "ButtonQuickDelete", null, function (comp, node) {
            node.active = true;
          });
          this.panelContent.active = true;
          this.listEail.node.active = (this.eailType & EnumDefine.NoticeEailType.Eail) != 0;
          this.listNotice.node.active = (this.eailType & EnumDefine.NoticeEailType.Notice) != 0;
        } //添加列表item
        ;

        _proto.setListItems = function setListItems() {
          var _this3 = this;

          if (!this.eail || this.eail.length < 0) {
            return;
          }

          var index = 0;

          var currentFunc = function currentFunc() {
            _this3.addOver = false;

            if (index > _this3.eail.length - 1) {
              _this3.unschedule(currentFunc);

              _this3.listTranslate();

              _this3.addOver = true;
              return;
            }

            var itemData = _this3.eail[index];
            var list = _this3.listEail;

            if ((itemData.MailType & EnumDefine.NoticeEailType.Notice) != 0) {
              list = _this3.listNotice;

              var item = _this3.Pool.get();

              list.content.addChild(item);
              item.setSiblingIndex(index);
              var itemComponent = item.getComponent("UINoticeItem");

              _this3.itemComponents.push(itemComponent);

              itemComponent.init(itemData, _this3);

              _this3.setFistOpen();
            }

            if ((itemData.MailType & EnumDefine.NoticeEailType.Eail) != 0) {
              list = _this3.listEail;

              var _item = _this3.Pool.get();

              list.content.addChild(_item);

              _item.setSiblingIndex(index);

              var _itemComponent = _item.getComponent("UINoticeItem");

              _this3.itemComponents.push(_itemComponent);

              _itemComponent.init(itemData, _this3);

              _this3.setFistOpen();
            }

            index++;
          };

          this.schedule(currentFunc, 0);
        };

        _proto.setFistOpen = function setFistOpen() {
          var _this4 = this;

          if (!this.fistOpen) {
            var item = this.itemComponents.find(function (v) {
              if ((v.mailInfo.MailType & _this4.eailType) != 0) {
                v.onClick();
                _this4.fistOpen = true;
                return true;
              }
            });

            if (!item) {
              this.panelContent.active = false;
              NodeHelp.getchildlable(this.panel, "NotHave", null, function (comp, node) {
                node.active = true;
              });
              NodeHelp.getchildlable(this.panel, "ButtonQuickReceive", null, function (comp, node) {
                node.active = false;
              });
              NodeHelp.getchildlable(this.panel, "ButtonQuickDelete", null, function (comp, node) {
                node.active = false;
              });
              NodeHelp.getchildlable(this.panel, "NotHave", Label, function (comp) {
                if ((_this4.eailType & EnumDefine.NoticeEailType.Notice) != 0) comp.string = ConfigFile.findLanguage(ConstLanguage.NOTICE_PANEL_NOTHAVE1);else comp.string = ConfigFile.findLanguage(ConstLanguage.NOTICE_PANEL_NOTHAVE2);
              });
            } else {
              NodeHelp.getchildlable(this.panel, "NotHave", null, function (comp, node) {
                node.active = false;
              });
              NodeHelp.getchildlable(this.panel, "ButtonQuickReceive", null, function (comp, node) {
                node.active = (_this4.eailType & EnumDefine.NoticeEailType.Eail) != 0;
              });
              NodeHelp.getchildlable(this.panel, "ButtonQuickDelete", null, function (comp, node) {
                node.active = true;
              });
            }
          }
        };

        _proto.eailTranslate = function eailTranslate() {
          var i = this.eail.length,
              j;
          var tempExchangVal;

          while (i > 0) {
            for (j = 0; j < i - 1; j++) {
              if (this.eail[j].SendTime < this.eail[j + 1].SendTime) {
                tempExchangVal = this.eail[j];
                this.eail[j] = this.eail[j + 1];
                this.eail[j + 1] = tempExchangVal;
              }
            }

            i--;
          }
        };

        _proto.listTranslate = function listTranslate() {
          var arr = this.itemComponents;
          var i = arr.length,
              j;
          var tempExchangVal;

          while (i > 0) {
            for (j = 0; j < i - 1; j++) {
              if (arr[j].mailInfo.SendTime < arr[j + 1].mailInfo.SendTime) {
                tempExchangVal = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = tempExchangVal;
              }
            }

            i--;
          }

          for (var _i = 0; _i < arr.length; _i++) {
            arr[_i].node.setSiblingIndex(_i);
          }
        };

        _proto.listEmpty = function listEmpty() {
          if (this.addOver == false) {
            this.unscheduleAllCallbacks();
          }

          while (this.itemComponents.length > 0) {
            this.Pool.put(this.itemComponents.shift().node);
          }

          this.panelContent.getComponent("PanelContent").nowItem = null;
          this.fistOpen = false;
        };

        _proto.setOpenShow = function setOpenShow(item) {
          if (item) {
            this.panelContent.active = true;
            this.panelContent.getComponent("PanelContent").setShow(item);
          }
        } //设置按钮显示
        ;

        _proto.setToggleShow = function setToggleShow() {
          this.toggleNotice.isChecked = (this.eailType & EnumDefine.NoticeEailType.Notice) != 0;
        } //界面文字显示
        ;

        _proto.setTextShow = function setTextShow() {
          NodeHelp.getchildlable(this.toggleNotice.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.NOTICE_PANEL_BUTTON1);
          });
          NodeHelp.getchildlable(this.toggleNotice.checkMark.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.NOTICE_PANEL_BUTTON1);
          });
          NodeHelp.getchildlable(this.toggleMail.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.NOTICE_PANEL_BUTTON2);
          });
          NodeHelp.getchildlable(this.toggleMail.checkMark.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.NOTICE_PANEL_BUTTON2);
          });
          NodeHelp.getchildlable(this.panel, "ButtonQuickReceive", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.NOTICE_PANEL_BUTTON3);
          });
          NodeHelp.getchildlable(this.panel, "ButtonQuickDelete", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(ConstLanguage.NOTICE_PANEL_BUTTON4);
          });
        };

        _proto.onClickNotice = function onClickNotice() {
          this.onCloseTip();
          this.eailType = EnumDefine.NoticeEailType.Notice;
          this.fistOpen = false;
          this.setListShow();
          this.setFistOpen();
        };

        _proto.onClickEail = function onClickEail() {
          this.onCloseTip();
          this.eailType = EnumDefine.NoticeEailType.Eail;
          this.fistOpen = false;
          this.setListShow();
          this.setFistOpen();
        };

        _proto.onClickedClose = function onClickedClose(anction) {
          if (anction === void 0) {
            anction = true;
          }

          _BasePanel.prototype.onClickedClose.call(this, anction);

          BagUIItemTip.getInstance().tipDestroy();
          this.node.getChildByName("Mask").getComponent(UIOpacity).opacity = 0;
          this.listEmpty();
          this.Pool.clear();
          EventManager.getInstance().remove(MessageManager.Custom.FarmMailList, this, this.onFarmMailList);
        };

        _proto.onClickQuickReceive = function onClickQuickReceive(event) {
          var _this5 = this;

          this.onCloseTip();
          if (!this.eail) return;
          var data = {
            ID: []
          };
          this.eail.forEach(function (v) {
            if ((v.MailType & _this5.eailType) != 0) {
              data.ID.push(v.ID);
            }
          });
          var node = event.target;
          UIHelp.openLoadingTA();
          WebSocketMgr.send(MessageManager.Net.FarmMailReceiveRequest, data);
        };

        _proto.onClickQuickDelete = function onClickQuickDelete() {
          var _this6 = this;

          this.onCloseTip();
          if (!this.eail) return;
          var data = {
            ID: []
          };
          this.eail.forEach(function (v) {
            if ((v.MailType & _this6.eailType) != 0) {
              data.ID.push(v.ID);
            }
          });
          WebSocketMgr.send(MessageManager.Net.FarmMailDeleteRequest, data);
        };

        _proto.onCloseTip = function onCloseTip() {
          BagUIItemTip.getInstance().closeTip();
        };

        return UINotice;
      }(BasePanel), _class3.className = "UINotice", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "item", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "panel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "toggleNotice", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "toggleMail", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "panelContent", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "listEail", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "listNotice", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "PanelContentScrollView", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UINoticeItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './NodeHelp.ts', './BagUIItemTip.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, Component, ConfigFile, NodeHelp, BagUIItemTip;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "c97ffEIlKxKBpJ15v2ul0KV", "UINoticeItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UINoticeItem = exports('UINoticeItem', (_dec = ccclass('UINoticeItem'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UINoticeItem, _Component);

        function UINoticeItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.uiNotice = null;
          _this.mailInfo = null;
          return _this;
        }

        var _proto = UINoticeItem.prototype;

        _proto.init = function init(data, uiNotice) {
          var _this2 = this;

          this.mailInfo = data;
          this.uiNotice = uiNotice; //设置红点显示

          NodeHelp.getchildlable(this.node, "redDot", "redDot", function (comp) {
            comp.setName("UINotice", _this2.mailInfo.ID);
          }); //设置读取的显示

          NodeHelp.getchildlable(this.node, "iconBG", "SwitchChildrenCC", function (comp, node) {
            comp.index = _this2.mailInfo.MailState;
          }); //设置GiftIcon显示

          NodeHelp.getchildlable(this.node, "GiftIcon", null, function (comp, node) {
            if (_this2.mailInfo.Items && _this2.mailInfo.Items.length > 0 && _this2.mailInfo.MailReceiveState == 0) node.active = true;else node.active = false;
          }); //标题显示

          var MailTitle = "";

          switch (data.MailTitleType) {
            case "string":
              {
                MailTitle = data.MailTitle;
                break;
              }

            case "i18n":
              {
                MailTitle += ConfigFile.findLanguage(Number(data.MailTitle));
                break;
              }
          }

          if (MailTitle && MailTitle.length) {
            var text = MailTitle;

            if (data.MailTitleParam && data.MailTitleParam.length && data.MailTitleParam.length % 2 == 0) {
              for (var index = 0; index < data.MailTitleParam.length; index += 2) {
                var Type = data.MailTitleParam[index];
                var param = data.MailTitleParam[index + 1];

                switch (Type) {
                  case "string":
                    {
                      text.format(param);
                      break;
                    }

                  case "i18n":
                    {
                      text.format(ConfigFile.findLanguage(Number(param)));
                      break;
                    }
                }
              }
            }

            NodeHelp.getchildlable(this.node, "LabelTitle", Label, function (comp) {
              comp.string = text;
            });
          } else {
            NodeHelp.getchildlable(this.node, "LabelTitle", Label, function (comp) {
              comp.string = "";
            });
          } //时间显示


          var date = new Date(this.mailInfo.SendTime * 1000);
          var year = date.getFullYear() + "";
          var month = date.getMonth() + 1 + "";
          var day = date.getDate() + "";
          NodeHelp.getchildlable(this.node, "LabelTime", Label, function (comp) {
            comp.string = month + "/" + day + "/" + year;
          });
          NodeHelp.getchildlable(this.node, "BGClick", null, function (comp, node) {
            node.active = false;
          });
        };

        _proto.onClick = function onClick() {
          BagUIItemTip.getInstance().closeTip();

          if (this.uiNotice) {
            this.uiNotice.setOpenShow(this);
          }

          NodeHelp.getchildlable(this.node, "BGClick", null, function (comp, node) {
            node.active = true;
          });
          NodeHelp.getchildlable(this.node, "iconBG", "SwitchChildrenCC", function (comp, node) {
            comp.index = 1;
          });
        };

        _proto.closeBGClick = function closeBGClick() {
          NodeHelp.getchildlable(this.node, "BGClick", null, function (comp, node) {
            node.active = false;
          });
        };

        return UINoticeItem;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UINoticePropItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './producer.ts', './BagUIItemTip.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _createForOfIteratorHelperLoose, cclegacy, _decorator, Input, Component, ConfigFile, Configname, producer, BagUIItemTip;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Input = module.Input;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      BagUIItemTip = module.BagUIItemTip;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "3ffc8GTrqhPOrtyvWQtWjIX", "UINoticePropItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UINoticePropItem = exports('UINoticePropItem', (_dec = ccclass('UINoticePropItem'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UINoticePropItem, _Component);

        function UINoticePropItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.id = null;
          _this.UIpanel = null;
          _this.num = 1;
          return _this;
        }

        var _proto = UINoticePropItem.prototype;

        _proto.start = function start() {
          this.node.on(Input.EventType.TOUCH_START, this.onItemStartTouch.bind(this));
          this.node.on(Input.EventType.TOUCH_END, this.onItemEndTouch.bind(this));
        };

        _proto.onDisable = function onDisable() {
          this.node.off(Input.EventType.TOUCH_START, this.onItemStartTouch.bind(this));
          this.node.off(Input.EventType.TOUCH_END, this.onItemEndTouch.bind(this));
        };

        _proto.onItemStartTouch = function onItemStartTouch() {};

        _proto.onItemEndTouch = function onItemEndTouch() {
          var bagUIItemTip = BagUIItemTip.getInstance();

          if (!bagUIItemTip.tip || !bagUIItemTip.tip.activeInHierarchy || bagUIItemTip.tag != this && bagUIItemTip.tip.activeInHierarchy) {
            var config = null;

            for (var _iterator = _createForOfIteratorHelperLoose(ConfigFile.getInstance().config.get(Configname.TItemInfo)), _step; !(_step = _iterator()).done;) {
              var itemConfig = _step.value;

              if (itemConfig.ItemId == this.id) {
                config = itemConfig;
                break;
              }
            }

            if (config) {
              var propTimeText = null;

              if (config.Type && (config.Type == 2 || config.Type == "2")) {
                var animalConfig = ConfigFile.getInstance().config.get(Configname.TAnimalInfo);

                if (animalConfig) {
                  var animalConsumeTime = 0;
                  animalConfig.forEach(function (v) {
                    if (v.AnimalConsumeId == config.ItemId && (animalConsumeTime == 0 || v.AnimalConsumeTime < animalConsumeTime)) {
                      animalConsumeTime = v.AnimalConsumeTime;
                    }
                  });

                  if (animalConsumeTime) {
                    propTimeText = producer.getTimeFormat(animalConsumeTime * this.num);
                  }
                }
              }

              var propName = ConfigFile.findLanguage(config.Name);
              var propText = ConfigFile.findLanguage(config.Tips);
              BagUIItemTip.getInstance().openTip(this.UIpanel, propName, propText, this, propTimeText);
            }
          } else {
            BagUIItemTip.getInstance().closeTip();
          }
        };

        return UINoticePropItem;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIShop.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './UIManager.ts', './Pool.ts', './BaseUI.ts', './EventManager.ts', './MessageManager.ts', './UIShopItemTip.ts', './UIShopItemLight.ts', './TweenHelp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Node, ScrollView, instantiate, Widget, Input, UIOpacity, ConfigFile, Configname, UIManager, PoolOnce, BaseUI, EventManager, MessageManager, UIShopItemTip, UIShopItemLight, TweenHelper, ETweenType;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      ScrollView = module.ScrollView;
      instantiate = module.instantiate;
      Widget = module.Widget;
      Input = module.Input;
      UIOpacity = module.UIOpacity;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      UIShopItemTip = module.UIShopItemTip;
    }, function (module) {
      UIShopItemLight = module.UIShopItemLight;
    }, function (module) {
      TweenHelper = module.TweenHelper;
      ETweenType = module.ETweenType;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class3;

      cclegacy._RF.push({}, "8fc35daosFNCp0oNeIG8cPY", "UIShop", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIShop = exports('UIShop', (_dec = ccclass('UIShop'), _dec2 = property({
        type: Prefab,
        displayName: "道具模版"
      }), _dec3 = property({
        type: Node,
        displayName: "单选按钮"
      }), _dec4 = property({
        type: ScrollView,
        displayName: "Seed"
      }), _dec5 = property({
        type: ScrollView,
        displayName: "Animal"
      }), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(UIShop, _BaseUI);

        function UIShop() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "item", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ToggleGroup", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "SeedList", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "AnimalList", _descriptor4, _assertThisInitialized(_this));

          _this.SeedConfig = [];
          _this.AnimalConfig = [];
          _this.SeedItems = [];
          _this.AnimalItems = [];
          _this.SeedIndex = 0;
          _this.AnimalIndex = 0;
          _this.nowshow = "Seed";
          _this.Pool = new PoolOnce(30, function () {
            return instantiate(_this.item);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          return _this;
        }

        var _proto = UIShop.prototype;

        _proto.start = function start() {
          var _this2 = this; //super.start()


          this.node.getComponent("PlayButtonSound").play();
          EventManager.getInstance().add(MessageManager.Custom.VipOrRankChange, this, this.onEventPropOnChange);
          EventManager.getInstance().add(MessageManager.Custom.ShopChange, this, this.onEventPropOnChange);
          this.node.getChildByName("Mask").getComponent(Widget).updateAlignment();
          this.node.on(Input.EventType.TOUCH_START, this.onStartTouch.bind(this));
          this.AnimalList.node.on(ScrollView.EventType.SCROLL_BEGAN, this.onStartTouch.bind(this));
          this.SeedList.node.on(ScrollView.EventType.SCROLL_BEGAN, this.onStartTouch.bind(this));
          ConfigFile.getInstance().config.get(Configname.TItemInfo).forEach(function (v) {
            if (v.Type == 1 && v.Show == 1) _this2.SeedConfig.push(v);
            if (v.Type == 3 && v.Show == 1) _this2.AnimalConfig.push(v);
          });
          this.nowshow = "Seed";
          this.showList();
          TweenHelper["default"](this.node.getChildByName("Panel"), ETweenType.RightGo);
          this.node.getChildByName("Panel").getComponent(UIOpacity).opacity = 0;
          TweenHelper.getTween(this.node.getChildByName("Panel").getComponent(UIOpacity), "open", function (_tween) {
            var opacity = 255;

            _tween.to(0.3, {
              opacity: opacity
            }, {
              easing: "quadIn"
            });
          }).start();
          TweenHelper.getTween(this.node.getChildByName("Mask").getComponent(UIOpacity), "open", function (_tween) {
            var sartOpacity = 0;
            var opacity = 150;

            _tween.to(0, {
              opacity: sartOpacity
            }).to(0.1, {
              opacity: opacity
            });
          }).start();
        };

        _proto.onEventPropOnChange = function onEventPropOnChange() {
          this.SeedItems.forEach(function (v) {
            v.uplevel();
          });
          this.AnimalItems.forEach(function (v) {
            v.uplevel();
          });
          this.bubbleSort(this.SeedItems);
          this.bubbleSort(this.AnimalItems);
        };

        _proto.onStartTouch = function onStartTouch() {
          UIShopItemTip.getInstance().closeTip();
          UIShopItemLight.getInstance().closeLight();
        };

        _proto.onClickedClose = function onClickedClose(anction) {
          var _this3 = this;

          if (anction === void 0) {
            anction = true;
          }

          this.node.getChildByName("Mask").getComponent(UIOpacity).opacity = 0;

          if (anction) {
            this.unscheduleAllCallbacks();
            TweenHelper["default"](this.node.getChildByName("Panel"), ETweenType.Rightout, function () {
              _this3.Pool.clear();

              UIShopItemTip.getInstance().tipDestroy();
              UIShopItemLight.getInstance().LightDestroy();
              EventManager.getInstance().remove(MessageManager.Custom.VipOrRankChange, _this3, _this3.onEventPropOnChange);
              EventManager.getInstance().remove(MessageManager.Custom.ShopChange, _this3, _this3.onEventPropOnChange);

              _this3.AnimalList.node.off(ScrollView.EventType.SCROLL_BEGAN, _this3.onStartTouch.bind(_this3));

              _this3.SeedList.node.off(ScrollView.EventType.SCROLL_BEGAN, _this3.onStartTouch.bind(_this3));

              _this3.node.off(Input.EventType.TOUCH_START, _this3.onStartTouch.bind(_this3));

              _this3.node.destroy();

              UIManager.getInstance().closeUI(_this3.tag);
            });
            this.node.getChildByName("Panel").getComponent(UIOpacity).opacity = 255;
            TweenHelper.getTween(this.node.getChildByName("Panel").getComponent(UIOpacity), "open", function (_tween) {
              var opacity = 0;

              _tween.to(0.3, {
                opacity: opacity
              }, {
                easing: "quadIn"
              });
            }).start();
          } else {
            this.unscheduleAllCallbacks();
            this.Pool.clear();
            UIShopItemTip.getInstance().tipDestroy();
            UIShopItemLight.getInstance().LightDestroy();
            EventManager.getInstance().remove(MessageManager.Custom.VipOrRankChange, this, this.onEventPropOnChange);
            EventManager.getInstance().remove(MessageManager.Custom.ShopChange, this, this.onEventPropOnChange);
            this.AnimalList.node.off(ScrollView.EventType.SCROLL_BEGAN, this.onStartTouch.bind(this));
            this.SeedList.node.off(ScrollView.EventType.SCROLL_BEGAN, this.onStartTouch.bind(this));
            this.node.off(Input.EventType.TOUCH_START, this.onStartTouch.bind(this));
            this.node.destroy();
            UIManager.getInstance().closeUI(this.tag);
          }
        };

        _proto.getItemGenerator = function getItemGenerator() {
          var _this4 = this;

          var datas = this.SeedConfig;
          var list = this.SeedList;
          var i = this.SeedIndex;

          if (this.nowshow == "Animal") {
            datas = this.AnimalConfig;
            list = this.AnimalList;
            i = this.AnimalIndex;
          }

          var func = function func() {
            if (i > datas.length - 1 || !datas[i] || !list.node.activeInHierarchy) {
              _this4.unschedule(func);

              return;
            }

            var item = _this4.Pool.get();

            list.content.addChild(item);
            var uIShopItem = item.getComponent("UIShopItem");
            if (_this4.nowshow == "Animal") _this4.AnimalItems.push(uIShopItem);else _this4.SeedItems.push(uIShopItem);
            uIShopItem.init(datas[i], _this4.nowshow, list.node);
            i++;

            if (_this4.nowshow == "Animal") {
              _this4.AnimalIndex++;
            } else {
              _this4.SeedIndex++;
            }

            if (_this4.nowshow == "Animal") _this4.bubbleSort(_this4.AnimalItems);else _this4.bubbleSort(_this4.SeedItems);
          };

          this.schedule(func, 0);
          list.node.getComponent(UIOpacity).opacity = 0;
          TweenHelper.stop(this.SeedList, "open");
          TweenHelper.stop(this.AnimalList, "open");
          TweenHelper.getTween(list.node, "open", function (_tween) {
            var pos = list.node.getPosition();
            var gopos = pos.clone();

            _tween.call(function () {
              gopos.x = gopos.x + 300;
            }).to(0, {
              position: gopos
            }).call(function () {
              gopos.x = pos.x;
            }).to(0.5, {
              position: gopos
            }, {
              easing: "quadIn"
            });
          }).start();
          TweenHelper.getTween(list.node.getComponent(UIOpacity), "open", function (_tween) {
            _tween.to(0.5, {
              opacity: 255
            }, {
              easing: "quadIn"
            });
          }).start();
        };

        _proto.bubbleSort = function bubbleSort(arr) {
          var i = arr.length,
              j;
          var tempExchangVal;

          while (i > 0) {
            for (j = 0; j < i - 1; j++) {
              if (arr[j].Unlock < arr[j + 1].Unlock && arr[j]) {
                tempExchangVal = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = tempExchangVal;
              } else if (arr[j].Unlock == arr[j + 1].Unlock && arr[j].ItemcofigData.Level > arr[j + 1].ItemcofigData.Level) {
                tempExchangVal = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = tempExchangVal;
              } else if (arr[j].Unlock == arr[j + 1].Unlock && arr[j].ItemcofigData.Level == arr[j + 1].ItemcofigData.Level && arr[j].ItemcofigData.ItemId > arr[j + 1].ItemcofigData.ItemId) {
                tempExchangVal = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = tempExchangVal;
              }
            }

            i--;
          }

          for (var _i = 0; _i < arr.length; _i++) {
            arr[_i].node.setSiblingIndex(_i);
          }
        };

        _proto.onClickSeed = function onClickSeed() {
          this.nowshow = "Seed";
          this.showList();
        };

        _proto.onClickAnimal = function onClickAnimal() {
          this.nowshow = "Animal";
          this.showList();
        };

        _proto.showList = function showList() {
          UIShopItemTip.getInstance().closeTip();
          this.AnimalList.node.active = this.nowshow == "Animal";
          this.SeedList.node.active = this.nowshow == "Seed";
          this.AnimalList.scrollToLeft();
          this.SeedList.scrollToLeft();
          this.getItemGenerator();
        };

        _proto.onDisable = function onDisable() {
          this.AnimalList.node.off(ScrollView.EventType.SCROLL_BEGAN, this.onStartTouch.bind(this));
          this.SeedList.node.off(ScrollView.EventType.SCROLL_BEGAN, this.onStartTouch.bind(this));
        };

        _proto.onDestroy = function onDestroy() {
          _BaseUI.prototype.onDestroy.call(this);

          this.node.off(Input.EventType.TOUCH_START, this.onStartTouch.bind(this));
        };

        return UIShop;
      }(BaseUI), _class3.className = "UIShop", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "item", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "ToggleGroup", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "SeedList", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "AnimalList", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIShopItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstLanguage.ts', './ConfigFile.ts', './GameAllData.ts', './MessageManager.ts', './TipManager.ts', './WebSocketMgr.ts', './NodeHelp.ts', './NumberUtil.ts', './UIShopItemLight.ts', './UIShopItemTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, Sprite, Button, Label, Node, Slider, Input, UITransform, ProgressBar, Color, LabelOutline, ScrollView, Component, ConstLanguage, ConfigFile, GameAllData, MessageManager, TipManager, WebSocketMgr, NodeHelp, NumberUtil, UIShopItemLight, UIShopItemTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Button = module.Button;
      Label = module.Label;
      Node = module.Node;
      Slider = module.Slider;
      Input = module.Input;
      UITransform = module.UITransform;
      ProgressBar = module.ProgressBar;
      Color = module.Color;
      LabelOutline = module.LabelOutline;
      ScrollView = module.ScrollView;
      Component = module.Component;
    }, function (module) {
      ConstLanguage = module.ConstLanguage;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }, function (module) {
      UIShopItemLight = module.UIShopItemLight;
    }, function (module) {
      UIShopItemTip = module.UIShopItemTip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "0f2b4JW3ilO8KWwlmfUxlBr", "UIShopItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      /**默认购买最大数量 */

      var DEFAULF_MAXNUM = 99;
      var UIShopItem = exports('UIShopItem', (_dec = ccclass('UIShopItem'), _dec2 = property({
        type: Sprite,
        displayName: "icon"
      }), _dec3 = property({
        type: Sprite,
        displayName: "PriceIcon"
      }), _dec4 = property({
        type: Button,
        displayName: "购买按钮"
      }), _dec5 = property({
        type: Label,
        displayName: "买的数量"
      }), _dec6 = property({
        type: Label,
        displayName: "买的价格"
      }), _dec7 = property({
        type: Node,
        displayName: "滑块"
      }), _dec8 = property({
        type: Slider,
        displayName: "滑动条"
      }), _dec9 = property(Node), _dec10 = property(Node), _dec11 = property({
        type: Node,
        displayName: "遮罩"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIShopItem, _Component);

        function UIShopItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "PropIcon", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "PriceIcon", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ButtonBuy", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buyNumLabel", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buyPriceLabel", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Handle", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "slider", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonAdd", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonSub", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Mask", _descriptor10, _assertThisInitialized(_this));

          _this.ItemcofigData = null;
          _this.cofigData = null;
          _this.moneycofigData = null;
          _this.type = "Seed";
          _this.list = null;
          _this.buyNum = 0;
          _this.buyPrice = 0;
          _this.buyNumtext = "";
          _this.maxNum = DEFAULF_MAXNUM;
          _this.RankLevel = 0;
          _this.VipLevel = 0;
          _this.vipUnlock = 0;
          _this.titleUnlock = 0;
          _this.Unlock = false;
          _this.touchMove = false;
          return _this;
        }

        var _proto = UIShopItem.prototype;

        _proto.init = function init(data, type, list) {
          this.buttonAdd.on(Input.EventType.TOUCH_START, this.onButtonAddStartTouch.bind(this));
          this.buttonAdd.on(Input.EventType.TOUCH_END, this.onButtonAddEndTouch.bind(this));
          this.buttonAdd.on(Input.EventType.TOUCH_CANCEL, this.onButtonAddCancelTouch.bind(this));
          this.buttonSub.on(Input.EventType.TOUCH_START, this.onButtonSubStartTouch.bind(this));
          this.buttonSub.on(Input.EventType.TOUCH_END, this.onButtonSubEndTouch.bind(this));
          this.buttonSub.on(Input.EventType.TOUCH_CANCEL, this.onButtonSubCancelTouch.bind(this));
          this.ButtonBuy.node.on(Input.EventType.TOUCH_START, this.onButtonBuyStartTouch.bind(this));
          this.node.on(Input.EventType.TOUCH_MOVE, this.onMoveTouch.bind(this));
          this.node.on(Input.EventType.TOUCH_END, this.onEndTouch.bind(this));
          this.Handle.on(Input.EventType.TOUCH_START, this.onHandleStartTouch.bind(this));
          this.Handle.on(Input.EventType.TOUCH_END, this.onHandleEndTouch.bind(this));
          this.Handle.on(Input.EventType.TOUCH_CANCEL, this.onHandleEndTouch.bind(this));
          this.Mask.on(Input.EventType.TOUCH_MOVE, this.onMaskMoveTouch.bind(this));
          this.Mask.on(Input.EventType.TOUCH_END, this.onMaskEndTouch.bind(this));
          this.list = list;
          this.ItemcofigData = data;
          this.type = type;
          if (type == "Seed") this.cofigData = ConfigFile.getBotanyFromSeedId(this.ItemcofigData.ItemId);else this.cofigData = ConfigFile.getAnimalFromCubId(this.ItemcofigData.ItemId);
          this.buyNumtext = ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_BUYNUM1);
          this.setUserLevel();
          this.setShow();

          if (this.titleUnlock <= this.RankLevel && this.vipUnlock <= this.VipLevel) {
            this.Unlock = true;
          } else this.Unlock = false;
        };

        _proto.uplevel = function uplevel() {
          this.setUserLevel();
          this.setShow();

          if (this.titleUnlock <= this.RankLevel && this.vipUnlock <= this.VipLevel) {
            this.Unlock = true;
          } else this.Unlock = false;
        };

        _proto.setUserLevel = function setUserLevel() {
          //显示
          if (GameAllData.FarmUserResponse) {
            this.RankLevel = GameAllData.FarmUserResponse.RankLevel || 0;
            this.VipLevel = GameAllData.FarmUserResponse.VipLevel || 0;
          }
        };

        _proto.setShow = function setShow() {
          var _this2 = this;

          this.buyPrice = 0;
          this.buyNum = 1;
          if (!this.ItemcofigData.ItemPrice) this.moneycofigData = null;else {
            this.moneycofigData = ConfigFile.getItemData(Number(this.ItemcofigData.ItemPrice.split(",")[0]));
            this.buyPrice = Number(this.ItemcofigData.ItemPrice.split(",")[1]);
            GameAllData.getCurrencyNumByType(Number(this.ItemcofigData.ItemPrice.split(",")[0]));
          } // if (this.buyPrice && this.buyPrice > 0 && haveGoods != -1) {
          //     let num = Math.trunc(haveGoods / this.buyPrice)
          //     this.maxNum = num < DEFAULF_MAXNUM ? num : DEFAULF_MAXNUM
          // }
          // else {
          //     this.maxNum = DEFAULF_MAXNUM
          // }

          this.maxNum = DEFAULF_MAXNUM;
          NodeHelp.loadIcon("propIcon/itemicon", this.ItemcofigData.ItemRes.toString(), function (res) {
            if (!_this2.PropIcon) {
              return;
            }

            _this2.PropIcon.spriteFrame = res;
            var scale = NodeHelp.setScopeLimitation(_this2.PropIcon.node.getComponent(UITransform), 100, 100);

            _this2.PropIcon.node.setScale(scale, scale);
          });
          NodeHelp.getchildlable(this.node, "LabelName", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(_this2.ItemcofigData.Name);
          });
          NodeHelp.getchildlable(this.node, "LabelLevel", Label, function (comp) {
            comp.string = "LV" + _this2.ItemcofigData.Level;
          });
          NodeHelp.getchildlable(this.node, "TimeLabel", Label, function (comp) {
            var timedata = {
              day: 0,
              hour: 0,
              min: 0,
              sec: 0
            };

            if (_this2.type == "Seed") {
              var botanyTime = _this2.cofigData.BotanyTime.split(",");

              timedata = NumberUtil.time_split(Number(botanyTime[0]) + Number(botanyTime[1]));
            } else {
              var animalTime = _this2.cofigData.AnimalTime.split(",");

              timedata = NumberUtil.time_split(Number(animalTime[0]));
            }

            var text = "";

            if (timedata.day != 0) {
              text = ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_TIME1).format(timedata.day);
              text += ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_TIME2).format(timedata.hour);
            } else if (timedata.hour != 0) {
              text = ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_TIME2).format(timedata.hour);
              text += ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_TIME3).format(timedata.min);
            } else if (timedata.min != 0) {
              text = ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_TIME3).format(timedata.min);
              text += ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_TIME4).format(timedata.sec);
            } else if (timedata.sec != 0) {
              text = ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_TIME4).format(timedata.sec);
            }

            comp.string = text;
          });
          NodeHelp.getchildlable(this.node, "UseUp", null, function (comp, node) {
            if (_this2.type == "Seed") {
              node.active = false;
            } else {
              node.active = true;
              NodeHelp.getchildlable(node, "icon", Sprite, function (comp, node) {
                var useupid = _this2.cofigData.AnimalConsumeId;
                NodeHelp.loadIcon("propIcon/itemicon", useupid.toString(), function (res) {
                  if (!comp) {
                    return;
                  }

                  comp.spriteFrame = res;
                  var scale = NodeHelp.setScopeLimitation(comp.node.getComponent(UITransform), 25, 25);
                  comp.node.setScale(scale, scale);
                });
              });
              NodeHelp.getchildlable(node, "Label", Label, function (comp, node) {
                var timedata = NumberUtil.time_split(Number(_this2.cofigData.AnimalConsumeTime));
                var text = "";

                if (timedata.day != 0) {
                  text = ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_TIME1).format(timedata.day);
                  text += ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_TIME2).format(timedata.hour);
                } else if (timedata.hour != 0) {
                  text = ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_TIME2).format(timedata.hour);
                  text += ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_TIME3).format(timedata.min);
                } else if (timedata.min != 0) {
                  text = ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_TIME3).format(timedata.min);
                  text += ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_TIME4).format(timedata.sec);
                } else if (timedata.sec != 0) {
                  text = ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_TIME4).format(timedata.sec);
                }

                comp.string = text;
              });
            }
          });

          if (!this.moneycofigData) {
            this.PriceIcon.node.active = false;
          } else {
            NodeHelp.loadIcon("propIcon/itemicon", this.moneycofigData.ItemRes.toString(), function (res) {
              _this2.PriceIcon.spriteFrame = res;
            });
          }

          this.buyNumLabel.string = this.buyNumtext.format(this.buyNum);
          this.buyPriceLabel.string = this.buyPrice == 0 ? ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_MASK_BUYNUM) : this.buyPrice + ""; //是否可以购买

          this.slider.progress = 0;
          this.slider.node.parent.getComponent(ProgressBar).progress = 0;

          if (this.maxNum == 0) {
            this.slider.enabled = false;
            this.Handle.getComponent(Button).interactable = false;
            this.buyPriceLabel.color = new Color(255, 0, 0);
            this.buyPriceLabel.node.getComponent(LabelOutline).color = new Color(255, 255, 255);
          } else {
            this.slider.enabled = true;
            this.Handle.getComponent(Button).interactable = true;
            this.buyPriceLabel.color = new Color(255, 255, 255);
            this.buyPriceLabel.node.getComponent(LabelOutline).color = new Color(70, 110, 0);
          }

          this.vipUnlock = 0;
          this.titleUnlock = 0;
          this.setMask();
        };

        _proto.setMask = function setMask() {
          var unlocks = [];
          if (this.type == "Seed") unlocks = this.cofigData.BotanyUnlock.split(";");else unlocks = this.cofigData.AnimalUnlock.split(";");

          for (var _iterator = _createForOfIteratorHelperLoose(unlocks), _step; !(_step = _iterator()).done;) {
            var unlock = _step.value;
            if (unlock == "") continue;

            var _unlock = unlock.split(",");

            switch (Number(_unlock[0])) {
              case 1:
                this.vipUnlock = Number(_unlock[1]);
                break;

              case 2:
                this.titleUnlock = Number(_unlock[1]);
                break;
            }
          }

          if (this.titleUnlock <= this.RankLevel && this.vipUnlock <= this.VipLevel) {
            this.Mask.active = false;
          } else {
            this.Mask.active = true;
          }
        };

        _proto.onslider = function onslider(slider) {
          slider.node.parent.getComponent(ProgressBar).progress = slider.progress;
          var buyNum = Math.floor((this.maxNum - 1) * slider.progress) + 1;
          var sound = slider.node.getComponent("PlaySliderSound");
          var play = sound.playSound(buyNum);
          this.buyNum = buyNum;

          if (play) {
            this.buyNumLabel.string = this.buyNumtext.format(this.buyNum);
            if (!this.ItemcofigData.ItemPrice) this.buyPrice = 0;else this.buyPrice = Number(this.ItemcofigData.ItemPrice.split(",")[1]) * this.buyNum;
            this.buyPriceLabel.string = this.buyPrice == 0 ? ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_MASK_BUYNUM) : this.buyPrice + "";
          }
        };

        _proto.onMoveTouch = function onMoveTouch(evet) {
          this.touchMove = true;
        };

        _proto.onEndTouch = function onEndTouch() {
          if (this.touchMove) {
            this.touchMove = false;
            return;
          }

          UIShopItemTip.getInstance().closeTip();
          UIShopItemLight.getInstance().openLight(this.node);
        };

        _proto.onHandleEndTouch = function onHandleEndTouch() {
          this.list.getComponent(ScrollView).horizontal = true;
        };

        _proto.onHandleStartTouch = function onHandleStartTouch() {
          this.list.getComponent(ScrollView).stopAutoScroll();
          this.list.getComponent(ScrollView).horizontal = false;
          UIShopItemTip.getInstance().closeTip();
          UIShopItemLight.getInstance().openLight(this.node);
        };

        _proto.onButtonBuyStartTouch = function onButtonBuyStartTouch() {
          UIShopItemTip.getInstance().closeTip();
          UIShopItemLight.getInstance().openLight(this.node);
        };

        _proto.onMaskMoveTouch = function onMaskMoveTouch(evet) {
          this.touchMove = true;
        };

        _proto.onMaskEndTouch = function onMaskEndTouch() {
          if (this.touchMove) {
            this.touchMove = false;
            return;
          }

          var Text = "";
          if (this.vipUnlock != 0 && this.vipUnlock > this.VipLevel) Text += ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_MASK_VIPUNLOCK).format(this.vipUnlock + "");
          if (this.titleUnlock != 0 && this.titleUnlock > this.RankLevel) Text += ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_MASK_VIPUNLOCK2).format(this.titleUnlock + "");
          Text += ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_MASK_VIPUNLOCK3);
          if (this.list) UIShopItemTip.getInstance().openTip(this.list, Text, this);
        };

        _proto.onButtonAddStartTouch = function onButtonAddStartTouch() {
          var _this3 = this;

          this.unscheduleAllCallbacks();
          this.scheduleOnce(function () {
            _this3.schedule(function () {
              _this3.onClickAdd();
            }, 0.1);
          }, 0.2);
        };

        _proto.onButtonAddEndTouch = function onButtonAddEndTouch() {
          this.unscheduleAllCallbacks();
        };

        _proto.onButtonAddCancelTouch = function onButtonAddCancelTouch() {
          this.unscheduleAllCallbacks();
        };

        _proto.onButtonSubStartTouch = function onButtonSubStartTouch() {
          var _this4 = this;

          this.unscheduleAllCallbacks();
          this.scheduleOnce(function () {
            _this4.schedule(function () {
              _this4.onClickSub();
            }, 0.1);
          }, 0.2);
        };

        _proto.onButtonSubEndTouch = function onButtonSubEndTouch() {
          this.unscheduleAllCallbacks();
        };

        _proto.onButtonSubCancelTouch = function onButtonSubCancelTouch() {
          this.unscheduleAllCallbacks();
        };

        _proto.onClickBuy = function onClickBuy() {
          var _this5 = this;

          UIShopItemTip.getInstance().closeTip();
          UIShopItemLight.getInstance().openLight(this.node);
          var text = ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_MASK_BUYNUM2);
          if (this.buyPrice != 0) //text = ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_MASK_BUYTEXT).iconformat(this.ItemcofigData.ItemPrice.split(",")[0]).format(this.buyPrice + "")
            text = ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_MASK_BUYTEXT, Number(this.ItemcofigData.ItemPrice.split(",")[0])).format(this.buyPrice + "");
          var code = ConstLanguage.SHOP_ITEM_MASK_BUYNUM2;
          if (this.buyPrice != 0) code = ConstLanguage.SHOP_ITEM_MASK_BUYTEXT;
          TipManager.autoTip(4, code, text, null, function () {
            var haveNum = GameAllData.getCurrencyNumByType(Number(_this5.ItemcofigData.ItemPrice.split(",")[0]));

            if (_this5.buyPrice > haveNum) {
              // TipManager.autoTip(3, 111033, ConfigFile.findLanguage(111033, Number(this.ItemcofigData.ItemPrice.split(",")[0])));
              TipManager.ChickBoxNew(111033, Number(_this5.ItemcofigData.ItemPrice.split(",")[0]));
              return;
            }

            var data = {
              ItemModeId: _this5.ItemcofigData.ItemId,
              ItemCount: _this5.buyNum
            };
            WebSocketMgr.send(MessageManager.Net.FarmBuyItemRequest, data);
            _this5.buyNum = 1, _this5.setbuyPrice(_this5.buyNum);
          });
        };

        _proto.onClickAdd = function onClickAdd() {
          UIShopItemTip.getInstance().closeTip();
          UIShopItemLight.getInstance().openLight(this.node);
          var buyNum = this.buyNum + 1;
          buyNum = buyNum > 99 ? 99 : buyNum;
          this.setbuyPrice(buyNum);
        };

        _proto.onClickSub = function onClickSub() {
          UIShopItemTip.getInstance().closeTip();
          UIShopItemLight.getInstance().openLight(this.node);
          var buyNum = this.buyNum - 1;
          buyNum = buyNum < 1 ? 1 : buyNum;
          this.setbuyPrice(buyNum);
        };

        _proto.setbuyPrice = function setbuyPrice(buyNum) {
          this.slider.progress = (buyNum - 1) / (this.maxNum - 1);
          this.slider.node.parent.getComponent(ProgressBar).progress = this.slider.progress;
          var sound = this.slider.node.getComponent("PlaySliderSound");
          sound.playSoundNow();
          this.buyNum = buyNum;
          this.buyNumLabel.string = this.buyNumtext.format(this.buyNum);
          if (!this.ItemcofigData.ItemPrice) this.buyPrice = 0;else this.buyPrice = Number(this.ItemcofigData.ItemPrice.split(",")[1]) * this.buyNum;
          this.buyPriceLabel.string = this.buyPrice == 0 ? ConfigFile.findLanguage(ConstLanguage.SHOP_ITEM_MASK_BUYNUM) : this.buyPrice + "";
        };

        _proto.onDisable = function onDisable() {
          this.ButtonBuy.node.off(Input.EventType.TOUCH_START, this.onButtonBuyStartTouch.bind(this));
          this.Handle.off(Input.EventType.TOUCH_START, this.onHandleStartTouch.bind(this));
          this.Handle.off(Input.EventType.TOUCH_END, this.onHandleEndTouch.bind(this));
          this.Handle.off(Input.EventType.TOUCH_CANCEL, this.onHandleEndTouch.bind(this));
          this.Mask.off(Input.EventType.TOUCH_START, this.onMaskEndTouch.bind(this));
          this.Mask.off(Input.EventType.TOUCH_MOVE, this.onMaskMoveTouch.bind(this));
          this.buttonAdd.off(Input.EventType.TOUCH_START, this.onButtonAddStartTouch.bind(this));
          this.buttonAdd.off(Input.EventType.TOUCH_END, this.onButtonAddEndTouch.bind(this));
          this.buttonAdd.off(Input.EventType.TOUCH_CANCEL, this.onButtonAddCancelTouch.bind(this));
          this.buttonSub.off(Input.EventType.TOUCH_START, this.onButtonSubStartTouch.bind(this));
          this.buttonSub.off(Input.EventType.TOUCH_END, this.onButtonSubEndTouch.bind(this));
          this.buttonSub.off(Input.EventType.TOUCH_CANCEL, this.onButtonSubCancelTouch.bind(this));
        };

        _proto.onDestroy = function onDestroy() {
          this.node.off(Input.EventType.TOUCH_END, this.onEndTouch.bind(this));
        };

        return UIShopItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "PropIcon", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "PriceIcon", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "ButtonBuy", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "buyNumLabel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "buyPriceLabel", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "Handle", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "slider", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "buttonAdd", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "buttonSub", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "Mask", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIShopItemLight.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, resources, instantiate, v3, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      resources = module.resources;
      instantiate = module.instantiate;
      v3 = module.v3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "1da37Od9lBN/59ElcVA4QVx", "UIShopItemLight", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIShopItemLight = exports('UIShopItemLight', (_dec = ccclass('UIShopItemLight'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIShopItemLight, _Component);

        function UIShopItemLight() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.light = null;
          _this.isShowTip = false;
          return _this;
        }

        UIShopItemLight.getInstance = function getInstance() {
          if (this.instance == null) {
            this.instance = new UIShopItemLight();
          }

          return this.instance;
        };

        var _proto = UIShopItemLight.prototype;

        _proto.openLight = function openLight(parentNode) {
          var _this2 = this;

          if (!this.light) resources.load("prefabs/ui/item/UIShopItem/UIShopItemLight", function (completedCount, totalCount, item) {}, function (error, prefab) {
            if (error) {
              console.log(error);
              return;
            }

            _this2.LightDestroy();

            _this2.light = instantiate(prefab);
            _this2.light.parent = parentNode;

            _this2.light.setPosition(v3(0, 0, 0));
          });else {
            this.light.parent = parentNode;
            this.light.active = true;
            this.light.setPosition(v3(0, 0, 0));
          }
        };

        _proto.closeLight = function closeLight() {
          if (this.light) this.light.active = false;
        };

        _proto.LightDestroy = function LightDestroy() {
          if (this.light) {
            this.light.destroy();
            this.light = null;
          }
        };

        return UIShopItemLight;
      }(Component), _class2.instance = void 0, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIShopItemTip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, UITransform, resources, instantiate, RichText, v3, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      resources = module.resources;
      instantiate = module.instantiate;
      RichText = module.RichText;
      v3 = module.v3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "3e2b4uZzQhGUrqqH0F5gh0G", "UIShopItemTip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIShopItemTip = exports('UIShopItemTip', (_dec = ccclass('UIShopItemTip'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIShopItemTip, _Component);

        function UIShopItemTip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.tip = null;
          _this.isShowTip = false;
          return _this;
        }

        UIShopItemTip.getInstance = function getInstance() {
          if (this.instance == null) {
            this.instance = new UIShopItemTip();
          }

          return this.instance;
        };

        var _proto = UIShopItemTip.prototype;

        _proto.openTip = function openTip(parentNode, Text, tag) {
          var _this2 = this;

          if (!tag.node || !tag.node.worldPosition) {
            return;
          }

          var tagPos = parentNode.getComponent(UITransform).convertToNodeSpaceAR(tag.node.worldPosition);
          var tagSizeW = tag.node.getComponent(UITransform).width;
          var parentSizeW = parentNode.getComponent(UITransform).width;
          var parentSizeH = parentNode.getComponent(UITransform).height;
          if (!this.tip) resources.load("prefabs/ui/item/UIShopItem/UIShopItemTip", function (completedCount, totalCount, item) {}, function (error, prefab) {
            if (error) {
              console.log(error);
              return;
            }

            _this2.tip = instantiate(prefab);
            _this2.tip.parent = parentNode;
            _this2.tip.getChildByName("RichText").getComponent(RichText).string = "<color=#9E4A07>" + Text + "</color>";
            var getx = tagPos.x + tagSizeW / 2 - parentSizeW / 2;
            getx = getx < 0 ? 0 : getx;
            if (getx == 0) getx = tagPos.x - tagSizeW / 2 + parentSizeW / 2;
            getx = getx > 0 ? 0 : getx;

            _this2.tip.setPosition(v3(tagPos.x + getx, tagPos.y + parentSizeH / 2, tagPos.z));
          });else {
            this.tip.parent = parentNode;
            this.tip.active = true;
            this.tip.getChildByName("RichText").getComponent(RichText).string = "<color=#9E4A07>" + Text + "</color>";
            var getx = tagPos.x + tagSizeW / 2 - parentSizeW / 2;
            getx = getx < 0 ? 0 : getx;
            if (getx == 0) getx = tagPos.x - tagSizeW / 2 + parentSizeW / 2;
            getx = getx > 0 ? 0 : getx;
            this.tip.setPosition(v3(tagPos.x + getx, tagPos.y + parentSizeH / 2, tagPos.z));
          }
        };

        _proto.closeTip = function closeTip() {
          if (this.tip) this.tip.active = false;
        };

        _proto.tipDestroy = function tipDestroy() {
          if (this.tip) {
            this.tip.destroy();
            this.tip = null;
          }
        };

        return UIShopItemTip;
      }(Component), _class2.instance = void 0, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIStory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './GameAllData.ts', './UIManager.ts', './BaseUI.ts', './EventManager.ts', './MessageManager.ts', './UIHelp.ts', './TaskManager.ts', './producer.ts', './MainGame.ts', './GameManager.ts', './GuardCtr.ts', './ClickMask.ts', './towAnimation.ts', './jiantouAnimation.ts', './UIGame.ts', './EnumDefine.ts', './TaskConfigGoManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _extends, cclegacy, _decorator, Vec3, Node, Sprite, Label, SpriteFrame, tween, Color, Input, resources, instantiate, ScrollView, ConfigFile, GameAllData, UIManager, BaseUI, EventManager, MessageManager, UIHelp, TaskManager, producer, MainGame, GameManager, GuardCtr, ClickMask, towAnimation, jiantouAnimation, UIGame, EnumDefine, TaskConfigGoManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _extends = module.extends;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Node = module.Node;
      Sprite = module.Sprite;
      Label = module.Label;
      SpriteFrame = module.SpriteFrame;
      tween = module.tween;
      Color = module.Color;
      Input = module.Input;
      resources = module.resources;
      instantiate = module.instantiate;
      ScrollView = module.ScrollView;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      TaskManager = module.TaskManager;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      MainGame = module.MainGame;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      GuardCtr = module.GuardCtr;
    }, function (module) {
      ClickMask = module.ClickMask;
    }, function (module) {
      towAnimation = module.towAnimation;
    }, function (module) {
      jiantouAnimation = module.jiantouAnimation;
    }, function (module) {
      UIGame = module.UIGame;
    }, function (module) {
      EnumDefine = module.EnumDefine;
    }, function (module) {
      TaskConfigGoManager = module.TaskConfigGoManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _class3;

      cclegacy._RF.push({}, "7b353pI5SlLrLaw8LQ/fymR", "UIStory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var story_1 = [{
        c: "Align",
        data: "boatPath/start"
      }, {
        c: "scenScale",
        data: 0.45
      }, {
        c: "titleBGAlpha",
        data: 255
      }, {
        c: "pushBG1"
      }, {
        c: "load",
        name: "boat",
        data: "animal/boat",
        target: "boatPath2/start"
      }, {
        c: "loadrole",
        name: "role",
        follow: "boat",
        followPoint: "point",
        target: "boatPath/start"
      }, {
        c: "load",
        name: "cameraMove",
        data: "animal/cameraMove",
        target: "boatPath/end"
      }, {
        c: "move",
        data: "boat",
        path: "boatPath2"
      }, {
        c: "rolestate",
        data: "role",
        dir: 3,
        state: 2
      }, {
        c: "Align",
        data: "boat"
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109503,
        arg: 1
      }, // { c: "talk", head: 1, dir: 1, data: 109502, arg: 1 },
      {
        c: "closetalk",
        data: 0
      }, {
        c: "move",
        data: "boat",
        path: "boatPath"
      }, {
        c: "Align",
        data: "cameraMove"
      }, {
        c: "move",
        data: "cameraMove",
        path: "Path1"
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109504
      }, // { c: "move", data: "cameraMove", path: "Path2" },
      {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109505
      }, {
        c: "closetalk",
        data: 0
      }, // { c: "nodeToScen", data: "role" },
      // { c: "Align", data: "role" },
      // { c: "titleBGAlpha", data: 255 },
      // { c: "move", data: "role", path: "Path" },
      {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109506
      }, {
        c: "closetalk",
        data: 0
      }, {
        c: "popBG1"
      }, {
        c: "remove",
        name: "boat"
      }, {
        c: "remove",
        name: "cameraMove"
      }, {
        c: "remove",
        name: "role"
      }, {
        c: "finishTask"
      }]; // const story_2 = [
      //     { c: "popBG1", methon: 1 },
      //     { c: "talk", head: 1, dir: 1, data: 109563 },
      //     { c: "touchState", data: false },
      //     { c: "touchState", data: true },
      //     { c: "openClickMask", data: "ui,UIGame,task/Mask/TaskItems/Mainline", dir: 2, type: 1, show: true },
      //     { c: "waitEvent", clickCtl: "ui,UIGame,task" },
      //     { c: "closeClickMask", data: "" },
      //     { c: "finishTask" },
      // ];

      var story_2 = [{
        c: "popBG1",
        methon: 1
      }, {
        c: "scenScale",
        data: 1
      }, {
        c: "closewindows",
        data: "UIHouse"
      }, {
        c: "closewindows",
        data: "ExperienceUI"
      }, {
        c: "openClickMask",
        data: "farm,1",
        dir: 2,
        type: 0,
        show: true
      }, {
        c: "touchState",
        data: false
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109507
      }, {
        c: "goUIByTaskFindType",
        info: EnumDefine.TaskFindType.FarmLand,
        uiData: 1
      }, {
        c: "closetalk",
        data: 0
      }, {
        c: "touchState",
        data: true
      }, {
        c: "goto",
        data: 12,
        target: "farm,1",
        cond: "unlock"
      }, // { c: "goto", data: 12, target: "farm,1"},
      {
        c: "waitEvent",
        click: "farm,1"
      }, {
        c: "touchState",
        data: false
      }, // { c: "popBG1", methon: 1 },
      // { c: "talk", head: 1, dir: 1, data: 109563 },
      // { c: "touchState", data: false },
      // { c: "touchState", data: true },
      // { c: "openClickMask", data: "ui,UIGame,task/Mask/TaskItems/Mainline", dir: 2, type: 1, show: true },
      // { c: "waitEvent", clickCtl: "ui,UIGame,task" },
      // { c: "closeClickMask", data: "" },
      // { c: "finishTask" },
      // { c: "talk", head: 1, dir: 1, data: 109509 },
      // { c: "touchState", data: true },
      // { c: "openClickMask", data: "ui,UIGame,Experiences/UIVipLevel", dir: 2, type: 1, show: true },
      // { c: "waitEvent", clickCtl: "ui,UIGame,Experiences/UIVipLevel" },
      // { c: "closeClickMask", data: "" },
      // { c: "finishTask", taskid: 2 },
      // { c: "finishTask", taskid: 4 },
      // { c: "finishTask" },
      // { c: "exit" },
      // { c: "waitEvent", LandUnlock: "farm,1", click: "farm,1" },
      // { c: "touchState", data: false },
      // { c: "talk", head: 1, dir: 1, data: 109508 },
      // { c: "touchState", data: true },
      // { c: "closetalk", data: 0 },
      // { c: "closeClickMask", data: "" },
      // { c: "finishTask", taskid: 2 },
      // { c: "finishTask", taskid: 4 },
      {
        c: "finishTask"
      }];
      var story_3 = [{
        c: "popBG1",
        methon: 1
      }, {
        c: "touchState",
        data: false
      }, {
        c: "closewindows",
        data: "UIHouse"
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109510
      }, {
        c: "touchState",
        data: true
      }, {
        c: "openClickMask",
        data: "ui,ExperienceUI,Panel/vipPanel/addButton",
        dir: 1,
        type: 1,
        show: true
      }, {
        c: "waitEvent",
        clickCtl: "ui,ExperienceUI,Panel/vipPanel/addButton",
        closewindow: "ExperienceUI"
      }, {
        c: "closeClickMask",
        data: ""
      }, {
        c: "finishTask"
      }];
      var story_4 = [{
        c: "popBG1",
        methon: 1
      }, {
        c: "touchState",
        data: false
      }, // { c: "closewindows", data: "UIHouse" },
      // { c: "closewindows", data: "ExperienceUI" },
      // { c: "closewindows", data: "MarketView" },
      // { c: "closewindows", data: "UIHead" },
      // { c: "closewindows", data: "SetUI" },
      {
        c: "closeAllUI",
        data: ""
      }, {
        c: "openClickMask",
        data: "farm,1",
        dir: 1,
        type: 0,
        show: true
      }, {
        c: "talk",
        head: 1,
        dir: 3,
        data: 109511,
        arg: 1
      }, {
        c: "touchState",
        data: true
      }, {
        c: "waitEvent",
        click: "farm,1"
      }, // { c: "waitEvent", closewindow: "SeedView" },
      {
        c: "closeClickMask",
        data: ""
      }, {
        c: "closetalk",
        data: 0
      }, {
        c: "towAnimation",
        target: "farm,1",
        x: 50,
        y: 0,
        source: "scroll,UIGame,ToolsView/SV,0"
      }, {
        c: "talk",
        head: 1,
        dir: 3,
        data: 109512,
        arg: 1
      }, {
        c: "waitEvent",
        closewindow: "SeedView"
      }, {
        c: "finishTask"
      }];
      var story_5 = [{
        c: "popBG1",
        methon: 1
      }, {
        c: "touchState",
        data: false
      }, {
        c: "pickScen",
        target: "farm,1"
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109513,
        arg: 2
      }, {
        c: "openClickMask",
        data: "ui,UIGame,coin/CoinShow/UIGameItemCoin",
        dir: 4,
        type: 1,
        show: true
      }, {
        c: "closetalk",
        data: 0
      }, {
        c: "touchState",
        data: true
      }, {
        c: "waitEvent",
        clickCtl: "ui,UIGame,coin/CoinShow/UIGameItemCoin"
      }, {
        c: "closeClickMask",
        data: ""
      }, {
        c: "finishTask"
      }];
      var story_6 = [{
        c: "popBG1",
        methon: 1
      }, {
        c: "touchState",
        data: false
      }, {
        c: "pickScen",
        target: "farm,1"
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109514,
        arg: 3
      }, //{ c: "talk", head: 1, dir: 1, data: 109515, arg: 1 },
      {
        c: "touchState",
        data: true
      }, {
        c: "closetalk",
        data: 0
      }, {
        c: "finishTask",
        taskid: 6
      }, {
        c: "finishTask"
      }];
      var story_7 = [{
        c: "popBG1",
        methon: 1
      }, {
        c: "jiantouAnimation",
        target: "build,1001",
        x: 50,
        y: 0
      }, {
        c: "touchState",
        data: false
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109516,
        arg: 1
      }, {
        c: "closetalk",
        data: 0
      }, {
        c: "touchState",
        data: true
      }, //{ c: "waitEvent", click: "build,1001" },
      {
        c: "finishTask"
      }];
      var story_8 = [{
        c: "popBG1",
        methon: 1
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109517,
        arg: 1
      }, {
        c: "closetalk",
        data: 0
      }, {
        c: "finishTask",
        taskid: 8
      }, {
        c: "finishTask"
      }];
      var story_9 = [{
        c: "Align",
        data: "story9/r1"
      }, {
        c: "scenScale",
        data: 0.5
      }, {
        c: "closewindows",
        data: "UIHouse"
      }, {
        c: "closewindows",
        data: "ExperienceUI"
      }, {
        c: "pushBG1"
      }, {
        c: "titleBGAlpha",
        data: 255
      }, {
        c: "loadrole",
        name: "role",
        target: "story9/r1"
      }, {
        c: "Align",
        data: "role"
      }, {
        c: "touchState",
        data: false
      }, {
        c: "closewindows",
        data: "UIHouse"
      }, {
        c: "closewindows",
        data: "ExperienceUI"
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109518,
        arg: 1
      }, {
        c: "closetalk",
        data: 0
      }, {
        c: "closewindows",
        data: "UIHouse"
      }, {
        c: "closewindows",
        data: "ExperienceUI"
      }, {
        c: "move",
        data: "role",
        path: "story9"
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109519,
        arg: 1
      }, {
        c: "touchState",
        data: true
      }, {
        c: "closetalk",
        data: 0
      }, {
        c: "closewindows",
        data: "UIHouse"
      }, {
        c: "closewindows",
        data: "ExperienceUI"
      }, {
        c: "remove",
        name: "role"
      }, {
        c: "finishTask"
      }];
      var story_10 = [{
        c: "popBG1",
        methon: 1
      }, {
        c: "finishTask",
        taskid: 3
      }, {
        c: "closewindows",
        data: "UIHouse"
      }, {
        c: "closewindows",
        data: "ExperienceUI"
      }, {
        c: "finishTask",
        taskid: 12
      }, {
        c: "finishTask",
        taskid: 11
      }, {
        c: "openClickMask",
        data: "pasture,1",
        dir: 4,
        type: 0,
        show: true
      }, {
        c: "touchState",
        data: false
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109520,
        arg: 1
      }, {
        c: "closetalk",
        data: 0
      }, {
        c: "touchState",
        data: true
      }, {
        c: "goto",
        data: 12,
        target: "pasture,1",
        cond: "unlock"
      }, {
        c: "waitEvent",
        click: "pasture,1"
      }, {
        c: "touchState",
        data: false
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109521,
        arg: 1
      }, {
        c: "closetalk",
        data: 0
      }, {
        c: "touchState",
        data: true
      }, {
        c: "closeClickMask",
        data: ""
      }, {
        c: "openClickMask",
        data: "ui,UIGame,Experiences/UIRankLevel",
        dir: 2,
        type: 1,
        show: true
      }, {
        c: "waitEvent",
        clickCtl: "ui,UIGame,Experiences/UIRankLevel"
      }, {
        c: "closeClickMask",
        data: ""
      }, {
        c: "finishTask"
      }, {
        c: "finishTask",
        taskid: 10
      }, {
        c: "exit"
      }, {
        c: "closeClickMask",
        data: ""
      }, {
        c: "finishTask",
        taskid: 10
      }, {
        c: "finishTask"
      }];
      var story_11 = [{
        c: "popBG1",
        methon: 1
      }, {
        c: "openClickMask",
        data: "ui,ExperienceUI,Panel/titlePanel/addButton",
        dir: 1,
        type: 1,
        show: true
      }, {
        c: "touchState",
        data: false
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109522,
        arg: 1
      }, {
        c: "touchState",
        data: true
      }, {
        c: "waitEvent",
        clickCtl: "ui,ExperienceUI,Panel/titlePanel/addButton",
        closewindow: "ExperienceUI"
      }, {
        c: "closeClickMask",
        data: ""
      }, {
        c: "finishTask"
      }];
      var story_12 = [{
        c: "popBG1",
        methon: 1
      }, {
        c: "closewindows",
        data: "UIHouse"
      }, {
        c: "closewindows",
        data: "ExperienceUI"
      }, {
        c: "openClickMask",
        data: "pasture,1",
        dir: 1,
        type: 0,
        show: true
      }, {
        c: "touchState",
        data: false
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109523,
        arg: 1
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109524,
        arg: 1
      }, {
        c: "closetalk",
        data: 0
      }, {
        c: "touchState",
        data: true
      }, {
        c: "closeClickMask",
        data: ""
      }, {
        c: "towAnimation",
        target: "pasture,1",
        x: 50,
        y: 0,
        source: "scroll,UIGame,ToolsView/SV,0"
      }, {
        c: "waitEvent",
        closewindow: "SeedView"
      }, {
        c: "finishTask"
      }]; //没钱失败

      var story_13 = [{
        c: "popBG1",
        methon: 1
      }, {
        c: "closewindows",
        data: "UIHouse"
      }, {
        c: "closewindows",
        data: "ExperienceUI"
      }, {
        c: "closewindows",
        data: "RechargeView"
      }, {
        c: "pickScen",
        target: "pasture,1"
      }, {
        c: "openClickMask",
        data: "ui,UIGame,coin/CoinShow/UIGameItemCoin",
        dir: 4,
        type: 1,
        show: true
      }, {
        c: "touchState",
        data: false
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109530,
        arg: 5
      }, //种子
      {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109531,
        arg: 1
      }, {
        c: "closetalk",
        data: 0
      }, {
        c: "touchState",
        data: true
      }, {
        c: "waitEvent",
        clickCtl: "ui,UIGame,coin/CoinShow/UIGameItemCoin"
      }, {
        c: "closeClickMask",
        data: ""
      }, {
        c: "finishTask"
      }]; //成功

      var story_14 = [{
        c: "popBG1",
        methon: 1
      }, {
        c: "touchState",
        data: false
      }, {
        c: "pickScen",
        target: "pasture,1"
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109525,
        arg: 7
      }, //
      {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109526,
        arg: 6
      }, {
        c: "closetalk",
        data: 0
      }, {
        c: "finishTask",
        taskid: 13
      }, {
        c: "finishTask"
      }]; //解锁成功

      var story_15 = [{
        c: "popBG1",
        methon: 1
      }, {
        c: "touchState",
        data: false
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109523,
        arg: 1
      }, {
        c: "closetalk",
        data: 0
      }, {
        c: "touchState",
        data: true
      }, {
        c: "finishTask",
        taskid: 13
      }, {
        c: "finishTask",
        taskid: 12
      }, {
        c: "finishTask",
        taskid: 11
      }, {
        c: "finishTask"
      }]; //没有食物失败

      var story_16 = [{
        c: "popBG1",
        methon: 1
      }, {
        c: "closewindows",
        data: "UIHouse"
      }, {
        c: "closewindows",
        data: "ExperienceUI"
      }, {
        c: "closewindows",
        data: "RechargeView"
      }, {
        c: "pickScen",
        target: "pasture,1"
      }, {
        c: "touchState",
        data: false
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109528,
        arg: 4
      }, //需要的食物
      {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109529,
        arg: 1
      }, {
        c: "closetalk",
        data: 0
      }, {
        c: "touchState",
        data: true
      }, {
        c: "finishTask"
      }]; //没有位置失败

      var story_17 = [{
        c: "popBG1",
        methon: 1
      }, {
        c: "closewindows",
        data: "UIHouse"
      }, {
        c: "closewindows",
        data: "ExperienceUI"
      }, {
        c: "closewindows",
        data: "RechargeView"
      }, {
        c: "pickScen",
        target: "pasture,1"
      }, {
        c: "openClickMask",
        data: "ui,UIGame,coin/CoinShow/UIGameItemCoin",
        dir: 4,
        type: 1,
        show: true
      }, {
        c: "touchState",
        data: false
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109530,
        arg: 2
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109531,
        arg: 1
      }, {
        c: "closetalk",
        data: 0
      }, {
        c: "touchState",
        data: true
      }, {
        c: "waitEvent",
        clickCtl: "ui,UIGame,coin/CoinShow/UIGameItemCoin"
      }, {
        c: "closeClickMask",
        data: ""
      }, {
        c: "finishTask"
      }]; //收获

      var story_18 = [{
        c: "popBG1",
        methon: 1
      }, {
        c: "closewindows",
        data: "UIHouse"
      }, {
        c: "closewindows",
        data: "ExperienceUI"
      }, {
        c: "closewindows",
        data: "RechargeView"
      }, {
        c: "pickScen",
        target: "farm,1"
      }, {
        c: "openClickMask",
        data: "farm,1",
        dir: 2,
        type: 0,
        show: true
      }, {
        c: "touchState",
        data: false
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109532,
        arg: 3
      }, //选择农田上的作物
      {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109533,
        arg: 3
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109534,
        arg: 3
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109535,
        arg: 8
      }, {
        c: "closetalk",
        data: 0
      }, {
        c: "touchState",
        data: true
      }, {
        c: "closeClickMask",
        data: ""
      }, {
        c: "finishTask"
      }]; //收获

      var story_19 = [{
        c: "popBG1",
        methon: 1
      }, {
        c: "closewindows",
        data: "UIHouse"
      }, {
        c: "closewindows",
        data: "ExperienceUI"
      }, {
        c: "closewindows",
        data: "RechargeView"
      }, {
        c: "pickScen",
        target: "farm,1"
      }, {
        c: "touchState",
        data: false
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109536,
        arg: 3
      }, {
        c: "talk",
        head: 1,
        dir: 1,
        data: 109537,
        arg: 7
      }, {
        c: "closetalk",
        data: 0
      }, {
        c: "touchState",
        data: true
      }, {
        c: "finishTask"
      }];
      var temp_V3_1 = new Vec3();
      var UIStory = exports('UIStory', (_dec = ccclass('UIStory'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Sprite), _dec6 = property(Sprite), _dec7 = property(Sprite), _dec8 = property(Node), _dec9 = property(Node), _dec10 = property(Node), _dec11 = property(Label), _dec12 = property(Label), _dec13 = property(Label), _dec14 = property(Node), _dec15 = property([SpriteFrame]), _dec16 = property([SpriteFrame]), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(UIStory, _BaseUI);

        function UIStory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "mask", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bg1", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bg2", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "head1", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "head2", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "head3", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Bar", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Bar1", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Bar2", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "text1", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "text2", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "text3", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "layer", _descriptor13, _assertThisInitialized(_this));

          _this.exitCb = null;
          _this.talkCb = null;
          _this.taskEventCb = null;
          _this.taskEventData = null;
          _this.activeParameter = null;

          _initializerDefineProperty(_this, "headImage", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "minHeadImage", _descriptor15, _assertThisInitialized(_this));

          _this._curTime = 0;
          _this._lastTime = 0;
          _this._talkData = [];
          _this._index = 0;
          _this._task = null;
          _this._Command = null;
          _this._game = null;
          _this._curCommandEIP = -1;
          _this._curCommandTop = -2;
          _this._AlignTarget = null;
          _this._isLock = false;
          _this._NodeArray = [];
          _this._messagePierce = false;
          _this._SelectTarget = null;
          return _this;
        }

        var _proto = UIStory.prototype;

        _proto.getStory = function getStory(task) {
          var cond = task.target.split(",");
          if (cond.length < 2) return [];
          if (cond[0] != "story") return [];
          if (cond[1] == "1") return story_1;else if (cond[1] == "2") return story_2;else if (cond[1] == "3") return story_3;else if (cond[1] == "4") return story_4;else if (cond[1] == "5") return story_5;else if (cond[1] == "6") return story_6;else if (cond[1] == "7") return story_7;else if (cond[1] == "8") return story_8;else if (cond[1] == "9") return story_9;else if (cond[1] == "10") return story_10;else if (cond[1] == "11") return story_11;else if (cond[1] == "12") return story_12;else if (cond[1] == "13") return story_13;else if (cond[1] == "14") return story_14;else if (cond[1] == "15") return story_15;else if (cond[1] == "16") return story_16;else if (cond[1] == "17") return story_17;else if (cond[1] == "18") return story_18;else if (cond[1] == "19") return story_19;
          return [];
        };

        _proto.initUI = function initUI(task, args, cb) {
          this._curTime = UIHelp.getTimeMask();
          this._game = GameManager.getInstance().getGame(MainGame);
          this._task = task;
          this.activeParameter = args;
          this.exitCb = cb;
          this.talkCb = null;
          this.taskEventCb = null;
          this.head1.node.active = false;
          this.head2.node.active = false;
          this.head3.node.active = false;
          this.bg1.setPosition(0, 450, 0);
          this.bg2.setPosition(0, -450, 0);
          this.Bar.active = false;
          this.Bar1.active = false;
          this.Bar2.active = false; //this._talkData = task.talk.split(",");

          this._index = 0;
          this._AlignTarget = null;
          this._Command = this.getStory(task);
          this._curCommandTop = this._curCommandEIP;
        };

        _proto.pushBG1 = function pushBG1() {
          this.bg1.setPosition(0, 450, 0);
          this.bg2.setPosition(0, -450, 0);
          this.bg1.active = true;
          this.bg2.active = true;
          tween(this.bg1).to(0.5, {
            position: new Vec3(0, 312, 0)
          }).start();
          tween(this.bg2).to(0.5, {
            position: new Vec3(0, -312, 0)
          }).start();
        };

        _proto.popBG1 = function popBG1(methon) {
          var _this2 = this;

          if (methon) {
            this.bg1.setPosition(0, 450, 0);
            this.bg2.setPosition(0, -450, 0);
            this.bg1.active = false;
            this.bg2.active = false;
          } else {
            this.bg1.setPosition(0, 312, 0);
            this.bg2.setPosition(0, -312, 0);
            tween(this.bg1).to(0.5, {
              position: new Vec3(0, 450, 0)
            }).call(function () {
              _this2.bg1.active = false;
            }).start();
            tween(this.bg2).to(0.5, {
              position: new Vec3(0, -450, 0)
            }).call(function () {
              _this2.bg2.active = false;
            }).start();
          }
        };

        _proto.titleBGAlpha = function titleBGAlpha(alpha) {
          var sp1 = this.bg1.getComponent(Sprite);
          sp1.color = new Color(0, 0, 0, alpha);
          var sp2 = this.bg2.getComponent(Sprite);
          sp2.color = new Color(0, 0, 0, alpha);
        };

        _proto.closeTask1 = function closeTask1() {
          this.head1.node.active = false;
          this.Bar.active = false;
        };

        _proto.closeTask2 = function closeTask2() {
          this.head2.node.active = false;
          this.Bar1.active = false;
        };

        _proto.closeTask3 = function closeTask3() {
          this.head3.node.active = false;
          this.Bar2.active = false;
        };

        _proto.getHead = function getHead(id) {
          if (id == 1) return this.getMainRole();
          return this.getOtherRole();
        };

        _proto.getMinHead = function getMinHead(id) {
          if (id == 1) return this.getMinMainRole();
          return this.getMinOtherRole();
        };

        _proto.showTask1 = function showTask1(data) {
          var _this3 = this;

          var self = this;

          if (!this.Bar.active) {
            this.closeTask2();
            this.closeTask3();
            this.Bar.active = true;
            this.head1.node.active = true;
            this.head1.spriteFrame = this.getHead(data.head);
            this.Bar.setScale(0, 1, 1);
            var continueNode = this.Bar.getChildByName("continue"); // continueNode.getComponent(Label).string = ConfigFile.findLanguage(109504);

            this.text1.string = "";
            tween(this.Bar).to(0.5, {
              scale: new Vec3(1, 1, 1)
            }).call(function () {
              _this3._curTime = UIHelp.getTimeMask();
              self.next();
            }).start();
          } else {
            this.Bar.setScale(1, 1, 1);
            this.head1.node.active = true;
            this.head1.spriteFrame = this.getHead(data.head);
            this._curTime = UIHelp.getTimeMask();
            self.next();
          }
        };

        _proto.showTask2 = function showTask2(data) {
          var _this4 = this;

          var self = this;

          if (!this.Bar1.active) {
            this.closeTask1();
            this.closeTask3();
            this.Bar1.active = true;
            this.head2.node.active = true;
            this.head2.spriteFrame = this.getHead(data.head);
            this.Bar1.setScale(0, 1, 1);
            var continueNode = this.Bar1.getChildByName("continue");
            continueNode.getComponent(Label).string = ConfigFile.findLanguage(109504);
            this.text2.string = "";
            tween(this.Bar1).to(0.5, {
              scale: new Vec3(-1, 1, 1)
            }).call(function () {
              _this4._curTime = UIHelp.getTimeMask();
              self.next();
            }).start();
          } else {
            this.Bar1.setScale(-1, 1, 1);
            this.head2.node.active = true;
            this.head2.spriteFrame = this.getHead(data.head);
            this._curTime = UIHelp.getTimeMask();
            self.next();
          }
        };

        _proto.showTask3 = function showTask3(data) {
          var _this5 = this;

          var self = this;

          if (!this.Bar2.active) {
            this.closeTask1();
            this.closeTask2();
            this.Bar2.active = true;
            this.head3.node.active = true;
            this.head3.spriteFrame = this.getMinHead(data.head);
            this.Bar2.setScale(0, 1, 1);
            var continueNode = this.Bar2.getChildByName("continue");
            continueNode.getComponent(Label).string = ConfigFile.findLanguage(109504);
            this.text3.string = "";
            tween(this.Bar2).to(0.5, {
              scale: new Vec3(1, 1, 1)
            }).call(function () {
              _this5._curTime = UIHelp.getTimeMask();
              self.next();
            }).start();
          } else {
            this.Bar2.setScale(1, 1, 1);
            this.head3.node.active = true;
            this.head3.spriteFrame = this.getMinHead(data.head);
            this._curTime = UIHelp.getTimeMask();
            self.next();
          }
        };

        _proto.formatText = function formatText(c) {
          var text = ConfigFile.findLanguage(c.data);

          if (c.arg == 1) {
            text = text.format(this.getMainRoleName());
          } else if (c.arg == 2) {
            var select = this.activeParameter.select;

            if (select && this.activeParameter.seedId) {
              var config = null;

              if (select.getType() == "pasture") {
                var animal = ConfigFile.getAnimalFromModeId(this.activeParameter.seedId);
                config = ConfigFile.getItemData(animal.AnimalCubId);
              } else {
                var botany = ConfigFile.getBotanyFromSeedId(this.activeParameter.seedId);
                config = ConfigFile.getItemData(botany.BotanySeedId);
              }

              if (config) text = text.format(ConfigFile.findLanguage(config.Name));
            }
          } else if (c.arg == 3) {
            if (this._SelectTarget) {
              if (this._SelectTarget.getType() == "fameland") {
                var plantID = this._SelectTarget.plantID || 2; //这儿有个异步消息可能拿不到plantID，不敢改大逻辑了

                var _botany = ConfigFile.getBotanyFromId(plantID);

                var _config = ConfigFile.getItemData(_botany.BotanyCropsId);

                if (_config) {
                  text = text.format(ConfigFile.findLanguage(_config.Name));
                }
              } else if (this._SelectTarget.getType() == "pasture") {
                var _animal = this._SelectTarget.getAnimal(1);

                if (_animal) {
                  var animalInfo = ConfigFile.getAnimalFromModeId(_animal);
                  var needitem = ConfigFile.getItemData(animalInfo.AnimalConsumeId);
                  text = text.format(ConfigFile.findLanguage(needitem.Name));
                }
              }
            } else {
              console.log("没有选择场景中对象");
            }
          } else if (c.arg == 4) {
            if (this.activeParameter.seedId) {
              var _animal2 = ConfigFile.getAnimalFromModeId(this.activeParameter.seedId);

              var _config2 = ConfigFile.getItemData(_animal2.AnimalCubId);

              var _needitem = ConfigFile.getItemData(_animal2.AnimalConsumeId);

              if (_config2 && _needitem) text = text.format(ConfigFile.findLanguage(_config2.Name), ConfigFile.findLanguage(_needitem.Name));
            }
          } else if (c.arg == 5) {
            var _select = this.activeParameter.select;

            if (_select && this.activeParameter.seedId) {
              var _config3 = null;

              if (_select.getType() == "pasture") {
                var _animal3 = ConfigFile.getAnimalFromModeId(this.activeParameter.seedId);

                _config3 = ConfigFile.getItemData(_animal3.AnimalCubId);
              } else {
                var _botany2 = ConfigFile.getBotanyFromSeedId(this.activeParameter.seedId);

                _config3 = ConfigFile.getItemData(_botany2.BotanySeedId);
              }

              if (_config3) text = text.format(ConfigFile.findLanguage(_config3.Name));
            }
          } else if (c.arg == 6) {
            if (this._SelectTarget) {
              if (this._SelectTarget.getType() == "fameland") {
                var _plantID = this._SelectTarget.plantID;

                var _botany3 = ConfigFile.getBotanyFromId(_plantID);

                var _config4 = ConfigFile.getItemData(_botany3.BotanyCropsId);

                if (_config4) {
                  text = text.format(ConfigFile.findLanguage(_config4.Name));
                }
              } else if (this._SelectTarget.getType() == "pasture") {
                var _animal4 = this._SelectTarget.getAnimal(1);

                if (_animal4) {
                  var _animalInfo = ConfigFile.getAnimalFromModeId(_animal4);

                  var _needitem2 = ConfigFile.getItemData(_animalInfo.AnimalConsumeId);

                  var _config5 = ConfigFile.getItemData(_animalInfo.AnimalCubId);

                  text = text.format(ConfigFile.findLanguage(_needitem2.Name), ConfigFile.findLanguage(_config5.Name));
                }
              }
            } else {
              console.log("没有选择场景中对象");
            }
          } else if (c.arg == 7) {
            if (this._SelectTarget) {
              if (this._SelectTarget.getType() == "fameland") {
                var _plantID2 = this._SelectTarget.plantID;

                var _botany4 = ConfigFile.getBotanyFromId(_plantID2);

                var _config6 = ConfigFile.getItemData(_botany4.BotanyCropsId);

                if (_config6) {
                  var na = ConfigFile.findLanguage(_config6.Name);
                  text = text.format(na, na, na);
                }
              } else if (this._SelectTarget.getType() == "pasture") {
                var _animal5 = this._SelectTarget.getAnimal(1);

                if (_animal5) {
                  var _animalInfo2 = ConfigFile.getAnimalFromModeId(_animal5);

                  var _needitem3 = ConfigFile.getItemData(_animalInfo2.AnimalConsumeId);

                  var _config7 = ConfigFile.getItemData(_animalInfo2.AnimalCubId);

                  text = text.format(ConfigFile.findLanguage(_config7.Name), ConfigFile.findLanguage(_needitem3.Name));
                }
              }
            } else {
              console.log("没有选择场景中对象");
            }
          } else if (c.arg == 8) {
            if (this._SelectTarget) {
              if (this._SelectTarget.getType() == "fameland") {
                var _plantID3 = this._SelectTarget.plantID;

                var _botany5 = ConfigFile.getBotanyFromId(_plantID3);

                var _config8 = ConfigFile.getItemData(_botany5.BotanyCropsId);

                if (_config8) {
                  var _na = ConfigFile.findLanguage(_config8.Name);

                  text = text.format(_na, _na);
                }
              } else if (this._SelectTarget.getType() == "pasture") {
                var _animal6 = this._SelectTarget.getAnimal(1);

                if (_animal6) {
                  var _animalInfo3 = ConfigFile.getAnimalFromModeId(_animal6);

                  var _needitem4 = ConfigFile.getItemData(_animalInfo3.AnimalConsumeId);

                  var _config9 = ConfigFile.getItemData(_animalInfo3.AnimalCubId);

                  text = text.format(ConfigFile.findLanguage(_needitem4.Name), ConfigFile.findLanguage(_config9.Name));
                }
              }
            } else {
              console.log("没有选择场景中对象");
            }
          }

          return text;
        };

        _proto.showTalk = function showTalk(c, cb) {
          this.talkCb = cb;
          this._talkData = [];
          var text = this.formatText(c);

          this._talkData.push(text);

          this._index = 0;
          this._curTime = UIHelp.getTimeMask();

          if (c.dir == 1) {
            this.showTask1(c);
          } else if (c.dir == 3) {
            this.showTask3(c);
          } else {
            this.showTask2(c);
          }
        };

        _proto.closeTalk = function closeTalk() {
          this.talkCb && this.talkCb();
          this.talkCb = null;
          this.head1.node.active = false;
          this.head2.node.active = false;
          this.head3.node.active = false;
          this.Bar.active = false;
          this.Bar1.active = false;
          this.Bar2.active = false;
        };

        _proto.endTalk = function endTalk() {
          this.talkCb && this.talkCb();
          this.talkCb = null;
        };

        _proto.getMainRole = function getMainRole() {
          var userData = GameAllData.FarmUserResponse;
          var image = this.headImage[0];
          if (userData.Sex == 1) image = this.headImage[1];
          return image;
        };

        _proto.getMinMainRole = function getMinMainRole() {
          var userData = GameAllData.FarmUserResponse;
          var image = this.minHeadImage[0];
          if (userData.Sex == 1) image = this.minHeadImage[1];
          return image;
        };

        _proto.getMainRoleName = function getMainRoleName() {
          var userData = GameAllData.FarmUserResponse;
          return userData.NikiName;
        };

        _proto.getOtherRole = function getOtherRole() {
          var userData = GameAllData.FarmUserResponse;
          var image = this.headImage[1];
          if (userData.Sex == 1) image = this.headImage[0];
          return image;
        };

        _proto.getMinOtherRole = function getMinOtherRole() {
          var userData = GameAllData.FarmUserResponse;
          var image = this.minHeadImage[1];
          if (userData.Sex == 1) image = this.minHeadImage[0];
          return image;
        };

        _proto.getOtherRoleName = function getOtherRoleName() {
          var userData = GameAllData.FarmUserResponse;
          if (userData.Sex == 1) return producer.getMessageText(120104);else return producer.getMessageText(120101);
        };

        _proto.next = function next() {
          this._lastTime = UIHelp.getTimeMask();
          this._curTime = this._lastTime;

          if (this._index >= this._talkData.length) {
            this.endTalk();
          } else {
            //let talkcode = this._talkData[this._index];
            if (this.Bar.active) this.text1.string = this._talkData[this._index];else if (this.Bar1.active) this.text2.string = this._talkData[this._index];else if (this.Bar2.active) this.text3.string = this._talkData[this._index];
            this._index++;
          }
        };

        _proto.CloseUI = function CloseUI() {
          //TaskManager.getInstance().onTalkEnd(this._task);
          UIManager.getInstance().closeUI(UIStory);
        };

        _proto.onLoad = function onLoad() {
          this.mask.on(Input.EventType.TOUCH_START, this.onBeginTouch, this);
          EventManager.getInstance().add(MessageManager.Custom.TASKEVENT, this, this.onTaskEvent);
        };

        _proto.getEventData = function getEventData(sourceEvent, targetEventData) {
          return targetEventData[sourceEvent];
        };

        _proto.onTaskEvent = function onTaskEvent(args) {
          if (!this.taskEventCb) return;
          var eventData = this.getEventData(args.c, this.taskEventData);

          if (eventData) {
            if (args.c == "click") {
              var _this$getClickTarget = this.getClickTarget(eventData),
                  tip = _this$getClickTarget.tip,
                  _producer = _this$getClickTarget.producer;

              if (args.target == _producer) {
                this.taskEventCb();
              }
            } else if (args.c == "clickCtl") {
              var _this$getClickTarget2 = this.getClickTarget(eventData),
                  _tip = _this$getClickTarget2.tip,
                  _producer2 = _this$getClickTarget2.producer;

              if (args.target == _producer2) {
                this.taskEventCb();
              }
            } else if (args.c == "LandUnlock") {
              var _this$getClickTarget3 = this.getClickTarget(eventData),
                  _tip2 = _this$getClickTarget3.tip,
                  _producer3 = _this$getClickTarget3.producer;

              if (args.target == _producer3) {
                this.taskEventCb();
              }
            } else if (args.c == "PastureUnlock") {
              var _this$getClickTarget4 = this.getClickTarget(eventData),
                  _tip3 = _this$getClickTarget4.tip,
                  _producer4 = _this$getClickTarget4.producer;

              if (args.target == _producer4) {
                this.taskEventCb();
              }
            } else if (args.c == "LandBreed") {
              var _this$getClickTarget5 = this.getClickTarget(eventData),
                  _tip4 = _this$getClickTarget5.tip,
                  _producer5 = _this$getClickTarget5.producer;

              if (args.target == _producer5) {
                this.taskEventCb();
              }
            } else if (args.c == "LandPlant") {
              var _this$getClickTarget6 = this.getClickTarget(eventData),
                  _tip5 = _this$getClickTarget6.tip,
                  _producer6 = _this$getClickTarget6.producer;

              if (args.target == _producer6) {
                this.taskEventCb();
              }
            } else if (args.c == "openwindow") {
              if (args.target == eventData) {
                this.taskEventCb();
              }
            } else if (args.c == "closewindow") {
              if (args.target == eventData) {
                this.taskEventCb();
              }
            } else if (args.c == "activeNode") {
              if (args.target == eventData) {
                this.taskEventCb();
              }
            } else if (args.c == "closeNode") {
              if (args.target == eventData) {
                this.taskEventCb();
              }
            }
          }
        };

        _proto.onDestroy = function onDestroy() {
          // this._NodeArray.forEach((item)=>{
          //     item.parent = null;
          // })
          // this._NodeArray = [];
          this.exitCb && this.exitCb(this._task);

          _BaseUI.prototype.onDestroy.call(this);
        };

        _proto.start = function start() {};

        _proto.loadPrefab = function loadPrefab(c, cb) {
          var self = this;

          var t = this._game.node.getChildByPath(c.target);

          var pos = Vec3.ZERO;
          if (t) pos = t.getWorldPosition();
          var lastNode = null;

          if (c.follow) {
            lastNode = this.getCacheNode(c.follow);
            if (c.follwPoint) lastNode = lastNode.getChildByPath(c.follwPoint);
          }

          resources.load(c.data, function (err, res) {
            if (res) {
              var newNode = instantiate(res);
              if (lastNode) newNode.parent = lastNode;else {
                newNode.parent = self._game.layer2;
                newNode.setWorldPosition(pos);
                newNode.getComponent(GuardCtr).setParentToScene();
              }
              newNode.getComponent(GuardCtr)._follow = lastNode;
              if (c.name) newNode.name = c.name;

              self._NodeArray.push(newNode);

              cb && cb();
            } else {
              cb && cb();
            }
          });
        };

        _proto.loadTowAnimation = function loadTowAnimation(c, cb) {
          var self = this;
          var target = this.getClickTarget(c.target);
          var source = this.getClickTarget(c.source);
          var args = {
            target: this.targetToNode(target),
            source: this.targetToNode(source),
            x: c.x,
            y: c.y,
            command: c
          };
          resources.load("prefabs/game/towAnimation", function (err, res) {
            if (res) {
              var newNode = instantiate(res);
              newNode.parent = self.layer;
              newNode.getComponent(towAnimation).initUI(args, null);
              if (c.name) newNode.name = c.name;
              if (self && self._NodeArray) self._NodeArray.push(newNode);else newNode.destroy();
            }
          });
          cb && cb();
        };

        _proto.loadJiantouAnimation = function loadJiantouAnimation(c, cb) {
          var self = this;
          var target = this.getClickTarget(c.target);
          var args = {
            target: this.targetToNode(target),
            x: c.x,
            y: c.y,
            command: c
          };
          var wnd = UIManager.getInstance().getUI(UIGame);
          resources.load("prefabs/game/jiantouAnimation", function (err, res) {
            if (res) {
              var newNode = instantiate(res);
              newNode.parent = wnd.node;
              newNode.getComponent(jiantouAnimation).initUI(args);
              if (c.name) newNode.name = c.name;

              self._NodeArray.push(newNode);

              cb && cb();
            } else {
              cb && cb();
            }
          });
        };

        _proto.getCacheNode = function getCacheNode(name) {
          for (var index = 0; index < this._NodeArray.length; index++) {
            if (this._NodeArray[index].name == name) return this._NodeArray[index];
          }

          return null;
        };

        _proto.loadRole = function loadRole(c, cb) {
          var self = this;
          var name = "animal/guard1";
          var userData = GameAllData.FarmUserResponse;
          var lastNode = null;
          var role = null;

          if (c.name) {
            role = this.getCacheNode(c.name);
            role && (role.active = true);
          }

          if (role) {
            temp_V3_1.set(0, 0, 0);

            var t = self._game.node.getChildByPath(c.target);

            if (t) t.getWorldPosition(temp_V3_1);
            role.setWorldPosition(temp_V3_1);
            return;
          }

          try {
            if (userData.Sex == 1) name = "animal/guard2";

            if (c.follow) {
              lastNode = this.getCacheNode(c.follow);
              if (c.followPoint) lastNode = lastNode.getChildByPath(c.followPoint);
            }
          } catch (error) {
            console.log("loadRoleError=>", error);
            return;
          }

          resources.load(name, function (err, res) {
            if (res) {
              console.log("load role ok");

              try {
                temp_V3_1.set(0, 0, 0);

                var _t = self._game.node.getChildByPath(c.target);

                if (_t) _t.getWorldPosition(temp_V3_1);
                var newNode = instantiate(res);
                if (lastNode) newNode.parent = lastNode;else {
                  newNode.parent = self._game.layer2;
                  newNode.setWorldPosition(temp_V3_1);
                  newNode.getComponent(GuardCtr).setParentToScene();
                }
                newNode.getComponent(GuardCtr)._follow = lastNode;
                if (c.name) newNode.name = c.name;

                self._NodeArray.push(newNode);
              } catch (error) {
                console.log("append role =>", error);
              }

              cb && cb();
            } else {
              cb && cb();
            }
          });
        };

        _proto.movenode = function movenode(c, cb) {
          var target = this.getCacheNode(c.data);

          if (target) {
            var t = this._game.node.getChildByPath(c.path);

            TaskManager.getInstance().moveLock = true;
            target.getComponent(GuardCtr).startMove(t, function () {
              TaskManager.getInstance().moveLock = false;
              cb && cb();
            });
          } else {
            cb && cb();
          }
        };

        _proto.findNode = function findNode(name) {
          var a = name.split(",");

          if (a.length > 1) {
            var select = this.getClickTarget(name);
            var target = this.targetToNode(select);
            return target;
          } else {
            var _target = this._game.node.getChildByPath(name);

            if (_target) {
              return _target;
            } else {
              _target = this.getCacheNode(name);
              return _target;
            }
          }
        };

        _proto.selectScen = function selectScen(c) {
          var _this$getClickTarget7 = this.getClickTarget(c.target),
              tip = _this$getClickTarget7.tip,
              producer = _this$getClickTarget7.producer;

          if (tip == "ui" || tip == "scroll") return;
          this._SelectTarget = producer;
        };

        _proto.checkCond = function checkCond(c) {
          if (c.cond == "unlock") {
            var _this$getClickTarget8 = this.getClickTarget(c.target),
                tip = _this$getClickTarget8.tip,
                _producer7 = _this$getClickTarget8.producer;

            return _producer7.getLevel() == 0 && _producer7.checkCanUnlock(1);
          } else if (c.cond == "item") {
            var a = c.target.split(",");
            var bagitem = GameAllData.getStoreItemByModeId(a[0]);

            if (!bagitem || bagitem.ItemCount < Number(a[1])) {
              return false;
            } else {
              return true;
            }
          }

          return false;
        };

        _proto.execCommand = function execCommand(command, cb) {
          console.log("exec =>", command.c, "  index=", this._curCommandEIP);

          if (command.c == "Align") {
            if (command.data == "") {
              this._AlignTarget = null;
            } else {
              var target = this.findNode(command.data);

              if (target) {
                this._game.mapAlignmentToNodeCenter(target, false);

                this._AlignTarget = target;
              }
            }

            cb && cb();
          } else if (command.c == "load") {
            this.loadPrefab(command, cb);
          } else if (command.c == "rolestate") {
            var _target2 = this.findNode(command.data);

            if (_target2) {
              _target2.getComponent(GuardCtr).setDirect(command.dir);

              _target2.getComponent(GuardCtr).setState(command.state);
            }

            cb && cb();
          } else if (command.c == "nodeToScen") {
            var _target3 = this.findNode(command.data);

            if (_target3) {
              this._game.scensTree.insertNode1(_target3);
            }

            cb && cb();
          } else if (command.c == "findnode") {
            var _target4 = this.findNode(command.data);

            if (_target4) {
              var a = _target4.getChildByPath(command.path);

              this._NodeArray.push(a);
            }

            cb && cb();
          } else if (command.c == "loadrole") {
            this.loadRole(command, cb);
          } else if (command.c == "talk") {
            this.showTalk(command, cb);
          } else if (command.c == "closetalk") {
            this.closeTalk();
            cb && cb();
          } else if (command.c == "pickScen") {
            this.selectScen(command);
            cb && cb();
          } else if (command.c == "move") {
            this.movenode(command, cb);
          } else if (command.c == "scenScale") {
            this._game.targetScale = command.data;
            cb && cb();
          } else if (command.c == "wait") {
            setTimeout(function () {
              cb && cb();
            }, command.data);
          } else if (command.c == "pushBG1") {
            this.pushBG1();
            cb && cb();
          } else if (command.c == "popBG1") {
            this.popBG1(command.methon);
            cb && cb();
          } else if (command.c == "titleBGAlpha") {
            this.titleBGAlpha(command.data);
            cb && cb();
          } else if (command.c == "openClickMask") {
            this.loadClickMask(command, cb);
          } else if (command.c == "waitEvent") {
            this.onWaitEvent(command, cb);
          } else if (command.c == "touchState") {
            //this._messagePierce = command.data;
            this.mask.active = command.data ? false : true;
            cb && cb();
          } else if (command.c == "closeClickMask") {
            TaskManager.getInstance().moveMapLock = false;
            this.layer.removeAllChildren();
            cb && cb();
          } else if (command.c == "exit") {
            this._curCommandEIP = this._Command.length;
            this._curCommandTop = this._curCommandEIP - 1;
            cb && cb();
          } else if (command.c == "towAnimation") {
            this.loadTowAnimation(command, cb);
          } else if (command.c == "jiantouAnimation") {
            this.loadJiantouAnimation(command, cb);
          } else if (command.c == "goto") {
            if (command.cond) {
              if (this.checkCond(command)) {
                this._curCommandEIP += command.data;
                this._curCommandTop = this._curCommandEIP - 1;
              }
            } else {
              this._curCommandEIP += command.data;
              this._curCommandTop = this._curCommandEIP - 1;
            }

            cb && cb();
          } else if (command.c == "finishTask") {
            if (command.taskid) {
              TaskManager.getInstance().finishTask(command.taskid);
            } else {
              TaskManager.getInstance().finishTask(this._task.id);
            }

            cb && cb();
          } else if (command.c == "closewindows") {
            UIManager.getInstance().closeUIFromName(command.data);
            cb && cb();
          } else if (command.c == "remove") {
            var _target5 = this.getCacheNode(command.name);

            if (_target5) _target5.active = false;
            cb && cb();
          } else if (command.c == "openwindows") {
            UIManager.getInstance().openUI(command.data);
            cb && cb();
          } else if (command.c == "closeAllUI") {
            UIManager.getInstance().closeAllUINew();
            cb && cb();
          } else if (command.c == "goUIByTaskFindType") {
            TaskConfigGoManager.goUIByTaskFindType(command.info, command.uiData);
            cb && cb();
          }
        };

        _proto.onWaitEvent = function onWaitEvent(c, cb) {
          if (c.closewindow) {
            var wnd = UIManager.getInstance().getUIFromName(c.closewindow);

            if (!wnd) {
              cb && cb();
              return;
            }
          }

          this.taskEventCb = cb;
          this.taskEventData = c;
        };

        _proto.findWndFromClassName = function findWndFromClassName(WndClass, ctlpath) {
          var wnd = UIManager.getInstance().getUIFromName(WndClass);
          if (!wnd) return null;
          var ctlnode = wnd.node.getChildByPath(ctlpath);

          if (!ctlnode) {
            console.log("未找到路径=>", ctlpath);
          }

          return ctlnode;
        };

        _proto.findScrollData = function findScrollData(WndClass, path, index) {
          var wnd = UIManager.getInstance().getUIFromName(WndClass);
          if (!wnd) return null;
          var child = wnd.node.getChildByPath(path);
          if (!child) return null;
          var sc = child.getComponent(ScrollView);

          if (sc) {
            if (index < 0 || index >= sc.content.children.length) return null;
            return sc.content.children[index];
          }

          return null;
        };

        _proto.getClickTarget = function getClickTarget(target) {
          var cond = target.split(",");
          if (cond.length < 2) return null;
          var producer = null;
          var game = GameManager.getInstance().getGame(MainGame);

          if (cond[0] == "farm") {
            producer = game.getFarmLandFromID(Number(cond[1]));
          } else if (cond[0] == "pasture") {
            producer = game.getPastureFromID(Number(cond[1]));
          } else if (cond[0] == "build") {
            producer = game.getBuildFromID(Number(cond[1]));
          } else if (cond[0] == "ui") {
            producer = this.findWndFromClassName(cond[1], cond[2]);
          } else if (cond[0] == "scroll") {
            producer = this.findScrollData(cond[1], cond[2], Number(cond[3]));
          }

          return {
            tip: cond[0],
            producer: producer
          };
        };

        _proto.targetToNode = function targetToNode(target) {
          if (!target) return null;
          if (target.tip == "ui") return target.producer;
          if (target.tip == "scroll") return target.producer;
          if (target.tip == "farm") return target.producer.node.parent;
          if (target.tip == "pasture") return target.producer.node.parent;
          if (target.tip == "build") return target.producer.node;
          return target.producer;
        };

        _proto.targetIsAlignment = function targetIsAlignment(target) {
          if (!target) return false;
          if (target.tip == "ui") return false;
          if (target.tip == "scroll") return false;
          if (target.tip == "farm") return true;
          if (target.tip == "pasture") return true;
          if (target.tip == "build") return true;
          return false;
        };

        _proto.loadClickMask = function loadClickMask(c, cb) {
          var self = this;
          var game = GameManager.getInstance().getGame(MainGame);
          var select = this.getClickTarget(c.data);
          var target = this.targetToNode(select);

          var copydata = _extends({}, c);

          var aligmentTarget = this.targetIsAlignment(select);
          if (target && aligmentTarget) game.mapAlignmentToNodeCenter(target, false);

          if (c.type == 1) {
            resources.load("prefabs/ui/view/ClickMask1", function (err, res) {
              if (res) {
                var newNode = instantiate(res);
                if (c.name) newNode.name = c.name;
                newNode.parent = self.layer;
                newNode.getComponent(ClickMask).initUI(target, c.type, c.show, aligmentTarget, copydata.dir, null);
                cb && cb();
              } else {
                cb && cb();
              }
            });
          } else {
            resources.load("prefabs/ui/view/ClickMask", function (err, res) {
              if (res) {
                var newNode = instantiate(res);
                if (c.name) newNode.name = c.name;
                newNode.parent = self.layer;
                newNode.getComponent(ClickMask).initUI(target, c.type, c.show, aligmentTarget, copydata.dir, null);
                cb && cb();
              } else {
                cb && cb();
              }
            });
          }
        };

        _proto.onBeginTouch = function onBeginTouch(event) {
          if (UIHelp.getTimeDiff(this._lastTime) > 50) {
            this._lastTime = UIHelp.getTimeMask();
            if (this.isTalkShow()) this.next();
          }

          if (this._messagePierce) {
            event.preventSwallow = true;
          }
        };

        _proto.nextCommand = function nextCommand() {
          var _this6 = this;

          this._curCommandEIP++;
          if (this._curCommandEIP < 0) this._curCommandEIP = 0;

          if (this._curCommandEIP >= this._Command.length) {
            UIManager.getInstance().closeUI(UIStory);
            return;
          }

          var c = this._Command[this._curCommandEIP];
          this.execCommand(c, function () {
            _this6._curCommandTop++;
          });
        };

        _proto.isTalkShow = function isTalkShow() {
          if (this.Bar.active) return true;
          if (this.Bar1.active) return true;
          if (this.Bar2.active) return true;
          return false;
        };

        _proto.update = function update(deltaTime) {
          // let target = this.getCacheNode("role");
          // if (target) {
          //     let t = this._game.node.getChildByPath('path');
          //     TaskManager.getInstance().moveLock = true;
          //     target.getComponent(GuardCtr).startMove(t, () => {
          //         TaskManager.getInstance().moveLock = false;
          //     });
          // } 
          // UIManager.getInstance().closeUI(UIStory);
          // return;
          if (this._curCommandEIP == this._curCommandTop) {
            this.nextCommand();
          }

          if (this.isTalkShow() && UIHelp.getTimeDiff(this._curTime) > 5000) {
            this.closeTalk();
          }

          if (this._AlignTarget) {
            this._game.mapAlignmentToNodeCenter(this._AlignTarget, false);
          }
        };

        return UIStory;
      }(BaseUI), _class3.className = "UIStory", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "mask", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bg1", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "bg2", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "head1", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "head2", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "head3", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "Bar", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "Bar1", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "Bar2", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "text1", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "text2", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "text3", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "layer", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "headImage", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "minHeadImage", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIVerification.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConstLanguage.ts', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './TipManager.ts', './UIManager.ts', './WebSocketMgr.ts', './NodeHelp.ts', './NumberUtil.ts', './Pool.ts', './UIHelp.ts', './BaseUI.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, Prefab, Node, Label, instantiate, Button, CircleCollider2D, v3, resources, SpriteFrame, Sprite, UITransform, ConstLanguage, ConfigFile, GameAllData, EventManager, MessageManager, TipManager, UIManager, WebSocketMgr, NodeHelp, NumberUtil, PoolOnce, UIHelp, BaseUI;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      Label = module.Label;
      instantiate = module.instantiate;
      Button = module.Button;
      CircleCollider2D = module.CircleCollider2D;
      v3 = module.v3;
      resources = module.resources;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
    }, function (module) {
      ConstLanguage = module.ConstLanguage;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      WebSocketMgr = module.WebSocketMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      NumberUtil = module.NumberUtil;
    }, function (module) {
      PoolOnce = module.PoolOnce;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      BaseUI = module.BaseUI;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _class3;

      cclegacy._RF.push({}, "cf628uVQudDlKJJqYvriyIW", "UIVerification", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NOT_HAVE_NUM = -1;
      var UIVerification = exports('UIVerification', (_dec = ccclass('UIVerification'), _dec2 = property({
        type: Prefab,
        displayName: "选择图片item"
      }), _dec3 = property({
        type: Prefab,
        displayName: "提示图片item"
      }), _dec4 = property({
        type: Prefab,
        displayName: "数字图片item"
      }), _dec5 = property({
        type: Node,
        displayName: "提示节点"
      }), _dec6 = property({
        type: Node,
        displayName: "选择节点"
      }), _dec7 = property({
        type: Node,
        displayName: "数字节点"
      }), _dec8 = property(Label), _dec9 = property(Label), _dec10 = property(Label), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(UIVerification, _BaseUI);

        function UIVerification() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "item", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tipItem", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "numItem", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tipsItems", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Items", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "numitems", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lableTip", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ButtonRefresh", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ButtonConfirm", _descriptor9, _assertThisInitialized(_this));

          _this.Pool = new PoolOnce(10, function () {
            return instantiate(_this.tipItem);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          _this.PoolItem = new PoolOnce(10, function () {
            return instantiate(_this.item);
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            return data.destroy();
          });
          _this.PoolNum = new PoolOnce(10, function () {
            var node = instantiate(_this.numItem);
            node.on(Button.EventType.CLICK, _this.onClickCancel, _assertThisInitialized(_this));
            return node;
          }, function (data) {
            data.removeFromParent();
          }, function (data) {
            data.off(Button.EventType.CLICK, _this.onClickCancel, _assertThisInitialized(_this));
            data.destroy();
          });
          _this.data = null;
          _this.find = new Map();
          return _this;
        }

        var _proto = UIVerification.prototype;

        _proto.start = function start() {
          EventManager.getInstance().add(MessageManager.Net.FarmAuthingResponse, this, this.onFarmAuthingResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmAuthResponse, this, this.onFarmAuthResponse);
          EventManager.getInstance().add(MessageManager.Net.FarmAuthRefreshResponse, this, this.onFarmAuthRefreshResponse);
          this.setlabelShow();
        };

        _proto.onDestroy = function onDestroy() {
          _BaseUI.prototype.onDestroy.call(this);
        };

        _proto.setlabelShow = function setlabelShow() {
          this.lableTip.string = ConfigFile.findLanguage(8001);
          this.ButtonRefresh.string = ConfigFile.findLanguage(8003);
          this.ButtonConfirm.string = ConfigFile.findLanguage(8002);
        };

        _proto.onFarmAuthingResponse = function onFarmAuthingResponse() {
          this.refreshDisplay();
          this.data = GameAllData.FarmAuthingResponse;
          this.createTipItem();
          this.createitem();
        };

        _proto.onFarmAuthResponse = function onFarmAuthResponse(data) {
          UIHelp.closeLoadingTA();

          if (data.Code != 0) {
            TipManager.TipFromCode(ConstLanguage.VERIFICATION_PANEL_TIP2);
          } else {
            TipManager.TipFromCode(ConstLanguage.VERIFICATION_PANEL_TIP1);
            this.refreshDisplay();
            this.onClickedClose();
          }
        };

        _proto.onFarmAuthRefreshResponse = function onFarmAuthRefreshResponse(data) {
          UIHelp.closeLoadingTA();
          if (data.Code != 0) ;
        };

        _proto.onClickedClose = function onClickedClose() {
          EventManager.getInstance().remove(MessageManager.Net.FarmAuthingResponse, this, this.onFarmAuthingResponse);
          EventManager.getInstance().remove(MessageManager.Net.FarmAuthResponse, this, this.onFarmAuthResponse);
          EventManager.getInstance().remove(MessageManager.Net.FarmAuthRefreshResponse, this, this.onFarmAuthRefreshResponse);
          this.Pool.clear();
          this.PoolItem.clear();
          this.PoolNum.clear();
          UIManager.getInstance().closeUI(this.tag);
        }
        /**创建提示图片*/
        ;

        _proto.createTipItem = function createTipItem() {
          var _this2 = this;

          var _loop = function _loop(index) {
            var node = _this2.Pool.get();

            var url = "Verification/small/" + _this2.data.PicAuthUrl[index] + "/spriteFrame";
            resources.load(url, SpriteFrame, function (error, spr) {
              if (error) {
                console.log(error);
                return;
              }

              NodeHelp.getchildlable(node, "Icon", Sprite, function (comp) {
                comp.spriteFrame = spr;
              });
            });

            _this2.tipsItems.addChild(node);

            node.setSiblingIndex(index);
          };

          for (var index = 0; index < this.data.PicAuthUrl.length; index++) {
            _loop(index);
          }
        }
        /**创建选择图 */
        ;

        _proto.createitem = function createitem() {
          var _this3 = this;

          var _loop2 = function _loop2(index) {
            var url = "Verification/big/" + _this3.data.PicUrl[index] + "/spriteFrame";
            resources.load(url, SpriteFrame, function (error, spr) {
              if (error) {
                console.log(error);
                return;
              }

              var node = _this3.PoolItem.get();

              NodeHelp.getchildlable(node, "Icon", Sprite, function (comp) {
                comp.spriteFrame = spr;
              });
              var rotationY = NumberUtil.minToMax(0, 360);
              var width = _this3.Items.getComponent(UITransform).width / 2;
              var height = _this3.Items.getComponent(UITransform).height / 2;

              _this3.Items.addChild(node);

              node.getComponent("VerificationUIItem").init(index);
              node.setRotationFromEuler(v3(0, 0, rotationY));
              node.setPosition(v3(NumberUtil.minToMax(-width, width), NumberUtil.minToMax(-height, height)));
            });
          };

          for (var index = 0; index < this.data.PicUrl.length; index++) {
            _loop2(index);
          }
        }
        /**刷新 */
        ;

        _proto.refreshDisplay = function refreshDisplay() {
          this.find.clear();
          this.data = null;

          while (this.Items.children.length >= 1) {
            this.Items.children[0].getComponent("VerificationUIItem").inPut();
            this.PoolItem.put(this.Items.children[0]);
          }

          while (this.tipsItems.children.length >= 1) {
            this.Pool.put(this.tipsItems.children[0]);
          }

          this.numitems.destroyAllChildren();
        }
        /**点击显示数字 */
        ;

        _proto.onClickShowNum = function onClickShowNum(event) {
          if (this.checkFind()) return;
          var pint = event.getUILocation();
          var itemNode = this.Items.children.find(function (v) {
            return NumberUtil.IsPointInCircle(pint, v.getComponent(CircleCollider2D));
          });
          var findIdnex = this.setFind(NOT_HAVE_NUM);

          if (itemNode) {
            var item = itemNode.getComponent("VerificationUIItem");
            this.find["delete"](findIdnex);
            findIdnex = this.setFind(item.index);
          }

          var node = this.PoolNum.get();
          var num = findIdnex;
          NodeHelp.getchildlable(node, "Label", Label, function (comp) {
            comp.string = num + "";
          });
          this.numitems.addChild(node);
          node.setWorldPosition(v3(pint.x, pint.y, 0));
        }
        /**点击取消操作 */
        ;

        _proto.onClickCancel = function onClickCancel(button) {
          var node = button.node;
          var findIdnex = this.find.size;
          NodeHelp.getchildlable(node, "Label", Label, function (comp) {
            findIdnex = Number(comp.string);
          });
          this.PoolNum.put(node);
          this.find["delete"](findIdnex);
        };

        _proto.setFind = function setFind(index) {
          var idnexKey = this.data.PicAuthUrl.length;
          var idenxVal = index;

          for (var _iterator = _createForOfIteratorHelperLoose(this.find.values()), _step; !(_step = _iterator()).done;) {
            var val = _step.value;

            if (val == index) {
              idenxVal = NOT_HAVE_NUM;
              break;
            }
          }

          for (var i = 1; i <= this.data.PicAuthUrl.length; i++) {
            if (!this.find.has(i)) {
              this.find.set(i, idenxVal);
              idnexKey = i;
              break;
            }
          }

          return idnexKey;
        };

        _proto.checkFind = function checkFind() {
          if (this.data.PicAuthUrl.length == this.find.size) {
            console.log("logfuck");
            return true;
          }

          return false;
        }
        /**确认 */
        ;

        _proto.onClickGo = function onClickGo() {
          var data = {
            Select: []
          };

          for (var i = 0; i < this.find.size; i++) {
            var index = this.find.get(i + 1);
            if (index != null) data.Select.push(index);
          }

          UIHelp.openLoadingTA();
          WebSocketMgr.send(MessageManager.Net.FarmAuthRequest, data);
        }
        /**刷新 */
        ;

        _proto.onClickRefresh = function onClickRefresh() {
          UIHelp.openLoadingTA();
          WebSocketMgr.send(MessageManager.Net.FarmAuthRefreshRequest);
        };

        return UIVerification;
      }(BaseUI), _class3.className = "UIVerification", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "item", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "tipItem", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "numItem", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "tipsItems", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "Items", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "numitems", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "lableTip", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "ButtonRefresh", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "ButtonConfirm", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIWallet.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './BaseUI.ts', './UIManager.ts', './WalletAddress.ts', './UIWalletAddressEdit.ts', './HttpMgr.ts', './NodeHelp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, ScrollView, Label, instantiate, UITransform, Vec3, Size, ConfigFile, GameAllData, EventManager, MessageManager, BaseUI, UIManager, WalletAddress, UIWalletAddressEdit, HttpMgr, NodeHelp;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      ScrollView = module.ScrollView;
      Label = module.Label;
      instantiate = module.instantiate;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      Size = module.Size;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      WalletAddress = module.WalletAddress;
    }, function (module) {
      UIWalletAddressEdit = module.UIWalletAddressEdit;
    }, function (module) {
      HttpMgr = module.HttpMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _class3;

      cclegacy._RF.push({}, "8783fGWxMZHAaKJCKlrjokI", "UIWallet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIWallet = exports('UIWallet', (_dec = ccclass('UIWallet'), _dec2 = property(Prefab), _dec3 = property(ScrollView), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(UIWallet, _BaseUI);

        function UIWallet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "addressPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "SV", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = UIWallet.prototype;

        _proto.onLoad = function onLoad() {
          this.getAddressList(1, 20);
          EventManager.getInstance().add(MessageManager.Custom.UPDATEADDRESS, this, this.onUpdateAddress);
          EventManager.getInstance().add(MessageManager.Custom.SELECTADDRESS, this, this.onSelectAddress);
        };

        _proto.start = function start() {
          NodeHelp.getchildlable(this.node, "title", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(121000);
          });
          NodeHelp.getchildlable(this.node, "btnAddWallet", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(121001);
            comp.updateRenderData(true);
          });
        };

        _proto.initUI = function initUI() {};

        _proto.onSelectAddress = function onSelectAddress() {
          //this.getAddressList(1,20);
          UIManager.getInstance().closeUI(UIWallet);
        };

        _proto.onUpdateAddress = function onUpdateAddress() {
          this.getAddressList(1, 20);
        };

        _proto.upList = function upList() {
          var _this2 = this;

          if (!GameAllData.addressData) return;
          this.SV.content.removeAllChildren();
          GameAllData.addressData.forEach(function (item) {
            _this2.AddItem(item);
          });
        };

        _proto.getAddressList = function getAddressList(page, size) {
          var _this3 = this;

          HttpMgr.post(GameAllData.httpServerUrl + "cashAdress/list", {
            page: page,
            size: size
          }, function (data) {
            if (data.data && data.data.items) {
              console.log("成功");
              GameAllData.addressData = data.data.items;
              if (_this3.isValid) _this3.upList();
            } else {
              GameAllData.addressData = [];
              if (_this3.isValid) _this3.upList();
              console.log("没有");
            }
          });
        };

        _proto.onAddNew = function onAddNew() {
          UIManager.getInstance().openUI(UIWalletAddressEdit, 20, function (ui, args) {
            ui.initUI(null);
          });
        };

        _proto.onClose = function onClose() {
          UIManager.getInstance().closeUI(UIWallet);
        };

        _proto.AddItem = function AddItem(Addressitem) {
          var item = instantiate(this.addressPrefab);
          var child = this.SV.content.children;
          var startY = 0;
          var lastHeight = 0;
          var endHeight = 0;

          if (child.length > 0) {
            var tail = child[child.length - 1];
            startY = tail.position.y;
            lastHeight = tail.getComponent(UITransform).contentSize.height;
            endHeight = startY - lastHeight;
          }

          this.SV.content.addChild(item);
          var script = item.getComponent(WalletAddress);
          if (script) script.initUI(this, Addressitem);
          var ts = item.getComponent(UITransform).contentSize;
          var cs = this.SV.content.getComponent(UITransform).contentSize;
          item.setPosition(new Vec3(0, endHeight, 0));
          var a = new Size(cs.width, ts.height + Math.abs(endHeight));
          this.SV.content.getComponent(UITransform).contentSize = a;
        };

        return UIWallet;
      }(BaseUI), _class3.className = "UIWallet", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "addressPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "SV", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIWalletAddressEdit.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './BaseUI.ts', './UIManager.ts', './HttpMgr.ts', './TipManager.ts', './NodeHelp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, EditBox, ToggleContainer, Input, ConfigFile, GameAllData, EventManager, MessageManager, BaseUI, UIManager, HttpMgr, TipManager, NodeHelp;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      EditBox = module.EditBox;
      ToggleContainer = module.ToggleContainer;
      Input = module.Input;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      HttpMgr = module.HttpMgr;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _class3;

      cclegacy._RF.push({}, "fbfd43McZFL45+t9s8eNZl8", "UIWalletAddressEdit", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIWalletAddressEdit = exports('UIWalletAddressEdit', (_dec = ccclass('UIWalletAddressEdit'), _dec2 = property(Node), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Node), _dec6 = property(EditBox), _dec7 = property(ToggleContainer), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(UIWalletAddressEdit, _BaseUI);

        function UIWalletAddressEdit() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;
          _this._cbData = null;
          _this._cb = null;

          _initializerDefineProperty(_this, "Text", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Title", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "BtnText", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maskNode", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "editText", _descriptor5, _assertThisInitialized(_this));

          _this._isOk = false;
          _this.sourceData = null;
          _this.mainNetType = 1;

          _initializerDefineProperty(_this, "tc", _descriptor6, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = UIWalletAddressEdit.prototype;

        _proto.start = function start() {
          this.maskNode.on(Input.EventType.TOUCH_START, this.onBeginTouch.bind(this));
          this.maskNode.on(Input.EventType.TOUCH_END, this.onStopTouch.bind(this));
          this.maskNode.on(Input.EventType.TOUCH_CANCEL, this.onStopTouch.bind(this));
          this.Title.string = ConfigFile.findLanguage(121002);
          NodeHelp.getchildlable(this.Text, "Label-000", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(121003);
          });
          NodeHelp.getchildlable(this.Text, "Label-001", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(121004);
          });
          NodeHelp.getchildlable(this.Text, "Label-002", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(121005);
          });
          NodeHelp.getchildlable(this.node, "Label", Label, function (comp) {
            comp.string = ConfigFile.findLanguage(121006);
          });
        };

        _proto.onSwitchMainNet = function onSwitchMainNet(t1) {
          if (t1.node.name == "Toggle1") {
            this.mainNetType = 1;
          } else {
            this.mainNetType = 2;
          }
        };

        _proto.selectAddress = function selectAddress() {
          GameAllData.selectAddress = this.sourceData.address;
          EventManager.getInstance().trigger(MessageManager.Custom.UPDATEADDRESS, {});
        };

        _proto.addAddress = function addAddress(address) {
          HttpMgr.post(GameAllData.httpServerUrl + "cashAdress/add", {
            address: address
          }, function (data) {
            if (data.code == 0) {
              EventManager.getInstance().trigger(MessageManager.Custom.UPDATEADDRESS, {});
            } else {
              TipManager.autoTip(3, data.code, ConfigFile.findLanguage(data.code));
            } // if(data.data && data.data.item){
            //     EventManager.getInstance().trigger(MessageManager.Custom.UPDATEADDRESS,{});
            // }else{
            //     console.log("addAddress 没有成功");
            // }


            UIManager.getInstance().closeUI(UIWalletAddressEdit);
          });
        };

        _proto.updateAddress = function updateAddress(address) {
          HttpMgr.post(GameAllData.httpServerUrl + "cashAdress/update", {
            address: address
          }, function (data) {
            if (data.code == 0) {
              EventManager.getInstance().trigger(MessageManager.Custom.UPDATEADDRESS, {});
            } else {
              TipManager.autoTip(3, data.code, ConfigFile.findLanguage(data.code));
            } // if(data.data){
            //     EventManager.getInstance().trigger(MessageManager.Custom.UPDATEADDRESS,{});
            // }else{
            //     console.log("updateAddress 没有成功");
            // }


            UIManager.getInstance().closeUI(UIWalletAddressEdit);
          });
        };

        _proto.initUI = function initUI(data) {
          this.sourceData = data;

          if (this.sourceData) {
            this.editText.string = this.sourceData.address;

            if (this.sourceData.network_type == 1) {
              this.mainNetType = 1;
              this.tc.toggleItems[0].isChecked = true;
            } else {
              this.mainNetType = 2;
              this.tc.toggleItems[1].isChecked = true;
            } //修改

          } else {
            //新增
            this.editText.string = "";
          }
        };

        _proto.onDestroy = function onDestroy() {};

        _proto.onClose = function onClose() {
          this._isOk = false;
          UIManager.getInstance().closeUI(UIWalletAddressEdit);
        };

        _proto.onOk = function onOk() {
          if (this.sourceData) {
            var arg = {
              id: this.sourceData.id,
              address: this.editText.string,
              network_type: this.mainNetType
            };
            this.updateAddress(arg);
          } else {
            var _arg = {
              currency_type: -1,
              address: this.editText.string,
              network_type: this.mainNetType
            };
            this.addAddress(_arg);
          }
        };

        _proto.onBeginTouch = function onBeginTouch(event) {};

        _proto.onStopTouch = function onStopTouch(event) {};

        return UIWalletAddressEdit;
      }(BaseUI), _class3.className = "UIWalletAddressEdit", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Text", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Title", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "BtnText", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "maskNode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "editText", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "tc", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UnlockTip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './producer.ts', './BaseTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Sprite, UITransform, producer, BaseTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      BaseTip = module.BaseTip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "750b81m2l9NSpxo27iKyN1q", "UnlockTip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UnlockTip = exports('UnlockTip', (_dec = ccclass('UnlockTip'), _dec2 = property(Label), _dec3 = property(Sprite), _dec4 = property(Label), _dec5 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseTip) {
        _inheritsLoose(UnlockTip, _BaseTip);

        function UnlockTip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseTip.call.apply(_BaseTip, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "producerName", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "textBG", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Text", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Money", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = UnlockTip.prototype;

        _proto.initUI = function initUI(arg) {
          this.popHeight = 100;
          this._cbData = arg;

          _BaseTip.prototype.initUI.call(this, arg); //this.producerName.string = arg.name;


          producer.replaceDefaultColor(this.producerName, arg.name);
          this.Text.string = arg.text;
          var height = this.Text.node.getComponent(UITransform).contentSize.height;
          var old = this.textBG.node.getComponent(UITransform).contentSize;
          old.height = height + 20;
          this.textBG.node.getComponent(UITransform).setContentSize(old); //this.lock.string = arg.lock;
          //this.Money.string = arg.money;
        };

        return UnlockTip;
      }(BaseTip), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "producerName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "textBG", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "Text", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "Money", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UpdrageCostTip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './producer.ts', './NodeHelp.ts', './BaseTip.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Sprite, UITransform, producer, NodeHelp, BaseTip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      BaseTip = module.BaseTip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "ed3a7jkoDBL5KzPgAEDl+pl", "UpdrageCostTip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UpdrageCostTip = exports('UpdrageCostTip', (_dec = ccclass('UpdrageCostTip'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Sprite), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseTip) {
        _inheritsLoose(UpdrageCostTip, _BaseTip);

        function UpdrageCostTip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseTip.call.apply(_BaseTip, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "producerName", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Text", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Money", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "icon", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = UpdrageCostTip.prototype;

        _proto.initUI = function initUI(arg, id) {
          var _this2 = this; //this.producerName.string = arg.name;


          this._cbData = arg;
          producer.replaceDefaultColor(this.producerName, arg.name);
          this.Text.string = arg.text;
          this.Money.string = arg.money;

          if (id) {
            NodeHelp.loadIcon("propIcon/itemicon", id.toString(), function (res) {
              _this2.icon.spriteFrame = res;
              var scale = NodeHelp.setScopeLimitation(_this2.icon.node.getComponent(UITransform), 35, 35);

              _this2.icon.node.setScale(scale, scale);
            });
          }
        };

        return UpdrageCostTip;
      }(BaseTip), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "producerName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Text", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "Money", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "icon", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/upLevelUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './UIManager.ts', './producer.ts', './BaseUI.ts', './newUnlockItem.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Node, Label, Input, tween, Vec3, instantiate, ConfigFile, Configname, UIManager, producer, BaseUI, newUnlockItem;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      Label = module.Label;
      Input = module.Input;
      tween = module.tween;
      Vec3 = module.Vec3;
      instantiate = module.instantiate;
    }, function (module) {
      ConfigFile = module.ConfigFile;
      Configname = module.Configname;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      producer = module.producer;
    }, function (module) {
      BaseUI = module.BaseUI;
    }, function (module) {
      newUnlockItem = module.newUnlockItem;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _class3;

      cclegacy._RF.push({}, "1c96dltrkxDxpDIRIuSOti6", "upLevelUI", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var upLevelUI = exports('upLevelUI', (_dec = ccclass('upLevelUI'), _dec2 = property(Prefab), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Label), _dec8 = property(Node), _dec9 = property(Node), _dec10 = property(Label), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(upLevelUI, _BaseUI);

        function upLevelUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "itemPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mark", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "child", _descriptor3, _assertThisInitialized(_this));

          _this.select = null;

          _initializerDefineProperty(_this, "level", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "levelText", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "BtnText", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "t1", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "t2", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "text", _descriptor9, _assertThisInitialized(_this));

          _this.newLevel = 0;
          return _this;
        }

        var _proto = upLevelUI.prototype;

        _proto.start = function start() {
          this.mark.on(Input.EventType.TOUCH_START, this.onBegin.bind(this));
          this.node.setScale(0.2, 0.2, 0.2);
          tween(this.node).to(0.2, {
            scale: new Vec3(1.05, 1.05, 1.05)
          }).to(0.10, {
            scale: new Vec3(0.95, 0.95, 0.95)
          }).to(0.10, {
            scale: new Vec3(1.0, 1.0, 1.0)
          }).start();
        };

        _proto.onBegin = function onBegin(event) {};

        _proto.getLandUpgradeUnlockItem = function getLandUpgradeUnlockItem() {
          var _this2 = this;

          var botanyTable = ConfigFile.getInstance().config.get(Configname.TBotanyInfo);
          var botany = botanyTable.filter(function (item) {
            if (!item.Show) return false;
            return item.NeedLevel == _this2.newLevel;
          });
          return botany;
        };

        _proto.getPastureUpgradeUnlockItem = function getPastureUpgradeUnlockItem() {
          var _this3 = this;

          var animalTable = ConfigFile.getInstance().config.get(Configname.TAnimalInfo);
          var animal = animalTable.filter(function (item) {
            if (!item.Show) return false;
            return item.NeedLevel == _this3.newLevel;
          });
          return animal;
        };

        _proto.initUI = function initUI(select, newLevel) {
          this.newLevel = newLevel;
          this.select = select;
          this.level.string = "" + this.newLevel;
          this.levelText.string = producer.getMessageText(3123);
          this.BtnText.string = producer.getMessageText(3124);

          if (this.select.getType() == "fameland") {
            this.t1.active = true;
            this.t2.active = false;
            var l = ConfigFile.getLandInfo(this.newLevel);

            if (l) {
              var m1 = ConfigFile.getLimitInfo(l.PinzhiChanliang);
              this.text.string = m1.id + "-" + m1.val;
            } else {
              this.text.string = "";
            }

            var plant = this.getLandUpgradeUnlockItem();

            if (plant && plant.length > 0) {
              var totallength = plant.length * 140;
              var startX = -totallength / 2;

              for (var index = 0; index < plant.length; index++) {
                var value = plant[index];
                var newNode = instantiate(this.itemPrefab);
                newNode.getComponent(newUnlockItem).initUI(value, select);
                newNode.setPosition(new Vec3(startX + index * 140 + 70));
                newNode.parent = this.child;
              }
            }
          } else if (this.select.getType() == "pasture") {
            this.t1.active = false;
            this.t2.active = true;

            var _l = ConfigFile.getFenceInfo(this.newLevel);

            if (_l) {
              var _m = ConfigFile.getLimitInfo(_l.PinzhiChanliang);

              this.text.string = _m.id + "-" + _m.val;
            } else {
              this.text.string = "";
            }

            var animal = this.getPastureUpgradeUnlockItem();

            if (animal && animal.length > 0) {
              var _totallength = animal.length * 140;

              var _startX = -_totallength / 2;

              for (var _index = 0; _index < animal.length; _index++) {
                var _value = animal[_index];

                var _newNode = instantiate(this.itemPrefab);

                _newNode.getComponent(newUnlockItem).initUI(_value, select);

                _newNode.setPosition(new Vec3(_startX + _index * 140 + 70));

                _newNode.parent = this.child;
              }
            }
          }
        };

        _proto.onCloseWnd = function onCloseWnd() {
          UIManager.getInstance().closeUI(upLevelUI);
        };

        return upLevelUI;
      }(BaseUI), _class3.className = "upLevelUI", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "itemPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "mark", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "child", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "level", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "levelText", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "BtnText", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "t1", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "t2", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "text", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/utils.ts", ['cc', './detect-browser.mjs_cjs=&original=.js', './chains.ts', './index8.ts', './index5.ts', './index6.ts', './detect-browser.js', './index4.ts'], function (exports) {
  'use strict';

  var cclegacy, CHAIN_DATA_LIST, themesList, index, OPERA, FALLBACK, METAMASK, CIPHER, _cjsExports, index$1;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      CHAIN_DATA_LIST = module.CHAIN_DATA_LIST;
    }, function (module) {
      themesList = module.themesList;
    }, null, function (module) {
      index = module;
      OPERA = module.OPERA;
      FALLBACK = module.FALLBACK;
      METAMASK = module.METAMASK;
      CIPHER = module.CIPHER;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      index$1 = module;
    }],
    execute: function () {
      exports({
        checkInjectedProviders: checkInjectedProviders,
        filterMatches: filterMatches,
        filterProviderChecks: filterProviderChecks,
        filterProviders: filterProviders,
        findMatchingRequiredOptions: findMatchingRequiredOptions,
        getChainId: getChainId,
        getInjectedProvider: getInjectedProvider,
        getInjectedProviderName: getInjectedProviderName,
        getProviderDescription: getProviderDescription,
        getProviderInfo: getProviderInfo,
        getProviderInfoByCheck: getProviderInfoByCheck,
        getProviderInfoById: getProviderInfoById,
        getProviderInfoByName: getProviderInfoByName,
        getProviderInfoFromChecksArray: getProviderInfoFromChecksArray,
        getThemeColors: getThemeColors,
        isLocalStorageAvailable: isLocalStorageAvailable,
        isMobile: isMobile,
        verifyInjectedProvider: verifyInjectedProvider
      });

      cclegacy._RF.push({}, "3ca07SE2MhKA75PPEg9pDKy", "utils", undefined);

      function checkInjectedProviders() {
        var result = {
          injectedAvailable: !!window.ethereum || !!window.web3
        };

        if (result.injectedAvailable) {
          var fallbackProvider = true;
          Object.values(index).forEach(function (provider) {
            var isAvailable = verifyInjectedProvider(provider.check);

            if (isAvailable) {
              result[provider.check] = true;
              fallbackProvider = false;
            }
          });

          var browser = _cjsExports.detect();

          if (browser && browser.name === "opera") {
            result[OPERA.check] = true;
            fallbackProvider = false;
          }

          if (fallbackProvider) {
            result[FALLBACK.check] = true;
          }
        }

        return result;
      }

      function verifyInjectedProvider(check) {
        return window.ethereum ? window.ethereum[check] : window.web3 && window.web3.currentProvider && window.web3.currentProvider[check];
      }

      function getInjectedProvider() {
        var result = null;
        var injectedProviders = checkInjectedProviders();

        if (injectedProviders.injectedAvailable) {
          delete injectedProviders.injectedAvailable;
          var checks = Object.keys(injectedProviders);
          result = getProviderInfoFromChecksArray(checks);
        }

        return result;
      }

      function getInjectedProviderName() {
        var injectedProvider = getInjectedProvider();
        return injectedProvider ? injectedProvider.name : null;
      }

      function getProviderInfo(provider) {
        if (!provider) return FALLBACK;
        var checks = Object.values(index$1).filter(function (x) {
          return provider[x.check];
        }).map(function (x) {
          return x.check;
        });
        return getProviderInfoFromChecksArray(checks);
      }

      function getProviderInfoFromChecksArray(checks) {
        var check = filterProviderChecks(checks);
        return filterProviders("check", check);
      }

      function getProviderInfoByName(name) {
        return filterProviders("name", name);
      }

      function getProviderInfoById(id) {
        return filterProviders("id", id);
      }

      function getProviderInfoByCheck(check) {
        return filterProviders("check", check);
      }

      function isMobile() {
        var mobile = false;

        function hasTouchEvent() {
          try {
            document.createEvent("TouchEvent");
            return true;
          } catch (e) {
            return false;
          }
        }

        function hasMobileUserAgent() {
          if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(navigator.userAgent.substr(0, 4))) {
            return true;
          } else if (hasTouchEvent()) {
            return true;
          }

          return false;
        }

        mobile = hasMobileUserAgent();
        return mobile;
      }

      function getProviderDescription(providerInfo) {
        if (providerInfo.description) {
          return providerInfo.description;
        }

        var description = "";

        switch (providerInfo.type) {
          case "injected":
            description = "Connect to your " + providerInfo.name + " Wallet";
            break;

          case "web":
            description = "Connect with your " + providerInfo.name + " account";
            break;

          case "qrcode":
            description = "Scan with " + providerInfo.name + " to connect";
            break;

          case "hardware":
            description = "Connect to your " + providerInfo.name + " Hardware Wallet";
            break;
        }

        return description;
      }

      function filterMatches(array, condition, fallback) {
        var result = fallback;
        var matches = array.filter(condition);

        if (!!matches && matches.length) {
          result = matches[0];
        }

        return result;
      }

      function filterProviders(param, value) {
        if (!value) return FALLBACK;
        var match = filterMatches(Object.values(index$1), function (x) {
          return x[param] === value;
        }, FALLBACK);
        return match || FALLBACK;
      }

      function filterProviderChecks(checks) {
        if (!!checks && checks.length) {
          if (checks.length > 1) {
            if (checks[0] === METAMASK.check || checks[0] === CIPHER.check) {
              return checks[1];
            }
          }

          return checks[0];
        }

        return FALLBACK.check;
      }

      function getChainId(network) {
        var chains = Object.values(CHAIN_DATA_LIST);
        var match = filterMatches(chains, function (x) {
          return x.network === network;
        }, undefined);

        if (!match) {
          throw new Error("No chainId found match " + network);
        }

        return match.chainId;
      }

      function getThemeColors(theme) {
        return typeof theme === "string" ? themesList[theme].colors : theme;
      }

      function findMatchingRequiredOptions(requiredOptions, providedOptions) {
        var matches = requiredOptions.filter(function (requiredOption) {
          if (typeof requiredOption === "string") {
            return requiredOption in providedOptions;
          }

          var matches = findMatchingRequiredOptions(requiredOption, providedOptions);
          return matches && matches.length;
        });
        return matches;
      }

      function isLocalStorageAvailable() {
        var test = "test";

        try {
          localStorage.setItem(test, test);
          localStorage.removeItem(test);
          return true;
        } catch (e) {
          return false;
        }
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/venly.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, cclegacy;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c68e2EWW9BCi47ANZJ+lMr6", "venly", undefined);

      var ConnectToVenly = exports('default', function ConnectToVenly(Venly, opts) {
        return new Promise( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
          var options, provider;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!(opts && opts.clientId)) {
                    _context.next = 15;
                    break;
                  }

                  _context.prev = 1;
                  options = {
                    clientId: opts.clientId,
                    secretType: opts.secretType || 'ETHEREUM',
                    environment: opts.environment,
                    signMethod: "POPUP"
                  };
                  _context.next = 5;
                  return window.Venly.createProviderEngine(options);

                case 5:
                  provider = _context.sent;
                  return _context.abrupt("return", resolve(provider));

                case 9:
                  _context.prev = 9;
                  _context.t0 = _context["catch"](1);
                  console.error(_context.t0);
                  return _context.abrupt("return", reject(new Error("Failed to login to Venly")));

                case 13:
                  _context.next = 16;
                  break;

                case 15:
                  return _context.abrupt("return", reject(new Error("Please provide an Venly client id")));

                case 16:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[1, 9]]);
        })));
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VerificationUIItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "b1383DVZpdHC4mXTTfk1gqR", "VerificationUIItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var VerificationUIItem = exports('VerificationUIItem', (_dec = ccclass('VerificationUIItem'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(VerificationUIItem, _Component);

        function VerificationUIItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.index = -1;
          return _this;
        }

        var _proto = VerificationUIItem.prototype;

        _proto.init = function init(index) {
          this.index = index;
        };

        _proto.inPut = function inPut() {
          this.index = -1;
        };

        return VerificationUIItem;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WaitNet.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseUI.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, BaseUI;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      BaseUI = module.BaseUI;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "0d9c5vZUutGuIqyPD0Q6mqR", "WaitNet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var WaitNet = exports('WaitNet', (_dec = ccclass('WaitNet'), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(WaitNet, _BaseUI);

        function WaitNet() {
          return _BaseUI.apply(this, arguments) || this;
        }

        var _proto = WaitNet.prototype;

        _proto.start = function start() {};

        return WaitNet;
      }(BaseUI), _class2.className = "WaitNet", _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WalletAddress.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigFile.ts', './GameAllData.ts', './EventManager.ts', './MessageManager.ts', './UIManager.ts', './HttpMgr.ts', './NodeHelp.ts', './UIWalletAddressEdit.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, UITransform, Component, ConfigFile, GameAllData, EventManager, MessageManager, UIManager, HttpMgr, NodeHelp, UIWalletAddressEdit;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      HttpMgr = module.HttpMgr;
    }, function (module) {
      NodeHelp = module.NodeHelp;
    }, function (module) {
      UIWalletAddressEdit = module.UIWalletAddressEdit;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "44614U0gKhJKq+ZrfC0AlL1", "WalletAddress", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var WalletAddress = exports('WalletAddress', (_dec = ccclass('WalletAddress'), _dec2 = property(Label), _dec3 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(WalletAddress, _Component);

        function WalletAddress() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "typeString", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "addressString", _descriptor2, _assertThisInitialized(_this));

          _this.parentScript = null;
          _this.addressData = null;
          return _this;
        }

        var _proto = WalletAddress.prototype;

        _proto.start = function start() {
          NodeHelp.getchildlable(this.node, "btn_bg_01", Label, function (comp, node) {
            comp.string = ConfigFile.findLanguage(121007);
            comp.updateRenderData(true);
            var scale = NodeHelp.setScopeLimitation(comp.node.getComponent(UITransform), 70, 45);
            comp.node.setScale(scale, scale, 1);
          });
          NodeHelp.getchildlable(this.node, "btn_bg_02", Label, function (comp, node) {
            comp.string = ConfigFile.findLanguage(121008);
            comp.updateRenderData(true);
            var scale = NodeHelp.setScopeLimitation(comp.node.getComponent(UITransform), 70, 45);
            comp.node.setScale(scale, scale, 1);
          });
          NodeHelp.getchildlable(this.node, "btn_bg_03", Label, function (comp, node) {
            comp.string = ConfigFile.findLanguage(121009);
            comp.updateRenderData(true);
            var scale = NodeHelp.setScopeLimitation(comp.node.getComponent(UITransform), 70, 45);
            comp.node.setScale(scale, scale, 1);
          });
        };

        _proto.initUI = function initUI(parentScript, address) {
          this.parentScript = parentScript;
          this.addressData = address;
          if (address.network_type == 1) this.typeString.string = "ERC20";else this.typeString.string = "TRC20";
          this.addressString.string = address.address;
        };

        _proto.delAddress = function delAddress(id) {
          HttpMgr.post(GameAllData.httpServerUrl + "cashAdress/del", {
            id: id
          }, function (data) {
            EventManager.getInstance().trigger(MessageManager.Custom.UPDATEADDRESS, {});
          });
        };

        _proto.onBtn1 = function onBtn1() {
          GameAllData.selectAddress = this.addressData.address;
          EventManager.getInstance().trigger(MessageManager.Custom.SELECTADDRESS, {});
        };

        _proto.onBtn2 = function onBtn2() {
          var self = this;
          UIManager.getInstance().openUI(UIWalletAddressEdit, 20, function (ui, args) {
            ui.initUI(self.addressData);
          });
        };

        _proto.onBtn3 = function onBtn3() {
          this.delAddress(this.addressData.id);
        };

        return WalletAddress;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "typeString", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "addressString", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/walletconnect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, cclegacy, getChainId;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      getChainId = module.getChainId;
    }],
    execute: function () {
      cclegacy._RF.push({}, "612bbvfpvBDwqJLpymtD7Gd", "walletconnect", undefined);

      var ConnectToWalletConnect = exports('default', function ConnectToWalletConnect(WalletConnectProvider, opts) {
        return new Promise( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
          var bridge, qrcode, infuraId, rpc, chainId, qrcodeModalOptions, provider;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  bridge = "https://bridge.walletconnect.org";
                  qrcode = true;
                  infuraId = "";
                  rpc = undefined;
                  chainId = 1;
                  qrcodeModalOptions = undefined;

                  if (opts) {
                    bridge = opts.bridge || bridge;
                    qrcode = typeof opts.qrcode !== "undefined" ? opts.qrcode : qrcode;
                    infuraId = opts.infuraId || "";
                    rpc = opts.rpc || undefined;
                    chainId = opts.network && getChainId(opts.network) ? getChainId(opts.network) : 1;
                    qrcodeModalOptions = opts.qrcodeModalOptions || undefined;
                  }

                  provider = new WalletConnectProvider({
                    bridge: bridge,
                    qrcode: qrcode,
                    infuraId: infuraId,
                    rpc: rpc,
                    chainId: chainId,
                    qrcodeModalOptions: qrcodeModalOptions
                  });
                  _context.prev = 8;
                  _context.next = 11;
                  return provider.enable();

                case 11:
                  resolve(provider);
                  _context.next = 17;
                  break;

                case 14:
                  _context.prev = 14;
                  _context.t0 = _context["catch"](8);
                  reject(_context.t0);

                case 17:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[8, 14]]);
        })));
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WebSocketMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventManager.ts', './MessageManager.ts', './pb.mjs_cjs=&original=.js', './ConfigFile.ts', './TipManager.ts', './CommonUtil.ts', './GameManager.ts', './MainGame.ts', './UIManager.ts', './UILogin.ts', './GameAllData.ts', './PlatformUtil.ts', './UIHelp.ts', './pb.js'], function (exports) {
  'use strict';

  var _createForOfIteratorHelperLoose, cclegacy, find, sys, EventManager, MessageManager, ConfigFile, TipManager, CommonUtil, GameManager, MainGame, UIManager, UILogin, GameAllData, PlatformUtil, UIHelp, _cjsExports;

  return {
    setters: [function (module) {
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      find = module.find;
      sys = module.sys;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      MessageManager = module.MessageManager;
    }, null, function (module) {
      ConfigFile = module.ConfigFile;
    }, function (module) {
      TipManager = module.TipManager;
    }, function (module) {
      CommonUtil = module.CommonUtil;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      MainGame = module.MainGame;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      UILogin = module.UILogin;
    }, function (module) {
      GameAllData = module.GameAllData;
    }, function (module) {
      PlatformUtil = module.PlatformUtil;
    }, function (module) {
      UIHelp = module.UIHelp;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0bdf74/pNNNn7U/mrVB7a97", "WebSocketMgr", undefined);

      var pb = _cjsExports.pb;
      var WebSocketMgr = exports('WebSocketMgr', /*#__PURE__*/function () {
        function WebSocketMgr() {}

        WebSocketMgr.wsState = function wsState() {
          return WebSocketMgr.ws.readyState;
        };

        WebSocketMgr.connect = function connect(url) {
          var LocalPortUrl = PlatformUtil.getLocalPort(url);
          WebSocketMgr.ws = new WebSocket(LocalPortUrl);
          WebSocketMgr.ws.binaryType = "arraybuffer";
          WebSocketMgr.ws.onopen = WebSocketMgr.onopen;
          WebSocketMgr.ws.onclose = WebSocketMgr.onclose;
          WebSocketMgr.ws.onerror = WebSocketMgr.onerror;
          WebSocketMgr.ws.onmessage = WebSocketMgr.onmessage;
        };

        WebSocketMgr.send = function send(message, data) {
          var msg = pb[message].create(data || {});
          var buffer = pb[message].encode(msg).finish();
          var addtag_buffer = new Uint8Array(buffer.length + 2);
          addtag_buffer.set(buffer.subarray(0, buffer.length), 2);
          addtag_buffer[1] = WebSocketMgr.getMessageId(message);

          if (CommonUtil.isTestNet()) {
            console.log("发送-------------", msg);
          }

          WebSocketMgr.ws.send(addtag_buffer);
        };

        WebSocketMgr.close = function close() {
          if (!WebSocketMgr.ws) {
            console.log("WebSocketMgr.ws为null了~~~~~");
            return;
          }

          WebSocketMgr.ws.close();
        };

        WebSocketMgr.onopen = function onopen(evt) {
          console.log("websocket onopen");
          EventManager.getInstance().trigger(MessageManager.Custom.WebSocketOnOpen);
        };

        WebSocketMgr.onclose = function onclose(evt) {
          console.log("websocket onclose");
          EventManager.getInstance().trigger(MessageManager.Custom.WebSocketOnClose);
        };

        WebSocketMgr.onerror = function onerror(evt) {
          console.log("websocket onerror--->" + evt);
          EventManager.getInstance().trigger(MessageManager.Custom.WebSocketOnError, evt);
        };

        WebSocketMgr.onmessage = function onmessage(evt) {
          var buffer = evt.data;
          var idBuffer = new Uint8Array(buffer, 0, 2);
          var messageBuffer = new Uint8Array(buffer, 2, buffer.length);
          var messageName = WebSocketMgr.getMessage(idBuffer[1]);
          var message = pb[messageName].decode(messageBuffer);

          if (CommonUtil.isTestNet()) {
            console.log("返回-------------", message);
          }

          if (messageName === "GameMessageResponse") {
            WebSocketMgr.message = message.MessageId;
            console.log("GameMessageResponse --->"+message.MessageId)
          } else if (messageName === "GamePlanConfigureResponse") {
            for (var _iterator = _createForOfIteratorHelperLoose(message.Message), _step; !(_step = _iterator()).done;) {
              var msg = _step.value;
              ConfigFile.getInstance().clearConfig(msg.TableName);

              for (var _iterator2 = _createForOfIteratorHelperLoose(msg.Message), _step2; !(_step2 = _iterator2()).done;) {
                var _msg = _step2.value;

                try {
                  var tb = pb[msg.TableName].decode(_msg.value);
                  ConfigFile.getInstance().addconfig(msg.TableName, tb);
                } catch (error) {
                  console.log("message==>", msg.TableName, "  error=", error);
                }
              }
            } // EventManager.getInstance().trigger(MessageManager.Custom.UpdateTMessageInfo);


            find("GameMain").getComponent("GameMain").updateTMessageInfo();

            if (CommonUtil.isTestNet()) {
              console.log(ConfigFile.getInstance().config);
            }
          }

          

          EventManager.getInstance().trigger(messageName, message);
        };

        WebSocketMgr.getMessageId = function getMessageId(str) {
          for (var key in WebSocketMgr.message) {
            if (WebSocketMgr.message[key] === str) {
              return Number(key);
            }
          }
        };

        WebSocketMgr.getMessage = function getMessage(id) {
          return WebSocketMgr.message[id];
        };

        return WebSocketMgr;
      }());
      WebSocketMgr.ws = null;
      WebSocketMgr.message = {
        0: "GameMessageRequest",
        1: "GameMessageResponse"
      };

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WelcomeUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConfigManager.ts', './EventManager.ts', './GameDataManager.ts', './ResourceManager.ts', './BaseUI.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ProgressBar, Sprite, ConfigManager, EventManager, GameDataManager, ResourceManager, BaseUI;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ProgressBar = module.ProgressBar;
      Sprite = module.Sprite;
    }, function (module) {
      ConfigManager = module.ConfigManager;
    }, function (module) {
      EventManager = module.EventManager;
    }, function (module) {
      GameDataManager = module.GameDataManager;
    }, function (module) {
      ResourceManager = module.ResourceManager;
    }, function (module) {
      BaseUI = module.BaseUI;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _class3;

      cclegacy._RF.push({}, "eb819lZn7FJHaqq9SaGX7cX", "WelcomeUI", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var WelcomeUI = exports('WelcomeUI', (_dec = ccclass('WelcomeUI'), _dec2 = property(ProgressBar), _dec3 = property(Sprite), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BaseUI) {
        _inheritsLoose(WelcomeUI, _BaseUI);

        function WelcomeUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseUI.call.apply(_BaseUI, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "pbar", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bg", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = WelcomeUI.prototype;

        _proto.start = function start() {
          this.pbar.progress = 0;
          this.loadAllConfig();
        };

        _proto.loadAllConfig = function loadAllConfig() {
          var _this2 = this;

          var p1 = new Promise(function (resolve, reject) {
            var cmanager = ConfigManager.getInstance();

            var progress = _this2.onProgress.bind(_this2);

            var callback = function callback() {
              resolve(0);
            };

            cmanager.loadConfig("ItemConfig", progress, callback);
            cmanager.loadConfig("tasksConfig", progress, callback);
            cmanager.loadConfig("OtherConfig", progress, callback);
            cmanager.loadConfig("BuildConfig", progress, callback);
            cmanager.loadConfig("SkillConfig", progress, callback);
            cmanager.loadConfig("BlueprintConfig", progress, callback);
            cmanager.loadConfig("historys", progress, callback);
            cmanager.loadConfig("age", progress, callback);
            cmanager.loadConfig("achievement", progress, callback);
            cmanager.loadConfig("actionConfig", progress, callback);
            cmanager.loadConfig("events", progress, callback);
            cmanager.loadConfig("storyConfig", progress, callback);
            cmanager.loadConfig("npc", progress, callback);
            cmanager.loadConfig("spacemanConfig", progress, callback);
            _this2.pbar.progress = cmanager.loadedConunt / cmanager.size;
          }); //至少停两秒，避免闪烁

          var p2 = new Promise(function (resolve, reject) {
            setTimeout(resolve, 2000, 'one');
          });
          var p3 = new Promise(function (resolve, reject) {
            var level = GameDataManager.getInstance().getGameData().roleInfo.level;
            ResourceManager.getInstance().load("prefabs/Level" + level, null, function (errors, resources) {
              resolve(1);
            });
          });
          Promise.all([p1, p2, p3]).then(function (values) {
            EventManager.getInstance().trigger("GameLoadLevel", null);
          }, function (reason) {
            console.log(reason);
          });
          return;
        };

        _proto.onProgress = function onProgress(callback) {
          var cmanager = ConfigManager.getInstance();
          cmanager.callback(callback);
          this.pbar.progress = cmanager.loadedConunt / cmanager.size;
        };

        _proto.update = function update(deltaTime) {};

        return WelcomeUI;
      }(BaseUI), _class3.className = "WelcomeUI", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "pbar", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bg", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

(function(r) {
  r('virtual:///prerequisite-imports/main', 'chunks:///_virtual/main'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});